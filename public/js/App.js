/*! For license information please see App.js.LICENSE.txt */
!function(){var e={9713:function(e){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},e.exports.default=e.exports,e.exports.__esModule=!0},676:function(e,t,n){"use strict";function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}n.d(t,{Z:function(){return r}})},3349:function(e,t,n){"use strict";function r(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}n.d(t,{Z:function(){return r}})},6610:function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}n.d(t,{Z:function(){return r}})},5991:function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}n.d(t,{Z:function(){return o}})},6156:function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,{Z:function(){return r}})},2122:function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,{Z:function(){return r}})},3552:function(e,t,n){"use strict";function r(e,t){return(r=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function o(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,r(e,t)}n.d(t,{Z:function(){return o}})},1253:function(e,t,n){"use strict";n.d(t,{Z:function(){return o}});var r=n(9756);function o(e,t){if(null==e)return{};var n,o,i=(0,r.Z)(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}},9756:function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,{Z:function(){return r}})},4699:function(e,t,n){"use strict";n.d(t,{Z:function(){return o}});var r=n(2961);function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}return n}}(e,t)||(0,r.Z)(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},7329:function(e,t,n){"use strict";n.d(t,{Z:function(){return i}});var r=n(676),o=n(2961);function i(e){return function(e){if(Array.isArray(e))return(0,r.Z)(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||(0,o.Z)(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},484:function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}n.d(t,{Z:function(){return r}})},2961:function(e,t,n){"use strict";n.d(t,{Z:function(){return o}});var r=n(676);function o(e,t){if(e){if("string"==typeof e)return(0,r.Z)(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?(0,r.Z)(e,t):void 0}}},7154:function(e){function t(){return e.exports=t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},e.exports.default=e.exports,e.exports.__esModule=!0,t.apply(this,arguments)}e.exports=t,e.exports.default=e.exports,e.exports.__esModule=!0},5318:function(e){e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.default=e.exports,e.exports.__esModule=!0},6479:function(e,t,n){var r=n(7316);e.exports=function(e,t){if(null==e)return{};var n,o,i=r(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i},e.exports.default=e.exports,e.exports.__esModule=!0},7316:function(e){e.exports=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o},e.exports.default=e.exports,e.exports.__esModule=!0},3259:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"}},515:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={black:"#000",white:"#fff"}},7559:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"}},167:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"}},8768:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe"}},6594:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"}},124:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162"}},3165:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"}},9114:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hexToRgb=i,t.rgbToHex=function(e){if(0===e.indexOf("#"))return e;var t=l(e).values;return"#".concat(t.map((function(e){return 1===(t=e.toString(16)).length?"0".concat(t):t;var t})).join(""))},t.hslToRgb=a,t.decomposeColor=l,t.recomposeColor=u,t.getContrastRatio=function(e,t){var n=s(e),r=s(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)},t.getLuminance=s,t.emphasize=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.15;return s(e)>.5?c(e,t):f(e,t)},t.fade=function(e,t){return e=l(e),t=o(t),("rgb"===e.type||"hsl"===e.type)&&(e.type+="a"),e.values[3]=t,u(e)},t.darken=c,t.lighten=f;var r=n(5218);function o(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return Math.min(Math.max(t,e),n)}function i(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length>=6?2:1,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map((function(e){return e+e}))),n?"rgb".concat(4===n.length?"a":"","(").concat(n.map((function(e,t){return t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3})).join(", "),")"):""}function a(e){var t=(e=l(e)).values,n=t[0],r=t[1]/100,o=t[2]/100,i=r*Math.min(o,1-o),a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:(e+n/30)%12;return o-i*Math.max(Math.min(t-3,9-t,1),-1)},s="rgb",c=[Math.round(255*a(0)),Math.round(255*a(8)),Math.round(255*a(4))];return"hsla"===e.type&&(s+="a",c.push(t[3])),u({type:s,values:c})}function l(e){if(e.type)return e;if("#"===e.charAt(0))return l(i(e));var t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla"].indexOf(n))throw new Error((0,r.formatMuiErrorMessage)(3,e));var o=e.substring(t+1,e.length-1).split(",");return{type:n,values:o=o.map((function(e){return parseFloat(e)}))}}function u(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")?n=n.map((function(e,t){return t<3?parseInt(e,10):e})):-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(t,"(").concat(n.join(", "),")")}function s(e){var t="hsl"===(e=l(e)).type?l(a(e)).values:e.values;return t=t.map((function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)})),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function c(e,t){if(e=l(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return u(e)}function f(e,t){if(e=l(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return u(e)}},4811:function(e,t,n){"use strict";var r=n(5318);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,r=e.unit,l=void 0===r?"px":r,u=e.step,s=void 0===u?5:u,c=(0,i.default)(e,["values","unit","step"]);function f(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(l,")")}function d(e,t){var r=a.indexOf(t);return r===a.length-1?f(e):"@media (min-width:".concat("number"==typeof n[e]?n[e]:e).concat(l,") and ")+"(max-width:".concat((-1!==r&&"number"==typeof n[a[r+1]]?n[a[r+1]]:t)-s/100).concat(l,")")}return(0,o.default)({keys:a,values:n,up:f,down:function(e){var t=a.indexOf(e)+1,r=n[a[t]];return t===a.length?f("xs"):"@media (max-width:".concat(("number"==typeof r&&t>0?r:e)-s/100).concat(l,")")},between:d,only:function(e){return d(e,e)},width:function(e){return n[e]}},c)},t.keys=void 0;var o=r(n(7154)),i=r(n(6479)),a=["xs","sm","md","lg","xl"];t.keys=a},226:function(e,t,n){"use strict";var r=n(5318);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){var r;return(0,i.default)({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,i.default)({paddingLeft:t(2),paddingRight:t(2)},n,(0,o.default)({},e.up("sm"),(0,i.default)({paddingLeft:t(3),paddingRight:t(3)},n[e.up("sm")])))},toolbar:(r={minHeight:56},(0,o.default)(r,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),(0,o.default)(r,e.up("sm"),{minHeight:64}),r)},n)};var o=r(n(9713)),i=r(n(7154))},1615:function(e,t,n){"use strict";var r=n(5318);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,r(n(9713));var o=r(n(6479)),i=n(5218),a=r(n(4811)),l=r(n(226)),u=r(n(1091)),s=r(n(5184)),c=r(n(743)),f=r(n(9591)),d=r(n(3498)),p=r(n(5406)),h=r(n(8676));t.default=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,r=e.mixins,m=void 0===r?{}:r,v=e.palette,y=void 0===v?{}:v,g=e.spacing,b=e.typography,x=void 0===b?{}:b,w=(0,o.default)(e,["breakpoints","mixins","palette","spacing","typography"]),k=(0,u.default)(y),S=(0,a.default)(n),E=(0,d.default)(g),C=(0,i.deepmerge)({breakpoints:S,direction:"ltr",mixins:(0,l.default)(S,E,m),overrides:{},palette:k,props:{},shadows:c.default,typography:(0,s.default)(k,x),spacing:E,shape:f.default,transitions:p.default,zIndex:h.default},w),P=arguments.length,R=new Array(P>1?P-1:0),O=1;O<P;O++)R[O-1]=arguments[O];return R.reduce((function(e,t){return(0,i.deepmerge)(e,t)}),C)}},1091:function(e,t,n){"use strict";var r=n(5318);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.primary,n=void 0===t?{light:s.default[300],main:s.default[500],dark:s.default[700]}:t,r=e.secondary,b=void 0===r?{light:c.default.A200,main:c.default.A400,dark:c.default.A700}:r,x=e.error,w=void 0===x?{light:f.default[300],main:f.default[500],dark:f.default[700]}:x,k=e.warning,S=void 0===k?{light:d.default[300],main:d.default[500],dark:d.default[700]}:k,E=e.info,C=void 0===E?{light:p.default[300],main:p.default[500],dark:p.default[700]}:E,P=e.success,R=void 0===P?{light:h.default[300],main:h.default[500],dark:h.default[700]}:P,O=e.type,T=void 0===O?"light":O,_=e.contrastThreshold,N=void 0===_?3:_,M=e.tonalOffset,I=void 0===M?.2:M,j=(0,i.default)(e,["primary","secondary","error","warning","info","success","type","contrastThreshold","tonalOffset"]);function z(e){return(0,m.getContrastRatio)(e,y.text.primary)>=N?y.text.primary:v.text.primary}var A=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;if(!(e=(0,o.default)({},e)).main&&e[t]&&(e.main=e[t]),!e.main)throw new Error((0,a.formatMuiErrorMessage)(4,t));if("string"!=typeof e.main)throw new Error(_formatMuiErrorMessage(5,JSON.stringify(e.main)));return g(e,"light",n,I),g(e,"dark",r,I),e.contrastText||(e.contrastText=z(e.main)),e},Z={dark:y,light:v};return(0,a.deepmerge)((0,o.default)({common:l.default,type:T,primary:A(n),secondary:A(b,"A400","A200","A700"),error:A(w),warning:A(S),info:A(C),success:A(R),grey:u.default,contrastThreshold:N,getContrastText:z,augmentColor:A,tonalOffset:I},Z[T]),j)},t.dark=t.light=void 0;var o=r(n(7154)),i=r(n(6479)),a=n(5218),l=r(n(515)),u=r(n(167)),s=r(n(8768)),c=r(n(124)),f=r(n(3165)),d=r(n(6594)),p=r(n(3259)),h=r(n(7559)),m=n(9114),v={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:l.default.white,default:u.default[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}};t.light=v;var y={text:{primary:l.default.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:u.default[800],default:"#303030"},action:{active:l.default.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function g(e,t,n,r){var o=r.light||r,i=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=(0,m.lighten)(e.main,o):"dark"===t&&(e.dark=(0,m.darken)(e.main,i)))}t.dark=y},3498:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8;if(e.mui)return e;var t=(0,r.createUnarySpacing)({spacing:e}),n=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return 0===n.length?t(1):1===n.length?t(n[0]):n.map((function(e){if("string"==typeof e)return e;var n=t(e);return"number"==typeof n?"".concat(n,"px"):n})).join(" ")};return Object.defineProperty(n,"unit",{get:function(){return e}}),n.mui=!0,n};var r=n(4029)},6059:function(e,t,n){"use strict";t.Z=function(e){return(0,r.createStyles)(e)};var r=n(7652)},5184:function(e,t,n){"use strict";var r=n(5318);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n="function"==typeof t?t(e):t,r=n.fontFamily,c=void 0===r?s:r,f=n.fontSize,d=void 0===f?14:f,p=n.fontWeightLight,h=void 0===p?300:p,m=n.fontWeightRegular,v=void 0===m?400:m,y=n.fontWeightMedium,g=void 0===y?500:y,b=n.fontWeightBold,x=void 0===b?700:b,w=n.htmlFontSize,k=void 0===w?16:w,S=n.allVariants,E=n.pxToRem,C=(0,i.default)(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"]),P=d/14,R=E||function(e){return"".concat(e/k*P,"rem")},O=function(e,t,n,r,i){return(0,o.default)({fontFamily:c,fontWeight:e,fontSize:R(t),lineHeight:n},c===s?{letterSpacing:"".concat(l(r/t),"em")}:{},i,S)},T={h1:O(h,96,1.167,-1.5),h2:O(h,60,1.2,-.5),h3:O(v,48,1.167,0),h4:O(v,34,1.235,.25),h5:O(v,24,1.334,0),h6:O(g,20,1.6,.15),subtitle1:O(v,16,1.75,.15),subtitle2:O(g,14,1.57,.1),body1:O(v,16,1.5,.15),body2:O(v,14,1.43,.15),button:O(g,14,1.75,.4,u),caption:O(v,12,1.66,.4),overline:O(v,12,2.66,1,u)};return(0,a.deepmerge)((0,o.default)({htmlFontSize:k,pxToRem:R,round:l,fontFamily:c,fontSize:d,fontWeightLight:h,fontWeightRegular:v,fontWeightMedium:g,fontWeightBold:x},T),C,{clone:!1})};var o=r(n(7154)),i=r(n(6479)),a=n(5218);function l(e){return Math.round(1e5*e)/1e5}var u={textTransform:"uppercase"},s='"Roboto", "Helvetica", "Arial", sans-serif'},2719:function(e,t,n){"use strict";var r=n(5318);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=(0,r(n(1615)).default)();t.default=o},2427:function(e,t,n){"use strict";var r=n(5318);t.Z=void 0;var o=r(n(7154)),i=n(7652),a=r(n(2719));t.Z=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(0,i.makeStyles)(e,(0,o.default)({defaultTheme:a.default},t))}},743:function(e,t){"use strict";function n(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0,0,0,").concat(.2,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0,0,0,").concat(.14,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0,0,0,").concat(.12,")")].join(",")}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=["none",n(0,2,1,-1,0,1,1,0,0,1,3,0),n(0,3,1,-2,0,2,2,0,0,1,5,0),n(0,3,3,-2,0,3,4,0,0,1,8,0),n(0,2,4,-1,0,4,5,0,0,1,10,0),n(0,3,5,-1,0,5,8,0,0,1,14,0),n(0,3,5,-1,0,6,10,0,0,1,18,0),n(0,4,5,-2,0,7,10,1,0,2,16,1),n(0,5,5,-3,0,8,10,1,0,3,14,2),n(0,5,6,-3,0,9,12,1,0,3,16,2),n(0,6,6,-3,0,10,14,1,0,4,18,3),n(0,6,7,-4,0,11,15,1,0,4,20,3),n(0,7,8,-4,0,12,17,2,0,5,22,4),n(0,7,8,-4,0,13,19,2,0,5,24,4),n(0,7,9,-4,0,14,21,2,0,5,26,4),n(0,8,9,-5,0,15,22,2,0,6,28,5),n(0,8,10,-5,0,16,24,2,0,6,30,5),n(0,8,11,-5,0,17,26,2,0,6,32,5),n(0,9,11,-5,0,18,28,2,0,7,34,6),n(0,9,12,-6,0,19,29,2,0,7,36,6),n(0,10,13,-6,0,20,31,3,0,8,38,7),n(0,10,13,-6,0,21,33,3,0,8,40,7),n(0,10,14,-6,0,22,35,3,0,8,42,7),n(0,11,14,-7,0,23,36,3,0,9,44,8),n(0,11,15,-7,0,24,38,3,0,9,46,8)];t.default=r},9591:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={borderRadius:4}},5406:function(e,t,n){"use strict";var r=n(5318);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.duration=t.easing=void 0;var o=r(n(6479)),i={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"};t.easing=i;var a={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function l(e){return"".concat(Math.round(e),"ms")}t.duration=a;var u={easing:i,duration:a,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,r=void 0===n?a.standard:n,u=t.easing,s=void 0===u?i.easeInOut:u,c=t.delay,f=void 0===c?0:c;return(0,o.default)(t,["duration","easing","delay"]),(Array.isArray(e)?e:[e]).map((function(e){return"".concat(e," ").concat("string"==typeof r?r:l(r)," ").concat(s," ").concat("string"==typeof f?f:l(f))})).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}};t.default=u},4662:function(e,t,n){"use strict";var r=n(5318);t.Z=function(){return(0,o.useTheme)()||i.default};var o=n(7652),i=(r(n(7294)),r(n(2719)))},8676:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={mobileStepper:1e3,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500}},6975:function(e,t,n){"use strict";n.d(t,{tP:function(){return d},NU:function(){return h},ZP:function(){return m}});var r,o=n(2122),i=n(1253),a=n(7294),l=(n(5697),n(5034)),u=n(4013),s=n(246),c=(0,u.Ue)((0,s.Z)()),f=(0,l.Z)(),d=new Map,p={disableGeneration:!1,generateClassName:f,jss:c,sheetsCache:null,sheetsManager:d,sheetsRegistry:null},h=a.createContext(p);function m(e){var t=e.children,n=e.injectFirst,l=void 0!==n&&n,c=e.disableGeneration,f=void 0!==c&&c,d=(0,i.Z)(e,["children","injectFirst","disableGeneration"]),p=a.useContext(h),m=(0,o.Z)({},p,{disableGeneration:f},d);if(!m.jss.options.insertionPoint&&l&&"undefined"!=typeof window){if(!r){var v=document.head;r=document.createComment("mui-inject-first"),v.insertBefore(r,v.firstChild)}m.jss=(0,u.Ue)({plugins:(0,s.Z)().plugins,insertionPoint:r})}return a.createElement(h.Provider,{value:m},t)}},3457:function(e,t,n){"use strict";var r=n(2122),o=n(7294),i=(n(5697),n(3800)),a=n(159),l=n(7076);t.Z=function(e){var t=e.children,n=e.theme,u=(0,a.Z)(),s=o.useMemo((function(){var e=null===u?n:function(e,t){return"function"==typeof t?t(e):(0,r.Z)({},e,t)}(u,n);return null!=e&&(e[l.Z]=null!==u),e}),[n,u]);return o.createElement(i.Z.Provider,{value:s},t)}},7076:function(e,t){"use strict";var n="function"==typeof Symbol&&Symbol.for;t.Z=n?Symbol.for("mui.nested"):"__THEME_NESTED__"},5034:function(e,t,n){"use strict";n.d(t,{Z:function(){return i}});var r=n(7076),o=["checked","disabled","error","focused","focusVisible","required","expanded","selected"];function i(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.disableGlobal,n=void 0!==t&&t,i=e.productionPrefix,a=void 0===i?"jss":i,l=e.seed,u=void 0===l?"":l,s=""===u?"":"".concat(u,"-"),c=0,f=function(){return c+=1};return function(e,t){var i=t.options.name;if(i&&0===i.indexOf("Mui")&&!t.options.link&&!n){if(-1!==o.indexOf(e.key))return"Mui-".concat(e.key);var l="".concat(s).concat(i,"-").concat(e.key);return t.options.theme[r.Z]&&""===u?"".concat(l,"-").concat(f()):l}return"".concat(s).concat(a).concat(f())}}},150:function(e,t,n){"use strict";function r(e){return e}n.d(t,{Z:function(){return r}})},3869:function(e,t,n){"use strict";function r(e){var t=e.theme,n=e.name,r=e.props;if(!t||!t.props||!t.props[n])return r;var o,i=t.props[n];for(o in i)void 0===r[o]&&(r[o]=i[o]);return r}n.d(t,{Z:function(){return r}})},7652:function(e,t,n){"use strict";n.r(t),n.d(t,{ServerStyleSheets:function(){return m},StylesContext:function(){return h.NU},StylesProvider:function(){return h.ZP},ThemeProvider:function(){return k.Z},createGenerateClassName:function(){return r.Z},createStyles:function(){return o.Z},getThemeProps:function(){return i.Z},jssPreset:function(){return a.Z},makeStyles:function(){return l.Z},mergeClasses:function(){return u.Z},sheetsManager:function(){return h.tP},styled:function(){return w},useTheme:function(){return S.Z},withStyles:function(){return E.Z},withTheme:function(){return P},withThemeCreator:function(){return C}});var r=n(5034),o=n(150),i=n(3869),a=n(246),l=n(3914),u=n(5835),s=n(2122),c=n(6610),f=n(5991),d=n(7294),p=n(4013),h=n(6975),m=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,c.Z)(this,e),this.options=t}return(0,f.Z)(e,[{key:"collect",value:function(e){var t=new Map;this.sheetsRegistry=new p.xE;var n=(0,r.Z)();return d.createElement(h.ZP,(0,s.Z)({sheetsManager:t,serverGenerateClassName:n,sheetsRegistry:this.sheetsRegistry},this.options),e)}},{key:"toString",value:function(){return this.sheetsRegistry?this.sheetsRegistry.toString():""}},{key:"getStyleElement",value:function(e){return d.createElement("style",(0,s.Z)({id:"jss-server-side",key:"jss-server-side",dangerouslySetInnerHTML:{__html:this.toString()}},e))}}]),e}(),v=n(1253),y=n(6010),g=(n(5697),n(8679)),b=n.n(g);function x(e,t){var n={};return Object.keys(e).forEach((function(r){-1===t.indexOf(r)&&(n[r]=e[r])})),n}function w(e){return function(t){var n,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=r.name,i=(0,v.Z)(r,["name"]),a=o,u="function"==typeof t?function(e){return{root:function(n){return t((0,s.Z)({theme:e},n))}}}:{root:t},c=(0,l.Z)(u,(0,s.Z)({Component:e,name:o||e.displayName,classNamePrefix:a},i));t.filterProps&&(n=t.filterProps,delete t.filterProps),t.propTypes&&(t.propTypes,delete t.propTypes);var f=d.forwardRef((function(t,r){var o=t.children,i=t.className,a=t.clone,l=t.component,u=(0,v.Z)(t,["children","className","clone","component"]),f=c(t),p=(0,y.Z)(f.root,i),h=u;if(n&&(h=x(h,n)),a)return d.cloneElement(o,(0,s.Z)({className:(0,y.Z)(o.props.className,p)},h));if("function"==typeof o)return o((0,s.Z)({className:p},h));var m=l||e;return d.createElement(m,(0,s.Z)({ref:r,className:p},h),o)}));return b()(f,e),f}}var k=n(3457),S=n(159),E=n(8920);function C(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.defaultTheme,n=function(e){var n=d.forwardRef((function(n,r){var o=n.innerRef,i=(0,v.Z)(n,["innerRef"]),a=(0,S.Z)()||t;return d.createElement(e,(0,s.Z)({theme:a,ref:o||r},i))}));return b()(n,e),n};return n}var P=C()},246:function(e,t,n){"use strict";n.d(t,{Z:function(){return _e}});var r=n(4013),o=Date.now(),i="fnValues"+o,a="fnStyle"+ ++o,l=n(2122),u="@global",s="@global ",c=function(){function e(e,t,n){for(var o in this.type="global",this.at=u,this.rules=void 0,this.options=void 0,this.key=void 0,this.isProcessed=!1,this.key=e,this.options=n,this.rules=new r.RB((0,l.Z)({},n,{parent:this})),t)this.rules.add(o,t[o]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r&&this.options.jss.plugins.onProcessRule(r),r},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(){return this.rules.toString()},e}(),f=function(){function e(e,t,n){this.type="global",this.at=u,this.options=void 0,this.rule=void 0,this.isProcessed=!1,this.key=void 0,this.key=e,this.options=n;var r=e.substr(s.length);this.rule=n.jss.createRule(r,t,(0,l.Z)({},n,{parent:this}))}return e.prototype.toString=function(e){return this.rule?this.rule.toString(e):""},e}(),d=/\s*,\s*/g;function p(e,t){for(var n=e.split(d),r="",o=0;o<n.length;o++)r+=t+" "+n[o].trim(),n[o+1]&&(r+=", ");return r}var h=/\s*,\s*/g,m=/&/g,v=/\$([\w-]+)/g,y=function(){function e(e,t){return function(n,r){var o=e.getRule(r)||t&&t.getRule(r);return o?(o=o).selector:r}}function t(e,t){for(var n=t.split(h),r=e.split(h),o="",i=0;i<n.length;i++)for(var a=n[i],l=0;l<r.length;l++){var u=r[l];o&&(o+=", "),o+=-1!==u.indexOf("&")?u.replace(m,a):a+" "+u}return o}function n(e,t,n){if(n)return(0,l.Z)({},n,{index:n.index+1});var r=e.options.nestingLevel;r=void 0===r?1:r+1;var o=(0,l.Z)({},e.options,{nestingLevel:r,index:t.indexOf(e)+1});return delete o.name,o}return{onProcessStyle:function(r,o,i){if("style"!==o.type)return r;var a,u,s=o,c=s.options.parent;for(var f in r){var d=-1!==f.indexOf("&"),p="@"===f[0];if(d||p){if(a=n(s,c,a),d){var h=t(f,s.selector);u||(u=e(c,i)),h=h.replace(v,u),c.addRule(h,r[f],(0,l.Z)({},a,{selector:h}))}else p&&c.addRule(f,{},a).addRule(s.key,r[f],{selector:s.selector});delete r[f]}}return r}}},g=/[A-Z]/g,b=/^ms-/,x={};function w(e){return"-"+e.toLowerCase()}var k=function(e){if(x.hasOwnProperty(e))return x[e];var t=e.replace(g,w);return x[e]=b.test(t)?"-"+t:t};function S(e){var t={};for(var n in e)t[0===n.indexOf("--")?n:k(n)]=e[n];return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(S):t.fallbacks=S(e.fallbacks)),t}var E=r.HZ&&CSS?CSS.px:"px",C=r.HZ&&CSS?CSS.ms:"ms",P=r.HZ&&CSS?CSS.percent:"%";function R(e){var t=/(-[a-z])/g,n=function(e){return e[1].toUpperCase()},r={};for(var o in e)r[o]=e[o],r[o.replace(t,n)]=e[o];return r}var O=R({"animation-delay":C,"animation-duration":C,"background-position":E,"background-position-x":E,"background-position-y":E,"background-size":E,border:E,"border-bottom":E,"border-bottom-left-radius":E,"border-bottom-right-radius":E,"border-bottom-width":E,"border-left":E,"border-left-width":E,"border-radius":E,"border-right":E,"border-right-width":E,"border-top":E,"border-top-left-radius":E,"border-top-right-radius":E,"border-top-width":E,"border-width":E,"border-block":E,"border-block-end":E,"border-block-end-width":E,"border-block-start":E,"border-block-start-width":E,"border-block-width":E,"border-inline":E,"border-inline-end":E,"border-inline-end-width":E,"border-inline-start":E,"border-inline-start-width":E,"border-inline-width":E,"border-start-start-radius":E,"border-start-end-radius":E,"border-end-start-radius":E,"border-end-end-radius":E,margin:E,"margin-bottom":E,"margin-left":E,"margin-right":E,"margin-top":E,"margin-block":E,"margin-block-end":E,"margin-block-start":E,"margin-inline":E,"margin-inline-end":E,"margin-inline-start":E,padding:E,"padding-bottom":E,"padding-left":E,"padding-right":E,"padding-top":E,"padding-block":E,"padding-block-end":E,"padding-block-start":E,"padding-inline":E,"padding-inline-end":E,"padding-inline-start":E,"mask-position-x":E,"mask-position-y":E,"mask-size":E,height:E,width:E,"min-height":E,"max-height":E,"min-width":E,"max-width":E,bottom:E,left:E,top:E,right:E,inset:E,"inset-block":E,"inset-block-end":E,"inset-block-start":E,"inset-inline":E,"inset-inline-end":E,"inset-inline-start":E,"box-shadow":E,"text-shadow":E,"column-gap":E,"column-rule":E,"column-rule-width":E,"column-width":E,"font-size":E,"font-size-delta":E,"letter-spacing":E,"text-decoration-thickness":E,"text-indent":E,"text-stroke":E,"text-stroke-width":E,"word-spacing":E,motion:E,"motion-offset":E,outline:E,"outline-offset":E,"outline-width":E,perspective:E,"perspective-origin-x":P,"perspective-origin-y":P,"transform-origin":P,"transform-origin-x":P,"transform-origin-y":P,"transform-origin-z":P,"transition-delay":C,"transition-duration":C,"vertical-align":E,"flex-basis":E,"shape-margin":E,size:E,gap:E,grid:E,"grid-gap":E,"row-gap":E,"grid-row-gap":E,"grid-column-gap":E,"grid-template-rows":E,"grid-template-columns":E,"grid-auto-rows":E,"grid-auto-columns":E,"box-shadow-x":E,"box-shadow-y":E,"box-shadow-blur":E,"box-shadow-spread":E,"font-line-height":E,"text-shadow-x":E,"text-shadow-y":E,"text-shadow-blur":E});function T(e,t,n){if(null==t)return t;if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]=T(e,t[r],n);else if("object"==typeof t)if("fallbacks"===e)for(var o in t)t[o]=T(o,t[o],n);else for(var i in t)t[i]=T(e+"-"+i,t[i],n);else if("number"==typeof t&&!1===isNaN(t)){var a=n[e]||O[e];return!a||0===t&&a===E?t.toString():"function"==typeof a?a(t).toString():""+t+a}return t}var _=function(e){void 0===e&&(e={});var t=R(e);return{onProcessStyle:function(e,n){if("style"!==n.type)return e;for(var r in e)e[r]=T(r,e[r],t);return e},onChangeValue:function(e,n){return T(n,e,t)}}},N=n(3827),M=n(7329),I="",j="",z="",A="",Z=N.Z&&"ontouchstart"in document.documentElement;if(N.Z){var L={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},F=document.createElement("p").style;for(var D in L)if(D+"Transform"in F){I=D,j=L[D];break}"Webkit"===I&&"msHyphens"in F&&(I="ms",j=L.ms,A="edge"),"Webkit"===I&&"-apple-trailing-word"in F&&(z="apple")}var W=I,$=j,U=z,B=A,V=Z,H={noPrefill:["appearance"],supportedProperty:function(e){return"appearance"===e&&("ms"===W?"-webkit-"+e:$+e)}},Y={noPrefill:["color-adjust"],supportedProperty:function(e){return"color-adjust"===e&&("Webkit"===W?$+"print-"+e:e)}},q=/[-\s]+(.)?/g;function K(e,t){return t?t.toUpperCase():""}function G(e){return e.replace(q,K)}function X(e){return G("-"+e)}var Q,J={noPrefill:["mask"],supportedProperty:function(e,t){if(!/^mask/.test(e))return!1;if("Webkit"===W){var n="mask-image";if(G(n)in t)return e;if(W+X(n)in t)return $+e}return e}},ee={noPrefill:["text-orientation"],supportedProperty:function(e){return"text-orientation"===e&&("apple"!==U||V?e:$+e)}},te={noPrefill:["transform"],supportedProperty:function(e,t,n){return"transform"===e&&(n.transform?e:$+e)}},ne={noPrefill:["transition"],supportedProperty:function(e,t,n){return"transition"===e&&(n.transition?e:$+e)}},re={noPrefill:["writing-mode"],supportedProperty:function(e){return"writing-mode"===e&&("Webkit"===W||"ms"===W&&"edge"!==B?$+e:e)}},oe={noPrefill:["user-select"],supportedProperty:function(e){return"user-select"===e&&("Moz"===W||"ms"===W||"apple"===U?$+e:e)}},ie={supportedProperty:function(e,t){return!!/^break-/.test(e)&&("Webkit"===W?"WebkitColumn"+X(e)in t&&$+"column-"+e:"Moz"===W&&"page"+X(e)in t&&"page-"+e)}},ae={supportedProperty:function(e,t){if(!/^(border|margin|padding)-inline/.test(e))return!1;if("Moz"===W)return e;var n=e.replace("-inline","");return W+X(n)in t&&$+n}},le={supportedProperty:function(e,t){return G(e)in t&&e}},ue={supportedProperty:function(e,t){var n=X(e);return"-"===e[0]||"-"===e[0]&&"-"===e[1]?e:W+n in t?$+e:"Webkit"!==W&&"Webkit"+n in t&&"-webkit-"+e}},se={supportedProperty:function(e){return"scroll-snap"===e.substring(0,11)&&("ms"===W?""+$+e:e)}},ce={supportedProperty:function(e){return"overscroll-behavior"===e&&("ms"===W?$+"scroll-chaining":e)}},fe={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},de={supportedProperty:function(e,t){var n=fe[e];return!!n&&W+X(n)in t&&$+n}},pe={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},he=Object.keys(pe),me=function(e){return $+e},ve=[H,Y,J,ee,te,ne,re,oe,ie,ae,le,ue,se,ce,de,{supportedProperty:function(e,t,n){var r=n.multiple;if(he.indexOf(e)>-1){var o=pe[e];if(!Array.isArray(o))return W+X(o)in t&&$+o;if(!r)return!1;for(var i=0;i<o.length;i++)if(!(W+X(o[0])in t))return!1;return o.map(me)}return!1}}],ye=ve.filter((function(e){return e.supportedProperty})).map((function(e){return e.supportedProperty})),ge=ve.filter((function(e){return e.noPrefill})).reduce((function(e,t){return e.push.apply(e,(0,M.Z)(t.noPrefill)),e}),[]),be={};if(N.Z){Q=document.createElement("p");var xe=window.getComputedStyle(document.documentElement,"");for(var we in xe)isNaN(we)||(be[xe[we]]=xe[we]);ge.forEach((function(e){return delete be[e]}))}function ke(e,t){if(void 0===t&&(t={}),!Q)return e;if(null!=be[e])return be[e];"transition"!==e&&"transform"!==e||(t[e]=e in Q.style);for(var n=0;n<ye.length&&(be[e]=ye[n](e,Q.style,t),!be[e]);n++);try{Q.style[e]=""}catch(e){return!1}return be[e]}var Se,Ee={},Ce={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},Pe=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;function Re(e,t,n){return"var"===t?"var":"all"===t?"all":"all"===n?", all":(t?ke(t):", "+ke(n))||t||n}function Oe(e,t){var n=t;if(!Se||"content"===e)return t;if("string"!=typeof n||!isNaN(parseInt(n,10)))return n;var r=e+n;if(null!=Ee[r])return Ee[r];try{Se.style[e]=n}catch(e){return Ee[r]=!1,!1}if(Ce[e])n=n.replace(Pe,Re);else if(""===Se.style[e]&&("-ms-flex"===(n=$+n)&&(Se.style[e]="-ms-flexbox"),Se.style[e]=n,""===Se.style[e]))return Ee[r]=!1,!1;return Se.style[e]="",Ee[r]=n,Ee[r]}N.Z&&(Se=document.createElement("p"));var Te=function(){function e(t){for(var n in t){var o=t[n];if("fallbacks"===n&&Array.isArray(o))t[n]=o.map(e);else{var i=!1,a=ke(n);a&&a!==n&&(i=!0);var l=!1,u=Oe(a,(0,r.EK)(o));u&&u!==o&&(l=!0),(i||l)&&(i&&delete t[n],t[a||n]=u||o)}}return t}return{onProcessRule:function(e){if("keyframes"===e.type){var t=e;t.at=function(e){return"-"===e[1]||"ms"===W?e:"@"+$+"keyframes"+e.substr(10)}(t.at)}},onProcessStyle:function(t,n){return"style"!==n.type?t:e(t)},onChangeValue:function(e,t){return Oe(t,(0,r.EK)(e))||e}}};function _e(){return{plugins:[{onCreateRule:function(e,t,n){if("function"!=typeof t)return null;var o=(0,r.JH)(e,{},n);return o[a]=t,o},onProcessStyle:function(e,t){if(i in t||a in t)return e;var n={};for(var r in e){var o=e[r];"function"==typeof o&&(delete e[r],n[r]=o)}return t[i]=n,e},onUpdate:function(e,t,n,r){var o=t,l=o[a];l&&(o.style=l(e)||{});var u=o[i];if(u)for(var s in u)o.prop(s,u[s](e),r)}},{onCreateRule:function(e,t,n){if(!e)return null;if(e===u)return new c(e,t,n);if("@"===e[0]&&e.substr(0,s.length)===s)return new f(e,t,n);var r=n.parent;return r&&("global"===r.type||r.options.parent&&"global"===r.options.parent.type)&&(n.scoped=!1),!1===n.scoped&&(n.selector=e),null},onProcessRule:function(e,t){"style"===e.type&&t&&(function(e,t){var n=e.options,r=e.style,o=r?r[u]:null;if(o){for(var i in o)t.addRule(i,o[i],(0,l.Z)({},n,{selector:p(i,e.selector)}));delete r[u]}}(e,t),function(e,t){var n=e.options,r=e.style;for(var o in r)if("@"===o[0]&&o.substr(0,u.length)===u){var i=p(o.substr(u.length),e.selector);t.addRule(i,r[o],(0,l.Z)({},n,{selector:i})),delete r[o]}}(e,t))}},y(),{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=S(e[t]);return e}return S(e)},onChangeValue:function(e,t,n){if(0===t.indexOf("--"))return e;var r=k(t);return t===r?e:(n.prop(r,e),null)}},_(),"undefined"==typeof window?null:Te(),(e=function(e,t){return e.length===t.length?e>t?1:-1:e.length-t.length},{onProcessStyle:function(t,n){if("style"!==n.type)return t;for(var r={},o=Object.keys(t).sort(e),i=0;i<o.length;i++)r[o[i]]=t[o[i]];return r}})]};var e}},3914:function(e,t,n){"use strict";n.d(t,{Z:function(){return S}});var r=n(1253),o=n(2122),i=n(7294),a=n(4013),l=n(5835),u=function(e,t,n,r){var o=e.get(t);o||(o=new Map,e.set(t,o)),o.set(n,r)},s=function(e,t,n){var r=e.get(t);return r?r.get(n):void 0},c=function(e,t,n){e.get(t).delete(n)},f=n(159),d=n(6975),p=-1e9;function h(){return p+=1}var m=n(5953);function v(e){var t="function"==typeof e;return{create:function(n,r){var i;try{i=t?e(n):e}catch(e){throw e}if(!r||!n.overrides||!n.overrides[r])return i;var a=n.overrides[r],l=(0,o.Z)({},i);return Object.keys(a).forEach((function(e){l[e]=(0,m.Z)(l[e],a[e])})),l},options:{}}}var y={};function g(e,t,n){var r=e.state;if(e.stylesOptions.disableGeneration)return t||{};r.cacheClasses||(r.cacheClasses={value:null,lastProp:null,lastJSS:{}});var o=!1;return r.classes!==r.cacheClasses.lastJSS&&(r.cacheClasses.lastJSS=r.classes,o=!0),t!==r.cacheClasses.lastProp&&(r.cacheClasses.lastProp=t,o=!0),o&&(r.cacheClasses.value=(0,l.Z)({baseClasses:r.cacheClasses.lastJSS,newClasses:t,Component:n})),r.cacheClasses.value}function b(e,t){var n=e.state,r=e.theme,i=e.stylesOptions,c=e.stylesCreator,f=e.name;if(!i.disableGeneration){var d=s(i.sheetsManager,c,r);d||(d={refs:0,staticSheet:null,dynamicStyles:null},u(i.sheetsManager,c,r,d));var p=(0,o.Z)({},c.options,i,{theme:r,flip:"boolean"==typeof i.flip?i.flip:"rtl"===r.direction});p.generateId=p.serverGenerateClassName||p.generateClassName;var h=i.sheetsRegistry;if(0===d.refs){var m;i.sheetsCache&&(m=s(i.sheetsCache,c,r));var v=c.create(r,f);m||((m=i.jss.createStyleSheet(v,(0,o.Z)({link:!1},p))).attach(),i.sheetsCache&&u(i.sheetsCache,c,r,m)),h&&h.add(m),d.staticSheet=m,d.dynamicStyles=(0,a._$)(v)}if(d.dynamicStyles){var y=i.jss.createStyleSheet(d.dynamicStyles,(0,o.Z)({link:!0},p));y.update(t),y.attach(),n.dynamicSheet=y,n.classes=(0,l.Z)({baseClasses:d.staticSheet.classes,newClasses:y.classes}),h&&h.add(y)}else n.classes=d.staticSheet.classes;d.refs+=1}}function x(e,t){var n=e.state;n.dynamicSheet&&n.dynamicSheet.update(t)}function w(e){var t=e.state,n=e.theme,r=e.stylesOptions,o=e.stylesCreator;if(!r.disableGeneration){var i=s(r.sheetsManager,o,n);i.refs-=1;var a=r.sheetsRegistry;0===i.refs&&(c(r.sheetsManager,o,n),r.jss.removeStyleSheet(i.staticSheet),a&&a.remove(i.staticSheet)),t.dynamicSheet&&(r.jss.removeStyleSheet(t.dynamicSheet),a&&a.remove(t.dynamicSheet))}}function k(e,t){var n,r=i.useRef([]),o=i.useMemo((function(){return{}}),t);r.current!==o&&(r.current=o,n=e()),i.useEffect((function(){return function(){n&&n()}}),[o])}function S(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.name,a=t.classNamePrefix,l=t.Component,u=t.defaultTheme,s=void 0===u?y:u,c=(0,r.Z)(t,["name","classNamePrefix","Component","defaultTheme"]),p=v(e),m=n||a||"makeStyles";p.options={index:h(),name:n,meta:m,classNamePrefix:m};var S=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=(0,f.Z)()||s,r=(0,o.Z)({},i.useContext(d.NU),c),a=i.useRef(),u=i.useRef();k((function(){var o={name:n,state:{},stylesCreator:p,stylesOptions:r,theme:t};return b(o,e),u.current=!1,a.current=o,function(){w(o)}}),[t,p]),i.useEffect((function(){u.current&&x(a.current,e),u.current=!0}));var h=g(a.current,e.classes,l);return h};return S}},5835:function(e,t,n){"use strict";n.d(t,{Z:function(){return o}});var r=n(2122);function o(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.baseClasses,n=e.newClasses;if(e.Component,!n)return t;var o=(0,r.Z)({},t);return Object.keys(n).forEach((function(e){n[e]&&(o[e]="".concat(t[e]," ").concat(n[e]))})),o}},3800:function(e,t,n){"use strict";var r=n(7294).createContext(null);t.Z=r},159:function(e,t,n){"use strict";n.d(t,{Z:function(){return i}});var r=n(7294),o=n(3800);function i(){return r.useContext(o.Z)}},8920:function(e,t,n){"use strict";var r=n(2122),o=n(1253),i=n(7294),a=(n(5697),n(8679)),l=n.n(a),u=n(3914),s=n(3869),c=n(159);t.Z=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(n){var a=t.defaultTheme,f=t.withTheme,d=void 0!==f&&f,p=t.name,h=(0,o.Z)(t,["defaultTheme","withTheme","name"]),m=p,v=(0,u.Z)(e,(0,r.Z)({defaultTheme:a,Component:n,name:p||n.displayName,classNamePrefix:m},h)),y=i.forwardRef((function(e,t){e.classes;var l,u=e.innerRef,f=(0,o.Z)(e,["classes","innerRef"]),h=v((0,r.Z)({},n.defaultProps,e)),m=f;return("string"==typeof p||d)&&(l=(0,c.Z)()||a,p&&(m=(0,s.Z)({theme:l,name:p,props:f})),d&&!m.theme&&(m.theme=l)),i.createElement(n,(0,r.Z)({ref:u||t,classes:h},m))}));return l()(y,n),y}}},1410:function(e,t,n){"use strict";n.d(t,{k:function(){return s}});var r=n(7329),o=n(2122),i=n(484),a=(n(5697),n(9668)),l={xs:0,sm:600,md:960,lg:1280,xl:1920},u={keys:["xs","sm","md","lg","xl"],up:function(e){return"@media (min-width:".concat(l[e],"px)")}};function s(e,t,n){if(Array.isArray(t)){var r=e.theme.breakpoints||u;return t.reduce((function(e,o,i){return e[r.up(r.keys[i])]=n(t[i]),e}),{})}if("object"===(0,i.Z)(t)){var o=e.theme.breakpoints||u;return Object.keys(t).reduce((function(e,r){return e[o.up(r)]=n(t[r]),e}),{})}return n(t)}t.Z=function(e){var t=function(t){var n=e(t),r=t.theme.breakpoints||u,i=r.keys.reduce((function(n,i){return t[i]&&((n=n||{})[r.up(i)]=e((0,o.Z)({theme:t.theme},t[i]))),n}),null);return(0,a.Z)(n,i)};return t.propTypes={},t.filterProps=["xs","sm","md","lg","xl"].concat((0,r.Z)(e.filterProps)),t}},4029:function(e,t,n){"use strict";n.r(t),n.d(t,{alignContent:function(){return I},alignItems:function(){return M},alignSelf:function(){return L},bgcolor:function(){return ne},border:function(){return c},borderBottom:function(){return p},borderColor:function(){return m},borderLeft:function(){return h},borderRadius:function(){return v},borderRight:function(){return d},borderTop:function(){return f},borders:function(){return y},bottom:function(){return ue},boxSizing:function(){return we},breakpoints:function(){return o.Z},color:function(){return te},compose:function(){return u},createUnarySpacing:function(){return Se.h},css:function(){return x},display:function(){return R},flex:function(){return z},flexBasis:function(){return O},flexDirection:function(){return T},flexGrow:function(){return A},flexShrink:function(){return Z},flexWrap:function(){return _},flexbox:function(){return W},fontFamily:function(){return Ee},fontSize:function(){return Ce},fontStyle:function(){return Pe},fontWeight:function(){return Re},grid:function(){return ee},gridArea:function(){return J},gridAutoColumns:function(){return q},gridAutoFlow:function(){return Y},gridAutoRows:function(){return K},gridColumn:function(){return V},gridColumnGap:function(){return U},gridGap:function(){return $},gridRow:function(){return H},gridRowGap:function(){return B},gridTemplateAreas:function(){return Q},gridTemplateColumns:function(){return G},gridTemplateRows:function(){return X},height:function(){return ve},justifyContent:function(){return N},justifyItems:function(){return F},justifySelf:function(){return D},left:function(){return se},letterSpacing:function(){return Oe},lineHeight:function(){return Te},maxHeight:function(){return ye},maxWidth:function(){return he},minHeight:function(){return ge},minWidth:function(){return me},order:function(){return j},palette:function(){return re},position:function(){return oe},positions:function(){return ce},right:function(){return le},shadows:function(){return fe},sizeHeight:function(){return xe},sizeWidth:function(){return be},sizing:function(){return ke},spacing:function(){return Se.Z},style:function(){return a},textAlign:function(){return _e},top:function(){return ae},typography:function(){return Ne},width:function(){return pe},zIndex:function(){return ie}});var r=n(6156),o=n(1410);function i(e,t){return t&&"string"==typeof t?t.split(".").reduce((function(e,t){return e&&e[t]?e[t]:null}),e):null}var a=function(e){var t=e.prop,n=e.cssProperty,a=void 0===n?e.prop:n,l=e.themeKey,u=e.transform,s=function(e){if(null==e[t])return null;var n=e[t],s=i(e.theme,l)||{};return(0,o.k)(e,n,(function(e){var t;return"function"==typeof s?t=s(e):Array.isArray(s)?t=s[e]||e:(t=i(s,e)||e,u&&(t=u(t))),!1===a?t:(0,r.Z)({},a,t)}))};return s.propTypes={},s.filterProps=[t],s},l=n(9668),u=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=function(e){return t.reduce((function(t,n){var r=n(e);return r?(0,l.Z)(t,r):t}),{})};return r.propTypes={},r.filterProps=t.reduce((function(e,t){return e.concat(t.filterProps)}),[]),r};function s(e){return"number"!=typeof e?e:"".concat(e,"px solid")}var c=a({prop:"border",themeKey:"borders",transform:s}),f=a({prop:"borderTop",themeKey:"borders",transform:s}),d=a({prop:"borderRight",themeKey:"borders",transform:s}),p=a({prop:"borderBottom",themeKey:"borders",transform:s}),h=a({prop:"borderLeft",themeKey:"borders",transform:s}),m=a({prop:"borderColor",themeKey:"palette"}),v=a({prop:"borderRadius",themeKey:"shape"}),y=u(c,f,d,p,h,m,v),g=n(7329),b=n(2122);n(5697);var x=function(e){var t=function(t){var n=e(t);return t.css?(0,b.Z)({},(0,l.Z)(n,e((0,b.Z)({theme:t.theme},t.css))),function(e,t){var n={};return Object.keys(e).forEach((function(r){-1===t.indexOf(r)&&(n[r]=e[r])})),n}(t.css,[e.filterProps])):n};return t.propTypes={},t.filterProps=["css"].concat((0,g.Z)(e.filterProps)),t},w=a({prop:"displayPrint",cssProperty:!1,transform:function(e){return{"@media print":{display:e}}}}),k=a({prop:"display"}),S=a({prop:"overflow"}),E=a({prop:"textOverflow"}),C=a({prop:"visibility"}),P=a({prop:"whiteSpace"}),R=u(w,k,S,E,C,P),O=a({prop:"flexBasis"}),T=a({prop:"flexDirection"}),_=a({prop:"flexWrap"}),N=a({prop:"justifyContent"}),M=a({prop:"alignItems"}),I=a({prop:"alignContent"}),j=a({prop:"order"}),z=a({prop:"flex"}),A=a({prop:"flexGrow"}),Z=a({prop:"flexShrink"}),L=a({prop:"alignSelf"}),F=a({prop:"justifyItems"}),D=a({prop:"justifySelf"}),W=u(O,T,_,N,M,I,j,z,A,Z,L,F,D),$=a({prop:"gridGap"}),U=a({prop:"gridColumnGap"}),B=a({prop:"gridRowGap"}),V=a({prop:"gridColumn"}),H=a({prop:"gridRow"}),Y=a({prop:"gridAutoFlow"}),q=a({prop:"gridAutoColumns"}),K=a({prop:"gridAutoRows"}),G=a({prop:"gridTemplateColumns"}),X=a({prop:"gridTemplateRows"}),Q=a({prop:"gridTemplateAreas"}),J=a({prop:"gridArea"}),ee=u($,U,B,V,H,Y,q,K,G,X,Q,J),te=a({prop:"color",themeKey:"palette"}),ne=a({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette"}),re=u(te,ne),oe=a({prop:"position"}),ie=a({prop:"zIndex",themeKey:"zIndex"}),ae=a({prop:"top"}),le=a({prop:"right"}),ue=a({prop:"bottom"}),se=a({prop:"left"}),ce=u(oe,ie,ae,le,ue,se),fe=a({prop:"boxShadow",themeKey:"shadows"});function de(e){return e<=1?"".concat(100*e,"%"):e}var pe=a({prop:"width",transform:de}),he=a({prop:"maxWidth",transform:de}),me=a({prop:"minWidth",transform:de}),ve=a({prop:"height",transform:de}),ye=a({prop:"maxHeight",transform:de}),ge=a({prop:"minHeight",transform:de}),be=a({prop:"size",cssProperty:"width",transform:de}),xe=a({prop:"size",cssProperty:"height",transform:de}),we=a({prop:"boxSizing"}),ke=u(pe,he,me,ve,ye,ge,we),Se=n(8681),Ee=a({prop:"fontFamily",themeKey:"typography"}),Ce=a({prop:"fontSize",themeKey:"typography"}),Pe=a({prop:"fontStyle",themeKey:"typography"}),Re=a({prop:"fontWeight",themeKey:"typography"}),Oe=a({prop:"letterSpacing"}),Te=a({prop:"lineHeight"}),_e=a({prop:"textAlign"}),Ne=u(Ee,Ce,Pe,Re,Oe,Te,_e)},9668:function(e,t,n){"use strict";var r=n(5953);t.Z=function(e,t){return t?(0,r.Z)(e,t,{clone:!1}):e}},8681:function(e,t,n){"use strict";n.d(t,{h:function(){return p},Z:function(){return m}});var r,o,i=n(4699),a=n(1410),l=n(9668),u={m:"margin",p:"padding"},s={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},c={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},f=(r=function(e){if(e.length>2){if(!c[e])return[e];e=c[e]}var t=e.split(""),n=(0,i.Z)(t,2),r=n[0],o=n[1],a=u[r],l=s[o]||"";return Array.isArray(l)?l.map((function(e){return a+e})):[a+l]},o={},function(e){return void 0===o[e]&&(o[e]=r(e)),o[e]}),d=["m","mt","mr","mb","ml","mx","my","p","pt","pr","pb","pl","px","py","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY"];function p(e){var t=e.spacing||8;return"number"==typeof t?function(e){return t*e}:Array.isArray(t)?function(e){return t[e]}:"function"==typeof t?t:function(){}}function h(e){var t=p(e.theme);return Object.keys(e).map((function(n){if(-1===d.indexOf(n))return null;var r=function(e,t){return function(n){return e.reduce((function(e,r){return e[r]=function(e,t){if("string"==typeof t||null==t)return t;var n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:"-".concat(n)}(t,n),e}),{})}}(f(n),t),o=e[n];return(0,a.k)(e,o,r)})).reduce(l.Z,{})}h.propTypes={},h.filterProps=d;var m=h},5953:function(e,t,n){"use strict";n.d(t,{Z:function(){return a}});var r=n(2122),o=n(484);function i(e){return e&&"object"===(0,o.Z)(e)&&e.constructor===Object}function a(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{clone:!0},o=n.clone?(0,r.Z)({},e):e;return i(e)&&i(t)&&Object.keys(t).forEach((function(r){"__proto__"!==r&&(i(t[r])&&r in e?o[r]=a(e[r],t[r],n):o[r]=t[r])})),o}},288:function(e,t,n){"use strict";function r(e){for(var t="https://material-ui.com/production-error/?code="+e,n=1;n<arguments.length;n+=1)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified Material-UI error #"+e+"; visit "+t+" for the full message."}n.d(t,{Z:function(){return r}})},5218:function(e,t,n){"use strict";function r(e,t){return function(){return null}}n.r(t),n.d(t,{HTMLElementType:function(){return b},chainPropTypes:function(){return r},deepmerge:function(){return o.Z},elementAcceptingRef:function(){return u},elementTypeAcceptingRef:function(){return s},exactProp:function(){return c},formatMuiErrorMessage:function(){return f.Z},getDisplayName:function(){return g},ponyfillGlobal:function(){return x},refType:function(){return w}});var o=n(5953),i=n(5697),a=n.n(i),l=(a().element,function(){return null});l.isRequired=(a().element.isRequired,function(){return null});var u=l,s=(i.elementType,function(){return null});function c(e){return e}n(6156),n(2122);var f=n(288),d=n(484),p=n(8437),h=/^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;function m(e){var t="".concat(e).match(h);return t&&t[1]||""}function v(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return e.displayName||e.name||m(e)||t}function y(e,t,n){var r=v(t);return e.displayName||(""!==r?"".concat(n,"(").concat(r,")"):n)}function g(e){if(null!=e){if("string"==typeof e)return e;if("function"==typeof e)return v(e,"Component");if("object"===(0,d.Z)(e))switch(e.$$typeof){case p.ForwardRef:return y(e,e.render,"ForwardRef");case p.Memo:return y(e,e.type,"memo");default:return}}}function b(e,t,n,r,o){return null}var x="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")(),w=a().oneOfType([a().func,a().object])},5723:function(e,t){"use strict";var n=60112,r=60115;if("function"==typeof Symbol&&Symbol.for){var o=Symbol.for;o("react.element"),o("react.portal"),o("react.fragment"),o("react.strict_mode"),o("react.profiler"),o("react.provider"),o("react.context"),n=o("react.forward_ref"),o("react.suspense"),o("react.suspense_list"),r=o("react.memo"),o("react.lazy"),o("react.block"),o("react.server.block"),o("react.fundamental"),o("react.debug_trace_mode"),o("react.legacy_hidden")}var i=n,a=r;t.ForwardRef=i,t.Memo=a},8437:function(e,t,n){"use strict";e.exports=n(5723)},6010:function(e,t,n){"use strict";function r(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}function o(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(o&&(o+=" "),o+=t);return o}n.d(t,{Z:function(){return o}})},8679:function(e,t,n){"use strict";var r=n(9864),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?a:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=a;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=c(n);f&&(a=a.concat(f(n)));for(var l=u(t),m=u(n),v=0;v<a.length;++v){var y=a[v];if(!(i[y]||r&&r[y]||m&&m[y]||l&&l[y])){var g=d(n,y);try{s(t,y,g)}catch(e){}}}}return t}},3827:function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o="object"===("undefined"==typeof window?"undefined":r(window))&&"object"===("undefined"==typeof document?"undefined":r(document))&&9===document.nodeType;t.Z=o},5826:function(e){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},4013:function(e,t,n){"use strict";n.d(t,{RB:function(){return Y},xE:function(){return G},Ue:function(){return ve},JH:function(){return f},_$:function(){return he},HZ:function(){return me},EK:function(){return p}});var r=n(2122),o=n(3827),i=n(5991),a=n(3552),l=n(3349),u=n(9756),s={}.constructor;function c(e){if(null==e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(c);if(e.constructor!==s)return e;var t={};for(var n in e)t[n]=c(e[n]);return t}function f(e,t,n){void 0===e&&(e="unnamed");var r=n.jss,o=c(t);return r.plugins.onCreateRule(e,o,n)||(e[0],null)}var d=function(e,t){for(var n="",r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=t),n+=e[r];return n},p=function(e,t){if(void 0===t&&(t=!1),!Array.isArray(e))return e;var n="";if(Array.isArray(e[0]))for(var r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=", "),n+=d(e[r]," ");else n=d(e,", ");return t||"!important"!==e[e.length-1]||(n+=" !important"),n};function h(e,t){for(var n="",r=0;r<t;r++)n+="  ";return n+e}function m(e,t,n){void 0===n&&(n={});var r="";if(!t)return r;var o=n.indent,i=void 0===o?0:o,a=t.fallbacks;if(e&&i++,a)if(Array.isArray(a))for(var l=0;l<a.length;l++){var u=a[l];for(var s in u){var c=u[s];null!=c&&(r&&(r+="\n"),r+=""+h(s+": "+p(c)+";",i))}}else for(var f in a){var d=a[f];null!=d&&(r&&(r+="\n"),r+=""+h(f+": "+p(d)+";",i))}for(var m in t){var v=t[m];null!=v&&"fallbacks"!==m&&(r&&(r+="\n"),r+=""+h(m+": "+p(v)+";",i))}return(r||n.allowEmpty)&&e?(r&&(r="\n"+r+"\n"),h(e+" {"+r,--i)+h("}",i)):r}var v=/([[\].#*$><+~=|^:(),"'`\s])/g,y="undefined"!=typeof CSS&&CSS.escape,g=function(e){return y?y(e):e.replace(v,"\\$1")},b=function(){function e(e,t,n){this.type="style",this.key=void 0,this.isProcessed=!1,this.style=void 0,this.renderer=void 0,this.renderable=void 0,this.options=void 0;var r=n.sheet,o=n.Renderer;this.key=e,this.options=n,this.style=t,r?this.renderer=r.renderer:o&&(this.renderer=new o)}return e.prototype.prop=function(e,t,n){if(void 0===t)return this.style[e];var r=!!n&&n.force;if(!r&&this.style[e]===t)return this;var o=t;n&&!1===n.process||(o=this.options.jss.plugins.onChangeValue(t,e,this));var i=null==o||!1===o,a=e in this.style;if(i&&!a&&!r)return this;var l=i&&a;if(l?delete this.style[e]:this.style[e]=o,this.renderable&&this.renderer)return l?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,o),this;var u=this.options.sheet;return u&&u.attached,this},e}(),x=function(e){function t(t,n,r){var o;(o=e.call(this,t,n,r)||this).selectorText=void 0,o.id=void 0,o.renderable=void 0;var i=r.selector,a=r.scoped,u=r.sheet,s=r.generateId;return i?o.selectorText=i:!1!==a&&(o.id=s((0,l.Z)((0,l.Z)(o)),u),o.selectorText="."+g(o.id)),o}(0,a.Z)(t,e);var n=t.prototype;return n.applyTo=function(e){var t=this.renderer;if(t){var n=this.toJSON();for(var r in n)t.setProperty(e,r,n[r])}return this},n.toJSON=function(){var e={};for(var t in this.style){var n=this.style[t];"object"!=typeof n?e[t]=n:Array.isArray(n)&&(e[t]=p(n))}return e},n.toString=function(e){var t=this.options.sheet,n=t&&t.options.link?(0,r.Z)({},e,{allowEmpty:!0}):e;return m(this.selectorText,this.style,n)},(0,i.Z)(t,[{key:"selector",set:function(e){if(e!==this.selectorText){this.selectorText=e;var t=this.renderer,n=this.renderable;n&&t&&(t.setSelector(n,e)||t.replaceRule(n,this))}},get:function(){return this.selectorText}}]),t}(b),w={onCreateRule:function(e,t,n){return"@"===e[0]||n.parent&&"keyframes"===n.parent.type?null:new x(e,t,n)}},k={indent:1,children:!0},S=/@([\w-]+)/,E=function(){function e(e,t,n){this.type="conditional",this.at=void 0,this.key=void 0,this.query=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e;var o=e.match(S);for(var i in this.at=o?o[1]:"unknown",this.query=n.name||"@"+this.at,this.options=n,this.rules=new Y((0,r.Z)({},n,{parent:this})),t)this.rules.add(i,t[i]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r?(this.options.jss.plugins.onProcessRule(r),r):null},t.toString=function(e){if(void 0===e&&(e=k),null==e.indent&&(e.indent=k.indent),null==e.children&&(e.children=k.children),!1===e.children)return this.query+" {}";var t=this.rules.toString(e);return t?this.query+" {\n"+t+"\n}":""},e}(),C=/@media|@supports\s+/,P={onCreateRule:function(e,t,n){return C.test(e)?new E(e,t,n):null}},R={indent:1,children:!0},O=/@keyframes\s+([\w-]+)/,T=function(){function e(e,t,n){this.type="keyframes",this.at="@keyframes",this.key=void 0,this.name=void 0,this.id=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0;var o=e.match(O);o&&o[1]?this.name=o[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=n;var i=n.scoped,a=n.sheet,l=n.generateId;for(var u in this.id=!1===i?this.name:g(l(this,a)),this.rules=new Y((0,r.Z)({},n,{parent:this})),t)this.rules.add(u,t[u],(0,r.Z)({},n,{parent:this}));this.rules.process()}return e.prototype.toString=function(e){if(void 0===e&&(e=R),null==e.indent&&(e.indent=R.indent),null==e.children&&(e.children=R.children),!1===e.children)return this.at+" "+this.id+" {}";var t=this.rules.toString(e);return t&&(t="\n"+t+"\n"),this.at+" "+this.id+" {"+t+"}"},e}(),_=/@keyframes\s+/,N=/\$([\w-]+)/g,M=function(e,t){return"string"==typeof e?e.replace(N,(function(e,n){return n in t?t[n]:e})):e},I=function(e,t,n){var r=e[t],o=M(r,n);o!==r&&(e[t]=o)},j={onCreateRule:function(e,t,n){return"string"==typeof e&&_.test(e)?new T(e,t,n):null},onProcessStyle:function(e,t,n){return"style"===t.type&&n?("animation-name"in e&&I(e,"animation-name",n.keyframes),"animation"in e&&I(e,"animation",n.keyframes),e):e},onChangeValue:function(e,t,n){var r=n.options.sheet;if(!r)return e;switch(t){case"animation":case"animation-name":return M(e,r.keyframes);default:return e}}},z=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).renderable=void 0,t}return(0,a.Z)(t,e),t.prototype.toString=function(e){var t=this.options.sheet,n=t&&t.options.link?(0,r.Z)({},e,{allowEmpty:!0}):e;return m(this.key,this.style,n)},t}(b),A={onCreateRule:function(e,t,n){return n.parent&&"keyframes"===n.parent.type?new z(e,t,n):null}},Z=function(){function e(e,t,n){this.type="font-face",this.at="@font-face",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.style)){for(var t="",n=0;n<this.style.length;n++)t+=m(this.at,this.style[n]),this.style[n+1]&&(t+="\n");return t}return m(this.at,this.style,e)},e}(),L=/@font-face/,F={onCreateRule:function(e,t,n){return L.test(e)?new Z(e,t,n):null}},D=function(){function e(e,t,n){this.type="viewport",this.at="@viewport",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){return m(this.key,this.style,e)},e}(),W={onCreateRule:function(e,t,n){return"@viewport"===e||"@-ms-viewport"===e?new D(e,t,n):null}},$=function(){function e(e,t,n){this.type="simple",this.key=void 0,this.value=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.value=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.value)){for(var t="",n=0;n<this.value.length;n++)t+=this.key+" "+this.value[n]+";",this.value[n+1]&&(t+="\n");return t}return this.key+" "+this.value+";"},e}(),U={"@charset":!0,"@import":!0,"@namespace":!0},B=[w,P,j,A,F,W,{onCreateRule:function(e,t,n){return e in U?new $(e,t,n):null}}],V={process:!0},H={force:!0,process:!0},Y=function(){function e(e){this.map={},this.raw={},this.index=[],this.counter=0,this.options=void 0,this.classes=void 0,this.keyframes=void 0,this.options=e,this.classes=e.classes,this.keyframes=e.keyframes}var t=e.prototype;return t.add=function(e,t,n){var o=this.options,i=o.parent,a=o.sheet,l=o.jss,u=o.Renderer,s=o.generateId,c=o.scoped,d=(0,r.Z)({classes:this.classes,parent:i,sheet:a,jss:l,Renderer:u,generateId:s,scoped:c,name:e,keyframes:this.keyframes,selector:void 0},n),p=e;e in this.raw&&(p=e+"-d"+this.counter++),this.raw[p]=t,p in this.classes&&(d.selector="."+g(this.classes[p]));var h=f(p,t,d);if(!h)return null;this.register(h);var m=void 0===d.index?this.index.length:d.index;return this.index.splice(m,0,h),h},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.index.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof x?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof T&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof x?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof T&&delete this.keyframes[e.name]},t.update=function(){var e,t,n;if("string"==typeof(arguments.length<=0?void 0:arguments[0])?(e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],n=arguments.length<=2?void 0:arguments[2]):(t=arguments.length<=0?void 0:arguments[0],n=arguments.length<=1?void 0:arguments[1],e=null),e)this.updateOne(this.map[e],t,n);else for(var r=0;r<this.index.length;r++)this.updateOne(this.index[r],t,n)},t.updateOne=function(t,n,r){void 0===r&&(r=V);var o=this.options,i=o.jss.plugins,a=o.sheet;if(t.rules instanceof e)t.rules.update(n,r);else{var l=t,u=l.style;if(i.onUpdate(n,t,a,r),r.process&&u&&u!==l.style){for(var s in i.onProcessStyle(l.style,l,a),l.style){var c=l.style[s];c!==u[s]&&l.prop(s,c,H)}for(var f in u){var d=l.style[f],p=u[f];null==d&&d!==p&&l.prop(f,null,H)}}}},t.toString=function(e){for(var t="",n=this.options.sheet,r=!!n&&n.options.link,o=0;o<this.index.length;o++){var i=this.index[o].toString(e);(i||r)&&(t&&(t+="\n"),t+=i)}return t},e}(),q=function(){function e(e,t){for(var n in this.options=void 0,this.deployed=void 0,this.attached=void 0,this.rules=void 0,this.renderer=void 0,this.classes=void 0,this.keyframes=void 0,this.queue=void 0,this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=(0,r.Z)({},t,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),t.Renderer&&(this.renderer=new t.Renderer(this)),this.rules=new Y(this.options),e)this.rules.add(n,e[n]);this.rules.process()}var t=e.prototype;return t.attach=function(){return this.attached||(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy()),this},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,t,n){var r=this.queue;this.attached&&!r&&(this.queue=[]);var o=this.rules.add(e,t,n);return o?(this.options.jss.plugins.onProcessRule(o),this.attached?this.deployed?(r?r.push(o):(this.insertRule(o),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),o):o:(this.deployed=!1,o)):null},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,t){var n=[];for(var r in e){var o=this.addRule(r,e[r],t);o&&n.push(o)}return n},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var t="object"==typeof e?e:this.rules.get(e);return!(!t||this.attached&&!t.renderable)&&(this.rules.remove(t),!(this.attached&&t.renderable&&this.renderer)||this.renderer.deleteRule(t.renderable))},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.updateOne=function(e,t,n){return this.rules.updateOne(e,t,n),this},t.toString=function(e){return this.rules.toString(e)},e}(),K=function(){function e(){this.plugins={internal:[],external:[]},this.registry=void 0}var t=e.prototype;return t.onCreateRule=function(e,t,n){for(var r=0;r<this.registry.onCreateRule.length;r++){var o=this.registry.onCreateRule[r](e,t,n);if(o)return o}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var t=e.options.sheet,n=0;n<this.registry.onProcessRule.length;n++)this.registry.onProcessRule[n](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}},t.onProcessStyle=function(e,t,n){for(var r=0;r<this.registry.onProcessStyle.length;r++)t.style=this.registry.onProcessStyle[r](t.style,t,n)},t.onProcessSheet=function(e){for(var t=0;t<this.registry.onProcessSheet.length;t++)this.registry.onProcessSheet[t](e)},t.onUpdate=function(e,t,n,r){for(var o=0;o<this.registry.onUpdate.length;o++)this.registry.onUpdate[o](e,t,n,r)},t.onChangeValue=function(e,t,n){for(var r=e,o=0;o<this.registry.onChangeValue.length;o++)r=this.registry.onChangeValue[o](r,t,n);return r},t.use=function(e,t){void 0===t&&(t={queue:"external"});var n=this.plugins[t.queue];-1===n.indexOf(e)&&(n.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce((function(e,t){for(var n in t)n in e&&e[n].push(t[n]);return e}),{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},e}(),G=function(){function e(){this.registry=[]}var t=e.prototype;return t.add=function(e){var t=this.registry,n=e.options.index;if(-1===t.indexOf(e))if(0===t.length||n>=this.index)t.push(e);else for(var r=0;r<t.length;r++)if(t[r].options.index>n)return void t.splice(r,0,e)},t.reset=function(){this.registry=[]},t.remove=function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)},t.toString=function(e){for(var t=void 0===e?{}:e,n=t.attached,r=(0,u.Z)(t,["attached"]),o="",i=0;i<this.registry.length;i++){var a=this.registry[i];null!=n&&a.attached!==n||(o&&(o+="\n"),o+=a.toString(r))}return o},(0,i.Z)(e,[{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}(),X=new G,Q="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window&&window.Math===Math?window:"undefined"!=typeof self&&self.Math===Math?self:Function("return this")(),J="2f1acc6c3a606b082e5eef5e54414ffb";null==Q[J]&&(Q[J]=0);var ee=Q[J]++,te=function(e){void 0===e&&(e={});var t=0;return function(n,r){t+=1;var o="",i="";return r&&(r.options.classNamePrefix&&(i=r.options.classNamePrefix),null!=r.options.jss.id&&(o=String(r.options.jss.id))),e.minify?""+(i||"c")+ee+o+t:i+n.key+"-"+ee+(o?"-"+o:"")+"-"+t}},ne=function(e){var t;return function(){return t||(t=e()),t}},re=function(e,t){try{return e.attributeStyleMap?e.attributeStyleMap.get(t):e.style.getPropertyValue(t)}catch(e){return""}},oe=function(e,t,n){try{var r=n;if(Array.isArray(n)&&(r=p(n,!0),"!important"===n[n.length-1]))return e.style.setProperty(t,r,"important"),!0;e.attributeStyleMap?e.attributeStyleMap.set(t,r):e.style.setProperty(t,r)}catch(e){return!1}return!0},ie=function(e,t){try{e.attributeStyleMap?e.attributeStyleMap.delete(t):e.style.removeProperty(t)}catch(e){}},ae=function(e,t){return e.selectorText=t,e.selectorText===t},le=ne((function(){return document.querySelector("head")}));var ue=ne((function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null})),se=function(e,t,n){try{"insertRule"in e?e.insertRule(t,n):"appendRule"in e&&e.appendRule(t)}catch(e){return!1}return e.cssRules[n]},ce=function(e,t){var n=e.cssRules.length;return void 0===t||t>n?n:t},fe=function(){function e(e){this.getPropertyValue=re,this.setProperty=oe,this.removeProperty=ie,this.setSelector=ae,this.element=void 0,this.sheet=void 0,this.hasInsertedRules=!1,this.cssRules=[],e&&X.add(e),this.sheet=e;var t,n=this.sheet?this.sheet.options:{},r=n.media,o=n.meta,i=n.element;this.element=i||((t=document.createElement("style")).textContent="\n",t),this.element.setAttribute("data-jss",""),r&&this.element.setAttribute("media",r),o&&this.element.setAttribute("data-meta",o);var a=ue();a&&this.element.setAttribute("nonce",a)}var t=e.prototype;return t.attach=function(){if(!this.element.parentNode&&this.sheet){!function(e,t){var n=t.insertionPoint,r=function(e){var t=X.registry;if(t.length>0){var n=function(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(r.attached&&r.options.index>t.index&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e);if(n&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element};if((n=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.attached&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e))&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element.nextSibling}}var r=e.insertionPoint;if(r&&"string"==typeof r){var o=function(e){for(var t=le(),n=0;n<t.childNodes.length;n++){var r=t.childNodes[n];if(8===r.nodeType&&r.nodeValue.trim()===e)return r}return null}(r);if(o)return{parent:o.parentNode,node:o.nextSibling}}return!1}(t);if(!1!==r&&r.parent)r.parent.insertBefore(e,r.node);else if(n&&"number"==typeof n.nodeType){var o=n,i=o.parentNode;i&&i.insertBefore(e,o.nextSibling)}else le().appendChild(e)}(this.element,this.sheet.options);var e=Boolean(this.sheet&&this.sheet.deployed);this.hasInsertedRules&&e&&(this.hasInsertedRules=!1,this.deploy())}},t.detach=function(){if(this.sheet){var e=this.element.parentNode;e&&e.removeChild(this.element),this.sheet.options.link&&(this.cssRules=[],this.element.textContent="\n")}},t.deploy=function(){var e=this.sheet;e&&(e.options.link?this.insertRules(e.rules):this.element.textContent="\n"+e.toString()+"\n")},t.insertRules=function(e,t){for(var n=0;n<e.index.length;n++)this.insertRule(e.index[n],n,t)},t.insertRule=function(e,t,n){if(void 0===n&&(n=this.element.sheet),e.rules){var r=e,o=n;if("conditional"===e.type||"keyframes"===e.type){var i=ce(n,t);if(!1===(o=se(n,r.toString({children:!1}),i)))return!1;this.refCssRule(e,i,o)}return this.insertRules(r.rules,o),o}var a=e.toString();if(!a)return!1;var l=ce(n,t),u=se(n,a,l);return!1!==u&&(this.hasInsertedRules=!0,this.refCssRule(e,l,u),u)},t.refCssRule=function(e,t,n){e.renderable=n,e.options.parent instanceof q&&(this.cssRules[t]=n)},t.deleteRule=function(e){var t=this.element.sheet,n=this.indexOf(e);return-1!==n&&(t.deleteRule(n),this.cssRules.splice(n,1),!0)},t.indexOf=function(e){return this.cssRules.indexOf(e)},t.replaceRule=function(e,t){var n=this.indexOf(e);return-1!==n&&(this.element.sheet.deleteRule(n),this.cssRules.splice(n,1),this.insertRule(t,n))},t.getRules=function(){return this.element.sheet.cssRules},e}(),de=0,pe=function(){function e(e){this.id=de++,this.version="10.6.0",this.plugins=new K,this.options={id:{minify:!1},createGenerateId:te,Renderer:o.Z?fe:null,plugins:[]},this.generateId=te({minify:!1});for(var t=0;t<B.length;t++)this.plugins.use(B[t],{queue:"internal"});this.setup(e)}var t=e.prototype;return t.setup=function(e){return void 0===e&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=(0,r.Z)({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,t){void 0===t&&(t={});var n=t.index;"number"!=typeof n&&(n=0===X.index?0:X.index+1);var o=new q(e,(0,r.Z)({},t,{jss:this,generateId:t.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:n}));return this.plugins.onProcessSheet(o),o},t.removeStyleSheet=function(e){return e.detach(),X.remove(e),this},t.createRule=function(e,t,n){if(void 0===t&&(t={}),void 0===n&&(n={}),"object"==typeof e)return this.createRule(void 0,e,t);var o=(0,r.Z)({},n,{name:e,jss:this,Renderer:this.options.Renderer});o.generateId||(o.generateId=this.generateId),o.classes||(o.classes={}),o.keyframes||(o.keyframes={});var i=f(e,t,o);return i&&this.plugins.onProcessRule(i),i},t.use=function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){e.plugins.use(t)})),this},e}();function he(e){var t=null;for(var n in e){var r=e[n],o=typeof r;if("function"===o)t||(t={}),t[n]=r;else if("object"===o&&null!==r&&!Array.isArray(r)){var i=he(r);i&&(t||(t={}),t[n]=i)}}return t}var me="object"==typeof CSS&&null!=CSS&&"number"in CSS,ve=function(e){return new pe(e)};ve()},7418:function(e){"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,i){for(var a,l,u=o(e),s=1;s<arguments.length;s++){for(var c in a=Object(arguments[s]))n.call(a,c)&&(u[c]=a[c]);if(t){l=t(a);for(var f=0;f<l.length;f++)r.call(a,l[f])&&(u[l[f]]=a[l[f]])}}return u}},4779:function(e,t,n){var r=n(5826);e.exports=function e(t,n,o){return r(n)||(o=n||o,n=[]),o=o||{},t instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(t,n):r(t)?function(t,n,r){for(var o=[],i=0;i<t.length;i++)o.push(e(t[i],n,r).source);return c(new RegExp("(?:"+o.join("|")+")",f(r)),n)}(t,n,o):function(e,t,n){return d(i(e,n),t,n)}(t,n,o)},e.exports.parse=i,e.exports.compile=function(e,t){return l(i(e,t),t)},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,l="",c=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(l+=e.slice(a,p),a=p+f.length,d)l+=d[1];else{var h=e[a],m=n[2],v=n[3],y=n[4],g=n[5],b=n[6],x=n[7];l&&(r.push(l),l="");var w=null!=m&&null!=h&&h!==m,k="+"===b||"*"===b,S="?"===b||"*"===b,E=n[2]||c,C=y||g;r.push({name:v||i++,prefix:m||"",delimiter:E,optional:S,repeat:k,partial:w,asterisk:!!x,pattern:C?s(C):x?".*":"[^"+u(E)+"]+?"})}}return a<e.length&&(l+=e.substr(a)),l&&r.push(l),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function l(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var i="",l=t||{},u=(o||{}).pretty?a:encodeURIComponent,s=0;s<e.length;s++){var c=e[s];if("string"!=typeof c){var f,d=l[c.name];if(null==d){if(c.optional){c.partial&&(i+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(d)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=u(d[p]),!n[s].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===p?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):u(d),!n[s].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');i+=c.prefix+f}}else i+=c}return i}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",l=0;l<e.length;l++){var s=e[l];if("string"==typeof s)a+=u(s);else{var d=u(s.prefix),p="(?:"+s.pattern+")";t.push(s),s.repeat&&(p+="(?:"+d+p+")*"),a+=p=s.optional?s.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=u(n.delimiter||"/"),m=a.slice(-h.length)===h;return o||(a=(m?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&m?"":"(?="+h+"|$)",c(new RegExp("^"+a,f(n)),t)}},2703:function(e,t,n){"use strict";var r=n(414);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},5697:function(e,t,n){e.exports=n(2703)()},414:function(e){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:function(e,t,n){"use strict";var r=n(7294),o=n(7418),i=n(3840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var l=new Set,u={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(u[e]=t,e=0;e<t.length;e++)l.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function v(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){y[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];y[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){y[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){y[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){y[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){y[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){y[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){y[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){y[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function x(e,t,n,r){var o=y.hasOwnProperty(t)?y[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(d.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,b);y[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,b);y[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,b);y[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){y[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),y.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){y[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=60103,S=60106,E=60107,C=60108,P=60114,R=60109,O=60110,T=60112,_=60113,N=60120,M=60115,I=60116,j=60121,z=60128,A=60129,Z=60130,L=60131;if("function"==typeof Symbol&&Symbol.for){var F=Symbol.for;k=F("react.element"),S=F("react.portal"),E=F("react.fragment"),C=F("react.strict_mode"),P=F("react.profiler"),R=F("react.provider"),O=F("react.context"),T=F("react.forward_ref"),_=F("react.suspense"),N=F("react.suspense_list"),M=F("react.memo"),I=F("react.lazy"),j=F("react.block"),F("react.scope"),z=F("react.opaque.id"),A=F("react.debug_trace_mode"),Z=F("react.offscreen"),L=F("react.legacy_hidden")}var D,W="function"==typeof Symbol&&Symbol.iterator;function $(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=W&&e[W]||e["@@iterator"])?e:null}function U(e){if(void 0===D)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);D=t&&t[1]||""}return"\n"+D+e}var B=!1;function V(e,t){if(!e||B)return"";B=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,l=i.length-1;1<=a&&0<=l&&o[a]!==i[l];)l--;for(;1<=a&&0<=l;a--,l--)if(o[a]!==i[l]){if(1!==a||1!==l)do{if(a--,0>--l||o[a]!==i[l])return"\n"+o[a].replace(" at new "," at ")}while(1<=a&&0<=l);break}}}finally{B=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?U(e):""}function H(e){switch(e.tag){case 5:return U(e.type);case 16:return U("Lazy");case 13:return U("Suspense");case 19:return U("SuspenseList");case 0:case 2:case 15:return V(e.type,!1);case 11:return V(e.type.render,!1);case 22:return V(e.type._render,!1);case 1:return V(e.type,!0);default:return""}}function Y(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case S:return"Portal";case P:return"Profiler";case C:return"StrictMode";case _:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case R:return(e._context.displayName||"Context")+".Provider";case T:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case M:return Y(e.type);case j:return Y(e._render);case I:t=e._payload,e=e._init;try{return Y(e(t))}catch(e){}}return null}function q(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function K(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function G(e){e._valueTracker||(e._valueTracker=function(e){var t=K(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=K(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=q(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&x(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=q(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&Q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ie(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+q(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:q(n)}}function se(e,t){var n=q(t.value),r=q(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,me,ve=(me=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return me(e,t)}))}:me);function ye(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ge={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function xe(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ge.hasOwnProperty(e)&&ge[e]?(""+t).trim():t+"px"}function we(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=xe(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ge).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ge[t]=ge[e]}))}));var ke=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Se(e,t){if(t){if(ke[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function Ee(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Ce(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Pe=null,Re=null,Oe=null;function Te(e){if(e=Jr(e)){if("function"!=typeof Pe)throw Error(a(280));var t=e.stateNode;t&&(t=to(t),Pe(e.stateNode,e.type,t))}}function _e(e){Re?Oe?Oe.push(e):Oe=[e]:Re=e}function Ne(){if(Re){var e=Re,t=Oe;if(Oe=Re=null,Te(e),t)for(e=0;e<t.length;e++)Te(t[e])}}function Me(e,t){return e(t)}function Ie(e,t,n,r,o){return e(t,n,r,o)}function je(){}var ze=Me,Ae=!1,Ze=!1;function Le(){null===Re&&null===Oe||(je(),Ne())}function Fe(e,t){var n=e.stateNode;if(null===n)return null;var r=to(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var De=!1;if(f)try{var We={};Object.defineProperty(We,"passive",{get:function(){De=!0}}),window.addEventListener("test",We,We),window.removeEventListener("test",We,We)}catch(me){De=!1}function $e(e,t,n,r,o,i,a,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Ue=!1,Be=null,Ve=!1,He=null,Ye={onError:function(e){Ue=!0,Be=e}};function qe(e,t,n,r,o,i,a,l,u){Ue=!1,Be=null,$e.apply(Ye,arguments)}function Ke(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ge(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Xe(e){if(Ke(e)!==e)throw Error(a(188))}function Qe(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ke(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Xe(o),e;if(i===r)return Xe(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,it=[],at=null,lt=null,ut=null,st=new Map,ct=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":lt=null;break;case"mouseover":case"mouseout":ut=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function mt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=pt(t,n,r,o,i),null!==t&&null!==(t=Jr(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function vt(e){var t=Qr(e.target);if(null!==t){var n=Ke(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ge(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){i.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function yt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Jr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function gt(e,t,n){yt(e)&&n.delete(t)}function bt(){for(ot=!1;0<it.length;){var e=it[0];if(null!==e.blockedOn){null!==(e=Jr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&it.shift()}null!==at&&yt(at)&&(at=null),null!==lt&&yt(lt)&&(lt=null),null!==ut&&yt(ut)&&(ut=null),st.forEach(gt),ct.forEach(gt)}function xt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,bt)))}function wt(e){function t(t){return xt(t,e)}if(0<it.length){xt(it[0],e);for(var n=1;n<it.length;n++){var r=it[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==at&&xt(at,e),null!==lt&&xt(lt,e),null!==ut&&xt(ut,e),st.forEach(t),ct.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)vt(n),null===n.blockedOn&&ft.shift()}function kt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var St={animationend:kt("Animation","AnimationEnd"),animationiteration:kt("Animation","AnimationIteration"),animationstart:kt("Animation","AnimationStart"),transitionend:kt("Transition","TransitionEnd")},Et={},Ct={};function Pt(e){if(Et[e])return Et[e];if(!St[e])return e;var t,n=St[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ct)return Et[e]=n[t];return e}f&&(Ct=document.createElement("div").style,"AnimationEvent"in window||(delete St.animationend.animation,delete St.animationiteration.animation,delete St.animationstart.animation),"TransitionEvent"in window||delete St.transitionend.transition);var Rt=Pt("animationend"),Ot=Pt("animationiteration"),Tt=Pt("animationstart"),_t=Pt("transitionend"),Nt=new Map,Mt=new Map,It=["abort","abort",Rt,"animationEnd",Ot,"animationIteration",Tt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",_t,"transitionEnd","waiting","waiting"];function jt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Mt.set(r,t),Nt.set(r,o),s(o,[r])}}(0,i.unstable_now)();var zt=8;function At(e){if(0!=(1&e))return zt=15,1;if(0!=(2&e))return zt=14,2;if(0!=(4&e))return zt=13,4;var t=24&e;return 0!==t?(zt=12,t):0!=(32&e)?(zt=11,32):0!=(t=192&e)?(zt=10,t):0!=(256&e)?(zt=9,256):0!=(t=3584&e)?(zt=8,t):0!=(4096&e)?(zt=7,4096):0!=(t=4186112&e)?(zt=6,t):0!=(t=62914560&e)?(zt=5,t):67108864&e?(zt=4,67108864):0!=(134217728&e)?(zt=3,134217728):0!=(t=805306368&e)?(zt=2,t):0!=(1073741824&e)?(zt=1,1073741824):(zt=8,e)}function Zt(e,t){var n=e.pendingLanes;if(0===n)return zt=0;var r=0,o=0,i=e.expiredLanes,a=e.suspendedLanes,l=e.pingedLanes;if(0!==i)r=i,o=zt=15;else if(0!=(i=134217727&n)){var u=i&~a;0!==u?(r=At(u),o=zt):0!=(l&=i)&&(r=At(l),o=zt)}else 0!=(i=n&~a)?(r=At(i),o=zt):0!==l&&(r=At(l),o=zt);if(0===r)return 0;if(r=n&((0>(r=31-Ut(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&a)){if(At(t),o<=zt)return t;zt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Ut(t)),r|=e[n],t&=~o;return r}function Lt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Ft(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Dt(24&~t))?Ft(10,t):e;case 10:return 0===(e=Dt(192&~t))?Ft(8,t):e;case 8:return 0===(e=Dt(3584&~t))&&0===(e=Dt(4186112&~t))&&(e=512),e;case 2:return 0===(t=Dt(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function Dt(e){return e&-e}function Wt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function $t(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Ut(t)]=n}var Ut=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Bt(e)/Vt|0)|0},Bt=Math.log,Vt=Math.LN2,Ht=i.unstable_UserBlockingPriority,Yt=i.unstable_runWithPriority,qt=!0;function Kt(e,t,n,r){Ae||je();var o=Xt,i=Ae;Ae=!0;try{Ie(o,e,t,n,r)}finally{(Ae=i)||Le()}}function Gt(e,t,n,r){Yt(Ht,Xt.bind(null,e,t,n,r))}function Xt(e,t,n,r){var o;if(qt)if((o=0==(4&t))&&0<it.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),it.push(e);else{var i=Qt(e,t,n,r);if(null===i)o&&ht(e,r);else{if(o){if(-1<dt.indexOf(e))return e=pt(i,e,t,n,r),void it.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return at=mt(at,e,t,n,r,o),!0;case"dragenter":return lt=mt(lt,e,t,n,r,o),!0;case"mouseover":return ut=mt(ut,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return st.set(i,mt(st.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,ct.set(i,mt(ct.get(i)||null,e,t,n,r,o)),!0}return!1}(i,e,t,n,r))return;ht(e,r)}Nr(e,t,r,null,n)}}}function Qt(e,t,n,r){var o=Ce(r);if(null!==(o=Qr(o))){var i=Ke(o);if(null===i)o=null;else{var a=i.tag;if(13===a){if(null!==(o=Ge(i)))return o;o=null}else if(3===a){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;o=null}else i!==o&&(o=null)}}return Nr(e,t,r,o,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Jt?Jt.value:Jt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function ln(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var un,sn,cn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=ln(fn),pn=o({},fn,{view:0,detail:0}),hn=ln(pn),mn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Pn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(un=e.screenX-cn.screenX,sn=e.screenY-cn.screenY):sn=un=0,cn=e),un)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),vn=ln(mn),yn=ln(o({},mn,{dataTransfer:0})),gn=ln(o({},pn,{relatedTarget:0})),bn=ln(o({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),xn=ln(o({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),wn=ln(o({},fn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},En={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=En[e])&&!!t[e]}function Pn(){return Cn}var Rn=ln(o({},pn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Pn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),On=ln(o({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Tn=ln(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Pn})),_n=ln(o({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nn=ln(o({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Mn=[9,13,27,32],In=f&&"CompositionEvent"in window,jn=null;f&&"documentMode"in document&&(jn=document.documentMode);var zn=f&&"TextEvent"in window&&!jn,An=f&&(!In||jn&&8<jn&&11>=jn),Zn=String.fromCharCode(32),Ln=!1;function Fn(e,t){switch(e){case"keyup":return-1!==Mn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Dn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Wn=!1,$n={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Un(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!$n[e.type]:"textarea"===t}function Bn(e,t,n,r){_e(r),0<(t=Ir(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Vn=null,Hn=null;function Yn(e){Cr(e,0)}function qn(e){if(X(eo(e)))return e}function Kn(e,t){if("change"===e)return t}var Gn=!1;if(f){var Xn;if(f){var Qn="oninput"in document;if(!Qn){var Jn=document.createElement("div");Jn.setAttribute("oninput","return;"),Qn="function"==typeof Jn.oninput}Xn=Qn}else Xn=!1;Gn=Xn&&(!document.documentMode||9<document.documentMode)}function er(){Vn&&(Vn.detachEvent("onpropertychange",tr),Hn=Vn=null)}function tr(e){if("value"===e.propertyName&&qn(Hn)){var t=[];if(Bn(t,Hn,e,Ce(e)),e=Yn,Ae)e(t);else{Ae=!0;try{Me(e,t)}finally{Ae=!1,Le()}}}}function nr(e,t,n){"focusin"===e?(er(),Hn=n,(Vn=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return qn(Hn)}function or(e,t){if("click"===e)return qn(t)}function ir(e,t){if("input"===e||"change"===e)return qn(t)}var ar="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},lr=Object.prototype.hasOwnProperty;function ur(e,t){if(ar(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!lr.call(t,n[r])||!ar(e[n[r]],t[n[r]]))return!1;return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=Q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Q((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var hr=f&&"documentMode"in document&&11>=document.documentMode,mr=null,vr=null,yr=null,gr=!1;function br(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;gr||null==mr||mr!==Q(r)||(r="selectionStart"in(r=mr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&ur(yr,r)||(yr=r,0<(r=Ir(vr,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mr)))}jt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),jt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),jt(It,2);for(var xr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),wr=0;wr<xr.length;wr++)Mt.set(xr[wr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var kr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Sr=new Set("cancel close invalid load scroll toggle".split(" ").concat(kr));function Er(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,l,u,s){if(qe.apply(this,arguments),Ue){if(!Ue)throw Error(a(198));var c=Be;Ue=!1,Be=null,Ve||(Ve=!0,He=c)}}(r,t,void 0,e),e.currentTarget=null}function Cr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var l=r[a],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==i&&o.isPropagationStopped())break e;Er(o,l,s),i=u}else for(a=0;a<r.length;a++){if(u=(l=r[a]).instance,s=l.currentTarget,l=l.listener,u!==i&&o.isPropagationStopped())break e;Er(o,l,s),i=u}}}if(Ve)throw e=He,Ve=!1,He=null,e}function Pr(e,t){var n=no(t),r=e+"__bubble";n.has(r)||(_r(t,e,2,!1),n.add(r))}var Rr="_reactListening"+Math.random().toString(36).slice(2);function Or(e){e[Rr]||(e[Rr]=!0,l.forEach((function(t){Sr.has(t)||Tr(t,!1,e,null),Tr(t,!0,e,null)})))}function Tr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,i=n;if("selectionchange"===e&&9!==n.nodeType&&(i=n.ownerDocument),null!==r&&!t&&Sr.has(e)){if("scroll"!==e)return;o|=2,i=r}var a=no(i),l=e+"__"+(t?"capture":"bubble");a.has(l)||(t&&(o|=4),_r(i,e,o,t),a.add(l))}function _r(e,t,n,r){var o=Mt.get(t);switch(void 0===o?2:o){case 0:o=Kt;break;case 1:o=Gt;break;default:o=Xt}n=o.bind(null,t,n,e),o=void 0,!De||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Nr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var u=a.tag;if((3===u||4===u)&&((u=a.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;a=a.return}for(;null!==l;){if(null===(a=Qr(l)))return;if(5===(u=a.tag)||6===u){r=i=a;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(Ze)return e();Ze=!0;try{ze(e,t,n)}finally{Ze=!1,Le()}}((function(){var r=i,o=Ce(n),a=[];e:{var l=Nt.get(e);if(void 0!==l){var u=dn,s=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":u=Rn;break;case"focusin":s="focus",u=gn;break;case"focusout":s="blur",u=gn;break;case"beforeblur":case"afterblur":u=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=vn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=yn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Tn;break;case Rt:case Ot:case Tt:u=bn;break;case _t:u=_n;break;case"scroll":u=hn;break;case"wheel":u=Nn;break;case"copy":case"cut":case"paste":u=xn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=On}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Fe(h,d))&&c.push(Mr(h,m,p))),f)break;h=h.return}0<c.length&&(l=new u(l,s,null,n,o),a.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(s=n.relatedTarget||n.fromElement)||!Qr(s)&&!s[Gr])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?Qr(s):null)&&(s!==(f=Ke(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=vn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=On,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:eo(u),p=null==s?l:eo(s),(l=new c(m,h+"leave",u,n,o)).target=f,l.relatedTarget=p,m=null,Qr(o)===r&&((c=new c(d,h+"enter",s,n,o)).target=p,c.relatedTarget=f,m=c),f=m,u&&s)e:{for(d=s,h=0,p=c=u;p;p=jr(p))h++;for(p=0,m=d;m;m=jr(m))p++;for(;0<h-p;)c=jr(c),h--;for(;0<p-h;)d=jr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=jr(c),d=jr(d)}c=null}else c=null;null!==u&&zr(a,l,u,c,!1),null!==s&&null!==f&&zr(a,f,s,c,!0)}if("select"===(u=(l=r?eo(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var v=Kn;else if(Un(l))if(Gn)v=ir;else{v=rr;var y=nr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=or);switch(v&&(v=v(e,r))?Bn(a,v,n,o):(y&&y(e,l,r),"focusout"===e&&(y=l._wrapperState)&&y.controlled&&"number"===l.type&&oe(l,"number",l.value)),y=r?eo(r):window,e){case"focusin":(Un(y)||"true"===y.contentEditable)&&(mr=y,vr=r,yr=null);break;case"focusout":yr=vr=mr=null;break;case"mousedown":gr=!0;break;case"contextmenu":case"mouseup":case"dragend":gr=!1,br(a,n,o);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":br(a,n,o)}var g;if(In)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Wn?Fn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(An&&"ko"!==n.locale&&(Wn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Wn&&(g=nn()):(en="value"in(Jt=o)?Jt.value:Jt.textContent,Wn=!0)),0<(y=Ir(r,b)).length&&(b=new wn(b,e,null,n,o),a.push({event:b,listeners:y}),(g||null!==(g=Dn(n)))&&(b.data=g))),(g=zn?function(e,t){switch(e){case"compositionend":return Dn(t);case"keypress":return 32!==t.which?null:(Ln=!0,Zn);case"textInput":return(e=t.data)===Zn&&Ln?null:e;default:return null}}(e,n):function(e,t){if(Wn)return"compositionend"===e||!In&&Fn(e,t)?(e=nn(),tn=en=Jt=null,Wn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return An&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&0<(r=Ir(r,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=g)}Cr(a,t)}))}function Mr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Ir(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=Fe(e,n))&&r.unshift(Mr(e,i,o)),null!=(i=Fe(e,t))&&r.push(Mr(e,i,o))),e=e.return}return r}function jr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function zr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,o?null!=(u=Fe(n,i))&&a.unshift(Mr(n,u,l)):o||null!=(u=Fe(n,i))&&a.push(Mr(n,u,l))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function Ar(){}var Zr=null,Lr=null;function Fr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Dr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Wr="function"==typeof setTimeout?setTimeout:void 0,$r="function"==typeof clearTimeout?clearTimeout:void 0;function Ur(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Br(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Vr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Hr=0,Yr=Math.random().toString(36).slice(2),qr="__reactFiber$"+Yr,Kr="__reactProps$"+Yr,Gr="__reactContainer$"+Yr,Xr="__reactEvents$"+Yr;function Qr(e){var t=e[qr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Gr]||n[qr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Vr(e);null!==e;){if(n=e[qr])return n;e=Vr(e)}return t}n=(e=n).parentNode}return null}function Jr(e){return!(e=e[qr]||e[Gr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function eo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function to(e){return e[Kr]||null}function no(e){var t=e[Xr];return void 0===t&&(t=e[Xr]=new Set),t}var ro=[],oo=-1;function io(e){return{current:e}}function ao(e){0>oo||(e.current=ro[oo],ro[oo]=null,oo--)}function lo(e,t){oo++,ro[oo]=e.current,e.current=t}var uo={},so=io(uo),co=io(!1),fo=uo;function po(e,t){var n=e.type.contextTypes;if(!n)return uo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function ho(e){return null!=e.childContextTypes}function mo(){ao(co),ao(so)}function vo(e,t,n){if(so.current!==uo)throw Error(a(168));lo(so,t),lo(co,n)}function yo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,Y(t)||"Unknown",i));return o({},n,r)}function go(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||uo,fo=so.current,lo(so,e),lo(co,co.current),!0}function bo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=yo(e,t,fo),r.__reactInternalMemoizedMergedChildContext=e,ao(co),ao(so),lo(so,e)):ao(co),lo(co,n)}var xo=null,wo=null,ko=i.unstable_runWithPriority,So=i.unstable_scheduleCallback,Eo=i.unstable_cancelCallback,Co=i.unstable_shouldYield,Po=i.unstable_requestPaint,Ro=i.unstable_now,Oo=i.unstable_getCurrentPriorityLevel,To=i.unstable_ImmediatePriority,_o=i.unstable_UserBlockingPriority,No=i.unstable_NormalPriority,Mo=i.unstable_LowPriority,Io=i.unstable_IdlePriority,jo={},zo=void 0!==Po?Po:function(){},Ao=null,Zo=null,Lo=!1,Fo=Ro(),Do=1e4>Fo?Ro:function(){return Ro()-Fo};function Wo(){switch(Oo()){case To:return 99;case _o:return 98;case No:return 97;case Mo:return 96;case Io:return 95;default:throw Error(a(332))}}function $o(e){switch(e){case 99:return To;case 98:return _o;case 97:return No;case 96:return Mo;case 95:return Io;default:throw Error(a(332))}}function Uo(e,t){return e=$o(e),ko(e,t)}function Bo(e,t,n){return e=$o(e),So(e,t,n)}function Vo(){if(null!==Zo){var e=Zo;Zo=null,Eo(e)}Ho()}function Ho(){if(!Lo&&null!==Ao){Lo=!0;var e=0;try{var t=Ao;Uo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Ao=null}catch(t){throw null!==Ao&&(Ao=Ao.slice(e+1)),So(To,Vo),t}finally{Lo=!1}}}var Yo=w.ReactCurrentBatchConfig;function qo(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ko=io(null),Go=null,Xo=null,Qo=null;function Jo(){Qo=Xo=Go=null}function ei(e){var t=Ko.current;ao(Ko),e.type._context._currentValue=t}function ti(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ni(e,t){Go=e,Qo=Xo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Ia=!0),e.firstContext=null)}function ri(e,t){if(Qo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Qo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Xo){if(null===Go)throw Error(a(308));Xo=t,Go.dependencies={lanes:0,firstContext:t,responders:null}}else Xo=Xo.next=t;return e._currentValue}var oi=!1;function ii(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ai(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function li(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ui(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function si(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ci(e,t,n,r){var i=e.updateQueue;oi=!1;var a=i.firstBaseUpdate,l=i.lastBaseUpdate,u=i.shared.pending;if(null!==u){i.shared.pending=null;var s=u,c=s.next;s.next=null,null===l?a=c:l.next=c,l=s;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==l&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=s)}}if(null!==a){for(d=i.baseState,l=0,f=c=s=null;;){u=a.lane;var p=a.eventTime;if((r&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var h=e,m=a;switch(u=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,u);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(u="function"==typeof(h=m.payload)?h.call(p,d,u):h))break e;d=o({},d,u);break e;case 2:oi=!0}}null!==a.callback&&(e.flags|=32,null===(u=i.effects)?i.effects=[a]:u.push(a))}else p={eventTime:p,lane:u,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===f?(c=f=p,s=d):f=f.next=p,l|=u;if(null===(a=a.next)){if(null===(u=i.shared.pending))break;a=u.next,u.next=null,i.lastBaseUpdate=u,i.shared.pending=null}}null===f&&(s=d),i.baseState=s,i.firstBaseUpdate=c,i.lastBaseUpdate=f,zl|=l,e.lanes=l,e.memoizedState=d}}function fi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var di=(new r.Component).refs;function pi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var hi={isMounted:function(e){return!!(e=e._reactInternals)&&Ke(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=au(),o=lu(e),i=li(r,o);i.payload=t,null!=n&&(i.callback=n),ui(e,i),uu(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=au(),o=lu(e),i=li(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),ui(e,i),uu(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=au(),r=lu(e),o=li(n,r);o.tag=2,null!=t&&(o.callback=t),ui(e,o),uu(e,r,n)}};function mi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(o,i))}function vi(e,t,n){var r=!1,o=uo,i=t.contextType;return"object"==typeof i&&null!==i?i=ri(i):(o=ho(t)?fo:so.current,i=(r=null!=(r=t.contextTypes))?po(e,o):uo),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=hi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function yi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&hi.enqueueReplaceState(t,t.state,null)}function gi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=di,ii(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=ri(i):(i=ho(t)?fo:so.current,o.context=po(e,i)),ci(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(pi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&hi.enqueueReplaceState(o,o.state,null),ci(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var bi=Array.isArray;function xi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===di&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function wi(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function ki(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Du(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Bu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=xi(e,t,n),r.return=e,r):((r=Wu(n.type,n.key,n.props,null,e.mode,r)).ref=xi(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Vu(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=$u(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Bu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=Wu(t.type,t.key,t.props,null,e.mode,n)).ref=xi(e,null,t),n.return=e,n;case S:return(t=Vu(t,e.mode,n)).return=e,t}if(bi(t)||$(t))return(t=$u(t,e.mode,n,null)).return=e,t;wi(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===o?n.type===E?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case S:return n.key===o?c(e,t,n,r):null}if(bi(n)||$(n))return null!==o?null:f(e,t,n,r,null);wi(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return e=e.get(null===r.key?n:r.key)||null,r.type===E?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case S:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(bi(r)||$(r))return f(t,e=e.get(n)||null,r,o,null);wi(t,r)}return null}function m(o,a,l,u){for(var s=null,c=null,f=a,m=a=0,v=null;null!==f&&m<l.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=p(o,f,l[m],u);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),a=i(y,a,m),null===c?s=y:c.sibling=y,c=y,f=v}if(m===l.length)return n(o,f),s;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],u))&&(a=i(f,a,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);m<l.length;m++)null!==(v=h(f,o,m,l[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=i(v,a,m),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(o,e)})),s}function v(o,l,u,s){var c=$(u);if("function"!=typeof c)throw Error(a(150));if(null==(u=c.call(u)))throw Error(a(151));for(var f=c=null,m=l,v=l=0,y=null,g=u.next();null!==m&&!g.done;v++,g=u.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=p(o,m,g.value,s);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),l=i(b,l,v),null===f?c=b:f.sibling=b,f=b,m=y}if(g.done)return n(o,m),c;if(null===m){for(;!g.done;v++,g=u.next())null!==(g=d(o,g.value,s))&&(l=i(g,l,v),null===f?c=g:f.sibling=g,f=g);return c}for(m=r(o,m);!g.done;v++,g=u.next())null!==(g=h(m,o,v,g.value,s))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),l=i(g,l,v),null===f?c=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,i,u){var s="object"==typeof i&&null!==i&&i.type===E&&null===i.key;s&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case k:e:{for(c=i.key,s=r;null!==s;){if(s.key===c){switch(s.tag){case 7:if(i.type===E){n(e,s.sibling),(r=o(s,i.props.children)).return=e,e=r;break e}break;default:if(s.elementType===i.type){n(e,s.sibling),(r=o(s,i.props)).ref=xi(e,s,i),r.return=e,e=r;break e}}n(e,s);break}t(e,s),s=s.sibling}i.type===E?((r=$u(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=Wu(i.type,i.key,i.props,null,e.mode,u)).ref=xi(e,r,i),u.return=e,e=u)}return l(e);case S:e:{for(s=i.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Vu(i,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Bu(i,e.mode,u)).return=e,e=r),l(e);if(bi(i))return m(e,r,i,u);if($(i))return v(e,r,i,u);if(c&&wi(e,i),void 0===i&&!s)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,Y(e.type)||"Component"))}return n(e,r)}}var Si=ki(!0),Ei=ki(!1),Ci={},Pi=io(Ci),Ri=io(Ci),Oi=io(Ci);function Ti(e){if(e===Ci)throw Error(a(174));return e}function _i(e,t){switch(lo(Oi,t),lo(Ri,e),lo(Pi,Ci),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ao(Pi),lo(Pi,t)}function Ni(){ao(Pi),ao(Ri),ao(Oi)}function Mi(e){Ti(Oi.current);var t=Ti(Pi.current),n=pe(t,e.type);t!==n&&(lo(Ri,e),lo(Pi,n))}function Ii(e){Ri.current===e&&(ao(Pi),ao(Ri))}var ji=io(0);function zi(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Ai=null,Zi=null,Li=!1;function Fi(e,t){var n=Lu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Di(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Wi(e){if(Li){var t=Zi;if(t){var n=t;if(!Di(e,t)){if(!(t=Br(n.nextSibling))||!Di(e,t))return e.flags=-1025&e.flags|2,Li=!1,void(Ai=e);Fi(Ai,n)}Ai=e,Zi=Br(t.firstChild)}else e.flags=-1025&e.flags|2,Li=!1,Ai=e}}function $i(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Ai=e}function Ui(e){if(e!==Ai)return!1;if(!Li)return $i(e),Li=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Dr(t,e.memoizedProps))for(t=Zi;t;)Fi(e,t),t=Br(t.nextSibling);if($i(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Zi=Br(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Zi=null}}else Zi=Ai?Br(e.stateNode.nextSibling):null;return!0}function Bi(){Zi=Ai=null,Li=!1}var Vi=[];function Hi(){for(var e=0;e<Vi.length;e++)Vi[e]._workInProgressVersionPrimary=null;Vi.length=0}var Yi=w.ReactCurrentDispatcher,qi=w.ReactCurrentBatchConfig,Ki=0,Gi=null,Xi=null,Qi=null,Ji=!1,ea=!1;function ta(){throw Error(a(321))}function na(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ar(e[n],t[n]))return!1;return!0}function ra(e,t,n,r,o,i){if(Ki=i,Gi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Yi.current=null===e||null===e.memoizedState?Ta:_a,e=n(r,o),ea){i=0;do{if(ea=!1,!(25>i))throw Error(a(301));i+=1,Qi=Xi=null,t.updateQueue=null,Yi.current=Na,e=n(r,o)}while(ea)}if(Yi.current=Oa,t=null!==Xi&&null!==Xi.next,Ki=0,Qi=Xi=Gi=null,Ji=!1,t)throw Error(a(300));return e}function oa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Qi?Gi.memoizedState=Qi=e:Qi=Qi.next=e,Qi}function ia(){if(null===Xi){var e=Gi.alternate;e=null!==e?e.memoizedState:null}else e=Xi.next;var t=null===Qi?Gi.memoizedState:Qi.next;if(null!==t)Qi=t,Xi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Xi=e).memoizedState,baseState:Xi.baseState,baseQueue:Xi.baseQueue,queue:Xi.queue,next:null},null===Qi?Gi.memoizedState=Qi=e:Qi=Qi.next=e}return Qi}function aa(e,t){return"function"==typeof t?t(e):t}function la(e){var t=ia(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Xi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=l=i=null,s=o;do{var c=s.lane;if((Ki&c)===c)null!==u&&(u=u.next={lane:0,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),r=s.eagerReducer===e?s.eagerState:e(r,s.action);else{var f={lane:c,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===u?(l=u=f,i=r):u=u.next=f,Gi.lanes|=c,zl|=c}s=s.next}while(null!==s&&s!==o);null===u?i=r:u.next=l,ar(r,t.memoizedState)||(Ia=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function ua(e){var t=ia(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);ar(i,t.memoizedState)||(Ia=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function sa(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Ki&e)===e)&&(t._workInProgressVersionPrimary=r,Vi.push(t))),e)return n(t._source);throw Vi.push(t),Error(a(350))}function ca(e,t,n,r){var o=Rl;if(null===o)throw Error(a(349));var i=t._getVersion,l=i(t._source),u=Yi.current,s=u.useState((function(){return sa(o,t,n)})),c=s[1],f=s[0];s=Qi;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,m=d.source;d=d.subscribe;var v=Gi;return e.memoizedState={refs:p,source:t,subscribe:r},u.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=i(t._source);if(!ar(l,e)){e=n(t._source),ar(f,e)||(c(e),e=lu(v),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,a=e;0<a;){var u=31-Ut(a),s=1<<u;r[u]|=e,a&=~s}}}),[n,t,r]),u.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=lu(v);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ar(h,n)&&ar(m,t)&&ar(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:aa,lastRenderedState:f}).dispatch=c=Ra.bind(null,Gi,e),s.queue=e,s.baseQueue=null,f=sa(o,t,n),s.memoizedState=s.baseState=f),f}function fa(e,t,n){return ca(ia(),e,t,n)}function da(e){var t=oa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:aa,lastRenderedState:e}).dispatch=Ra.bind(null,Gi,e),[t.memoizedState,e]}function pa(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Gi.updateQueue)?(t={lastEffect:null},Gi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ha(e){return e={current:e},oa().memoizedState=e}function ma(){return ia().memoizedState}function va(e,t,n,r){var o=oa();Gi.flags|=e,o.memoizedState=pa(1|t,n,void 0,void 0===r?null:r)}function ya(e,t,n,r){var o=ia();r=void 0===r?null:r;var i=void 0;if(null!==Xi){var a=Xi.memoizedState;if(i=a.destroy,null!==r&&na(r,a.deps))return void pa(t,n,i,r)}Gi.flags|=e,o.memoizedState=pa(1|t,n,i,r)}function ga(e,t){return va(516,4,e,t)}function ba(e,t){return ya(516,4,e,t)}function xa(e,t){return ya(4,2,e,t)}function wa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ka(e,t,n){return n=null!=n?n.concat([e]):null,ya(4,2,wa.bind(null,t,e),n)}function Sa(){}function Ea(e,t){var n=ia();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&na(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ca(e,t){var n=ia();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&na(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Pa(e,t){var n=Wo();Uo(98>n?98:n,(function(){e(!0)})),Uo(97<n?97:n,(function(){var n=qi.transition;qi.transition=1;try{e(!1),t()}finally{qi.transition=n}}))}function Ra(e,t,n){var r=au(),o=lu(e),i={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?i.next=i:(i.next=a.next,a.next=i),t.pending=i,a=e.alternate,e===Gi||null!==a&&a===Gi)ea=Ji=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var l=t.lastRenderedState,u=a(l,n);if(i.eagerReducer=a,i.eagerState=u,ar(u,l))return}catch(e){}uu(e,o,r)}}var Oa={readContext:ri,useCallback:ta,useContext:ta,useEffect:ta,useImperativeHandle:ta,useLayoutEffect:ta,useMemo:ta,useReducer:ta,useRef:ta,useState:ta,useDebugValue:ta,useDeferredValue:ta,useTransition:ta,useMutableSource:ta,useOpaqueIdentifier:ta,unstable_isNewReconciler:!1},Ta={readContext:ri,useCallback:function(e,t){return oa().memoizedState=[e,void 0===t?null:t],e},useContext:ri,useEffect:ga,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,va(4,2,wa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return va(4,2,e,t)},useMemo:function(e,t){var n=oa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=oa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ra.bind(null,Gi,e),[r.memoizedState,e]},useRef:ha,useState:da,useDebugValue:Sa,useDeferredValue:function(e){var t=da(e),n=t[0],r=t[1];return ga((function(){var t=qi.transition;qi.transition=1;try{r(e)}finally{qi.transition=t}}),[e]),n},useTransition:function(){var e=da(!1),t=e[0];return ha(e=Pa.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=oa();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},ca(r,e,t,n)},useOpaqueIdentifier:function(){if(Li){var e=!1,t=function(e){return{$$typeof:z,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Hr++).toString(36))),Error(a(355))})),n=da(t)[1];return 0==(2&Gi.mode)&&(Gi.flags|=516,pa(5,(function(){n("r:"+(Hr++).toString(36))}),void 0,null)),t}return da(t="r:"+(Hr++).toString(36)),t},unstable_isNewReconciler:!1},_a={readContext:ri,useCallback:Ea,useContext:ri,useEffect:ba,useImperativeHandle:ka,useLayoutEffect:xa,useMemo:Ca,useReducer:la,useRef:ma,useState:function(){return la(aa)},useDebugValue:Sa,useDeferredValue:function(e){var t=la(aa),n=t[0],r=t[1];return ba((function(){var t=qi.transition;qi.transition=1;try{r(e)}finally{qi.transition=t}}),[e]),n},useTransition:function(){var e=la(aa)[0];return[ma().current,e]},useMutableSource:fa,useOpaqueIdentifier:function(){return la(aa)[0]},unstable_isNewReconciler:!1},Na={readContext:ri,useCallback:Ea,useContext:ri,useEffect:ba,useImperativeHandle:ka,useLayoutEffect:xa,useMemo:Ca,useReducer:ua,useRef:ma,useState:function(){return ua(aa)},useDebugValue:Sa,useDeferredValue:function(e){var t=ua(aa),n=t[0],r=t[1];return ba((function(){var t=qi.transition;qi.transition=1;try{r(e)}finally{qi.transition=t}}),[e]),n},useTransition:function(){var e=ua(aa)[0];return[ma().current,e]},useMutableSource:fa,useOpaqueIdentifier:function(){return ua(aa)[0]},unstable_isNewReconciler:!1},Ma=w.ReactCurrentOwner,Ia=!1;function ja(e,t,n,r){t.child=null===e?Ei(t,null,n,r):Si(t,e.child,n,r)}function za(e,t,n,r,o){n=n.render;var i=t.ref;return ni(t,o),r=ra(e,t,n,r,i,o),null===e||Ia?(t.flags|=1,ja(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Ja(e,t,o))}function Aa(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Fu(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Wu(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Za(e,t,a,r,o,i))}return a=e.child,0==(o&i)&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:ur)(o,r)&&e.ref===t.ref)?Ja(e,t,i):(t.flags|=1,(e=Du(a,r)).ref=t.ref,e.return=t,t.child=e)}function Za(e,t,n,r,o,i){if(null!==e&&ur(e.memoizedProps,r)&&e.ref===t.ref){if(Ia=!1,0==(i&o))return t.lanes=e.lanes,Ja(e,t,i);0!=(16384&e.flags)&&(Ia=!0)}return Da(e,t,n,r,i)}function La(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},vu(0,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},vu(0,e),null;t.memoizedState={baseLanes:0},vu(0,null!==i?i.baseLanes:n)}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,vu(0,r);return ja(e,t,o,n),t.child}function Fa(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Da(e,t,n,r,o){var i=ho(n)?fo:so.current;return i=po(t,i),ni(t,o),n=ra(e,t,n,r,i,o),null===e||Ia?(t.flags|=1,ja(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Ja(e,t,o))}function Wa(e,t,n,r,o){if(ho(n)){var i=!0;go(t)}else i=!1;if(ni(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),vi(t,n,r),gi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var u=a.context,s=n.contextType;s="object"==typeof s&&null!==s?ri(s):po(t,s=ho(n)?fo:so.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==s)&&yi(t,a,r,s),oi=!1;var d=t.memoizedState;a.state=d,ci(t,r,a,o),u=t.memoizedState,l!==r||d!==u||co.current||oi?("function"==typeof c&&(pi(t,n,c,r),u=t.memoizedState),(l=oi||mi(t,n,l,r,d,u,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=s,r=l):("function"==typeof a.componentDidMount&&(t.flags|=4),r=!1)}else{a=t.stateNode,ai(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:qo(t.type,l),a.props=s,f=t.pendingProps,d=a.context,u="object"==typeof(u=n.contextType)&&null!==u?ri(u):po(t,u=ho(n)?fo:so.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==f||d!==u)&&yi(t,a,r,u),oi=!1,d=t.memoizedState,a.state=d,ci(t,r,a,o);var h=t.memoizedState;l!==f||d!==h||co.current||oi?("function"==typeof p&&(pi(t,n,p,r),h=t.memoizedState),(s=oi||mi(t,n,s,r,d,h,u))?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=u,r=s):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return $a(e,t,n,r,i,o)}function $a(e,t,n,r,o,i){Fa(e,t);var a=0!=(64&t.flags);if(!r&&!a)return o&&bo(t,n,!1),Ja(e,t,i);r=t.stateNode,Ma.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Si(t,e.child,null,i),t.child=Si(t,null,l,i)):ja(e,t,l,i),t.memoizedState=r.state,o&&bo(t,n,!0),t.child}function Ua(e){var t=e.stateNode;t.pendingContext?vo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&vo(0,t.context,!1),_i(e,t.containerInfo)}var Ba,Va,Ha,Ya={dehydrated:null,retryLane:0};function qa(e,t,n){var r,o=t.pendingProps,i=ji.current,a=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=1),lo(ji,1&i),null===e?(void 0!==o.fallback&&Wi(t),e=o.children,i=o.fallback,a?(e=Ka(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ya,e):"number"==typeof o.unstable_expectedLoadTime?(e=Ka(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ya,t.lanes=33554432,e):((n=Uu({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(o=function(e,t,n,r,o){var i=t.mode,a=e.child;e=a.sibling;var l={mode:"hidden",children:n};return 0==(2&i)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=l,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Du(a,l),null!==e?r=Du(e,r):(r=$u(r,i,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),a=t.child,i=e.child.memoizedState,a.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=Ya,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=Du(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Ka(e,t,n,r){var o=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=Uu(t,o,0,null),n=$u(n,o,r,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function Ga(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ti(e.return,t)}function Xa(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o,a.lastEffect=i)}function Qa(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(ja(e,t,r.children,n),0!=(2&(r=ji.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ga(e,n);else if(19===e.tag)Ga(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(lo(ji,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===zi(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Xa(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===zi(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Xa(t,!0,n,null,i,t.lastEffect);break;case"together":Xa(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ja(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),zl|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Du(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Du(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function el(e,t){if(!Li)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function tl(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return ho(t.type)&&mo(),null;case 3:return Ni(),ao(co),ao(so),Hi(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Ui(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Ii(t);var i=Ti(Oi.current);if(n=t.type,null!==e&&null!=t.stateNode)Va(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Ti(Pi.current),Ui(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[qr]=t,r[Kr]=l,n){case"dialog":Pr("cancel",r),Pr("close",r);break;case"iframe":case"object":case"embed":Pr("load",r);break;case"video":case"audio":for(e=0;e<kr.length;e++)Pr(kr[e],r);break;case"source":Pr("error",r);break;case"img":case"image":case"link":Pr("error",r),Pr("load",r);break;case"details":Pr("toggle",r);break;case"input":ee(r,l),Pr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Pr("invalid",r);break;case"textarea":ue(r,l),Pr("invalid",r)}for(var s in Se(n,l),e=null,l)l.hasOwnProperty(s)&&(i=l[s],"children"===s?"string"==typeof i?r.textContent!==i&&(e=["children",i]):"number"==typeof i&&r.textContent!==""+i&&(e=["children",""+i]):u.hasOwnProperty(s)&&null!=i&&"onScroll"===s&&Pr("scroll",r));switch(n){case"input":G(r),re(r,l,!0);break;case"textarea":G(r),ce(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Ar)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(s=9===i.nodeType?i:i.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[qr]=t,e[Kr]=r,Ba(e,t),t.stateNode=e,s=Ee(n,r),n){case"dialog":Pr("cancel",e),Pr("close",e),i=r;break;case"iframe":case"object":case"embed":Pr("load",e),i=r;break;case"video":case"audio":for(i=0;i<kr.length;i++)Pr(kr[i],e);i=r;break;case"source":Pr("error",e),i=r;break;case"img":case"image":case"link":Pr("error",e),Pr("load",e),i=r;break;case"details":Pr("toggle",e),i=r;break;case"input":ee(e,r),i=J(e,r),Pr("invalid",e);break;case"option":i=ie(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=o({},r,{value:void 0}),Pr("invalid",e);break;case"textarea":ue(e,r),i=le(e,r),Pr("invalid",e);break;default:i=r}Se(n,i);var c=i;for(l in c)if(c.hasOwnProperty(l)){var f=c[l];"style"===l?we(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&ve(e,f):"children"===l?"string"==typeof f?("textarea"!==n||""!==f)&&ye(e,f):"number"==typeof f&&ye(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(u.hasOwnProperty(l)?null!=f&&"onScroll"===l&&Pr("scroll",e):null!=f&&x(e,l,f,s))}switch(n){case"input":G(e),re(e,r,!1);break;case"textarea":G(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+q(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ae(e,!!r.multiple,l,!1):null!=r.defaultValue&&ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Ar)}Fr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Ha(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Ti(Oi.current),Ti(Pi.current),Ui(t)?(r=t.stateNode,n=t.memoizedProps,r[qr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[qr]=t,t.stateNode=r)}return null;case 13:return ao(ji),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Ui(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&ji.current)?0===Ml&&(Ml=3):(0!==Ml&&3!==Ml||(Ml=4),null===Rl||0==(134217727&zl)&&0==(134217727&Al)||du(Rl,Tl))),(r||n)&&(t.flags|=4),null);case 4:return Ni(),null===e&&Or(t.stateNode.containerInfo),null;case 10:return ei(t),null;case 17:return ho(t.type)&&mo(),null;case 19:if(ao(ji),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(s=r.rendering))if(l)el(r,!1);else{if(0!==Ml||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(s=zi(e))){for(t.flags|=64,el(r,!1),null!==(l=s.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(s=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=s.childLanes,l.lanes=s.lanes,l.child=s.child,l.memoizedProps=s.memoizedProps,l.memoizedState=s.memoizedState,l.updateQueue=s.updateQueue,l.type=s.type,e=s.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return lo(ji,1&ji.current|2),t.child}e=e.sibling}null!==r.tail&&Do()>Dl&&(t.flags|=64,l=!0,el(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=zi(s))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),el(r,!0),null===r.tail&&"hidden"===r.tailMode&&!s.alternate&&!Li)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Do()-r.renderingStartTime>Dl&&1073741824!==n&&(t.flags|=64,l=!0,el(r,!1),t.lanes=33554432);r.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=r.last)?n.sibling=s:t.child=s,r.last=s)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Do(),n.sibling=null,t=ji.current,lo(ji,l?1&t|2:1&t),n):null;case 23:case 24:return yu(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function nl(e){switch(e.tag){case 1:ho(e.type)&&mo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ni(),ao(co),ao(so),Hi(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return Ii(e),null;case 13:return ao(ji),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return ao(ji),null;case 4:return Ni(),null;case 10:return ei(e),null;case 23:case 24:return yu(),null;default:return null}}function rl(e,t){try{var n="",r=t;do{n+=H(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ol(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Ba=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Va=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,Ti(Pi.current);var a,l=null;switch(n){case"input":i=J(e,i),r=J(e,r),l=[];break;case"option":i=ie(e,i),r=ie(e,r),l=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),l=[];break;case"textarea":i=le(e,i),r=le(e,r),l=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Ar)}for(f in Se(n,r),n=null,i)if(!r.hasOwnProperty(f)&&i.hasOwnProperty(f)&&null!=i[f])if("style"===f){var s=i[f];for(a in s)s.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?l||(l=[]):(l=l||[]).push(f,null));for(f in r){var c=r[f];if(s=null!=i?i[f]:void 0,r.hasOwnProperty(f)&&c!==s&&(null!=c||null!=s))if("style"===f)if(s){for(a in s)!s.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&s[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(l||(l=[]),l.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(l=l||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&Pr("scroll",e),l||s===c||(l=[])):"object"==typeof c&&null!==c&&c.$$typeof===z?c.toString():(l=l||[]).push(f,c))}n&&(l=l||[]).push("style",n);var f=l;(t.updateQueue=f)&&(t.flags|=4)}},Ha=function(e,t,n,r){n!==r&&(t.flags|=4)};var il="function"==typeof WeakMap?WeakMap:Map;function al(e,t,n){(n=li(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Bl||(Bl=!0,Vl=r),ol(0,t)},n}function ll(e,t,n){(n=li(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ol(0,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Hl?Hl=new Set([this]):Hl.add(this),ol(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var ul="function"==typeof WeakSet?WeakSet:Set;function sl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){ju(e,t)}else t.current=null}function cl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:qo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Ur(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(a(163))}function fl(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Nu(n,e),_u(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:qo(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&fi(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}fi(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Fr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&wt(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(a(163))}function dl(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=xe("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function pl(e,t){if(wo&&"function"==typeof wo.onCommitFiberUnmount)try{wo.onCommitFiberUnmount(xo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Nu(t,n);else{r=t;try{o()}catch(e){ju(r,e)}}n=n.next}while(n!==e)}break;case 1:if(sl(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){ju(t,e)}break;case 5:sl(t);break;case 4:bl(e,t)}}function hl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function ml(e){return 5===e.tag||3===e.tag||4===e.tag}function vl(e){e:{for(var t=e.return;null!==t;){if(ml(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(ye(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ml(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?yl(e,n,t):gl(e,n,t)}function yl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Ar));else if(4!==r&&null!==(e=e.child))for(yl(e,t,n),e=e.sibling;null!==e;)yl(e,t,n),e=e.sibling}function gl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(gl(e,t,n),e=e.sibling;null!==e;)gl(e,t,n),e=e.sibling}function bl(e,t){for(var n,r,o=t,i=!1;;){if(!i){i=o.return;e:for(;;){if(null===i)throw Error(a(160));switch(n=i.stateNode,i.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}i=i.return}i=!0}if(5===o.tag||6===o.tag){e:for(var l=e,u=o,s=u;;)if(pl(l,s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===u)break e;for(;null===s.sibling;){if(null===s.return||s.return===u)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}r?(l=n,u=o.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(pl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(i=!1)}o.sibling.return=o.return,o=o.sibling}}function xl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Kr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ee(e,o),t=Ee(e,r),o=0;o<i.length;o+=2){var l=i[o],u=i[o+1];"style"===l?we(n,u):"dangerouslySetInnerHTML"===l?ve(n,u):"children"===l?ye(n,u):x(n,l,u,t)}switch(e){case"input":ne(n,r);break;case"textarea":se(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?ae(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?ae(n,!!r.multiple,r.defaultValue,!0):ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,wt(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Fl=Do(),dl(t.child,!0)),void wl(t);case 19:return void wl(t);case 17:return;case 23:case 24:return void dl(t,null!==t.memoizedState)}throw Error(a(163))}function wl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ul),t.forEach((function(t){var r=Au.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function kl(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Sl=Math.ceil,El=w.ReactCurrentDispatcher,Cl=w.ReactCurrentOwner,Pl=0,Rl=null,Ol=null,Tl=0,_l=0,Nl=io(0),Ml=0,Il=null,jl=0,zl=0,Al=0,Zl=0,Ll=null,Fl=0,Dl=1/0;function Wl(){Dl=Do()+500}var $l,Ul=null,Bl=!1,Vl=null,Hl=null,Yl=!1,ql=null,Kl=90,Gl=[],Xl=[],Ql=null,Jl=0,eu=null,tu=-1,nu=0,ru=0,ou=null,iu=!1;function au(){return 0!=(48&Pl)?Do():-1!==tu?tu:tu=Do()}function lu(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Wo()?1:2;if(0===nu&&(nu=jl),0!==Yo.transition){0!==ru&&(ru=null!==Ll?Ll.pendingLanes:0),e=nu;var t=4186112&~ru;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Wo(),e=Ft(0!=(4&Pl)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),nu)}function uu(e,t,n){if(50<Jl)throw Jl=0,eu=null,Error(a(185));if(null===(e=su(e,t)))return null;$t(e,t,n),e===Rl&&(Al|=t,4===Ml&&du(e,Tl));var r=Wo();1===t?0!=(8&Pl)&&0==(48&Pl)?pu(e):(cu(e,n),0===Pl&&(Wl(),Vo())):(0==(4&Pl)||98!==r&&99!==r||(null===Ql?Ql=new Set([e]):Ql.add(e)),cu(e,n)),Ll=e}function su(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function cu(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,i=e.expirationTimes,l=e.pendingLanes;0<l;){var u=31-Ut(l),s=1<<u,c=i[u];if(-1===c){if(0==(s&r)||0!=(s&o)){c=t,At(s);var f=zt;i[u]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=s);l&=~s}if(r=Zt(e,e===Rl?Tl:0),t=zt,0===r)null!==n&&(n!==jo&&Eo(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==jo&&Eo(n)}15===t?(n=pu.bind(null,e),null===Ao?(Ao=[n],Zo=So(To,Ho)):Ao.push(n),n=jo):n=14===t?Bo(99,pu.bind(null,e)):Bo(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),fu.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function fu(e){if(tu=-1,ru=nu=0,0!=(48&Pl))throw Error(a(327));var t=e.callbackNode;if(Tu()&&e.callbackNode!==t)return null;var n=Zt(e,e===Rl?Tl:0);if(0===n)return null;var r=n,o=Pl;Pl|=16;var i=xu();for(Rl===e&&Tl===r||(Wl(),gu(e,r));;)try{Su();break}catch(t){bu(e,t)}if(Jo(),El.current=i,Pl=o,null!==Ol?r=0:(Rl=null,Tl=0,r=Ml),0!=(jl&Al))gu(e,0);else if(0!==r){if(2===r&&(Pl|=64,e.hydrate&&(e.hydrate=!1,Ur(e.containerInfo)),0!==(n=Lt(e))&&(r=wu(e,n))),1===r)throw t=Il,gu(e,0),du(e,n),cu(e,Do()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:Pu(e);break;case 3:if(du(e,n),(62914560&n)===n&&10<(r=Fl+500-Do())){if(0!==Zt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){au(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Wr(Pu.bind(null,e),r);break}Pu(e);break;case 4:if(du(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var l=31-Ut(n);i=1<<l,(l=r[l])>o&&(o=l),n&=~i}if(n=o,10<(n=(120>(n=Do()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Sl(n/1960))-n)){e.timeoutHandle=Wr(Pu.bind(null,e),n);break}Pu(e);break;case 5:Pu(e);break;default:throw Error(a(329))}}return cu(e,Do()),e.callbackNode===t?fu.bind(null,e):null}function du(e,t){for(t&=~Zl,t&=~Al,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Ut(t),r=1<<n;e[n]=-1,t&=~r}}function pu(e){if(0!=(48&Pl))throw Error(a(327));if(Tu(),e===Rl&&0!=(e.expiredLanes&Tl)){var t=Tl,n=wu(e,t);0!=(jl&Al)&&(n=wu(e,t=Zt(e,t)))}else n=wu(e,t=Zt(e,0));if(0!==e.tag&&2===n&&(Pl|=64,e.hydrate&&(e.hydrate=!1,Ur(e.containerInfo)),0!==(t=Lt(e))&&(n=wu(e,t))),1===n)throw n=Il,gu(e,0),du(e,t),cu(e,Do()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Pu(e),cu(e,Do()),null}function hu(e,t){var n=Pl;Pl|=1;try{return e(t)}finally{0===(Pl=n)&&(Wl(),Vo())}}function mu(e,t){var n=Pl;Pl&=-2,Pl|=8;try{return e(t)}finally{0===(Pl=n)&&(Wl(),Vo())}}function vu(e,t){lo(Nl,_l),_l|=t,jl|=t}function yu(){_l=Nl.current,ao(Nl)}function gu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,$r(n)),null!==Ol)for(n=Ol.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&mo();break;case 3:Ni(),ao(co),ao(so),Hi();break;case 5:Ii(r);break;case 4:Ni();break;case 13:case 19:ao(ji);break;case 10:ei(r);break;case 23:case 24:yu()}n=n.return}Rl=e,Ol=Du(e.current,null),Tl=_l=jl=t,Ml=0,Il=null,Zl=Al=zl=0}function bu(e,t){for(;;){var n=Ol;try{if(Jo(),Yi.current=Oa,Ji){for(var r=Gi.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}Ji=!1}if(Ki=0,Qi=Xi=Gi=null,ea=!1,Cl.current=null,null===n||null===n.return){Ml=1,Il=t,Ol=null;break}e:{var i=e,a=n.return,l=n,u=t;if(t=Tl,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var s=u;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.lanes=c.lanes):(l.updateQueue=null,l.memoizedState=null)}var f=0!=(1&ji.current),d=a;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=d.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!f)}}if(p){var v=d.updateQueue;if(null===v){var y=new Set;y.add(s),d.updateQueue=y}else v.add(s);if(0==(2&d.mode)){if(d.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var g=li(-1,1);g.tag=2,ui(l,g)}l.lanes|=1;break e}u=void 0,l=t;var b=i.pingCache;if(null===b?(b=i.pingCache=new il,u=new Set,b.set(s,u)):void 0===(u=b.get(s))&&(u=new Set,b.set(s,u)),!u.has(l)){u.add(l);var x=zu.bind(null,i,s,l);s.then(x,x)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);u=Error((Y(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Ml&&(Ml=2),u=rl(u,l),d=a;do{switch(d.tag){case 3:i=u,d.flags|=4096,t&=-t,d.lanes|=t,si(d,al(0,i,t));break e;case 1:i=u;var w=d.type,k=d.stateNode;if(0==(64&d.flags)&&("function"==typeof w.getDerivedStateFromError||null!==k&&"function"==typeof k.componentDidCatch&&(null===Hl||!Hl.has(k)))){d.flags|=4096,t&=-t,d.lanes|=t,si(d,ll(d,i,t));break e}}d=d.return}while(null!==d)}Cu(n)}catch(e){t=e,Ol===n&&null!==n&&(Ol=n=n.return);continue}break}}function xu(){var e=El.current;return El.current=Oa,null===e?Oa:e}function wu(e,t){var n=Pl;Pl|=16;var r=xu();for(Rl===e&&Tl===t||gu(e,t);;)try{ku();break}catch(t){bu(e,t)}if(Jo(),Pl=n,El.current=r,null!==Ol)throw Error(a(261));return Rl=null,Tl=0,Ml}function ku(){for(;null!==Ol;)Eu(Ol)}function Su(){for(;null!==Ol&&!Co();)Eu(Ol)}function Eu(e){var t=$l(e.alternate,e,_l);e.memoizedProps=e.pendingProps,null===t?Cu(e):Ol=t,Cl.current=null}function Cu(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=tl(n,t,_l)))return void(Ol=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&_l)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=nl(t)))return n.flags&=2047,void(Ol=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Ol=t);Ol=t=e}while(null!==t);0===Ml&&(Ml=5)}function Pu(e){var t=Wo();return Uo(99,Ru.bind(null,e,t)),null}function Ru(e,t){do{Tu()}while(null!==ql);if(0!=(48&Pl))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,i=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,u=e.expirationTimes;0<i;){var s=31-Ut(i),c=1<<s;o[s]=0,l[s]=-1,u[s]=-1,i&=~c}if(null!==Ql&&0==(24&r)&&Ql.has(e)&&Ql.delete(e),e===Rl&&(Ol=Rl=null,Tl=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Pl,Pl|=32,Cl.current=null,Zr=qt,pr(l=dr())){if("selectionStart"in l)u={start:l.selectionStart,end:l.selectionEnd};else e:if(u=(u=l.ownerDocument)&&u.defaultView||window,(c=u.getSelection&&u.getSelection())&&0!==c.rangeCount){u=c.anchorNode,i=c.anchorOffset,s=c.focusNode,c=c.focusOffset;try{u.nodeType,s.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,h=0,m=0,v=l,y=null;t:for(;;){for(var g;v!==u||0!==i&&3!==v.nodeType||(d=f+i),v!==s||0!==c&&3!==v.nodeType||(p=f+c),3===v.nodeType&&(f+=v.nodeValue.length),null!==(g=v.firstChild);)y=v,v=g;for(;;){if(v===l)break t;if(y===u&&++h===i&&(d=f),y===s&&++m===c&&(p=f),null!==(g=v.nextSibling))break;y=(v=y).parentNode}v=g}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;Lr={focusedElem:l,selectionRange:u},qt=!1,ou=null,iu=!1,Ul=r;do{try{Ou()}catch(e){if(null===Ul)throw Error(a(330));ju(Ul,e),Ul=Ul.nextEffect}}while(null!==Ul);ou=null,Ul=r;do{try{for(l=e;null!==Ul;){var b=Ul.flags;if(16&b&&ye(Ul.stateNode,""),128&b){var x=Ul.alternate;if(null!==x){var w=x.ref;null!==w&&("function"==typeof w?w(null):w.current=null)}}switch(1038&b){case 2:vl(Ul),Ul.flags&=-3;break;case 6:vl(Ul),Ul.flags&=-3,xl(Ul.alternate,Ul);break;case 1024:Ul.flags&=-1025;break;case 1028:Ul.flags&=-1025,xl(Ul.alternate,Ul);break;case 4:xl(Ul.alternate,Ul);break;case 8:bl(l,u=Ul);var k=u.alternate;hl(u),null!==k&&hl(k)}Ul=Ul.nextEffect}}catch(e){if(null===Ul)throw Error(a(330));ju(Ul,e),Ul=Ul.nextEffect}}while(null!==Ul);if(w=Lr,x=dr(),b=w.focusedElem,l=w.selectionRange,x!==b&&b&&b.ownerDocument&&fr(b.ownerDocument.documentElement,b)){null!==l&&pr(b)&&(x=l.start,void 0===(w=l.end)&&(w=x),"selectionStart"in b?(b.selectionStart=x,b.selectionEnd=Math.min(w,b.value.length)):(w=(x=b.ownerDocument||document)&&x.defaultView||window).getSelection&&(w=w.getSelection(),u=b.textContent.length,k=Math.min(l.start,u),l=void 0===l.end?k:Math.min(l.end,u),!w.extend&&k>l&&(u=l,l=k,k=u),u=cr(b,k),i=cr(b,l),u&&i&&(1!==w.rangeCount||w.anchorNode!==u.node||w.anchorOffset!==u.offset||w.focusNode!==i.node||w.focusOffset!==i.offset)&&((x=x.createRange()).setStart(u.node,u.offset),w.removeAllRanges(),k>l?(w.addRange(x),w.extend(i.node,i.offset)):(x.setEnd(i.node,i.offset),w.addRange(x))))),x=[];for(w=b;w=w.parentNode;)1===w.nodeType&&x.push({element:w,left:w.scrollLeft,top:w.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<x.length;b++)(w=x[b]).element.scrollLeft=w.left,w.element.scrollTop=w.top}qt=!!Zr,Lr=Zr=null,e.current=n,Ul=r;do{try{for(b=e;null!==Ul;){var S=Ul.flags;if(36&S&&fl(b,Ul.alternate,Ul),128&S){x=void 0;var E=Ul.ref;if(null!==E){var C=Ul.stateNode;switch(Ul.tag){case 5:x=C;break;default:x=C}"function"==typeof E?E(x):E.current=x}}Ul=Ul.nextEffect}}catch(e){if(null===Ul)throw Error(a(330));ju(Ul,e),Ul=Ul.nextEffect}}while(null!==Ul);Ul=null,zo(),Pl=o}else e.current=n;if(Yl)Yl=!1,ql=e,Kl=t;else for(Ul=r;null!==Ul;)t=Ul.nextEffect,Ul.nextEffect=null,8&Ul.flags&&((S=Ul).sibling=null,S.stateNode=null),Ul=t;if(0===(r=e.pendingLanes)&&(Hl=null),1===r?e===eu?Jl++:(Jl=0,eu=e):Jl=0,n=n.stateNode,wo&&"function"==typeof wo.onCommitFiberRoot)try{wo.onCommitFiberRoot(xo,n,void 0,64==(64&n.current.flags))}catch(e){}if(cu(e,Do()),Bl)throw Bl=!1,e=Vl,Vl=null,e;return 0!=(8&Pl)||Vo(),null}function Ou(){for(;null!==Ul;){var e=Ul.alternate;iu||null===ou||(0!=(8&Ul.flags)?Je(Ul,ou)&&(iu=!0):13===Ul.tag&&kl(e,Ul)&&Je(Ul,ou)&&(iu=!0));var t=Ul.flags;0!=(256&t)&&cl(e,Ul),0==(512&t)||Yl||(Yl=!0,Bo(97,(function(){return Tu(),null}))),Ul=Ul.nextEffect}}function Tu(){if(90!==Kl){var e=97<Kl?97:Kl;return Kl=90,Uo(e,Mu)}return!1}function _u(e,t){Gl.push(t,e),Yl||(Yl=!0,Bo(97,(function(){return Tu(),null})))}function Nu(e,t){Xl.push(t,e),Yl||(Yl=!0,Bo(97,(function(){return Tu(),null})))}function Mu(){if(null===ql)return!1;var e=ql;if(ql=null,0!=(48&Pl))throw Error(a(331));var t=Pl;Pl|=32;var n=Xl;Xl=[];for(var r=0;r<n.length;r+=2){var o=n[r],i=n[r+1],l=o.destroy;if(o.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===i)throw Error(a(330));ju(i,e)}}for(n=Gl,Gl=[],r=0;r<n.length;r+=2){o=n[r],i=n[r+1];try{var u=o.create;o.destroy=u()}catch(e){if(null===i)throw Error(a(330));ju(i,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return Pl=t,Vo(),!0}function Iu(e,t,n){ui(e,t=al(0,t=rl(n,t),1)),t=au(),null!==(e=su(e,1))&&($t(e,1,t),cu(e,t))}function ju(e,t){if(3===e.tag)Iu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Iu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Hl||!Hl.has(r))){var o=ll(n,e=rl(t,e),1);if(ui(n,o),o=au(),null!==(n=su(n,1)))$t(n,1,o),cu(n,o);else if("function"==typeof r.componentDidCatch&&(null===Hl||!Hl.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function zu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=au(),e.pingedLanes|=e.suspendedLanes&n,Rl===e&&(Tl&n)===n&&(4===Ml||3===Ml&&(62914560&Tl)===Tl&&500>Do()-Fl?gu(e,0):Zl|=n),cu(e,t)}function Au(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Wo()?1:2:(0===nu&&(nu=jl),0===(t=Dt(62914560&~nu))&&(t=4194304))),n=au(),null!==(e=su(e,t))&&($t(e,t,n),cu(e,n))}function Zu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Lu(e,t,n,r){return new Zu(e,t,n,r)}function Fu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Du(e,t){var n=e.alternate;return null===n?((n=Lu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Wu(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)Fu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case E:return $u(n.children,o,i,t);case A:l=8,o|=16;break;case C:l=8,o|=1;break;case P:return(e=Lu(12,n,t,8|o)).elementType=P,e.type=P,e.lanes=i,e;case _:return(e=Lu(13,n,t,o)).type=_,e.elementType=_,e.lanes=i,e;case N:return(e=Lu(19,n,t,o)).elementType=N,e.lanes=i,e;case Z:return Uu(n,o,i,t);case L:return(e=Lu(24,n,t,o)).elementType=L,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case R:l=10;break e;case O:l=9;break e;case T:l=11;break e;case M:l=14;break e;case I:l=16,r=null;break e;case j:l=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Lu(l,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function $u(e,t,n,r){return(e=Lu(7,e,r,t)).lanes=n,e}function Uu(e,t,n,r){return(e=Lu(23,e,r,t)).elementType=Z,e.lanes=n,e}function Bu(e,t,n){return(e=Lu(6,e,null,t)).lanes=n,e}function Vu(e,t,n){return(t=Lu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Hu(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Wt(0),this.expirationTimes=Wt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Wt(0),this.mutableSourceEagerHydrationData=null}function Yu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function qu(e,t,n,r){var o=t.current,i=au(),l=lu(o);e:if(n){t:{if(Ke(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(ho(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(a(171))}if(1===n.tag){var s=n.type;if(ho(s)){n=yo(n,s,u);break e}}n=u}else n=uo;return null===t.context?t.context=n:t.pendingContext=n,(t=li(i,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ui(o,t),uu(o,l,i),l}function Ku(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Gu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Xu(e,t){Gu(e,t),(e=e.alternate)&&Gu(e,t)}function Qu(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Hu(e,t,null!=n&&!0===n.hydrate),t=Lu(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,ii(t),e[Gr]=n.current,Or(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function Ju(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function es(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Ku(a);l.call(e)}}qu(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Qu(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var u=o;o=function(){var e=Ku(a);u.call(e)}}mu((function(){qu(t,a,e,o)}))}return Ku(a)}function ts(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ju(t))throw Error(a(200));return Yu(e,t,null,n)}$l=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||co.current)Ia=!0;else{if(0==(n&r)){switch(Ia=!1,t.tag){case 3:Ua(t),Bi();break;case 5:Mi(t);break;case 1:ho(t.type)&&go(t);break;case 4:_i(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;lo(Ko,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?qa(e,t,n):(lo(ji,1&ji.current),null!==(t=Ja(e,t,n))?t.sibling:null);lo(ji,1&ji.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Qa(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),lo(ji,ji.current),r)break;return null;case 23:case 24:return t.lanes=0,La(e,t,n)}return Ja(e,t,n)}Ia=0!=(16384&e.flags)}else Ia=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=po(t,so.current),ni(t,n),o=ra(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,ho(r)){var i=!0;go(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ii(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&pi(t,r,l,e),o.updater=hi,t.stateNode=o,o._reactInternals=t,gi(t,r,e,n),t=$a(null,t,r,!0,i,n)}else t.tag=0,ja(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(i=o._init)(o._payload),t.type=o,i=t.tag=function(e){if("function"==typeof e)return Fu(e)?1:0;if(null!=e){if((e=e.$$typeof)===T)return 11;if(e===M)return 14}return 2}(o),e=qo(o,e),i){case 0:t=Da(null,t,o,e,n);break e;case 1:t=Wa(null,t,o,e,n);break e;case 11:t=za(null,t,o,e,n);break e;case 14:t=Aa(null,t,o,qo(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Da(e,t,r,o=t.elementType===r?o:qo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Wa(e,t,r,o=t.elementType===r?o:qo(r,o),n);case 3:if(Ua(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ai(e,t),ci(t,r,null,n),(r=t.memoizedState.element)===o)Bi(),t=Ja(e,t,n);else{if((i=(o=t.stateNode).hydrate)&&(Zi=Br(t.stateNode.containerInfo.firstChild),Ai=t,i=Li=!0),i){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(i=e[o])._workInProgressVersionPrimary=e[o+1],Vi.push(i);for(n=Ei(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else ja(e,t,r,n),Bi();t=t.child}return t;case 5:return Mi(t),null===e&&Wi(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,Dr(r,o)?l=null:null!==i&&Dr(r,i)&&(t.flags|=16),Fa(e,t),ja(e,t,l,n),t.child;case 6:return null===e&&Wi(t),null;case 13:return qa(e,t,n);case 4:return _i(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Si(t,null,r,n):ja(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,za(e,t,r,o=t.elementType===r?o:qo(r,o),n);case 7:return ja(e,t,t.pendingProps,n),t.child;case 8:case 12:return ja(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,i=o.value;var u=t.type._context;if(lo(Ko,u._currentValue),u._currentValue=i,null!==l)if(u=l.value,0==(i=ar(u,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,i):1073741823))){if(l.children===o.children&&!co.current){t=Ja(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.dependencies;if(null!==s){l=u.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&i)){1===u.tag&&((c=li(-1,n&-n)).tag=2,ui(u,c)),u.lanes|=n,null!==(c=u.alternate)&&(c.lanes|=n),ti(u.return,n),s.lanes|=n;break}c=c.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}ja(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ni(t,n),r=r(o=ri(o,i.unstable_observedBits)),t.flags|=1,ja(e,t,r,n),t.child;case 14:return i=qo(o=t.type,t.pendingProps),Aa(e,t,o,i=qo(o.type,i),r,n);case 15:return Za(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:qo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,ho(r)?(e=!0,go(t)):e=!1,ni(t,n),vi(t,r,o),gi(t,r,o,n),$a(null,t,r,!0,e,n);case 19:return Qa(e,t,n);case 23:case 24:return La(e,t,n)}throw Error(a(156,t.tag))},Qu.prototype.render=function(e){qu(e,this._internalRoot,null,null)},Qu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;qu(null,e,null,(function(){t[Gr]=null}))},et=function(e){13===e.tag&&(uu(e,4,au()),Xu(e,4))},tt=function(e){13===e.tag&&(uu(e,67108864,au()),Xu(e,67108864))},nt=function(e){if(13===e.tag){var t=au(),n=lu(e);uu(e,n,t),Xu(e,n)}},rt=function(e,t){return t()},Pe=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=to(r);if(!o)throw Error(a(90));X(r),ne(r,o)}}}break;case"textarea":se(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},Me=hu,Ie=function(e,t,n,r,o){var i=Pl;Pl|=4;try{return Uo(98,e.bind(null,t,n,r,o))}finally{0===(Pl=i)&&(Wl(),Vo())}},je=function(){0==(49&Pl)&&(function(){if(null!==Ql){var e=Ql;Ql=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,cu(e,Do())}))}Vo()}(),Tu())},ze=function(e,t){var n=Pl;Pl|=2;try{return e(t)}finally{0===(Pl=n)&&(Wl(),Vo())}};var ns={Events:[Jr,eo,to,_e,Ne,Tu,{current:!1}]},rs={findFiberByHostInstance:Qr,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},os={bundleType:rs.bundleType,version:rs.version,rendererPackageName:rs.rendererPackageName,rendererConfig:rs.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Qe(e))?null:e.stateNode},findFiberByHostInstance:rs.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var is=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!is.isDisabled&&is.supportsFiber)try{xo=is.inject(os),wo=is}catch(me){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ns,t.createPortal=ts,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return null===(e=Qe(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Pl;if(0!=(48&n))return e(t);Pl|=1;try{if(e)return Uo(99,e.bind(null,t))}finally{Pl=n,Vo()}},t.hydrate=function(e,t,n){if(!Ju(t))throw Error(a(200));return es(null,e,t,!0,n)},t.render=function(e,t,n){if(!Ju(t))throw Error(a(200));return es(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Ju(e))throw Error(a(40));return!!e._reactRootContainer&&(mu((function(){es(null,null,e,!1,(function(){e._reactRootContainer=null,e[Gr]=null}))})),!0)},t.unstable_batchedUpdates=hu,t.unstable_createPortal=function(e,t){return ts(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Ju(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return es(e,t,n,!1,r)},t.version="17.0.2"},3935:function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},9921:function(e,t){"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,v=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,x=n?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case i:case l:case a:case p:return e;default:switch(e=e&&e.$$typeof){case s:case d:case v:case m:case u:return e;default:return t}}case o:return t}}}function k(e){return w(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=s,t.ContextProvider=u,t.Element=r,t.ForwardRef=d,t.Fragment=i,t.Lazy=v,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=a,t.Suspense=p,t.isAsyncMode=function(e){return k(e)||w(e)===c},t.isConcurrentMode=k,t.isContextConsumer=function(e){return w(e)===s},t.isContextProvider=function(e){return w(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return w(e)===d},t.isFragment=function(e){return w(e)===i},t.isLazy=function(e){return w(e)===v},t.isMemo=function(e){return w(e)===m},t.isPortal=function(e){return w(e)===o},t.isProfiler=function(e){return w(e)===l},t.isStrictMode=function(e){return w(e)===a},t.isSuspense=function(e){return w(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===l||e===a||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===u||e.$$typeof===s||e.$$typeof===d||e.$$typeof===g||e.$$typeof===b||e.$$typeof===x||e.$$typeof===y)},t.typeOf=w},9864:function(e,t,n){"use strict";e.exports=n(9921)},4959:function(e,t){var n=Object.create,r=Object.defineProperty,o=Object.getPrototypeOf,i=Object.prototype.hasOwnProperty,a=Object.getOwnPropertyNames,l=Object.getOwnPropertyDescriptor,u=e=>r(e,"__esModule",{value:!0}),s=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),c=(e,t)=>{for(var n in t)r(e,n,{get:t[n],enumerable:!0})},f=e=>((e,t,n)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let o of a(t))!i.call(e,o)&&"default"!==o&&r(e,o,{get:()=>t[o],enumerable:!(n=l(t,o))||n.enumerable});return e})(u(r(null!=e?n(o(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e),d=s((e=>{"use strict";!function(){var t="function"==typeof Symbol&&Symbol.for,n=t?Symbol.for("react.element"):60103,r=t?Symbol.for("react.portal"):60106,o=t?Symbol.for("react.fragment"):60107,i=t?Symbol.for("react.strict_mode"):60108,a=t?Symbol.for("react.profiler"):60114,l=t?Symbol.for("react.provider"):60109,u=t?Symbol.for("react.context"):60110,s=t?Symbol.for("react.async_mode"):60111,c=t?Symbol.for("react.concurrent_mode"):60111,f=t?Symbol.for("react.forward_ref"):60112,d=t?Symbol.for("react.suspense"):60113,p=t?Symbol.for("react.suspense_list"):60120,h=t?Symbol.for("react.memo"):60115,m=t?Symbol.for("react.lazy"):60116,v=t?Symbol.for("react.block"):60121,y=t?Symbol.for("react.fundamental"):60117,g=t?Symbol.for("react.responder"):60118,b=t?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:var p=e.type;switch(p){case s:case c:case o:case a:case i:case d:return p;default:var v=p&&p.$$typeof;switch(v){case u:case f:case m:case h:case l:return v;default:return t}}case r:return t}}}var w=s,k=c,S=u,E=l,C=n,P=f,R=o,O=m,T=h,_=r,N=a,M=i,I=d,j=!1;function z(e){return x(e)===c}e.AsyncMode=w,e.ConcurrentMode=k,e.ContextConsumer=S,e.ContextProvider=E,e.Element=C,e.ForwardRef=P,e.Fragment=R,e.Lazy=O,e.Memo=T,e.Portal=_,e.Profiler=N,e.StrictMode=M,e.Suspense=I,e.isAsyncMode=function(e){return j||(j=!0,console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.")),z(e)||x(e)===s},e.isConcurrentMode=z,e.isContextConsumer=function(e){return x(e)===u},e.isContextProvider=function(e){return x(e)===l},e.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===n},e.isForwardRef=function(e){return x(e)===f},e.isFragment=function(e){return x(e)===o},e.isLazy=function(e){return x(e)===m},e.isMemo=function(e){return x(e)===h},e.isPortal=function(e){return x(e)===r},e.isProfiler=function(e){return x(e)===a},e.isStrictMode=function(e){return x(e)===i},e.isSuspense=function(e){return x(e)===d},e.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===c||e===a||e===i||e===d||e===p||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===h||e.$$typeof===l||e.$$typeof===u||e.$$typeof===f||e.$$typeof===y||e.$$typeof===g||e.$$typeof===b||e.$$typeof===v)},e.typeOf=x}()})),p=s(((e,t)=>{"use strict";t.exports=d()})),h=s(((e,t)=>{"use strict";var n=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}t.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var a,l,u=i(e),s=1;s<arguments.length;s++){for(var c in a=Object(arguments[s]))r.call(a,c)&&(u[c]=a[c]);if(n){l=n(a);for(var f=0;f<l.length;f++)o.call(a,l[f])&&(u[l[f]]=a[l[f]])}}return u}})),m=s(((e,t)=>{"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"})),v=s(((e,t)=>{"use strict";var n,r,o,i;function a(e,t,a,l,u){for(var s in e)if(i(e,s)){var c;try{if("function"!=typeof e[s]){var f=Error((l||"React class")+": "+a+" type `"+s+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof e[s]+"`.");throw f.name="Invariant Violation",f}c=e[s](t,s,l,a,null,r)}catch(e){c=e}if(c&&!(c instanceof Error)&&n((l||"React class")+": type specification of "+a+" `"+s+"` is invalid; the type checker function must return `null` or an `Error` but returned a "+typeof c+". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."),c instanceof Error&&!(c.message in o)){o[c.message]=!0;var d=u?u():"";n("Failed "+a+" type: "+c.message+(d??""))}}}r=m(),o={},i=Function.call.bind(Object.prototype.hasOwnProperty),n=function(e){var t="Warning: "+e;"undefined"!=typeof console&&console.error(t);try{throw new Error(t)}catch(e){}},a.resetWarningCache=function(){o={}},t.exports=a})),y=s(((e,t)=>{"use strict";var n,r=p(),o=h(),i=m(),a=v(),l=Function.call.bind(Object.prototype.hasOwnProperty);function u(){return null}n=function(e){var t="Warning: "+e;"undefined"!=typeof console&&console.error(t);try{throw new Error(t)}catch(e){}},t.exports=function(e,t){var s="function"==typeof Symbol&&Symbol.iterator,c="<<anonymous>>",f={array:m("array"),bool:m("boolean"),func:m("function"),number:m("number"),object:m("object"),string:m("string"),symbol:m("symbol"),any:h(u),arrayOf:function(e){return h((function(t,n,r,o,a){if("function"!=typeof e)return new p("Property `"+a+"` of component `"+r+"` has invalid PropType notation inside arrayOf.");var l=t[n];if(!Array.isArray(l))return new p("Invalid "+o+" `"+a+"` of type `"+y(l)+"` supplied to `"+r+"`, expected an array.");for(var u=0;u<l.length;u++){var s=e(l,u,r,o,a+"["+u+"]",i);if(s instanceof Error)return s}return null}))},element:h((function(t,n,r,o,i){var a=t[n];return e(a)?null:new p("Invalid "+o+" `"+i+"` of type `"+y(a)+"` supplied to `"+r+"`, expected a single ReactElement.")})),elementType:h((function(e,t,n,o,i){var a=e[t];return r.isValidElementType(a)?null:new p("Invalid "+o+" `"+i+"` of type `"+y(a)+"` supplied to `"+n+"`, expected a single ReactElement type.")})),instanceOf:function(e){return h((function(t,n,r,o,i){if(!(t[n]instanceof e)){var a=e.name||c;return new p("Invalid "+o+" `"+i+"` of type `"+function(e){return e.constructor&&e.constructor.name?e.constructor.name:c}(t[n])+"` supplied to `"+r+"`, expected instance of `"+a+"`.")}return null}))},node:h((function(e,t,n,r,o){return v(e[t])?null:new p("Invalid "+r+" `"+o+"` supplied to `"+n+"`, expected a ReactNode.")})),objectOf:function(e){return h((function(t,n,r,o,a){if("function"!=typeof e)return new p("Property `"+a+"` of component `"+r+"` has invalid PropType notation inside objectOf.");var u=t[n],s=y(u);if("object"!==s)return new p("Invalid "+o+" `"+a+"` of type `"+s+"` supplied to `"+r+"`, expected an object.");for(var c in u)if(l(u,c)){var f=e(u,c,r,o,a+"."+c,i);if(f instanceof Error)return f}return null}))},oneOf:function(e){if(!Array.isArray(e))return n(arguments.length>1?"Invalid arguments supplied to oneOf, expected an array, got "+arguments.length+" arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).":"Invalid argument supplied to oneOf, expected an array."),u;function t(t,n,r,o,i){for(var a=t[n],l=0;l<e.length;l++)if(d(a,e[l]))return null;var u=JSON.stringify(e,(function(e,t){return"symbol"===g(t)?String(t):t}));return new p("Invalid "+o+" `"+i+"` of value `"+String(a)+"` supplied to `"+r+"`, expected one of "+u+".")}return h(t)},oneOfType:function(e){if(!Array.isArray(e))return n("Invalid argument supplied to oneOfType, expected an instance of array."),u;for(var t=0;t<e.length;t++){var r=e[t];if("function"!=typeof r)return n("Invalid argument supplied to oneOfType. Expected an array of check functions, but received "+b(r)+" at index "+t+"."),u}return h((function(t,n,r,o,a){for(var l=0;l<e.length;l++)if(null==(0,e[l])(t,n,r,o,a,i))return null;return new p("Invalid "+o+" `"+a+"` supplied to `"+r+"`.")}))},shape:function(e){return h((function(t,n,r,o,a){var l=t[n],u=y(l);if("object"!==u)return new p("Invalid "+o+" `"+a+"` of type `"+u+"` supplied to `"+r+"`, expected `object`.");for(var s in e){var c=e[s];if(c){var f=c(l,s,r,o,a+"."+s,i);if(f)return f}}return null}))},exact:function(e){return h((function(t,n,r,a,l){var u=t[n],s=y(u);if("object"!==s)return new p("Invalid "+a+" `"+l+"` of type `"+s+"` supplied to `"+r+"`, expected `object`.");var c=o({},t[n],e);for(var f in c){var d=e[f];if(!d)return new p("Invalid "+a+" `"+l+"` key `"+f+"` supplied to `"+r+"`.\nBad object: "+JSON.stringify(t[n],null,"  ")+"\nValid keys: "+JSON.stringify(Object.keys(e),null,"  "));var h=d(u,f,r,a,l+"."+f,i);if(h)return h}return null}))}};function d(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function p(e){this.message=e,this.stack=""}function h(e){var r={},o=0;function a(a,l,u,s,f,d,h){if(s=s||c,d=d||u,h!==i){if(t){var m=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");throw m.name="Invariant Violation",m}if("undefined"!=typeof console){var v=s+":"+u;!r[v]&&o<3&&(n("You are manually calling a React.PropTypes validation function for the `"+d+"` prop on `"+s+"`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."),r[v]=!0,o++)}}return null==l[u]?a?null===l[u]?new p("The "+f+" `"+d+"` is marked as required in `"+s+"`, but its value is `null`."):new p("The "+f+" `"+d+"` is marked as required in `"+s+"`, but its value is `undefined`."):null:e(l,u,s,f,d)}var l=a.bind(null,!1);return l.isRequired=a.bind(null,!0),l}function m(e){return h((function(t,n,r,o,i,a){var l=t[n];return y(l)!==e?new p("Invalid "+o+" `"+i+"` of type `"+g(l)+"` supplied to `"+r+"`, expected `"+e+"`."):null}))}function v(t){switch(typeof t){case"number":case"string":case"undefined":return!0;case"boolean":return!t;case"object":if(Array.isArray(t))return t.every(v);if(null===t||e(t))return!0;var n=function(e){var t=e&&(s&&e[s]||e["@@iterator"]);if("function"==typeof t)return t}(t);if(!n)return!1;var r,o=n.call(t);if(n!==t.entries){for(;!(r=o.next()).done;)if(!v(r.value))return!1}else for(;!(r=o.next()).done;){var i=r.value;if(i&&!v(i[1]))return!1}return!0;default:return!1}}function y(e){var t=typeof e;return Array.isArray(e)?"array":e instanceof RegExp?"object":function(e,t){return"symbol"===e||!!t&&("Symbol"===t["@@toStringTag"]||"function"==typeof Symbol&&t instanceof Symbol)}(t,e)?"symbol":t}function g(e){if(null==e)return""+e;var t=y(e);if("object"===t){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return t}function b(e){var t=g(e);switch(t){case"array":case"object":return"an "+t;case"boolean":case"date":case"regexp":return"a "+t;default:return t}}return p.prototype=Error.prototype,f.checkPropTypes=a,f.resetWarningCache=a.resetWarningCache,f.PropTypes=f,f}})),g=s(((e,t)=>{var n;n=p(),t.exports=y()(n.isElement,!0)})),b=s((e=>{"use strict";!function(){var t=h(),n=60103,r=60106;e.Fragment=60107,e.StrictMode=60108,e.Profiler=60114;var o=60109,i=60110,a=60112;e.Suspense=60113;var l=60120,u=60115,s=60116,c=60121,f=60122,d=60117,p=60129,m=60131;if("function"==typeof Symbol&&Symbol.for){var v=Symbol.for;n=v("react.element"),r=v("react.portal"),e.Fragment=v("react.fragment"),e.StrictMode=v("react.strict_mode"),e.Profiler=v("react.profiler"),o=v("react.provider"),i=v("react.context"),a=v("react.forward_ref"),e.Suspense=v("react.suspense"),l=v("react.suspense_list"),u=v("react.memo"),s=v("react.lazy"),c=v("react.block"),f=v("react.server.block"),d=v("react.fundamental"),v("react.scope"),v("react.opaque.id"),p=v("react.debug_trace_mode"),v("react.offscreen"),m=v("react.legacy_hidden")}var y="function"==typeof Symbol&&Symbol.iterator;function g(e){if(null===e||"object"!=typeof e)return null;var t=y&&e[y]||e["@@iterator"];return"function"==typeof t?t:null}var b={current:null},x={current:null},w={},k=null;function S(e){k=e}w.setExtraStackFrame=function(e){k=e},w.getCurrentStack=null,w.getStackAddendum=function(){var e="";k&&(e+=k);var t=w.getCurrentStack;return t&&(e+=t()||""),e};var E={ReactCurrentDispatcher:b,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:x,IsSomeRendererActing:{current:!1},assign:t};function C(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];R("warn",e,n)}function P(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];R("error",e,n)}function R(e,t,n){var r=E.ReactDebugCurrentFrame.getStackAddendum();""!==r&&(t+="%s",n=n.concat([r]));var o=n.map((function(e){return""+e}));o.unshift("Warning: "+t),Function.prototype.apply.call(console[e],console,o)}E.ReactDebugCurrentFrame=w;var O={};function T(e,t){var n=e.constructor,r=n&&(n.displayName||n.name)||"ReactClass",o=r+"."+t;O[o]||(P("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",t,r),O[o]=!0)}var _={isMounted:function(e){return!1},enqueueForceUpdate:function(e,t,n){T(e,"forceUpdate")},enqueueReplaceState:function(e,t,n,r){T(e,"replaceState")},enqueueSetState:function(e,t,n,r){T(e,"setState")}},N={};function M(e,t,n){this.props=e,this.context=t,this.refs=N,this.updater=n||_}Object.freeze(N),M.prototype.isReactComponent={},M.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},M.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};var I={isMounted:["isMounted","Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],replaceState:["replaceState","Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]},j=function(e,t){Object.defineProperty(M.prototype,e,{get:function(){C("%s(...) is deprecated in plain JavaScript React classes. %s",t[0],t[1])}})};for(var z in I)I.hasOwnProperty(z)&&j(z,I[z]);function A(){}function Z(e,t,n){this.props=e,this.context=t,this.refs=N,this.updater=n||_}A.prototype=M.prototype;var L=Z.prototype=new A;function F(e){return e.displayName||"Context"}function D(t){if(null==t)return null;if("number"==typeof t.tag&&P("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue."),"function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t;switch(t){case e.Fragment:return"Fragment";case r:return"Portal";case e.Profiler:return"Profiler";case e.StrictMode:return"StrictMode";case e.Suspense:return"Suspense";case l:return"SuspenseList"}if("object"==typeof t)switch(t.$$typeof){case i:return F(t)+".Consumer";case o:return F(t._context)+".Provider";case a:return function(e,t,n){var r=t.displayName||t.name||"";return e.displayName||(""!==r?n+"("+r+")":n)}(t,t.render,"ForwardRef");case u:return D(t.type);case c:return D(t._render);case s:var n=t,f=n._payload,d=n._init;try{return D(d(f))}catch(e){return null}}return null}L.constructor=Z,t(L,M.prototype),L.isPureReactComponent=!0;var W,$,U,B=Object.prototype.hasOwnProperty,V={key:!0,ref:!0,__self:!0,__source:!0};function H(e){if(B.call(e,"ref")){var t=Object.getOwnPropertyDescriptor(e,"ref").get;if(t&&t.isReactWarning)return!1}return void 0!==e.ref}function Y(e){if(B.call(e,"key")){var t=Object.getOwnPropertyDescriptor(e,"key").get;if(t&&t.isReactWarning)return!1}return void 0!==e.key}function q(e,t){var n=function(){W||(W=!0,P("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",t))};n.isReactWarning=!0,Object.defineProperty(e,"key",{get:n,configurable:!0})}function K(e,t){var n=function(){$||($=!0,P("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",t))};n.isReactWarning=!0,Object.defineProperty(e,"ref",{get:n,configurable:!0})}function G(e){if("string"==typeof e.ref&&x.current&&e.__self&&x.current.stateNode!==e.__self){var t=D(x.current.type);U[t]||(P('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',t,e.ref),U[t]=!0)}}U={};var X=function(e,t,r,o,i,a,l){var u={$$typeof:n,type:e,key:t,ref:r,props:l,_owner:a,_store:{}};return Object.defineProperty(u._store,"validated",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(u,"_self",{configurable:!1,enumerable:!1,writable:!1,value:o}),Object.defineProperty(u,"_source",{configurable:!1,enumerable:!1,writable:!1,value:i}),Object.freeze&&(Object.freeze(u.props),Object.freeze(u)),u};function Q(e,t,n){var r,o={},i=null,a=null,l=null,u=null;if(null!=t)for(r in H(t)&&(a=t.ref,G(t)),Y(t)&&(i=""+t.key),l=void 0===t.__self?null:t.__self,u=void 0===t.__source?null:t.__source,t)B.call(t,r)&&!V.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(1===s)o.children=n;else if(s>1){for(var c=Array(s),f=0;f<s;f++)c[f]=arguments[f+2];Object.freeze&&Object.freeze(c),o.children=c}if(e&&e.defaultProps){var d=e.defaultProps;for(r in d)void 0===o[r]&&(o[r]=d[r])}if(i||a){var p="function"==typeof e?e.displayName||e.name||"Unknown":e;i&&q(o,p),a&&K(o,p)}return X(e,i,a,l,u,x.current,o)}function J(e,n,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o,i,a=t({},e.props),l=e.key,u=e.ref,s=e._self,c=e._source,f=e._owner;if(null!=n)for(o in H(n)&&(u=n.ref,f=x.current),Y(n)&&(l=""+n.key),e.type&&e.type.defaultProps&&(i=e.type.defaultProps),n)B.call(n,o)&&!V.hasOwnProperty(o)&&(void 0===n[o]&&void 0!==i?a[o]=i[o]:a[o]=n[o]);var d=arguments.length-2;if(1===d)a.children=r;else if(d>1){for(var p=Array(d),h=0;h<d;h++)p[h]=arguments[h+2];a.children=p}return X(e.type,l,u,s,c,f,a)}function ee(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var te=!1,ne=/\/+/g;function re(e){return e.replace(ne,"$&/")}function oe(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function ie(e,t,o,i,a){var l=typeof e;("undefined"===l||"boolean"===l)&&(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u){var s=e,c=a(s),f=""===i?"."+oe(s,0):i;if(Array.isArray(c)){var d="";null!=f&&(d=re(f)+"/"),ie(c,t,d,"",(function(e){return e}))}else null!=c&&(ee(c)&&(c=function(e,t){return X(e.type,t,e.ref,e._self,e._source,e._owner,e.props)}(c,o+(!c.key||s&&s.key===c.key?"":re(""+c.key)+"/")+f)),t.push(c));return 1}var p,h=0,m=""===i?".":i+":";if(Array.isArray(e))for(var v=0;v<e.length;v++)h+=ie(p=e[v],t,o,m+oe(p,v),a);else{var y=g(e);if("function"==typeof y){var b=e;y===b.entries&&(te||C("Using Maps as children is not supported. Use an array of keyed ReactElements instead."),te=!0);for(var x,w=y.call(b),k=0;!(x=w.next()).done;)h+=ie(p=x.value,t,o,m+oe(p,k++),a)}else if("object"===l){var S=""+e;throw Error("Objects are not valid as a React child (found: "+("[object Object]"===S?"object with keys {"+Object.keys(e).join(", ")+"}":S)+"). If you meant to render a collection of children, use an array instead.")}}return h}function ae(e,t,n){if(null==e)return e;var r=[],o=0;return ie(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function le(e){if(-1===e._status){var t=(0,e._result)(),n=e;n._status=0,n._result=t,t.then((function(t){if(0===e._status){var n=t.default;void 0===n&&P("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))",t);var r=e;r._status=1,r._result=n}}),(function(t){if(0===e._status){var n=e;n._status=2,n._result=t}}))}if(1===e._status)return e._result;throw e._result}function ue(t){return!("string"!=typeof t&&"function"!=typeof t&&t!==e.Fragment&&t!==e.Profiler&&t!==p&&t!==e.StrictMode&&t!==e.Suspense&&t!==l&&t!==m&&("object"!=typeof t||null===t||t.$$typeof!==s&&t.$$typeof!==u&&t.$$typeof!==o&&t.$$typeof!==i&&t.$$typeof!==a&&t.$$typeof!==d&&t.$$typeof!==c&&t[0]!==f))}function se(){var e=b.current;if(null===e)throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");return e}var ce,fe,de,pe,he,me,ve,ye=0;function ge(){}ge.__reactDisabledLog=!0;var be,xe=E.ReactCurrentDispatcher;function we(e,t,n){if(void 0===be)try{throw Error()}catch(e){var r=e.stack.trim().match(/\n( *(at )?)/);be=r&&r[1]||""}return"\n"+be+e}var ke,Se=!1,Ee="function"==typeof WeakMap?WeakMap:Map;function Ce(e,n){if(!e||Se)return"";var r,o=ke.get(e);if(void 0!==o)return o;Se=!0;var i,a=Error.prepareStackTrace;Error.prepareStackTrace=void 0,i=xe.current,xe.current=null,function(){if(0===ye){ce=console.log,fe=console.info,de=console.warn,pe=console.error,he=console.group,me=console.groupCollapsed,ve=console.groupEnd;var e={configurable:!0,enumerable:!0,value:ge,writable:!0};Object.defineProperties(console,{info:e,log:e,warn:e,error:e,group:e,groupCollapsed:e,groupEnd:e})}ye++}();try{if(n){var l=function(){throw Error()};if(Object.defineProperty(l.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(l,[])}catch(e){r=e}Reflect.construct(e,[],l)}else{try{l.call()}catch(e){r=e}e.call(l.prototype)}}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var u=t.stack.split("\n"),s=r.stack.split("\n"),c=u.length-1,f=s.length-1;c>=1&&f>=0&&u[c]!==s[f];)f--;for(;c>=1&&f>=0;c--,f--)if(u[c]!==s[f]){if(1!==c||1!==f)do{if(c--,--f<0||u[c]!==s[f]){var d="\n"+u[c].replace(" at new "," at ");return"function"==typeof e&&ke.set(e,d),d}}while(c>=1&&f>=0);break}}}finally{Se=!1,xe.current=i,function(){if(0==--ye){var e={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:t({},e,{value:ce}),info:t({},e,{value:fe}),warn:t({},e,{value:de}),error:t({},e,{value:pe}),group:t({},e,{value:he}),groupCollapsed:t({},e,{value:me}),groupEnd:t({},e,{value:ve})})}ye<0&&P("disabledDepth fell below zero. This is a bug in React. Please file an issue.")}(),Error.prepareStackTrace=a}var p=e?e.displayName||e.name:"",h=p?we(p):"";return"function"==typeof e&&ke.set(e,h),h}function Pe(e,t,n){return Ce(e,!1)}function Re(t,n,r){if(null==t)return"";if("function"==typeof t)return Ce(t,function(e){var t=e.prototype;return!(!t||!t.isReactComponent)}(t));if("string"==typeof t)return we(t);switch(t){case e.Suspense:return we("Suspense");case l:return we("SuspenseList")}if("object"==typeof t)switch(t.$$typeof){case a:return Pe(t.render);case u:return Re(t.type,n,r);case c:return Pe(t._render);case s:var o=t,i=o._payload,f=o._init;try{return Re(f(i),n,r)}catch(e){}}return""}ke=new Ee;var Oe,Te={},_e=E.ReactDebugCurrentFrame;function Ne(e){if(e){var t=e._owner,n=Re(e.type,e._source,t?t.type:null);_e.setExtraStackFrame(n)}else _e.setExtraStackFrame(null)}function Me(e){if(e){var t=e._owner;S(Re(e.type,e._source,t?t.type:null))}else S(null)}function Ie(){if(x.current){var e=D(x.current.type);if(e)return"\n\nCheck the render method of `"+e+"`."}return""}function je(e){return null!=e?function(e){return void 0!==e?"\n\nCheck your code at "+e.fileName.replace(/^.*[\\\/]/,"")+":"+e.lineNumber+".":""}(e.__source):""}Oe=!1;var ze={};function Ae(e,t){if(e._store&&!e._store.validated&&null==e.key){e._store.validated=!0;var n=function(e){var t=Ie();if(!t){var n="string"==typeof e?e:e.displayName||e.name;n&&(t="\n\nCheck the top-level render call using <"+n+">.")}return t}(t);if(!ze[n]){ze[n]=!0;var r="";e&&e._owner&&e._owner!==x.current&&(r=" It was passed a child from "+D(e._owner.type)+"."),Me(e),P('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',n,r),Me(null)}}}function Ze(e,t){if("object"==typeof e)if(Array.isArray(e))for(var n=0;n<e.length;n++){var r=e[n];ee(r)&&Ae(r,t)}else if(ee(e))e._store&&(e._store.validated=!0);else if(e){var o=g(e);if("function"==typeof o&&o!==e.entries)for(var i,a=o.call(e);!(i=a.next()).done;)ee(i.value)&&Ae(i.value,t)}}function Le(e){var t,n=e.type;if(null!=n&&"string"!=typeof n){if("function"==typeof n)t=n.propTypes;else{if("object"!=typeof n||n.$$typeof!==a&&n.$$typeof!==u)return;t=n.propTypes}if(t){var r=D(n);!function(e,t,n,r,o){var i=Function.call.bind(Object.prototype.hasOwnProperty);for(var a in e)if(i(e,a)){var l=void 0;try{if("function"!=typeof e[a]){var u=Error((r||"React class")+": "+n+" type `"+a+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof e[a]+"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");throw u.name="Invariant Violation",u}l=e[a](t,a,r,n,null,"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED")}catch(e){l=e}l&&!(l instanceof Error)&&(Ne(o),P("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",r||"React class",n,a,typeof l),Ne(null)),l instanceof Error&&!(l.message in Te)&&(Te[l.message]=!0,Ne(o),P("Failed %s type: %s",n,l.message),Ne(null))}}(t,e.props,"prop",r,e)}else void 0===n.PropTypes||Oe||(Oe=!0,P("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?",D(n)||"Unknown"));"function"==typeof n.getDefaultProps&&!n.getDefaultProps.isReactClassApproved&&P("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.")}}function Fe(e){for(var t=Object.keys(e.props),n=0;n<t.length;n++){var r=t[n];if("children"!==r&&"key"!==r){Me(e),P("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",r),Me(null);break}}null!==e.ref&&(Me(e),P("Invalid attribute `ref` supplied to `React.Fragment`."),Me(null))}function De(t,r,o){var i=ue(t);if(!i){var a="";(void 0===t||"object"==typeof t&&null!==t&&0===Object.keys(t).length)&&(a+=" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");var l,u=je(r);a+=u||Ie(),null===t?l="null":Array.isArray(t)?l="array":void 0!==t&&t.$$typeof===n?(l="<"+(D(t.type)||"Unknown")+" />",a=" Did you accidentally export a JSX literal instead of a component?"):l=typeof t,P("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",l,a)}var s=Q.apply(this,arguments);if(null==s)return s;if(i)for(var c=2;c<arguments.length;c++)Ze(arguments[c],t);return t===e.Fragment?Fe(s):Le(s),s}var We=!1;try{var $e=Object.freeze({});new Map([[$e,null]]),new Set([$e])}catch(e){}var Ue=De,Be={map:ae,forEach:function(e,t,n){ae(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return ae(e,(function(){t++})),t},toArray:function(e){return ae(e,(function(e){return e}))||[]},only:function(e){if(!ee(e))throw Error("React.Children.only expected to receive a single React element child.");return e}};e.Children=Be,e.Component=M,e.PureComponent=Z,e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=E,e.cloneElement=function(e,t,n){for(var r=J.apply(this,arguments),o=2;o<arguments.length;o++)Ze(arguments[o],r.type);return Le(r),r},e.createContext=function(e,t){void 0===t?t=null:null!==t&&"function"!=typeof t&&P("createContext: Expected the optional second argument to be a function. Instead received: %s",t);var n={$$typeof:i,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null};n.Provider={$$typeof:o,_context:n};var r=!1,a=!1,l=!1,u={$$typeof:i,_context:n,_calculateChangedBits:n._calculateChangedBits};return Object.defineProperties(u,{Provider:{get:function(){return a||(a=!0,P("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?")),n.Provider},set:function(e){n.Provider=e}},_currentValue:{get:function(){return n._currentValue},set:function(e){n._currentValue=e}},_currentValue2:{get:function(){return n._currentValue2},set:function(e){n._currentValue2=e}},_threadCount:{get:function(){return n._threadCount},set:function(e){n._threadCount=e}},Consumer:{get:function(){return r||(r=!0,P("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?")),n.Consumer}},displayName:{get:function(){return n.displayName},set:function(e){l||(C("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.",e),l=!0)}}}),n.Consumer=u,n._currentRenderer=null,n._currentRenderer2=null,n},e.createElement=Ue,e.createFactory=function(e){var t=De.bind(null,e);return t.type=e,We||(We=!0,C("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.")),Object.defineProperty(t,"type",{enumerable:!1,get:function(){return C("Factory.type is deprecated. Access the class directly before passing it to createFactory."),Object.defineProperty(this,"type",{value:e}),e}}),t},e.createRef=function(){var e={current:null};return Object.seal(e),e},e.forwardRef=function(e){null!=e&&e.$$typeof===u?P("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))."):"function"!=typeof e?P("forwardRef requires a render function but was given %s.",null===e?"null":typeof e):0!==e.length&&2!==e.length&&P("forwardRef render functions accept exactly two parameters: props and ref. %s",1===e.length?"Did you forget to use the ref parameter?":"Any additional parameter will be undefined."),null!=e&&(null!=e.defaultProps||null!=e.propTypes)&&P("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");var t,n={$$typeof:a,render:e};return Object.defineProperty(n,"displayName",{enumerable:!1,configurable:!0,get:function(){return t},set:function(n){t=n,null==e.displayName&&(e.displayName=n)}}),n},e.isValidElement=ee,e.lazy=function(e){var t,n,r={$$typeof:s,_payload:{_status:-1,_result:e},_init:le};return Object.defineProperties(r,{defaultProps:{configurable:!0,get:function(){return t},set:function(e){P("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."),t=e,Object.defineProperty(r,"defaultProps",{enumerable:!0})}},propTypes:{configurable:!0,get:function(){return n},set:function(e){P("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."),n=e,Object.defineProperty(r,"propTypes",{enumerable:!0})}}}),r},e.memo=function(e,t){ue(e)||P("memo: The first argument must be a component. Instead received: %s",null===e?"null":typeof e);var n,r={$$typeof:u,type:e,compare:void 0===t?null:t};return Object.defineProperty(r,"displayName",{enumerable:!1,configurable:!0,get:function(){return n},set:function(t){n=t,null==e.displayName&&(e.displayName=t)}}),r},e.useCallback=function(e,t){return se().useCallback(e,t)},e.useContext=function(e,t){var n=se();if(void 0!==t&&P("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s",t,"number"==typeof t&&Array.isArray(arguments[2])?"\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks":""),void 0!==e._context){var r=e._context;r.Consumer===e?P("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?"):r.Provider===e&&P("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?")}return n.useContext(e,t)},e.useDebugValue=function(e,t){return se().useDebugValue(e,t)},e.useEffect=function(e,t){return se().useEffect(e,t)},e.useImperativeHandle=function(e,t,n){return se().useImperativeHandle(e,t,n)},e.useLayoutEffect=function(e,t){return se().useLayoutEffect(e,t)},e.useMemo=function(e,t){return se().useMemo(e,t)},e.useReducer=function(e,t,n){return se().useReducer(e,t,n)},e.useRef=function(e){return se().useRef(e)},e.useState=function(e){return se().useState(e)},e.version="17.0.2"}()})),x=s(((e,t)=>{"use strict";t.exports=b()}));u(t),c(t,{clsx:()=>w,device:()=>E});var w={};c(w,{boolSwitch:()=>S,join:()=>k});var k=(...e)=>e.filter((e=>""!==e&&void 0!==e)).join(" "),S=(e,t,n)=>e?t:n,E={};function C(){return(C=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function P(e){return(P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function R(e){return e&&"object"===P(e)&&e.constructor===Object}function O(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{clone:!0},r=n.clone?C({},e):e;return R(e)&&R(t)&&Object.keys(t).forEach((function(o){"__proto__"!==o&&(R(t[o])&&o in e?r[o]=O(e[o],t[o],n):r[o]=t[o])})),r}function T(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return(e<t||e>n)&&console.error("Material-UI: The value provided ".concat(e," is out of range [").concat(t,", ").concat(n,"].")),Math.min(Math.max(t,e),n)}function N(e){if(e.type)return e;if("#"===e.charAt(0))return N(function(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length>=6?2:1,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map((function(e){return e+e}))),n?"rgb".concat(4===n.length?"a":"","(").concat(n.map((function(e,t){return t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3})).join(", "),")"):""}(e));var t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla"].indexOf(n))throw new Error("Material-UI: Unsupported `".concat(e,"` color.\nWe support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()."));var r=e.substring(t+1,e.length-1).split(",");return{type:n,values:r=r.map((function(e){return parseFloat(e)}))}}function M(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")?n=n.map((function(e,t){return t<3?parseInt(e,10):e})):-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(t,"(").concat(n.join(", "),")")}function I(e,t){var n=j(e),r=j(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}function j(e){var t="hsl"===(e=N(e)).type?N(function(e){var t=(e=N(e)).values,n=t[0],r=t[1]/100,o=t[2]/100,i=r*Math.min(o,1-o),a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:(e+n/30)%12;return o-i*Math.max(Math.min(t-3,9-t,1),-1)},l="rgb",u=[Math.round(255*a(0)),Math.round(255*a(8)),Math.round(255*a(4))];return"hsla"===e.type&&(l+="a",u.push(t[3])),M({type:l,values:u})}(e)).values:e.values;return t=t.map((function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)})),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function z(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],!(t.indexOf(n)>=0)&&(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],!(t.indexOf(n)>=0)&&(!Object.prototype.propertyIsEnumerable.call(e,n)||(o[n]=e[n]))}return o}c(E,{DeviceType:()=>De,deviceSize:()=>Be,deviceTypeByUa:()=>He,getImageWidth:()=>Ve});var A=["xs","sm","md","lg","xl"];function Z(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,r=e.unit,o=void 0===r?"px":r,i=e.step,a=void 0===i?5:i,l=z(e,["values","unit","step"]);function u(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(o,")")}function s(e,t){var r=A.indexOf(t);return r===A.length-1?u(e):"@media (min-width:".concat("number"==typeof n[e]?n[e]:e).concat(o,") and ")+"(max-width:".concat((-1!==r&&"number"==typeof n[A[r+1]]?n[A[r+1]]:t)-a/100).concat(o,")")}return C({keys:A,values:n,up:u,down:function(e){var t=A.indexOf(e)+1,r=n[A[t]];return t===A.length?u("xs"):"@media (max-width:".concat(("number"==typeof r&&t>0?r:e)-a/100).concat(o,")")},between:s,only:function(e){return s(e,e)},width:function(e){return n[e]}},l)}function L(e,t,n){var r;return C({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return C({paddingLeft:t(2),paddingRight:t(2)},n,T({},e.up("sm"),C({paddingLeft:t(3),paddingRight:t(3)},n[e.up("sm")])))},toolbar:(r={minHeight:56},T(r,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),T(r,e.up("sm"),{minHeight:64}),r)},n)}var F={black:"#000",white:"#fff"},D={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"},W="#7986cb",$="#3f51b5",U="#303f9f",B="#ff4081",V="#f50057",H="#c51162",Y="#e57373",q="#f44336",K="#d32f2f",G="#ffb74d",X="#ff9800",Q="#f57c00",J="#64b5f6",ee="#2196f3",te="#1976d2",ne="#81c784",re="#4caf50",oe="#388e3c",ie={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:F.white,default:D[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},ae={text:{primary:F.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:D[800],default:"#303030"},action:{active:F.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function le(e,t,n,r){var o=r.light||r,i=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=function(e,t){if(e=N(e),t=_(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return M(e)}(e.main,o):"dark"===t&&(e.dark=function(e,t){if(e=N(e),t=_(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return M(e)}(e.main,i)))}function ue(e){var t=e.primary,n=void 0===t?{light:W,main:$,dark:U}:t,r=e.secondary,o=void 0===r?{light:B,main:V,dark:H}:r,i=e.error,a=void 0===i?{light:Y,main:q,dark:K}:i,l=e.warning,u=void 0===l?{light:G,main:X,dark:Q}:l,s=e.info,c=void 0===s?{light:J,main:ee,dark:te}:s,f=e.success,d=void 0===f?{light:ne,main:re,dark:oe}:f,p=e.type,h=void 0===p?"light":p,m=e.contrastThreshold,v=void 0===m?3:m,y=e.tonalOffset,g=void 0===y?.2:y,b=z(e,["primary","secondary","error","warning","info","success","type","contrastThreshold","tonalOffset"]);function x(e){var t=I(e,ae.text.primary)>=v?ae.text.primary:ie.text.primary,n=I(e,t);return n<3&&console.error(["Material-UI: The contrast ratio of ".concat(n,":1 for ").concat(t," on ").concat(e),"falls below the WCAG recommended absolute minimum contrast ratio of 3:1.","https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n")),t}var w=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;if(!(e=C({},e)).main&&e[t]&&(e.main=e[t]),!e.main)throw new Error("Material-UI: The color provided to augmentColor(color) is invalid.\nThe color object needs to have a `main` property or a `".concat(t,"` property."));if("string"!=typeof e.main)throw new Error("Material-UI: The color provided to augmentColor(color) is invalid.\n`color.main` should be a string, but `".concat(JSON.stringify(e.main),'` was provided instead.\n\nDid you intend to use one of the following approaches?\n\nimport { green } from "@material-ui/core/colors";\n\nconst theme1 = createMuiTheme({ palette: {\n  primary: green,\n} });\n\nconst theme2 = createMuiTheme({ palette: {\n  primary: { main: green[500] },\n} });'));return le(e,"light",n,g),le(e,"dark",r,g),e.contrastText||(e.contrastText=x(e.main)),e},k={dark:ae,light:ie};return k[h]||console.error("Material-UI: The palette type `".concat(h,"` is not supported.")),O(C({common:F,type:h,primary:w(n),secondary:w(o,"A400","A200","A700"),error:w(a),warning:w(u),info:w(c),success:w(d),grey:D,contrastThreshold:v,getContrastText:x,augmentColor:w,tonalOffset:g},k[h]),b)}function se(e){return Math.round(1e5*e)/1e5}var ce={textTransform:"uppercase"},fe='"Roboto", "Helvetica", "Arial", sans-serif';function de(e,t){var n="function"==typeof t?t(e):t,r=n.fontFamily,o=void 0===r?fe:r,i=n.fontSize,a=void 0===i?14:i,l=n.fontWeightLight,u=void 0===l?300:l,s=n.fontWeightRegular,c=void 0===s?400:s,f=n.fontWeightMedium,d=void 0===f?500:f,p=n.fontWeightBold,h=void 0===p?700:p,m=n.htmlFontSize,v=void 0===m?16:m,y=n.allVariants,g=n.pxToRem,b=z(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"]);"number"!=typeof a&&console.error("Material-UI: `fontSize` is required to be a number."),"number"!=typeof v&&console.error("Material-UI: `htmlFontSize` is required to be a number.");var x=a/14,w=g||function(e){return"".concat(e/v*x,"rem")},k=function(e,t,n,r,i){return C({fontFamily:o,fontWeight:e,fontSize:w(t),lineHeight:n},o===fe?{letterSpacing:"".concat(se(r/t),"em")}:{},i,y)},S={h1:k(u,96,1.167,-1.5),h2:k(u,60,1.2,-.5),h3:k(c,48,1.167,0),h4:k(c,34,1.235,.25),h5:k(c,24,1.334,0),h6:k(d,20,1.6,.15),subtitle1:k(c,16,1.75,.15),subtitle2:k(d,14,1.57,.1),body1:k(c,16,1.5,.15),body2:k(c,14,1.43,.15),button:k(d,14,1.75,.4,ce),caption:k(c,12,1.66,.4),overline:k(c,12,2.66,1,ce)};return O(C({htmlFontSize:v,pxToRem:w,round:se,fontFamily:o,fontSize:a,fontWeightLight:u,fontWeightRegular:c,fontWeightMedium:d,fontWeightBold:h},S),b,{clone:!1})}function pe(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0,0,0,").concat(.2,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0,0,0,").concat(.14,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0,0,0,").concat(.12,")")].join(",")}var he=["none",pe(0,2,1,-1,0,1,1,0,0,1,3,0),pe(0,3,1,-2,0,2,2,0,0,1,5,0),pe(0,3,3,-2,0,3,4,0,0,1,8,0),pe(0,2,4,-1,0,4,5,0,0,1,10,0),pe(0,3,5,-1,0,5,8,0,0,1,14,0),pe(0,3,5,-1,0,6,10,0,0,1,18,0),pe(0,4,5,-2,0,7,10,1,0,2,16,1),pe(0,5,5,-3,0,8,10,1,0,3,14,2),pe(0,5,6,-3,0,9,12,1,0,3,16,2),pe(0,6,6,-3,0,10,14,1,0,4,18,3),pe(0,6,7,-4,0,11,15,1,0,4,20,3),pe(0,7,8,-4,0,12,17,2,0,5,22,4),pe(0,7,8,-4,0,13,19,2,0,5,24,4),pe(0,7,9,-4,0,14,21,2,0,5,26,4),pe(0,8,9,-5,0,15,22,2,0,6,28,5),pe(0,8,10,-5,0,16,24,2,0,6,30,5),pe(0,8,11,-5,0,17,26,2,0,6,32,5),pe(0,9,11,-5,0,18,28,2,0,7,34,6),pe(0,9,12,-6,0,19,29,2,0,7,36,6),pe(0,10,13,-6,0,20,31,3,0,8,38,7),pe(0,10,13,-6,0,21,33,3,0,8,40,7),pe(0,10,14,-6,0,22,35,3,0,8,42,7),pe(0,11,14,-7,0,23,36,3,0,9,44,8),pe(0,11,15,-7,0,24,38,3,0,9,46,8)],me={borderRadius:4},ve=f(g()),ye=ve.default.oneOfType([ve.default.number,ve.default.string,ve.default.object,ve.default.array]);function ge(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}f(g());var be=function(e,t){return t?O(e,t,{clone:!1}):e},xe={xs:0,sm:600,md:960,lg:1280,xl:1920},we={keys:["xs","sm","md","lg","xl"],up:function(e){return"@media (min-width:".concat(xe[e],"px)")}};var ke,Se,Ee,Ce={m:"margin",p:"padding"},Pe={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},Re={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},Oe=(ke=function(e){if(e.length>2){if(!Re[e])return[e];e=Re[e]}var t=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&null!=l.return&&l.return()}finally{if(o)throw i}}return n}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ge(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);if("Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ge(e,t)}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(e.split(""),2),n=t[0],r=t[1],o=Ce[n],i=Pe[r]||"";return Array.isArray(i)?i.map((function(e){return o+e})):[o+i]},Se={},function(e){return void 0===Se[e]&&(Se[e]=ke(e)),Se[e]}),Te=["m","mt","mr","mb","ml","mx","my","p","pt","pr","pb","pl","px","py","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY"];function _e(e){var t=e.spacing||8;return"number"==typeof t?function(e){return"number"!=typeof e&&console.error("Material-UI: Expected spacing argument to be a number, got ".concat(e,".")),t*e}:Array.isArray(t)?function(e){return e>t.length-1&&console.error(["Material-UI: The value provided (".concat(e,") overflows."),"The supported values are: ".concat(JSON.stringify(t),"."),"".concat(e," > ").concat(t.length-1,", you need to add the missing values.")].join("\n")),t[e]}:"function"==typeof t?t:(console.error(["Material-UI: The `theme.spacing` value (".concat(t,") is invalid."),"It should be a number, an array or a function."].join("\n")),function(){})}function Ne(e){var t=_e(e.theme);return Object.keys(e).map((function(n){if(-1===Te.indexOf(n))return null;var r=function(e,t){return function(n){return e.reduce((function(e,r){return e[r]=function(e,t){if("string"==typeof t||null==t)return t;var n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:"-".concat(n)}(t,n),e}),{})}}(Oe(n),t),o=e[n];return function(e,t,n){if(e.theme||console.error("Material-UI: You are calling a style function without a theme value."),Array.isArray(t)){var r=e.theme.breakpoints||we;return t.reduce((function(e,o,i){return e[r.up(r.keys[i])]=n(t[i]),e}),{})}if("object"===P(t)){var o=e.theme.breakpoints||we;return Object.keys(t).reduce((function(e,r){return e[o.up(r)]=n(t[r]),e}),{})}return n(t)}(e,o,r)})).reduce(be,{})}function Me(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8;if(e.mui)return e;var t=_e({spacing:e}),n=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return n.length<=4||console.error("Material-UI: Too many arguments provided, expected between 0 and 4, got ".concat(n.length)),0===n.length?t(1):1===n.length?t(n[0]):n.map((function(e){if("string"==typeof e)return e;var n=t(e);return"number"==typeof n?"".concat(n,"px"):n})).join(" ")};return Object.defineProperty(n,"unit",{get:function(){return Ee||console.error(["Material-UI: theme.spacing.unit usage has been deprecated.","It will be removed in v5.","You can replace `theme.spacing.unit * y` with `theme.spacing(y)`.","","You can use the `https://github.com/mui-org/material-ui/tree/master/packages/material-ui-codemod/README.md#theme-spacing-api` migration helper to make the process smoother."].join("\n")),Ee=!0,e}}),n.mui=!0,n}Ne.propTypes=Te.reduce((function(e,t){return e[t]=ye,e}),{}),Ne.filterProps=Te;var Ie={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},je={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function ze(e){return"".concat(Math.round(e),"ms")}var Ae={easing:Ie,duration:je,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,r=void 0===n?je.standard:n,o=t.easing,i=void 0===o?Ie.easeInOut:o,a=t.delay,l=void 0===a?0:a,u=z(t,["duration","easing","delay"]),s=function(e){return"string"==typeof e},c=function(e){return!isNaN(parseFloat(e))};return!s(e)&&!Array.isArray(e)&&console.error('Material-UI: Argument "props" must be a string or Array.'),!c(r)&&!s(r)&&console.error('Material-UI: Argument "duration" must be a number or a string but found '.concat(r,".")),s(i)||console.error('Material-UI: Argument "easing" must be a string.'),!c(l)&&!s(l)&&console.error('Material-UI: Argument "delay" must be a number or a string.'),0!==Object.keys(u).length&&console.error("Material-UI: Unrecognized argument(s) [".concat(Object.keys(u).join(","),"].")),(Array.isArray(e)?e:[e]).map((function(e){return"".concat(e," ").concat("string"==typeof r?r:ze(r)," ").concat(i," ").concat("string"==typeof l?l:ze(l))})).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}},Ze={mobileStepper:1e3,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},Le=f(x()),Fe=f(x()).default.createContext(null);Fe.displayName="ThemeContext";var De,We=Fe,$e=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,r=e.mixins,o=void 0===r?{}:r,i=e.palette,a=void 0===i?{}:i,l=e.spacing,u=e.typography,s=void 0===u?{}:u,c=z(e,["breakpoints","mixins","palette","spacing","typography"]),f=ue(a),d=Z(n),p=Me(l),h=O({breakpoints:d,direction:"ltr",mixins:L(d,p,o),overrides:{},palette:f,props:{},shadows:he,typography:de(f,s),spacing:p,shape:me,transitions:Ae,zIndex:Ze},c),m=arguments.length,v=new Array(m>1?m-1:0),y=1;y<m;y++)v[y-1]=arguments[y];h=v.reduce((function(e,t){return O(e,t)}),h);var g=["checked","disabled","error","focused","focusVisible","required","expanded","selected"],b=function e(t,n){var r,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;for(r in t){var i=t[r];1===o?0===r.indexOf("Mui")&&i&&e(i,r,o+1):-1!==g.indexOf(r)&&Object.keys(i).length>0&&(console.error(["Material-UI: The `".concat(n,"` component increases ")+"the CSS specificity of the `".concat(r,"` internal state."),"You can not override it like this: ",JSON.stringify(t,null,2),"","Instead, you need to use the $ruleName syntax:",JSON.stringify({root:T({},"&$".concat(r),i)},null,2),"","https://material-ui.com/r/pseudo-classes-guide"].join("\n")),t[r]={})}};return b(h.overrides),h}(),Ue=f(x());!function(e){e[e.desktop=0]="desktop",e[e.tablet=1]="tablet",e[e.mobile=2]="mobile"}(De||(De={}));var Be=()=>{let e=function(){var e=function(){var e=Le.default.useContext(We);return Le.default.useDebugValue(e),e}()||$e;return Ue.default.useDebugValue(e),e}();return window.innerWidth>=e.breakpoints.values.lg?0:e.breakpoints.values.md<=window.innerWidth&&window.innerWidth<e.breakpoints.values.lg?1:2},Ve=(e,t)=>{switch(e){case 0:return`${t}=w1200`;case 1:return`${t}=w1080`;case 2:return`${t}=w600`;default:return`${t}`}},He=()=>{let e=window.navigator.userAgent.toLowerCase();return e.indexOf("iphone")>0||e.indexOf("ipod")>0||e.indexOf("android")>0&&e.indexOf("mobile")>0?2:e.indexOf("ipad")>0||e.indexOf("android")>0||e.indexOf("ipad")>-1||e.indexOf("macintosh")>-1&&"ontouchend"in document?1:0}},2408:function(e,t,n){"use strict";var r=n(7418),o=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,l=60110,u=60112;t.Suspense=60113;var s=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),i=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),a=f("react.provider"),l=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),s=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function y(){}function g(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var b=g.prototype=new y;b.constructor=g,r(b,v.prototype),b.isPureReactComponent=!0;var x={current:null},w=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var r,i={},a=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)w.call(t,r)&&!k.hasOwnProperty(r)&&(i[r]=t[r]);var u=arguments.length-2;if(1===u)i.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];i.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===i[r]&&(i[r]=u[r]);return{$$typeof:o,type:e,key:a,ref:l,props:i,_owner:x.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var C=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function R(e,t,n,r,a){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case i:u=!0}}if(u)return a=a(u=e),e=""===r?"."+P(u,0):r,Array.isArray(a)?(n="",null!=e&&(n=e.replace(C,"$&/")+"/"),R(a,t,n,"",(function(e){return e}))):null!=a&&(E(a)&&(a=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||u&&u.key===a.key?"":(""+a.key).replace(C,"$&/")+"/")+e)),t.push(a)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var s=0;s<e.length;s++){var c=r+P(l=e[s],s);u+=R(l,t,n,c,a)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),s=0;!(l=e.next()).done;)u+=R(l=l.value,t,n,c=r+P(l,s++),a);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function O(e,t,n){if(null==e)return e;var r=[],o=0;return R(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function T(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var _={current:null};function N(){var e=_.current;if(null===e)throw Error(p(321));return e}var M={ReactCurrentDispatcher:_,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:x,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:O,forEach:function(e,t,n){O(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return O(e,(function(){t++})),t},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=g,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=M,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var i=r({},e.props),a=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=x.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)w.call(t,c)&&!k.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];i.children=s}return{$$typeof:o,type:e.type,key:a,ref:l,props:i,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:s,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return N().useCallback(e,t)},t.useContext=function(e,t){return N().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return N().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return N().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return N().useLayoutEffect(e,t)},t.useMemo=function(e,t){return N().useMemo(e,t)},t.useReducer=function(e,t,n){return N().useReducer(e,t,n)},t.useRef=function(e){return N().useRef(e)},t.useState=function(e){return N().useState(e)},t.version="17.0.2"},7294:function(e,t,n){"use strict";e.exports=n(2408)},53:function(e,t){"use strict";var n,r,o,i;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,c=null,f=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==s?setTimeout(n,0,e):(s=e,setTimeout(f,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,v=null,y=-1,g=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):g=0<e?Math.floor(1e3/e):5};var x=new MessageChannel,w=x.port2;x.port1.onmessage=function(){if(null!==v){var e=t.unstable_now();b=e+g;try{v(!0,e)?w.postMessage(null):(m=!1,v=null)}catch(e){throw w.postMessage(null),e}}else m=!1},n=function(e){v=e,m||(m=!0,w.postMessage(null))},r=function(e,n){y=d((function(){e(t.unstable_now())}),n)},o=function(){p(y),y=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<C(o,t)))break e;e[r]=t,e[n]=o,n=r}}function S(e){return void 0===(e=e[0])?null:e}function E(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],l=i+1,u=e[l];if(void 0!==a&&0>C(a,n))void 0!==u&&0>C(u,a)?(e[r]=u,e[l]=n,r=l):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==u&&0>C(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var P=[],R=[],O=1,T=null,_=3,N=!1,M=!1,I=!1;function j(e){for(var t=S(R);null!==t;){if(null===t.callback)E(R);else{if(!(t.startTime<=e))break;E(R),t.sortIndex=t.expirationTime,k(P,t)}t=S(R)}}function z(e){if(I=!1,j(e),!M)if(null!==S(P))M=!0,n(A);else{var t=S(R);null!==t&&r(z,t.startTime-e)}}function A(e,n){M=!1,I&&(I=!1,o()),N=!0;var i=_;try{for(j(n),T=S(P);null!==T&&(!(T.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=T.callback;if("function"==typeof a){T.callback=null,_=T.priorityLevel;var l=a(T.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?T.callback=l:T===S(P)&&E(P),j(n)}else E(P);T=S(P)}if(null!==T)var u=!0;else{var s=S(R);null!==s&&r(z,s.startTime-n),u=!1}return u}finally{T=null,_=i,N=!1}}var Z=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){M||N||(M=!0,n(A))},t.unstable_getCurrentPriorityLevel=function(){return _},t.unstable_getFirstCallbackNode=function(){return S(P)},t.unstable_next=function(e){switch(_){case 1:case 2:case 3:var t=3;break;default:t=_}var n=_;_=t;try{return e()}finally{_=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=Z,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=_;_=e;try{return t()}finally{_=n}},t.unstable_scheduleCallback=function(e,i,a){var l=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?l+a:l,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:O++,callback:i,priorityLevel:e,startTime:a,expirationTime:u=a+u,sortIndex:-1},a>l?(e.sortIndex=a,k(R,e),null===S(P)&&e===S(R)&&(I?o():I=!0,r(z,a-l))):(e.sortIndex=u,k(P,e),M||N||(M=!0,n(A))),e},t.unstable_wrapCallback=function(e){var t=_;return function(){var n=_;_=t;try{return e.apply(this,arguments)}finally{_=n}}}},3840:function(e,t,n){"use strict";e.exports=n(53)},5280:function(e,t){var n=Object.defineProperty,r=(e,t)=>{for(var r in t)n(e,r,{get:t[r],enumerable:!0})};n(t,"__esModule",{value:!0}),r(t,{Functional:()=>m,Molding:()=>y,Tools:()=>w,TypeGuard:()=>o,ValueCheck:()=>u});var o={};r(o,{isNotNull:()=>a,isNotUndefined:()=>i,isNotUndefinedAndNull:()=>l});var i=e=>void 0!==e,a=e=>null!==e,l=e=>null!=e,u={};r(u,{invalidDataToToday:()=>p,isZeroLength:()=>h,nanToZero:()=>d,nullToBlank:()=>c,undefinedAndNullToBlank:()=>f,undefinedToBlank:()=>s});var s=e=>void 0===e?"":e,c=e=>null===e?"":e,f=e=>null!=e?e:"",d=e=>"NaN"===e.toString()?0:e,p=e=>"Invalid Date"===e.toString()?new Date:new Date(e.getTime()),h=e=>0===e.length,m={};r(m,{Pipe:()=>v});var v=class{constructor(e){this.v=e}log(){return console.log(this.v),this}to(e){return this.v=e(this.v),this}exit(){return this.v}},y={};r(y,{to3DigitNum:()=>g,toWordPadding:()=>x,toZeroPadding:()=>b});var g=e=>"NaN"===e.toString()?"0":Number(e).toLocaleString(),b=(e,t)=>{const n=t<0?-t:t;return"number"==typeof e?`${"0".repeat(n)}${e.toString()}`.slice(-n):`${"0".repeat(n)}${e}`.slice(-n)},x=(e,t,n)=>{const r=t<0?-t:t;return"number"==typeof e?`${n.repeat(r)}${e.toString()}`.slice(-r):`${n.repeat(r)}${e}`.slice(-r)},w={};r(w,{createHashKey:()=>S,swapDown:()=>C,swapUp:()=>E,throttle:()=>k});var k=(e,t)=>{let n=Date.now()-t;return function(){n+t<Date.now()&&(n=Date.now(),e())}};function S(){const e=1e11,t=[(new Date).getTime(),Math.round(Math.random()*e)+e,Math.round(Math.random()*e)+e];let n="";return t.forEach((e=>n+=e<0?(e+=256).toString(16):e.toString(16))),n}function E(e,t){return t<=0||e.splice(t-1,2,e[t],e[t-1]),e}function C(e,t){return t<0||e.length-1<=t||(console.log(e.length),e.splice(t,2,e[t+1],e[t])),e}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},function(){"use strict";var e=n(7294),t=n(3935),r=n(3552),o=n(5697),i=n.n(o),a=n(2122);function l(e){return"/"===e.charAt(0)}function u(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var s=function(e,t){if(!e)throw new Error("Invariant failed")};function c(e){return"/"===e.charAt(0)?e:"/"+e}function f(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function d(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function p(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function h(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=(0,a.Z)({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],i=e&&l(e),a=t&&l(t),s=i||a;if(e&&l(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var c=o[o.length-1];n="."===c||".."===c||""===c}else n=!1;for(var f=0,d=o.length;d>=0;d--){var p=o[d];"."===p?u(o,d):".."===p?(u(o,d),f++):f&&(u(o,d),f--)}if(!s)for(;f--;f)o.unshift("..");!s||""===o[0]||o[0]&&l(o[0])||o.unshift("");var h=o.join("/");return n&&"/"!==h.substr(-1)&&(h+="/"),h}(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function m(){var e=null,t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var v=!("undefined"==typeof window||!window.document||!window.document.createElement);function y(e,t){t(window.confirm(e))}var g="popstate",b="hashchange";function x(){try{return window.history.state||{}}catch(e){return{}}}function w(e){void 0===e&&(e={}),v||s(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),i=e,l=i.forceRefresh,u=void 0!==l&&l,w=i.getUserConfirmation,k=void 0===w?y:w,S=i.keyLength,E=void 0===S?6:S,C=e.basename?d(c(e.basename)):"";function P(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return C&&(i=f(i,C)),h(i,r,n)}function R(){return Math.random().toString(36).substr(2,E)}var O=m();function T(e){(0,a.Z)(W,e),W.length=n.length,O.notifyListeners(W.location,W.action)}function _(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||I(P(e.state))}function N(){I(P(x()))}var M=!1;function I(e){M?(M=!1,T()):O.confirmTransitionTo(e,"POP",k,(function(t){t?T({action:"POP",location:e}):function(e){var t=W.location,n=z.indexOf(t.key);-1===n&&(n=0);var r=z.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(M=!0,Z(o))}(e)}))}var j=P(x()),z=[j.key];function A(e){return C+p(e)}function Z(e){n.go(e)}var L=0;function F(e){1===(L+=e)&&1===e?(window.addEventListener(g,_),o&&window.addEventListener(b,N)):0===L&&(window.removeEventListener(g,_),o&&window.removeEventListener(b,N))}var D=!1,W={length:n.length,action:"POP",location:j,createHref:A,push:function(e,t){var o="PUSH",i=h(e,t,R(),W.location);O.confirmTransitionTo(i,o,k,(function(e){if(e){var t=A(i),a=i.key,l=i.state;if(r)if(n.pushState({key:a,state:l},null,t),u)window.location.href=t;else{var s=z.indexOf(W.location.key),c=z.slice(0,s+1);c.push(i.key),z=c,T({action:o,location:i})}else window.location.href=t}}))},replace:function(e,t){var o="REPLACE",i=h(e,t,R(),W.location);O.confirmTransitionTo(i,o,k,(function(e){if(e){var t=A(i),a=i.key,l=i.state;if(r)if(n.replaceState({key:a,state:l},null,t),u)window.location.replace(t);else{var s=z.indexOf(W.location.key);-1!==s&&(z[s]=i.key),T({action:o,location:i})}else window.location.replace(t)}}))},go:Z,goBack:function(){Z(-1)},goForward:function(){Z(1)},block:function(e){void 0===e&&(e=!1);var t=O.setPrompt(e);return D||(F(1),D=!0),function(){return D&&(D=!1,F(-1)),t()}},listen:function(e){var t=O.appendListener(e);return F(1),function(){F(-1),t()}}};return W}var k=1073741823,S="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:{};function E(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}var C=e.createContext||function(t,n){var o,a,l,u="__create-react-context-"+((S[l="__global_unique_id__"]=(S[l]||0)+1)+"__"),s=function(e){function t(){var t;return(t=e.apply(this,arguments)||this).emitter=E(t.props.value),t}(0,r.Z)(t,e);var o=t.prototype;return o.getChildContext=function(){var e;return(e={})[u]=this.emitter,e},o.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var t,r=this.props.value,o=e.value;((i=r)===(a=o)?0!==i||1/i==1/a:i!=i&&a!=a)?t=0:(t="function"==typeof n?n(r,o):k,0!=(t|=0)&&this.emitter.set(e.value,t))}var i,a},o.render=function(){return this.props.children},t}(e.Component);s.childContextTypes=((o={})[u]=i().object.isRequired,o);var c=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).state={value:t.getValue()},t.onUpdate=function(e,n){0!=((0|t.observedBits)&n)&&t.setState({value:t.getValue()})},t}(0,r.Z)(n,e);var o=n.prototype;return o.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?k:t},o.componentDidMount=function(){this.context[u]&&this.context[u].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?k:e},o.componentWillUnmount=function(){this.context[u]&&this.context[u].off(this.onUpdate)},o.getValue=function(){return this.context[u]?this.context[u].get():t},o.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(e.Component);return c.contextTypes=((a={})[u]=i().object,a),{Provider:s,Consumer:c}},P=n(4779),R=n.n(P),O=(n(9864),n(9756)),T=(n(8679),function(e){var t=C();return t.displayName="Router-History",t}()),_=function(e){var t=C();return t.displayName="Router",t}(),N=function(t){function n(e){var n;return(n=t.call(this,e)||this).state={location:e.history.location},n._isMounted=!1,n._pendingLocation=null,e.staticContext||(n.unlisten=e.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}(0,r.Z)(n,t),n.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var o=n.prototype;return o.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},o.componentWillUnmount=function(){this.unlisten&&this.unlisten()},o.render=function(){return e.createElement(_.Provider,{value:{history:this.props.history,location:this.state.location,match:n.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},e.createElement(T.Provider,{children:this.props.children||null,value:this.props.history}))},n}(e.Component);e.Component,e.Component;var M={},I=0;function j(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,i=void 0!==o&&o,a=n.strict,l=void 0!==a&&a,u=n.sensitive,s=void 0!==u&&u;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=M[n]||(M[n]={});if(r[e])return r[e];var o=[],i={regexp:R()(e,o,t),keys:o};return I<1e4&&(r[e]=i,I++),i}(n,{end:i,strict:l,sensitive:s}),o=r.regexp,a=r.keys,u=o.exec(e);if(!u)return null;var c=u[0],f=u.slice(1),d=e===c;return i&&!d?null:{path:n,url:"/"===n&&""===c?"/":c,isExact:d,params:a.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var z=function(t){function n(){return t.apply(this,arguments)||this}return(0,r.Z)(n,t),n.prototype.render=function(){var t=this;return e.createElement(_.Consumer,null,(function(n){n||s(!1);var r=t.props.location||n.location,o=t.props.computedMatch?t.props.computedMatch:t.props.path?j(r.pathname,t.props):n.match,i=(0,a.Z)({},n,{location:r,match:o}),l=t.props,u=l.children,c=l.component,f=l.render;return Array.isArray(u)&&0===u.length&&(u=null),e.createElement(_.Provider,{value:i},i.match?u?"function"==typeof u?u(i):u:c?e.createElement(c,i):f?f(i):null:"function"==typeof u?u(i):null)}))},n}(e.Component);e.Component;var A=function(t){function n(){return t.apply(this,arguments)||this}return(0,r.Z)(n,t),n.prototype.render=function(){var t=this;return e.createElement(_.Consumer,null,(function(n){n||s(!1);var r,o,i=t.props.location||n.location;return e.Children.forEach(t.props.children,(function(t){if(null==o&&e.isValidElement(t)){r=t;var l=t.props.path||t.props.from;o=l?j(i.pathname,(0,a.Z)({},t.props,{path:l})):n.match}})),o?e.cloneElement(r,{location:i,computedMatch:o}):null}))},n}(e.Component),Z=e.useContext;function L(){return Z(T)}var F=function(t){function n(){for(var e,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(e=t.call.apply(t,[this].concat(r))||this).history=w(e.props),e}return(0,r.Z)(n,t),n.prototype.render=function(){return e.createElement(N,{history:this.history,children:this.props.children})},n}(e.Component);e.Component;var D=function(e,t){return"function"==typeof e?e(t):e},W=function(e,t){return"string"==typeof e?h(e,null,null,t):e},$=function(e){return e},U=e.forwardRef;void 0===U&&(U=$);var B=U((function(t,n){var r=t.innerRef,o=t.navigate,i=t.onClick,l=(0,O.Z)(t,["innerRef","navigate","onClick"]),u=l.target,s=(0,a.Z)({},l,{onClick:function(e){try{i&&i(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||u&&"_self"!==u||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),o())}});return s.ref=$!==U&&n||r,e.createElement("a",s)})),V=U((function(t,n){var r=t.component,o=void 0===r?B:r,i=t.replace,l=t.to,u=t.innerRef,c=(0,O.Z)(t,["component","replace","to","innerRef"]);return e.createElement(_.Consumer,null,(function(t){t||s(!1);var r=t.history,f=W(D(l,t.location),t.location),d=f?r.createHref(f):"",p=(0,a.Z)({},c,{href:d,navigate:function(){var e=D(l,t.location);(i?r.replace:r.push)(e)}});return $!==U?p.ref=n||u:p.innerRef=u,e.createElement(o,p)}))})),H=function(e){return e},Y=e.forwardRef;void 0===Y&&(Y=H),Y((function(t,n){var r=t["aria-current"],o=void 0===r?"page":r,i=t.activeClassName,l=void 0===i?"active":i,u=t.activeStyle,c=t.className,f=t.exact,d=t.isActive,p=t.location,h=t.sensitive,m=t.strict,v=t.style,y=t.to,g=t.innerRef,b=(0,O.Z)(t,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return e.createElement(_.Consumer,null,(function(t){t||s(!1);var r=p||t.location,i=W(D(y,r),r),x=i.pathname,w=x&&x.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),k=w?j(r.pathname,{path:w,exact:f,sensitive:h,strict:m}):null,S=!!(d?d(k,r):k),E=S?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(c,l):c,C=S?(0,a.Z)({},v,{},u):v,P=(0,a.Z)({"aria-current":S&&o||null,className:E,style:C,to:i},b);return H!==Y?P.ref=n||g:P.innerRef=g,e.createElement(V,P)}))}));var q=n(8920),K=n(1253),G=n(5953),X=["xs","sm","md","lg","xl"];function Q(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,r=e.unit,o=void 0===r?"px":r,i=e.step,l=void 0===i?5:i,u=(0,K.Z)(e,["values","unit","step"]);function s(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(o,")")}function c(e,t){var r=X.indexOf(t);return r===X.length-1?s(e):"@media (min-width:".concat("number"==typeof n[e]?n[e]:e).concat(o,") and ")+"(max-width:".concat((-1!==r&&"number"==typeof n[X[r+1]]?n[X[r+1]]:t)-l/100).concat(o,")")}return(0,a.Z)({keys:X,values:n,up:s,down:function(e){var t=X.indexOf(e)+1,r=n[X[t]];return t===X.length?s("xs"):"@media (max-width:".concat(("number"==typeof r&&t>0?r:e)-l/100).concat(o,")")},between:c,only:function(e){return c(e,e)},width:function(e){return n[e]}},u)}var J=n(6156);function ee(e,t,n){var r;return(0,a.Z)({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,a.Z)({paddingLeft:t(2),paddingRight:t(2)},n,(0,J.Z)({},e.up("sm"),(0,a.Z)({paddingLeft:t(3),paddingRight:t(3)},n[e.up("sm")])))},toolbar:(r={minHeight:56},(0,J.Z)(r,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),(0,J.Z)(r,e.up("sm"),{minHeight:64}),r)},n)}var te=n(288),ne={black:"#000",white:"#fff"},re={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"},oe="#7986cb",ie="#3f51b5",ae="#303f9f",le="#ff4081",ue="#f50057",se="#c51162",ce="#e57373",fe="#f44336",de="#d32f2f",pe="#ffb74d",he="#ff9800",me="#f57c00",ve="#64b5f6",ye="#2196f3",ge="#1976d2",be="#81c784",xe="#4caf50",we="#388e3c";function ke(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return Math.min(Math.max(t,e),n)}function Se(e){if(e.type)return e;if("#"===e.charAt(0))return Se(function(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length>=6?2:1,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map((function(e){return e+e}))),n?"rgb".concat(4===n.length?"a":"","(").concat(n.map((function(e,t){return t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3})).join(", "),")"):""}(e));var t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla"].indexOf(n))throw new Error((0,te.Z)(3,e));var r=e.substring(t+1,e.length-1).split(",");return{type:n,values:r=r.map((function(e){return parseFloat(e)}))}}function Ee(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")?n=n.map((function(e,t){return t<3?parseInt(e,10):e})):-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(t,"(").concat(n.join(", "),")")}function Ce(e){var t="hsl"===(e=Se(e)).type?Se(function(e){var t=(e=Se(e)).values,n=t[0],r=t[1]/100,o=t[2]/100,i=r*Math.min(o,1-o),a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:(e+n/30)%12;return o-i*Math.max(Math.min(t-3,9-t,1),-1)},l="rgb",u=[Math.round(255*a(0)),Math.round(255*a(8)),Math.round(255*a(4))];return"hsla"===e.type&&(l+="a",u.push(t[3])),Ee({type:l,values:u})}(e)).values:e.values;return t=t.map((function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)})),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function Pe(e,t){return e=Se(e),t=ke(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),e.values[3]=t,Ee(e)}function Re(e,t){if(e=Se(e),t=ke(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return Ee(e)}function Oe(e,t){if(e=Se(e),t=ke(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return Ee(e)}var Te={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:ne.white,default:re[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},_e={text:{primary:ne.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:re[800],default:"#303030"},action:{active:ne.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function Ne(e,t,n,r){var o=r.light||r,i=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=Oe(e.main,o):"dark"===t&&(e.dark=Re(e.main,i)))}function Me(e){var t=e.primary,n=void 0===t?{light:oe,main:ie,dark:ae}:t,r=e.secondary,o=void 0===r?{light:le,main:ue,dark:se}:r,i=e.error,l=void 0===i?{light:ce,main:fe,dark:de}:i,u=e.warning,s=void 0===u?{light:pe,main:he,dark:me}:u,c=e.info,f=void 0===c?{light:ve,main:ye,dark:ge}:c,d=e.success,p=void 0===d?{light:be,main:xe,dark:we}:d,h=e.type,m=void 0===h?"light":h,v=e.contrastThreshold,y=void 0===v?3:v,g=e.tonalOffset,b=void 0===g?.2:g,x=(0,K.Z)(e,["primary","secondary","error","warning","info","success","type","contrastThreshold","tonalOffset"]);function w(e){return function(e,t){var n=Ce(e),r=Ce(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,_e.text.primary)>=y?_e.text.primary:Te.text.primary}var k=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;if(!(e=(0,a.Z)({},e)).main&&e[t]&&(e.main=e[t]),!e.main)throw new Error((0,te.Z)(4,t));if("string"!=typeof e.main)throw new Error((0,te.Z)(5,JSON.stringify(e.main)));return Ne(e,"light",n,b),Ne(e,"dark",r,b),e.contrastText||(e.contrastText=w(e.main)),e},S={dark:_e,light:Te};return(0,G.Z)((0,a.Z)({common:ne,type:m,primary:k(n),secondary:k(o,"A400","A200","A700"),error:k(l),warning:k(s),info:k(f),success:k(p),grey:re,contrastThreshold:y,getContrastText:w,augmentColor:k,tonalOffset:b},S[m]),x)}function Ie(e){return Math.round(1e5*e)/1e5}var je={textTransform:"uppercase"},ze='"Roboto", "Helvetica", "Arial", sans-serif';function Ae(e,t){var n="function"==typeof t?t(e):t,r=n.fontFamily,o=void 0===r?ze:r,i=n.fontSize,l=void 0===i?14:i,u=n.fontWeightLight,s=void 0===u?300:u,c=n.fontWeightRegular,f=void 0===c?400:c,d=n.fontWeightMedium,p=void 0===d?500:d,h=n.fontWeightBold,m=void 0===h?700:h,v=n.htmlFontSize,y=void 0===v?16:v,g=n.allVariants,b=n.pxToRem,x=(0,K.Z)(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"]),w=l/14,k=b||function(e){return"".concat(e/y*w,"rem")},S=function(e,t,n,r,i){return(0,a.Z)({fontFamily:o,fontWeight:e,fontSize:k(t),lineHeight:n},o===ze?{letterSpacing:"".concat(Ie(r/t),"em")}:{},i,g)},E={h1:S(s,96,1.167,-1.5),h2:S(s,60,1.2,-.5),h3:S(f,48,1.167,0),h4:S(f,34,1.235,.25),h5:S(f,24,1.334,0),h6:S(p,20,1.6,.15),subtitle1:S(f,16,1.75,.15),subtitle2:S(p,14,1.57,.1),body1:S(f,16,1.5,.15),body2:S(f,14,1.43,.15),button:S(p,14,1.75,.4,je),caption:S(f,12,1.66,.4),overline:S(f,12,2.66,1,je)};return(0,G.Z)((0,a.Z)({htmlFontSize:y,pxToRem:k,round:Ie,fontFamily:o,fontSize:l,fontWeightLight:s,fontWeightRegular:f,fontWeightMedium:p,fontWeightBold:m},E),x,{clone:!1})}function Ze(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0,0,0,").concat(.2,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0,0,0,").concat(.14,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0,0,0,").concat(.12,")")].join(",")}var Le=["none",Ze(0,2,1,-1,0,1,1,0,0,1,3,0),Ze(0,3,1,-2,0,2,2,0,0,1,5,0),Ze(0,3,3,-2,0,3,4,0,0,1,8,0),Ze(0,2,4,-1,0,4,5,0,0,1,10,0),Ze(0,3,5,-1,0,5,8,0,0,1,14,0),Ze(0,3,5,-1,0,6,10,0,0,1,18,0),Ze(0,4,5,-2,0,7,10,1,0,2,16,1),Ze(0,5,5,-3,0,8,10,1,0,3,14,2),Ze(0,5,6,-3,0,9,12,1,0,3,16,2),Ze(0,6,6,-3,0,10,14,1,0,4,18,3),Ze(0,6,7,-4,0,11,15,1,0,4,20,3),Ze(0,7,8,-4,0,12,17,2,0,5,22,4),Ze(0,7,8,-4,0,13,19,2,0,5,24,4),Ze(0,7,9,-4,0,14,21,2,0,5,26,4),Ze(0,8,9,-5,0,15,22,2,0,6,28,5),Ze(0,8,10,-5,0,16,24,2,0,6,30,5),Ze(0,8,11,-5,0,17,26,2,0,6,32,5),Ze(0,9,11,-5,0,18,28,2,0,7,34,6),Ze(0,9,12,-6,0,19,29,2,0,7,36,6),Ze(0,10,13,-6,0,20,31,3,0,8,38,7),Ze(0,10,13,-6,0,21,33,3,0,8,40,7),Ze(0,10,14,-6,0,22,35,3,0,8,42,7),Ze(0,11,14,-7,0,23,36,3,0,9,44,8),Ze(0,11,15,-7,0,24,38,3,0,9,46,8)],Fe={borderRadius:4},De=n(8681);function We(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8;if(e.mui)return e;var t=(0,De.h)({spacing:e}),n=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return 0===n.length?t(1):1===n.length?t(n[0]):n.map((function(e){if("string"==typeof e)return e;var n=t(e);return"number"==typeof n?"".concat(n,"px"):n})).join(" ")};return Object.defineProperty(n,"unit",{get:function(){return e}}),n.mui=!0,n}var $e={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},Ue={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function Be(e){return"".concat(Math.round(e),"ms")}var Ve={easing:$e,duration:Ue,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,r=void 0===n?Ue.standard:n,o=t.easing,i=void 0===o?$e.easeInOut:o,a=t.delay,l=void 0===a?0:a;return(0,K.Z)(t,["duration","easing","delay"]),(Array.isArray(e)?e:[e]).map((function(e){return"".concat(e," ").concat("string"==typeof r?r:Be(r)," ").concat(i," ").concat("string"==typeof l?l:Be(l))})).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}},He={mobileStepper:1e3,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},Ye=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,r=e.mixins,o=void 0===r?{}:r,i=e.palette,a=void 0===i?{}:i,l=e.spacing,u=e.typography,s=void 0===u?{}:u,c=(0,K.Z)(e,["breakpoints","mixins","palette","spacing","typography"]),f=Me(a),d=Q(n),p=We(l),h=(0,G.Z)({breakpoints:d,direction:"ltr",mixins:ee(d,p,o),overrides:{},palette:f,props:{},shadows:Le,typography:Ae(f,s),spacing:p,shape:Fe,transitions:Ve,zIndex:He},c),m=arguments.length,v=new Array(m>1?m-1:0),y=1;y<m;y++)v[y-1]=arguments[y];return v.reduce((function(e,t){return(0,G.Z)(e,t)}),h)},qe=Ye(),Ke=function(e,t){return(0,q.Z)(e,(0,a.Z)({defaultTheme:qe},t))},Ge={WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale",boxSizing:"border-box"},Xe=function(e){return(0,a.Z)({color:e.palette.text.primary},e.typography.body2,{backgroundColor:e.palette.background.default,"@media print":{backgroundColor:e.palette.common.white}})},Qe=Ke((function(e){return{"@global":{html:Ge,"*, *::before, *::after":{boxSizing:"inherit"},"strong, b":{fontWeight:e.typography.fontWeightBold},body:(0,a.Z)({margin:0},Xe(e),{"&::backdrop":{backgroundColor:e.palette.background.default}})}}}),{name:"MuiCssBaseline"})((function(t){var n=t.children,r=void 0===n?null:n;return t.classes,e.createElement(e.Fragment,null,r)})),Je=n(3457),et=n(167),tt=Ye({palette:{secondary:{light:et.default[400],main:et.default[500],dark:et.default[700],contrastText:"#fff"}},transitions:{duration:{complex:1e3}}}),nt=n(6010);function rt(e){if("string"!=typeof e)throw new Error((0,te.Z)(7));return e.charAt(0).toUpperCase()+e.slice(1)}var ot=e.forwardRef((function(t,n){var r=t.classes,o=t.className,i=t.component,l=void 0===i?"div":i,u=t.disableGutters,s=void 0!==u&&u,c=t.fixed,f=void 0!==c&&c,d=t.maxWidth,p=void 0===d?"lg":d,h=(0,K.Z)(t,["classes","className","component","disableGutters","fixed","maxWidth"]);return e.createElement(l,(0,a.Z)({className:(0,nt.Z)(r.root,o,f&&r.fixed,s&&r.disableGutters,!1!==p&&r["maxWidth".concat(rt(String(p)))]),ref:n},h))})),it=Ke((function(e){return{root:(0,J.Z)({width:"100%",marginLeft:"auto",boxSizing:"border-box",marginRight:"auto",paddingLeft:e.spacing(2),paddingRight:e.spacing(2),display:"block"},e.breakpoints.up("sm"),{paddingLeft:e.spacing(3),paddingRight:e.spacing(3)}),disableGutters:{paddingLeft:0,paddingRight:0},fixed:Object.keys(e.breakpoints.values).reduce((function(t,n){var r=e.breakpoints.values[n];return 0!==r&&(t[e.breakpoints.up(n)]={maxWidth:r}),t}),{}),maxWidthXs:(0,J.Z)({},e.breakpoints.up("xs"),{maxWidth:Math.max(e.breakpoints.values.xs,444)}),maxWidthSm:(0,J.Z)({},e.breakpoints.up("sm"),{maxWidth:e.breakpoints.values.sm}),maxWidthMd:(0,J.Z)({},e.breakpoints.up("md"),{maxWidth:e.breakpoints.values.md}),maxWidthLg:(0,J.Z)({},e.breakpoints.up("lg"),{maxWidth:e.breakpoints.values.lg}),maxWidthXl:(0,J.Z)({},e.breakpoints.up("xl"),{maxWidth:e.breakpoints.values.xl})}}),{name:"MuiContainer"})(ot),at=[0,1,2,3,4,5,6,7,8,9,10],lt=["auto",!0,1,2,3,4,5,6,7,8,9,10,11,12];function ut(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=parseFloat(e);return"".concat(n/t).concat(String(e).replace(String(n),"")||"px")}var st=e.forwardRef((function(t,n){var r=t.alignContent,o=void 0===r?"stretch":r,i=t.alignItems,l=void 0===i?"stretch":i,u=t.classes,s=t.className,c=t.component,f=void 0===c?"div":c,d=t.container,p=void 0!==d&&d,h=t.direction,m=void 0===h?"row":h,v=t.item,y=void 0!==v&&v,g=t.justify,b=void 0===g?"flex-start":g,x=t.lg,w=void 0!==x&&x,k=t.md,S=void 0!==k&&k,E=t.sm,C=void 0!==E&&E,P=t.spacing,R=void 0===P?0:P,O=t.wrap,T=void 0===O?"wrap":O,_=t.xl,N=void 0!==_&&_,M=t.xs,I=void 0!==M&&M,j=t.zeroMinWidth,z=void 0!==j&&j,A=(0,K.Z)(t,["alignContent","alignItems","classes","className","component","container","direction","item","justify","lg","md","sm","spacing","wrap","xl","xs","zeroMinWidth"]),Z=(0,nt.Z)(u.root,s,p&&[u.container,0!==R&&u["spacing-xs-".concat(String(R))]],y&&u.item,z&&u.zeroMinWidth,"row"!==m&&u["direction-xs-".concat(String(m))],"wrap"!==T&&u["wrap-xs-".concat(String(T))],"stretch"!==l&&u["align-items-xs-".concat(String(l))],"stretch"!==o&&u["align-content-xs-".concat(String(o))],"flex-start"!==b&&u["justify-xs-".concat(String(b))],!1!==I&&u["grid-xs-".concat(String(I))],!1!==C&&u["grid-sm-".concat(String(C))],!1!==S&&u["grid-md-".concat(String(S))],!1!==w&&u["grid-lg-".concat(String(w))],!1!==N&&u["grid-xl-".concat(String(N))]);return e.createElement(f,(0,a.Z)({className:Z,ref:n},A))})),ct=Ke((function(e){return(0,a.Z)({root:{},container:{boxSizing:"border-box",display:"flex",flexWrap:"wrap",width:"100%"},item:{boxSizing:"border-box",margin:"0"},zeroMinWidth:{minWidth:0},"direction-xs-column":{flexDirection:"column"},"direction-xs-column-reverse":{flexDirection:"column-reverse"},"direction-xs-row-reverse":{flexDirection:"row-reverse"},"wrap-xs-nowrap":{flexWrap:"nowrap"},"wrap-xs-wrap-reverse":{flexWrap:"wrap-reverse"},"align-items-xs-center":{alignItems:"center"},"align-items-xs-flex-start":{alignItems:"flex-start"},"align-items-xs-flex-end":{alignItems:"flex-end"},"align-items-xs-baseline":{alignItems:"baseline"},"align-content-xs-center":{alignContent:"center"},"align-content-xs-flex-start":{alignContent:"flex-start"},"align-content-xs-flex-end":{alignContent:"flex-end"},"align-content-xs-space-between":{alignContent:"space-between"},"align-content-xs-space-around":{alignContent:"space-around"},"justify-xs-center":{justifyContent:"center"},"justify-xs-flex-end":{justifyContent:"flex-end"},"justify-xs-space-between":{justifyContent:"space-between"},"justify-xs-space-around":{justifyContent:"space-around"},"justify-xs-space-evenly":{justifyContent:"space-evenly"}},function(e,t){var n={};return at.forEach((function(t){var r=e.spacing(t);0!==r&&(n["spacing-".concat("xs","-").concat(t)]={margin:"-".concat(ut(r,2)),width:"calc(100% + ".concat(ut(r),")"),"& > $item":{padding:ut(r,2)}})})),n}(e),e.breakpoints.keys.reduce((function(t,n){return function(e,t,n){var r={};lt.forEach((function(e){var t="grid-".concat(n,"-").concat(e);if(!0!==e)if("auto"!==e){var o="".concat(Math.round(e/12*1e8)/1e6,"%");r[t]={flexBasis:o,flexGrow:0,maxWidth:o}}else r[t]={flexBasis:"auto",flexGrow:0,maxWidth:"none"};else r[t]={flexBasis:0,flexGrow:1,maxWidth:"100%"}})),"xs"===n?(0,a.Z)(e,r):e[t.breakpoints.up(n)]=r}(t,e,n),t}),{}))}),{name:"MuiGrid"})(st);function ft(e,t){"function"==typeof e?e(t):e&&(e.current=t)}function dt(t,n){return e.useMemo((function(){return null==t&&null==n?null:function(e){ft(t,e),ft(n,e)}}),[t,n])}var pt="undefined"!=typeof window?e.useLayoutEffect:e.useEffect;function ht(t){var n=e.useRef(t);return pt((function(){n.current=t})),e.useCallback((function(){return n.current.apply(void 0,arguments)}),[])}var mt=!0,vt=!1,yt=null,gt={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function bt(e){e.metaKey||e.altKey||e.ctrlKey||(mt=!0)}function xt(){mt=!1}function wt(){"hidden"===this.visibilityState&&vt&&(mt=!0)}function kt(e){var t,n,r,o=e.target;try{return o.matches(":focus-visible")}catch(e){}return mt||(n=(t=o).type,!("INPUT"!==(r=t.tagName)||!gt[n]||t.readOnly)||"TEXTAREA"===r&&!t.readOnly||!!t.isContentEditable)}function St(){vt=!0,window.clearTimeout(yt),yt=window.setTimeout((function(){vt=!1}),100)}function Et(){return{isFocusVisible:kt,onBlurVisible:St,ref:e.useCallback((function(e){var n,r=t.findDOMNode(e);null!=r&&((n=r.ownerDocument).addEventListener("keydown",bt,!0),n.addEventListener("mousedown",xt,!0),n.addEventListener("pointerdown",xt,!0),n.addEventListener("touchstart",xt,!0),n.addEventListener("visibilitychange",wt,!0))}),[])}}var Ct=n(7329),Pt=n(3349),Rt=e.createContext(null);function Ot(t,n){var r=Object.create(null);return t&&e.Children.map(t,(function(e){return e})).forEach((function(t){r[t.key]=function(t){return n&&(0,e.isValidElement)(t)?n(t):t}(t)})),r}function Tt(e,t,n){return null!=n[t]?n[t]:e.props[t]}function _t(t,n,r){var o=Ot(t.children),i=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),i=[];for(var a in e)a in t?i.length&&(o[a]=i,i=[]):i.push(a);var l={};for(var u in t){if(o[u])for(r=0;r<o[u].length;r++){var s=o[u][r];l[o[u][r]]=n(s)}l[u]=n(u)}for(r=0;r<i.length;r++)l[i[r]]=n(i[r]);return l}(n,o);return Object.keys(i).forEach((function(a){var l=i[a];if((0,e.isValidElement)(l)){var u=a in n,s=a in o,c=n[a],f=(0,e.isValidElement)(c)&&!c.props.in;!s||u&&!f?s||!u||f?s&&u&&(0,e.isValidElement)(c)&&(i[a]=(0,e.cloneElement)(l,{onExited:r.bind(null,l),in:c.props.in,exit:Tt(l,"exit",t),enter:Tt(l,"enter",t)})):i[a]=(0,e.cloneElement)(l,{in:!1}):i[a]=(0,e.cloneElement)(l,{onExited:r.bind(null,l),in:!0,exit:Tt(l,"exit",t),enter:Tt(l,"enter",t)})}})),i}var Nt=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},Mt=function(t){function n(e,n){var r,o=(r=t.call(this,e,n)||this).handleExited.bind((0,Pt.Z)(r));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}(0,r.Z)(n,t);var o=n.prototype;return o.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},o.componentWillUnmount=function(){this.mounted=!1},n.getDerivedStateFromProps=function(t,n){var r,o,i=n.children,a=n.handleExited;return{children:n.firstRender?(r=t,o=a,Ot(r.children,(function(t){return(0,e.cloneElement)(t,{onExited:o.bind(null,t),in:!0,appear:Tt(t,"appear",r),enter:Tt(t,"enter",r),exit:Tt(t,"exit",r)})}))):_t(t,i,a),firstRender:!1}},o.handleExited=function(e,t){var n=Ot(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=(0,a.Z)({},t.children);return delete n[e.key],{children:n}})))},o.render=function(){var t=this.props,n=t.component,r=t.childFactory,o=(0,O.Z)(t,["component","childFactory"]),i=this.state.contextValue,a=Nt(this.state.children).map(r);return delete o.appear,delete o.enter,delete o.exit,null===n?e.createElement(Rt.Provider,{value:i},a):e.createElement(Rt.Provider,{value:i},e.createElement(n,o,a))},n}(e.Component);Mt.propTypes={},Mt.defaultProps={component:"div",childFactory:function(e){return e}};var It=Mt,jt="undefined"==typeof window?e.useEffect:e.useLayoutEffect,zt=function(t){var n=t.classes,r=t.pulsate,o=void 0!==r&&r,i=t.rippleX,a=t.rippleY,l=t.rippleSize,u=t.in,s=t.onExited,c=void 0===s?function(){}:s,f=t.timeout,d=e.useState(!1),p=d[0],h=d[1],m=(0,nt.Z)(n.ripple,n.rippleVisible,o&&n.ripplePulsate),v={width:l,height:l,top:-l/2+a,left:-l/2+i},y=(0,nt.Z)(n.child,p&&n.childLeaving,o&&n.childPulsate),g=ht(c);return jt((function(){if(!u){h(!0);var e=setTimeout(g,f);return function(){clearTimeout(e)}}}),[g,u,f]),e.createElement("span",{className:m,style:v},e.createElement("span",{className:y}))},At=e.forwardRef((function(t,n){var r=t.center,o=void 0!==r&&r,i=t.classes,l=t.className,u=(0,K.Z)(t,["center","classes","className"]),s=e.useState([]),c=s[0],f=s[1],d=e.useRef(0),p=e.useRef(null);e.useEffect((function(){p.current&&(p.current(),p.current=null)}),[c]);var h=e.useRef(!1),m=e.useRef(null),v=e.useRef(null),y=e.useRef(null);e.useEffect((function(){return function(){clearTimeout(m.current)}}),[]);var g=e.useCallback((function(t){var n=t.pulsate,r=t.rippleX,o=t.rippleY,a=t.rippleSize,l=t.cb;f((function(t){return[].concat((0,Ct.Z)(t),[e.createElement(zt,{key:d.current,classes:i,timeout:550,pulsate:n,rippleX:r,rippleY:o,rippleSize:a})])})),d.current+=1,p.current=l}),[i]),b=e.useCallback((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0,r=t.pulsate,i=void 0!==r&&r,a=t.center,l=void 0===a?o||t.pulsate:a,u=t.fakeElement,s=void 0!==u&&u;if("mousedown"===e.type&&h.current)h.current=!1;else{"touchstart"===e.type&&(h.current=!0);var c,f,d,p=s?null:y.current,b=p?p.getBoundingClientRect():{width:0,height:0,left:0,top:0};if(l||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)c=Math.round(b.width/2),f=Math.round(b.height/2);else{var x=e.touches?e.touches[0]:e,w=x.clientX,k=x.clientY;c=Math.round(w-b.left),f=Math.round(k-b.top)}if(l)(d=Math.sqrt((2*Math.pow(b.width,2)+Math.pow(b.height,2))/3))%2==0&&(d+=1);else{var S=2*Math.max(Math.abs((p?p.clientWidth:0)-c),c)+2,E=2*Math.max(Math.abs((p?p.clientHeight:0)-f),f)+2;d=Math.sqrt(Math.pow(S,2)+Math.pow(E,2))}e.touches?null===v.current&&(v.current=function(){g({pulsate:i,rippleX:c,rippleY:f,rippleSize:d,cb:n})},m.current=setTimeout((function(){v.current&&(v.current(),v.current=null)}),80)):g({pulsate:i,rippleX:c,rippleY:f,rippleSize:d,cb:n})}}),[o,g]),x=e.useCallback((function(){b({},{pulsate:!0})}),[b]),w=e.useCallback((function(e,t){if(clearTimeout(m.current),"touchend"===e.type&&v.current)return e.persist(),v.current(),v.current=null,void(m.current=setTimeout((function(){w(e,t)})));v.current=null,f((function(e){return e.length>0?e.slice(1):e})),p.current=t}),[]);return e.useImperativeHandle(n,(function(){return{pulsate:x,start:b,stop:w}}),[x,b,w]),e.createElement("span",(0,a.Z)({className:(0,nt.Z)(i.root,l),ref:y},u),e.createElement(It,{component:null,exit:!0},c))})),Zt=Ke((function(e){return{root:{overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"},ripple:{opacity:0,position:"absolute"},rippleVisible:{opacity:.3,transform:"scale(1)",animation:"$enter ".concat(550,"ms ").concat(e.transitions.easing.easeInOut)},ripplePulsate:{animationDuration:"".concat(e.transitions.duration.shorter,"ms")},child:{opacity:1,display:"block",width:"100%",height:"100%",borderRadius:"50%",backgroundColor:"currentColor"},childLeaving:{opacity:0,animation:"$exit ".concat(550,"ms ").concat(e.transitions.easing.easeInOut)},childPulsate:{position:"absolute",left:0,top:0,animation:"$pulsate 2500ms ".concat(e.transitions.easing.easeInOut," 200ms infinite")},"@keyframes enter":{"0%":{transform:"scale(0)",opacity:.1},"100%":{transform:"scale(1)",opacity:.3}},"@keyframes exit":{"0%":{opacity:1},"100%":{opacity:0}},"@keyframes pulsate":{"0%":{transform:"scale(1)"},"50%":{transform:"scale(0.92)"},"100%":{transform:"scale(1)"}}}}),{flip:!1,name:"MuiTouchRipple"})(e.memo(At)),Lt=e.forwardRef((function(n,r){var o=n.action,i=n.buttonRef,l=n.centerRipple,u=void 0!==l&&l,s=n.children,c=n.classes,f=n.className,d=n.component,p=void 0===d?"button":d,h=n.disabled,m=void 0!==h&&h,v=n.disableRipple,y=void 0!==v&&v,g=n.disableTouchRipple,b=void 0!==g&&g,x=n.focusRipple,w=void 0!==x&&x,k=n.focusVisibleClassName,S=n.onBlur,E=n.onClick,C=n.onFocus,P=n.onFocusVisible,R=n.onKeyDown,O=n.onKeyUp,T=n.onMouseDown,_=n.onMouseLeave,N=n.onMouseUp,M=n.onTouchEnd,I=n.onTouchMove,j=n.onTouchStart,z=n.onDragLeave,A=n.tabIndex,Z=void 0===A?0:A,L=n.TouchRippleProps,F=n.type,D=void 0===F?"button":F,W=(0,K.Z)(n,["action","buttonRef","centerRipple","children","classes","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","onBlur","onClick","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","onDragLeave","tabIndex","TouchRippleProps","type"]),$=e.useRef(null),U=e.useRef(null),B=e.useState(!1),V=B[0],H=B[1];m&&V&&H(!1);var Y=Et(),q=Y.isFocusVisible,G=Y.onBlurVisible,X=Y.ref;function Q(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:b;return ht((function(r){return t&&t(r),!n&&U.current&&U.current[e](r),!0}))}e.useImperativeHandle(o,(function(){return{focusVisible:function(){H(!0),$.current.focus()}}}),[]),e.useEffect((function(){V&&w&&!y&&U.current.pulsate()}),[y,w,V]);var J=Q("start",T),ee=Q("stop",z),te=Q("stop",N),ne=Q("stop",(function(e){V&&e.preventDefault(),_&&_(e)})),re=Q("start",j),oe=Q("stop",M),ie=Q("stop",I),ae=Q("stop",(function(e){V&&(G(e),H(!1)),S&&S(e)}),!1),le=ht((function(e){$.current||($.current=e.currentTarget),q(e)&&(H(!0),P&&P(e)),C&&C(e)})),ue=function(){var e=t.findDOMNode($.current);return p&&"button"!==p&&!("A"===e.tagName&&e.href)},se=e.useRef(!1),ce=ht((function(e){w&&!se.current&&V&&U.current&&" "===e.key&&(se.current=!0,e.persist(),U.current.stop(e,(function(){U.current.start(e)}))),e.target===e.currentTarget&&ue()&&" "===e.key&&e.preventDefault(),R&&R(e),e.target===e.currentTarget&&ue()&&"Enter"===e.key&&!m&&(e.preventDefault(),E&&E(e))})),fe=ht((function(e){w&&" "===e.key&&U.current&&V&&!e.defaultPrevented&&(se.current=!1,e.persist(),U.current.stop(e,(function(){U.current.pulsate(e)}))),O&&O(e),E&&e.target===e.currentTarget&&ue()&&" "===e.key&&!e.defaultPrevented&&E(e)})),de=p;"button"===de&&W.href&&(de="a");var pe={};"button"===de?(pe.type=D,pe.disabled=m):("a"===de&&W.href||(pe.role="button"),pe["aria-disabled"]=m);var he=dt(i,r),me=dt(X,$),ve=dt(he,me),ye=e.useState(!1),ge=ye[0],be=ye[1];e.useEffect((function(){be(!0)}),[]);var xe=ge&&!y&&!m;return e.createElement(de,(0,a.Z)({className:(0,nt.Z)(c.root,f,V&&[c.focusVisible,k],m&&c.disabled),onBlur:ae,onClick:E,onFocus:le,onKeyDown:ce,onKeyUp:fe,onMouseDown:J,onMouseLeave:ne,onMouseUp:te,onDragLeave:ee,onTouchEnd:oe,onTouchMove:ie,onTouchStart:re,ref:ve,tabIndex:m?-1:Z},pe,W),s,xe?e.createElement(Zt,(0,a.Z)({ref:U,center:u},L)):null)})),Ft=Ke({root:{display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle","-moz-appearance":"none","-webkit-appearance":"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},"&$disabled":{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}},disabled:{},focusVisible:{}},{name:"MuiButtonBase"})(Lt),Dt=e.forwardRef((function(t,n){var r=t.children,o=t.classes,i=t.className,l=t.color,u=void 0===l?"default":l,s=t.component,c=void 0===s?"button":s,f=t.disabled,d=void 0!==f&&f,p=t.disableElevation,h=void 0!==p&&p,m=t.disableFocusRipple,v=void 0!==m&&m,y=t.endIcon,g=t.focusVisibleClassName,b=t.fullWidth,x=void 0!==b&&b,w=t.size,k=void 0===w?"medium":w,S=t.startIcon,E=t.type,C=void 0===E?"button":E,P=t.variant,R=void 0===P?"text":P,O=(0,K.Z)(t,["children","classes","className","color","component","disabled","disableElevation","disableFocusRipple","endIcon","focusVisibleClassName","fullWidth","size","startIcon","type","variant"]),T=S&&e.createElement("span",{className:(0,nt.Z)(o.startIcon,o["iconSize".concat(rt(k))])},S),_=y&&e.createElement("span",{className:(0,nt.Z)(o.endIcon,o["iconSize".concat(rt(k))])},y);return e.createElement(Ft,(0,a.Z)({className:(0,nt.Z)(o.root,o[R],i,"inherit"===u?o.colorInherit:"default"!==u&&o["".concat(R).concat(rt(u))],"medium"!==k&&[o["".concat(R,"Size").concat(rt(k))],o["size".concat(rt(k))]],h&&o.disableElevation,d&&o.disabled,x&&o.fullWidth),component:c,disabled:d,focusRipple:!v,focusVisibleClassName:(0,nt.Z)(o.focusVisible,g),ref:n,type:C},O),e.createElement("span",{className:o.label},T,r,_))})),Wt=Ke((function(e){return{root:(0,a.Z)({},e.typography.button,{boxSizing:"border-box",minWidth:64,padding:"6px 16px",borderRadius:e.shape.borderRadius,color:e.palette.text.primary,transition:e.transitions.create(["background-color","box-shadow","border"],{duration:e.transitions.duration.short}),"&:hover":{textDecoration:"none",backgroundColor:Pe(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"},"&$disabled":{backgroundColor:"transparent"}},"&$disabled":{color:e.palette.action.disabled}}),label:{width:"100%",display:"inherit",alignItems:"inherit",justifyContent:"inherit"},text:{padding:"6px 8px"},textPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:Pe(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},textSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:Pe(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},outlined:{padding:"5px 15px",border:"1px solid ".concat("light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)"),"&$disabled":{border:"1px solid ".concat(e.palette.action.disabledBackground)}},outlinedPrimary:{color:e.palette.primary.main,border:"1px solid ".concat(Pe(e.palette.primary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.primary.main),backgroundColor:Pe(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},outlinedSecondary:{color:e.palette.secondary.main,border:"1px solid ".concat(Pe(e.palette.secondary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.secondary.main),backgroundColor:Pe(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{border:"1px solid ".concat(e.palette.action.disabled)}},contained:{color:e.palette.getContrastText(e.palette.grey[300]),backgroundColor:e.palette.grey[300],boxShadow:e.shadows[2],"&:hover":{backgroundColor:e.palette.grey.A100,boxShadow:e.shadows[4],"@media (hover: none)":{boxShadow:e.shadows[2],backgroundColor:e.palette.grey[300]},"&$disabled":{backgroundColor:e.palette.action.disabledBackground}},"&$focusVisible":{boxShadow:e.shadows[6]},"&:active":{boxShadow:e.shadows[8]},"&$disabled":{color:e.palette.action.disabled,boxShadow:e.shadows[0],backgroundColor:e.palette.action.disabledBackground}},containedPrimary:{color:e.palette.primary.contrastText,backgroundColor:e.palette.primary.main,"&:hover":{backgroundColor:e.palette.primary.dark,"@media (hover: none)":{backgroundColor:e.palette.primary.main}}},containedSecondary:{color:e.palette.secondary.contrastText,backgroundColor:e.palette.secondary.main,"&:hover":{backgroundColor:e.palette.secondary.dark,"@media (hover: none)":{backgroundColor:e.palette.secondary.main}}},disableElevation:{boxShadow:"none","&:hover":{boxShadow:"none"},"&$focusVisible":{boxShadow:"none"},"&:active":{boxShadow:"none"},"&$disabled":{boxShadow:"none"}},focusVisible:{},disabled:{},colorInherit:{color:"inherit",borderColor:"currentColor"},textSizeSmall:{padding:"4px 5px",fontSize:e.typography.pxToRem(13)},textSizeLarge:{padding:"8px 11px",fontSize:e.typography.pxToRem(15)},outlinedSizeSmall:{padding:"3px 9px",fontSize:e.typography.pxToRem(13)},outlinedSizeLarge:{padding:"7px 21px",fontSize:e.typography.pxToRem(15)},containedSizeSmall:{padding:"4px 10px",fontSize:e.typography.pxToRem(13)},containedSizeLarge:{padding:"8px 22px",fontSize:e.typography.pxToRem(15)},sizeSmall:{},sizeLarge:{},fullWidth:{width:"100%"},startIcon:{display:"inherit",marginRight:8,marginLeft:-4,"&$iconSizeSmall":{marginLeft:-2}},endIcon:{display:"inherit",marginRight:-4,marginLeft:8,"&$iconSizeSmall":{marginRight:-2}},iconSizeSmall:{"& > *:first-child":{fontSize:18}},iconSizeMedium:{"& > *:first-child":{fontSize:20}},iconSizeLarge:{"& > *:first-child":{fontSize:22}}}}),{name:"MuiButton"})(Dt),$t=n(4662),Ut={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p"},Bt=e.forwardRef((function(t,n){var r=t.align,o=void 0===r?"inherit":r,i=t.classes,l=t.className,u=t.color,s=void 0===u?"initial":u,c=t.component,f=t.display,d=void 0===f?"initial":f,p=t.gutterBottom,h=void 0!==p&&p,m=t.noWrap,v=void 0!==m&&m,y=t.paragraph,g=void 0!==y&&y,b=t.variant,x=void 0===b?"body1":b,w=t.variantMapping,k=void 0===w?Ut:w,S=(0,K.Z)(t,["align","classes","className","color","component","display","gutterBottom","noWrap","paragraph","variant","variantMapping"]),E=c||(g?"p":k[x]||Ut[x])||"span";return e.createElement(E,(0,a.Z)({className:(0,nt.Z)(i.root,l,"inherit"!==x&&i[x],"initial"!==s&&i["color".concat(rt(s))],v&&i.noWrap,h&&i.gutterBottom,g&&i.paragraph,"inherit"!==o&&i["align".concat(rt(o))],"initial"!==d&&i["display".concat(rt(d))]),ref:n},S))})),Vt=Ke((function(e){return{root:{margin:0},body2:e.typography.body2,body1:e.typography.body1,caption:e.typography.caption,button:e.typography.button,h1:e.typography.h1,h2:e.typography.h2,h3:e.typography.h3,h4:e.typography.h4,h5:e.typography.h5,h6:e.typography.h6,subtitle1:e.typography.subtitle1,subtitle2:e.typography.subtitle2,overline:e.typography.overline,srOnly:{position:"absolute",height:1,width:1,overflow:"hidden"},alignLeft:{textAlign:"left"},alignCenter:{textAlign:"center"},alignRight:{textAlign:"right"},alignJustify:{textAlign:"justify"},noWrap:{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},gutterBottom:{marginBottom:"0.35em"},paragraph:{marginBottom:16},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorTextPrimary:{color:e.palette.text.primary},colorTextSecondary:{color:e.palette.text.secondary},colorError:{color:e.palette.error.main},displayInline:{display:"inline"},displayBlock:{display:"block"}}}),{name:"MuiTypography"})(Bt),Ht=n(159),Yt=n(3869),qt=n(2427),Kt=n(6059),Gt=(0,qt.Z)((function(e){return(0,Kt.Z)({BasicInductionContainer:{animation:"$FuwaFuwaFadeIn",animationDuration:"3s",animationTimingFunction:"ease-in-out",animationDirection:"alternate",animationIterationCount:"infinite",borderLeft:"1px solid rgba(0, 0, 0, 0.54)",borderBottom:"1px solid rgba(0, 0, 0, 0.54)",transform:"rotate(-45deg)",width:"24px",height:"24px"},"@keyframes FuwaFuwaFadeIn":{from:{opacity:.3,transform:"translateY(30px) rotate(-45deg)"},to:{opacity:1,transform:"translateY(0px) rotate(-45deg)"}}})}));function Xt(t){var n=Gt();return e.createElement("div",{className:n.BasicInductionContainer+(t.className?t.className:""),style:t.style})}var Qt=n(4959),Jt=n(3914),en=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(0,Jt.Z)(e,(0,a.Z)({defaultTheme:qe},t))},tn=n(150);function nn(e){return(0,tn.Z)(e)}var rn=en((function(e){var t,n,r,o,i,a,l,u;return nn({buttonPrimary:{backgroundColor:e.palette.primary.main,color:e.palette.primary.contrastText},buttonSecondary:{backgroundColor:e.palette.secondary.main,color:e.palette.secondary.contrastText},textTitle:(t={fontSize:e.typography.h2.fontSize,fontFamily:e.typography.h2.fontFamily},t[e.breakpoints.down("sm")]={fontSize:e.typography.h3.fontSize,fontFamily:e.typography.h3.fontFamily},t),textSubTitle:(n={fontSize:e.typography.h4.fontSize,fontFamily:e.typography.h4.fontFamily},n[e.breakpoints.down("sm")]={fontSize:e.typography.h5.fontSize,fontFamily:e.typography.h5.fontFamily},n),textCaption:(r={fontSize:e.typography.h6.fontSize,fontFamily:e.typography.h6.fontFamily},r[e.breakpoints.down("sm")]={fontSize:e.typography.subtitle1.fontSize,fontFamily:e.typography.subtitle1.fontFamily},r),textParagraph:(o={fontSize:e.typography.subtitle1.fontSize,fontFamily:e.typography.subtitle1.fontFamily},o[e.breakpoints.down("sm")]={fontSize:e.typography.subtitle2.fontSize,fontFamily:e.typography.subtitle2.fontFamily},o),textRemark:(i={fontSize:e.typography.body2.fontSize,fontFamily:e.typography.body2.fontFamily},i[e.breakpoints.down("sm")]={fontSize:e.typography.caption.fontSize,fontFamily:e.typography.caption.fontFamily},i),modalBasic:(a={width:"100%",backgroundColor:e.palette.background.paper,padding:"2em",borderRadius:"10px"},a[e.breakpoints.down("sm")]={padding:"0.5em"},a),cardBasic:(l={backgroundColor:e.palette.background.paper,padding:"2em"},l[e.breakpoints.down("sm")]={padding:"1em"},l),cardFullWidth:{},positionCentering:{display:"flex",flexWrap:"wrap",justifyContent:"center",alignItems:"center",width:"100%",height:"100%"},positionLefting:{display:"flex",flexWrap:"wrap",justifyContent:"flex-end",alignItems:"center",width:"100%",height:"100%"},positionXCenterYBottom:{display:"flex",flexWrap:"wrap",justifyContent:"center",alignItems:"flex-end",width:"100%",height:"100%"},positionXCenterYTop:{display:"flex",flexWrap:"wrap",justifyContent:"center",alignItems:"flex-start",width:"100%",height:"100%"},positionFixedCentering:{position:"fixed",top:"50%",left:"50%",transform:"translate(-50%,-50%)"},"@keyframes SimpleFadeIn":{from:{opacity:0},to:{opacity:1}},transitionSimpleFadeIn:{animation:"$SimpleFadeIn",animationDuration:"1s",animationTimingFunction:e.transitions.easing.easeInOut},transitionFadeInDownPending:{opacity:0,transform:"translateY(-10vh)"},transitionFadeInUpPending:{opacity:0,transform:"translateY(10vh)"},transitionFadeInRightPending:{opacity:0,transform:"translateX(100vw)"},transitionFadeInLeftPending:{opacity:0,transform:"translateX(-100vw)"},transitionFadeInRun:{transition:e.transitions.create(["opacity","transform"],{duration:e.transitions.duration.complex,easing:e.transitions.easing.easeInOut}),opacity:1,transform:"translateX(0px)"},transitionFadeInEnd:{opacity:1,transform:"translateX(0px)"},contentSectionContainer:(u={maxWidth:e.breakpoints.values.md},u[e.breakpoints.down("sm")]={padding:e.spacing(1)},u),rootContainer:{overflow:"hidden",width:"100%"},drawerContainer:{backgroundColor:e.palette.background.paper,color:e.palette.text.primary},toolbar:e.mixins.toolbar})})),on=e.createContext({}),an=e.forwardRef((function(t,n){var r=t.children,o=t.classes,i=t.className,l=t.component,u=void 0===l?"ul":l,s=t.dense,c=void 0!==s&&s,f=t.disablePadding,d=void 0!==f&&f,p=t.subheader,h=(0,K.Z)(t,["children","classes","className","component","dense","disablePadding","subheader"]),m=e.useMemo((function(){return{dense:c}}),[c]);return e.createElement(on.Provider,{value:m},e.createElement(u,(0,a.Z)({className:(0,nt.Z)(o.root,i,c&&o.dense,!d&&o.padding,p&&o.subheader),ref:n},h),p,r))})),ln=Ke({root:{listStyle:"none",margin:0,padding:0,position:"relative"},padding:{paddingTop:8,paddingBottom:8},dense:{},subheader:{paddingTop:0}},{name:"MuiList"})(an),un="undefined"==typeof window?e.useEffect:e.useLayoutEffect,sn=e.forwardRef((function(n,r){var o=n.alignItems,i=void 0===o?"center":o,l=n.autoFocus,u=void 0!==l&&l,s=n.button,c=void 0!==s&&s,f=n.children,d=n.classes,p=n.className,h=n.component,m=n.ContainerComponent,v=void 0===m?"li":m,y=n.ContainerProps,g=(y=void 0===y?{}:y).className,b=(0,K.Z)(y,["className"]),x=n.dense,w=void 0!==x&&x,k=n.disabled,S=void 0!==k&&k,E=n.disableGutters,C=void 0!==E&&E,P=n.divider,R=void 0!==P&&P,O=n.focusVisibleClassName,T=n.selected,_=void 0!==T&&T,N=(0,K.Z)(n,["alignItems","autoFocus","button","children","classes","className","component","ContainerComponent","ContainerProps","dense","disabled","disableGutters","divider","focusVisibleClassName","selected"]),M=e.useContext(on),I={dense:w||M.dense||!1,alignItems:i},j=e.useRef(null);un((function(){u&&j.current&&j.current.focus()}),[u]);var z,A,Z=e.Children.toArray(f),L=Z.length&&(z=Z[Z.length-1],A=["ListItemSecondaryAction"],e.isValidElement(z)&&-1!==A.indexOf(z.type.muiName)),F=dt(e.useCallback((function(e){j.current=t.findDOMNode(e)}),[]),r),D=(0,a.Z)({className:(0,nt.Z)(d.root,p,I.dense&&d.dense,!C&&d.gutters,R&&d.divider,S&&d.disabled,c&&d.button,"center"!==i&&d.alignItemsFlexStart,L&&d.secondaryAction,_&&d.selected),disabled:S},N),W=h||"li";return c&&(D.component=h||"div",D.focusVisibleClassName=(0,nt.Z)(d.focusVisible,O),W=Ft),L?(W=D.component||h?W:"div","li"===v&&("li"===W?W="div":"li"===D.component&&(D.component="div")),e.createElement(on.Provider,{value:I},e.createElement(v,(0,a.Z)({className:(0,nt.Z)(d.container,g),ref:F},b),e.createElement(W,D,Z),Z.pop()))):e.createElement(on.Provider,{value:I},e.createElement(W,(0,a.Z)({ref:F},D),Z))})),cn=Ke((function(e){return{root:{display:"flex",justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",width:"100%",boxSizing:"border-box",textAlign:"left",paddingTop:8,paddingBottom:8,"&$focusVisible":{backgroundColor:e.palette.action.selected},"&$selected, &$selected:hover":{backgroundColor:e.palette.action.selected},"&$disabled":{opacity:.5}},container:{position:"relative"},focusVisible:{},dense:{paddingTop:4,paddingBottom:4},alignItemsFlexStart:{alignItems:"flex-start"},disabled:{},divider:{borderBottom:"1px solid ".concat(e.palette.divider),backgroundClip:"padding-box"},gutters:{paddingLeft:16,paddingRight:16},button:{transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{textDecoration:"none",backgroundColor:e.palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}}},secondaryAction:{paddingRight:48},selected:{}}}),{name:"MuiListItem"})(sn),fn=e.forwardRef((function(t,n){var r=t.classes,o=t.className,i=t.color,l=void 0===i?"inherit":i,u=t.component,s=void 0===u?"span":u,c=t.fontSize,f=void 0===c?"default":c,d=(0,K.Z)(t,["classes","className","color","component","fontSize"]);return e.createElement(s,(0,a.Z)({className:(0,nt.Z)("material-icons",r.root,o,"inherit"!==l&&r["color".concat(rt(l))],"default"!==f&&r["fontSize".concat(rt(f))]),"aria-hidden":!0,ref:n},d))}));fn.muiName="Icon";var dn=Ke((function(e){return{root:{userSelect:"none",fontSize:e.typography.pxToRem(24),width:"1em",height:"1em",overflow:"hidden",flexShrink:0},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled},fontSizeInherit:{fontSize:"inherit"},fontSizeSmall:{fontSize:e.typography.pxToRem(20)},fontSizeLarge:{fontSize:e.typography.pxToRem(36)}}}),{name:"MuiIcon"})(fn),pn=e.forwardRef((function(t,n){var r=t.children,o=t.classes,i=t.className,l=t.disableTypography,u=void 0!==l&&l,s=t.inset,c=void 0!==s&&s,f=t.primary,d=t.primaryTypographyProps,p=t.secondary,h=t.secondaryTypographyProps,m=(0,K.Z)(t,["children","classes","className","disableTypography","inset","primary","primaryTypographyProps","secondary","secondaryTypographyProps"]),v=e.useContext(on).dense,y=null!=f?f:r;null==y||y.type===Vt||u||(y=e.createElement(Vt,(0,a.Z)({variant:v?"body2":"body1",className:o.primary,component:"span",display:"block"},d),y));var g=p;return null==g||g.type===Vt||u||(g=e.createElement(Vt,(0,a.Z)({variant:"body2",className:o.secondary,color:"textSecondary",display:"block"},h),g)),e.createElement("div",(0,a.Z)({className:(0,nt.Z)(o.root,i,v&&o.dense,c&&o.inset,y&&g&&o.multiline),ref:n},m),y,g)})),hn=Ke({root:{flex:"1 1 auto",minWidth:0,marginTop:4,marginBottom:4},multiline:{marginTop:6,marginBottom:6},dense:{},inset:{paddingLeft:56},primary:{},secondary:{}},{name:"MuiListItemText"})(pn),mn=e.forwardRef((function(t,n){var r=t.classes,o=t.className,i=(0,K.Z)(t,["classes","className"]),l=e.useContext(on);return e.createElement("div",(0,a.Z)({className:(0,nt.Z)(r.root,o,"flex-start"===l.alignItems&&r.alignItemsFlexStart),ref:n},i))})),vn=Ke((function(e){return{root:{minWidth:56,color:e.palette.action.active,flexShrink:0,display:"inline-flex"},alignItemsFlexStart:{marginTop:8}}}),{name:"MuiListItemIcon"})(mn),yn=e.forwardRef((function(t,n){var r=t.classes,o=t.className,i=t.component,l=void 0===i?"div":i,u=t.square,s=void 0!==u&&u,c=t.elevation,f=void 0===c?1:c,d=t.variant,p=void 0===d?"elevation":d,h=(0,K.Z)(t,["classes","className","component","square","elevation","variant"]);return e.createElement(l,(0,a.Z)({className:(0,nt.Z)(r.root,o,"outlined"===p?r.outlined:r["elevation".concat(f)],!s&&r.rounded),ref:n},h))})),gn=Ke((function(e){var t={};return e.shadows.forEach((function(e,n){t["elevation".concat(n)]={boxShadow:e}})),(0,a.Z)({root:{backgroundColor:e.palette.background.paper,color:e.palette.text.primary,transition:e.transitions.create("box-shadow")},rounded:{borderRadius:e.shape.borderRadius},outlined:{border:"1px solid ".concat(e.palette.divider)}},t)}),{name:"MuiPaper"})(yn),bn=e.forwardRef((function(t,n){var r=t.classes,o=t.className,i=t.color,l=void 0===i?"primary":i,u=t.position,s=void 0===u?"fixed":u,c=(0,K.Z)(t,["classes","className","color","position"]);return e.createElement(gn,(0,a.Z)({square:!0,component:"header",elevation:4,className:(0,nt.Z)(r.root,r["position".concat(rt(s))],r["color".concat(rt(l))],o,"fixed"===s&&"mui-fixed"),ref:n},c))})),xn=Ke((function(e){var t="light"===e.palette.type?e.palette.grey[100]:e.palette.grey[900];return{root:{display:"flex",flexDirection:"column",width:"100%",boxSizing:"border-box",zIndex:e.zIndex.appBar,flexShrink:0},positionFixed:{position:"fixed",top:0,left:"auto",right:0,"@media print":{position:"absolute"}},positionAbsolute:{position:"absolute",top:0,left:"auto",right:0},positionSticky:{position:"sticky",top:0,left:"auto",right:0},positionStatic:{position:"static"},positionRelative:{position:"relative"},colorDefault:{backgroundColor:t,color:e.palette.getContrastText(t)},colorPrimary:{backgroundColor:e.palette.primary.main,color:e.palette.primary.contrastText},colorSecondary:{backgroundColor:e.palette.secondary.main,color:e.palette.secondary.contrastText},colorInherit:{color:"inherit"},colorTransparent:{backgroundColor:"transparent",color:"inherit"}}}),{name:"MuiAppBar"})(bn),wn=e.forwardRef((function(t,n){var r=t.classes,o=t.className,i=t.component,l=void 0===i?"div":i,u=t.disableGutters,s=void 0!==u&&u,c=t.variant,f=void 0===c?"regular":c,d=(0,K.Z)(t,["classes","className","component","disableGutters","variant"]);return e.createElement(l,(0,a.Z)({className:(0,nt.Z)(r.root,r[f],o,!s&&r.gutters),ref:n},d))})),kn=Ke((function(e){return{root:{position:"relative",display:"flex",alignItems:"center"},gutters:(0,J.Z)({paddingLeft:e.spacing(2),paddingRight:e.spacing(2)},e.breakpoints.up("sm"),{paddingLeft:e.spacing(3),paddingRight:e.spacing(3)}),regular:e.mixins.toolbar,dense:{minHeight:48}}}),{name:"MuiToolbar"})(wn),Sn=e.forwardRef((function(t,n){var r=t.edge,o=void 0!==r&&r,i=t.children,l=t.classes,u=t.className,s=t.color,c=void 0===s?"default":s,f=t.disabled,d=void 0!==f&&f,p=t.disableFocusRipple,h=void 0!==p&&p,m=t.size,v=void 0===m?"medium":m,y=(0,K.Z)(t,["edge","children","classes","className","color","disabled","disableFocusRipple","size"]);return e.createElement(Ft,(0,a.Z)({className:(0,nt.Z)(l.root,u,"default"!==c&&l["color".concat(rt(c))],d&&l.disabled,"small"===v&&l["size".concat(rt(v))],{start:l.edgeStart,end:l.edgeEnd}[o]),centerRipple:!0,focusRipple:!h,disabled:d,ref:n},y),e.createElement("span",{className:l.label},i))})),En=Ke((function(e){return{root:{textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:12,borderRadius:"50%",overflow:"visible",color:e.palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{backgroundColor:Pe(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{backgroundColor:"transparent",color:e.palette.action.disabled}},edgeStart:{marginLeft:-12,"$sizeSmall&":{marginLeft:-3}},edgeEnd:{marginRight:-12,"$sizeSmall&":{marginRight:-3}},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:Pe(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},colorSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:Pe(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},disabled:{},sizeSmall:{padding:3,fontSize:e.typography.pxToRem(18)},label:{width:"100%",display:"flex",alignItems:"inherit",justifyContent:"inherit"}}}),{name:"MuiIconButton"})(Sn);function Cn(e){return e&&e.ownerDocument||document}var Pn="undefined"!=typeof window?e.useLayoutEffect:e.useEffect,Rn=e.forwardRef((function(n,r){var o=n.children,i=n.container,a=n.disablePortal,l=void 0!==a&&a,u=n.onRendered,s=e.useState(null),c=s[0],f=s[1],d=dt(e.isValidElement(o)?o.ref:null,r);return Pn((function(){l||f(function(e){return e="function"==typeof e?e():e,t.findDOMNode(e)}(i)||document.body)}),[i,l]),Pn((function(){if(c&&!l)return ft(r,c),function(){ft(r,null)}}),[r,c,l]),Pn((function(){u&&(c||l)&&u()}),[u,c,l]),l?e.isValidElement(o)?e.cloneElement(o,{ref:d}):o:c?t.createPortal(o,c):c}));function On(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.reduce((function(e,t){return null==t?e:function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];e.apply(this,r),t.apply(this,r)}}),(function(){}))}var Tn=n(6610),_n=n(5991);function Nn(e,t){t?e.setAttribute("aria-hidden","true"):e.removeAttribute("aria-hidden")}function Mn(e){return parseInt(window.getComputedStyle(e)["padding-right"],10)||0}function In(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],o=arguments.length>4?arguments[4]:void 0,i=[t,n].concat((0,Ct.Z)(r)),a=["TEMPLATE","SCRIPT","STYLE"];[].forEach.call(e.children,(function(e){1===e.nodeType&&-1===i.indexOf(e)&&-1===a.indexOf(e.tagName)&&Nn(e,o)}))}function jn(e,t){var n=-1;return e.some((function(e,r){return!!t(e)&&(n=r,!0)})),n}function zn(e,t){var n,r=[],o=[],i=e.container;if(!t.disableScrollLock){if(function(e){var t,n=Cn(e);return n.body===e?(t=n,Cn(t).defaultView||window).innerWidth>n.documentElement.clientWidth:e.scrollHeight>e.clientHeight}(i)){var a=function(){var e=document.createElement("div");e.style.width="99px",e.style.height="99px",e.style.position="absolute",e.style.top="-9999px",e.style.overflow="scroll",document.body.appendChild(e);var t=e.offsetWidth-e.clientWidth;return document.body.removeChild(e),t}();r.push({value:i.style.paddingRight,key:"padding-right",el:i}),i.style["padding-right"]="".concat(Mn(i)+a,"px"),n=Cn(i).querySelectorAll(".mui-fixed"),[].forEach.call(n,(function(e){o.push(e.style.paddingRight),e.style.paddingRight="".concat(Mn(e)+a,"px")}))}var l=i.parentElement,u="HTML"===l.nodeName&&"scroll"===window.getComputedStyle(l)["overflow-y"]?l:i;r.push({value:u.style.overflow,key:"overflow",el:u}),u.style.overflow="hidden"}return function(){n&&[].forEach.call(n,(function(e,t){o[t]?e.style.paddingRight=o[t]:e.style.removeProperty("padding-right")})),r.forEach((function(e){var t=e.value,n=e.el,r=e.key;t?n.style.setProperty(r,t):n.style.removeProperty(r)}))}}var An=function(){function e(){(0,Tn.Z)(this,e),this.modals=[],this.containers=[]}return(0,_n.Z)(e,[{key:"add",value:function(e,t){var n=this.modals.indexOf(e);if(-1!==n)return n;n=this.modals.length,this.modals.push(e),e.modalRef&&Nn(e.modalRef,!1);var r=function(e){var t=[];return[].forEach.call(e.children,(function(e){e.getAttribute&&"true"===e.getAttribute("aria-hidden")&&t.push(e)})),t}(t);In(t,e.mountNode,e.modalRef,r,!0);var o=jn(this.containers,(function(e){return e.container===t}));return-1!==o?(this.containers[o].modals.push(e),n):(this.containers.push({modals:[e],container:t,restore:null,hiddenSiblingNodes:r}),n)}},{key:"mount",value:function(e,t){var n=jn(this.containers,(function(t){return-1!==t.modals.indexOf(e)})),r=this.containers[n];r.restore||(r.restore=zn(r,t))}},{key:"remove",value:function(e){var t=this.modals.indexOf(e);if(-1===t)return t;var n=jn(this.containers,(function(t){return-1!==t.modals.indexOf(e)})),r=this.containers[n];if(r.modals.splice(r.modals.indexOf(e),1),this.modals.splice(t,1),0===r.modals.length)r.restore&&r.restore(),e.modalRef&&Nn(e.modalRef,!0),In(r.container,e.mountNode,e.modalRef,r.hiddenSiblingNodes,!1),this.containers.splice(n,1);else{var o=r.modals[r.modals.length-1];o.modalRef&&Nn(o.modalRef,!1)}return t}},{key:"isTopModal",value:function(e){return this.modals.length>0&&this.modals[this.modals.length-1]===e}}]),e}(),Zn=function(n){var r=n.children,o=n.disableAutoFocus,i=void 0!==o&&o,a=n.disableEnforceFocus,l=void 0!==a&&a,u=n.disableRestoreFocus,s=void 0!==u&&u,c=n.getDoc,f=n.isEnabled,d=n.open,p=e.useRef(),h=e.useRef(null),m=e.useRef(null),v=e.useRef(),y=e.useRef(null),g=e.useCallback((function(e){y.current=t.findDOMNode(e)}),[]),b=dt(r.ref,g),x=e.useRef();return e.useEffect((function(){x.current=d}),[d]),!x.current&&d&&"undefined"!=typeof window&&(v.current=c().activeElement),e.useEffect((function(){if(d){var e=Cn(y.current);i||!y.current||y.current.contains(e.activeElement)||(y.current.hasAttribute("tabIndex")||y.current.setAttribute("tabIndex",-1),y.current.focus());var t=function(){null!==y.current&&(e.hasFocus()&&!l&&f()&&!p.current?y.current&&!y.current.contains(e.activeElement)&&y.current.focus():p.current=!1)},n=function(t){!l&&f()&&9===t.keyCode&&e.activeElement===y.current&&(p.current=!0,t.shiftKey?m.current.focus():h.current.focus())};e.addEventListener("focus",t,!0),e.addEventListener("keydown",n,!0);var r=setInterval((function(){t()}),50);return function(){clearInterval(r),e.removeEventListener("focus",t,!0),e.removeEventListener("keydown",n,!0),s||(v.current&&v.current.focus&&v.current.focus(),v.current=null)}}}),[i,l,s,f,d]),e.createElement(e.Fragment,null,e.createElement("div",{tabIndex:0,ref:h,"data-test":"sentinelStart"}),e.cloneElement(r,{ref:b}),e.createElement("div",{tabIndex:0,ref:m,"data-test":"sentinelEnd"}))},Ln={root:{zIndex:-1,position:"fixed",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent"},invisible:{backgroundColor:"transparent"}},Fn=e.forwardRef((function(t,n){var r=t.invisible,o=void 0!==r&&r,i=t.open,l=(0,K.Z)(t,["invisible","open"]);return i?e.createElement("div",(0,a.Z)({"aria-hidden":!0,ref:n},l,{style:(0,a.Z)({},Ln.root,o?Ln.invisible:{},l.style)})):null})),Dn=new An,Wn=e.forwardRef((function(n,r){var o=(0,Ht.Z)(),i=(0,Yt.Z)({name:"MuiModal",props:(0,a.Z)({},n),theme:o}),l=i.BackdropComponent,u=void 0===l?Fn:l,s=i.BackdropProps,c=i.children,f=i.closeAfterTransition,d=void 0!==f&&f,p=i.container,h=i.disableAutoFocus,m=void 0!==h&&h,v=i.disableBackdropClick,y=void 0!==v&&v,g=i.disableEnforceFocus,b=void 0!==g&&g,x=i.disableEscapeKeyDown,w=void 0!==x&&x,k=i.disablePortal,S=void 0!==k&&k,E=i.disableRestoreFocus,C=void 0!==E&&E,P=i.disableScrollLock,R=void 0!==P&&P,O=i.hideBackdrop,T=void 0!==O&&O,_=i.keepMounted,N=void 0!==_&&_,M=i.manager,I=void 0===M?Dn:M,j=i.onBackdropClick,z=i.onClose,A=i.onEscapeKeyDown,Z=i.onRendered,L=i.open,F=(0,K.Z)(i,["BackdropComponent","BackdropProps","children","closeAfterTransition","container","disableAutoFocus","disableBackdropClick","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted","manager","onBackdropClick","onClose","onEscapeKeyDown","onRendered","open"]),D=e.useState(!0),W=D[0],$=D[1],U=e.useRef({}),B=e.useRef(null),V=e.useRef(null),H=dt(V,r),Y=function(e){return!!e.children&&e.children.props.hasOwnProperty("in")}(i),q=function(){return Cn(B.current)},G=function(){return U.current.modalRef=V.current,U.current.mountNode=B.current,U.current},X=function(){I.mount(G(),{disableScrollLock:R}),V.current.scrollTop=0},Q=ht((function(){var e=function(e){return e="function"==typeof e?e():e,t.findDOMNode(e)}(p)||q().body;I.add(G(),e),V.current&&X()})),J=e.useCallback((function(){return I.isTopModal(G())}),[I]),ee=ht((function(e){B.current=e,e&&(Z&&Z(),L&&J()?X():Nn(V.current,!0))})),te=e.useCallback((function(){I.remove(G())}),[I]);if(e.useEffect((function(){return function(){te()}}),[te]),e.useEffect((function(){L?Q():Y&&d||te()}),[L,te,Y,d,Q]),!N&&!L&&(!Y||W))return null;var ne=function(e){return{root:{position:"fixed",zIndex:e.zIndex.modal,right:0,bottom:0,top:0,left:0},hidden:{visibility:"hidden"}}}(o||{zIndex:He}),re={};return void 0===c.props.tabIndex&&(re.tabIndex=c.props.tabIndex||"-1"),Y&&(re.onEnter=On((function(){$(!1)}),c.props.onEnter),re.onExited=On((function(){$(!0),d&&te()}),c.props.onExited)),e.createElement(Rn,{ref:ee,container:p,disablePortal:S},e.createElement("div",(0,a.Z)({ref:H,onKeyDown:function(e){"Escape"===e.key&&J()&&(A&&A(e),w||(e.stopPropagation(),z&&z(e,"escapeKeyDown")))},role:"presentation"},F,{style:(0,a.Z)({},ne.root,!L&&W?ne.hidden:{},F.style)}),T?null:e.createElement(u,(0,a.Z)({open:L,onClick:function(e){e.target===e.currentTarget&&(j&&j(e),!y&&z&&z(e,"backdropClick"))}},s)),e.createElement(Zn,{disableEnforceFocus:b,disableAutoFocus:m,disableRestoreFocus:C,getDoc:q,isEnabled:J,open:L},e.cloneElement(c,re))))})),$n=n(4699),Un="unmounted",Bn="exited",Vn="entering",Hn="entered",Yn="exiting",qn=function(n){function o(e,t){var r;r=n.call(this,e,t)||this;var o,i=t&&!t.isMounting?e.enter:e.appear;return r.appearStatus=null,e.in?i?(o=Bn,r.appearStatus=Vn):o=Hn:o=e.unmountOnExit||e.mountOnEnter?Un:Bn,r.state={status:o},r.nextCallback=null,r}(0,r.Z)(o,n),o.getDerivedStateFromProps=function(e,t){return e.in&&t.status===Un?{status:Bn}:null};var i=o.prototype;return i.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},i.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==Vn&&n!==Hn&&(t=Vn):n!==Vn&&n!==Hn||(t=Yn)}this.updateStatus(!1,t)},i.componentWillUnmount=function(){this.cancelNextCallback()},i.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},i.updateStatus=function(e,t){void 0===e&&(e=!1),null!==t?(this.cancelNextCallback(),t===Vn?this.performEnter(e):this.performExit()):this.props.unmountOnExit&&this.state.status===Bn&&this.setState({status:Un})},i.performEnter=function(e){var n=this,r=this.props.enter,o=this.context?this.context.isMounting:e,i=this.props.nodeRef?[o]:[t.findDOMNode(this),o],a=i[0],l=i[1],u=this.getTimeouts(),s=o?u.appear:u.enter;e||r?(this.props.onEnter(a,l),this.safeSetState({status:Vn},(function(){n.props.onEntering(a,l),n.onTransitionEnd(s,(function(){n.safeSetState({status:Hn},(function(){n.props.onEntered(a,l)}))}))}))):this.safeSetState({status:Hn},(function(){n.props.onEntered(a)}))},i.performExit=function(){var e=this,n=this.props.exit,r=this.getTimeouts(),o=this.props.nodeRef?void 0:t.findDOMNode(this);n?(this.props.onExit(o),this.safeSetState({status:Yn},(function(){e.props.onExiting(o),e.onTransitionEnd(r.exit,(function(){e.safeSetState({status:Bn},(function(){e.props.onExited(o)}))}))}))):this.safeSetState({status:Bn},(function(){e.props.onExited(o)}))},i.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},i.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},i.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},i.onTransitionEnd=function(e,n){this.setNextCallback(n);var r=this.props.nodeRef?this.props.nodeRef.current:t.findDOMNode(this),o=null==e&&!this.props.addEndListener;if(r&&!o){if(this.props.addEndListener){var i=this.props.nodeRef?[this.nextCallback]:[r,this.nextCallback],a=i[0],l=i[1];this.props.addEndListener(a,l)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},i.render=function(){var t=this.state.status;if(t===Un)return null;var n=this.props,r=n.children,o=(n.in,n.mountOnEnter,n.unmountOnExit,n.appear,n.enter,n.exit,n.timeout,n.addEndListener,n.onEnter,n.onEntering,n.onEntered,n.onExit,n.onExiting,n.onExited,n.nodeRef,(0,O.Z)(n,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return e.createElement(Rt.Provider,{value:null},"function"==typeof r?r(t,o):e.cloneElement(e.Children.only(r),o))},o}(e.Component);function Kn(){}qn.contextType=Rt,qn.propTypes={},qn.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:Kn,onEntering:Kn,onEntered:Kn,onExit:Kn,onExiting:Kn,onExited:Kn},qn.UNMOUNTED=Un,qn.EXITED=Bn,qn.ENTERING=Vn,qn.ENTERED=Hn,qn.EXITING=Yn;var Gn=qn;function Xn(){return(0,Ht.Z)()||qe}var Qn=function(e){return e.scrollTop};function Jn(e,t){var n=e.timeout,r=e.style,o=void 0===r?{}:r;return{duration:o.transitionDuration||"number"==typeof n?n:n[t.mode]||0,delay:o.transitionDelay}}var er={entering:{opacity:1},entered:{opacity:1}},tr={enter:Ue.enteringScreen,exit:Ue.leavingScreen},nr=e.forwardRef((function(t,n){var r=t.children,o=t.disableStrictModeCompat,i=void 0!==o&&o,l=t.in,u=t.onEnter,s=t.onEntered,c=t.onEntering,f=t.onExit,d=t.onExited,p=t.onExiting,h=t.style,m=t.TransitionComponent,v=void 0===m?Gn:m,y=t.timeout,g=void 0===y?tr:y,b=(0,K.Z)(t,["children","disableStrictModeCompat","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","TransitionComponent","timeout"]),x=Xn(),w=x.unstable_strictMode&&!i,k=e.useRef(null),S=dt(r.ref,n),E=dt(w?k:void 0,S),C=function(e){return function(t,n){if(e){var r=w?[k.current,t]:[t,n],o=(0,$n.Z)(r,2),i=o[0],a=o[1];void 0===a?e(i):e(i,a)}}},P=C(c),R=C((function(e,t){Qn(e);var n=Jn({style:h,timeout:g},{mode:"enter"});e.style.webkitTransition=x.transitions.create("opacity",n),e.style.transition=x.transitions.create("opacity",n),u&&u(e,t)})),O=C(s),T=C(p),_=C((function(e){var t=Jn({style:h,timeout:g},{mode:"exit"});e.style.webkitTransition=x.transitions.create("opacity",t),e.style.transition=x.transitions.create("opacity",t),f&&f(e)})),N=C(d);return e.createElement(v,(0,a.Z)({appear:!0,in:l,nodeRef:w?k:void 0,onEnter:R,onEntered:O,onEntering:P,onExit:_,onExited:N,onExiting:T,timeout:g},b),(function(t,n){return e.cloneElement(r,(0,a.Z)({style:(0,a.Z)({opacity:0,visibility:"exited"!==t||l?void 0:"hidden"},er[t],h,r.props.style),ref:E},n))}))})),rr=e.forwardRef((function(t,n){var r=t.children,o=t.classes,i=t.className,l=t.invisible,u=void 0!==l&&l,s=t.open,c=t.transitionDuration,f=t.TransitionComponent,d=void 0===f?nr:f,p=(0,K.Z)(t,["children","classes","className","invisible","open","transitionDuration","TransitionComponent"]);return e.createElement(d,(0,a.Z)({in:s,timeout:c},p),e.createElement("div",{className:(0,nt.Z)(o.root,i,u&&o.invisible),"aria-hidden":!0,ref:n},r))})),or=Ke({root:{zIndex:-1,position:"fixed",display:"flex",alignItems:"center",justifyContent:"center",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent"},invisible:{backgroundColor:"transparent"}},{name:"MuiBackdrop"})(rr);function ir(e,t){var n=function(e,t){var n,r=t.getBoundingClientRect();if(t.fakeTransform)n=t.fakeTransform;else{var o=window.getComputedStyle(t);n=o.getPropertyValue("-webkit-transform")||o.getPropertyValue("transform")}var i=0,a=0;if(n&&"none"!==n&&"string"==typeof n){var l=n.split("(")[1].split(")")[0].split(",");i=parseInt(l[4],10),a=parseInt(l[5],10)}return"left"===e?"translateX(".concat(window.innerWidth,"px) translateX(").concat(i-r.left,"px)"):"right"===e?"translateX(-".concat(r.left+r.width-i,"px)"):"up"===e?"translateY(".concat(window.innerHeight,"px) translateY(").concat(a-r.top,"px)"):"translateY(-".concat(r.top+r.height-a,"px)")}(e,t);n&&(t.style.webkitTransform=n,t.style.transform=n)}var ar={enter:Ue.enteringScreen,exit:Ue.leavingScreen},lr=e.forwardRef((function(n,r){var o=n.children,i=n.direction,l=void 0===i?"down":i,u=n.in,s=n.onEnter,c=n.onEntered,f=n.onEntering,d=n.onExit,p=n.onExited,h=n.onExiting,m=n.style,v=n.timeout,y=void 0===v?ar:v,g=n.TransitionComponent,b=void 0===g?Gn:g,x=(0,K.Z)(n,["children","direction","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"]),w=Xn(),k=e.useRef(null),S=e.useCallback((function(e){k.current=t.findDOMNode(e)}),[]),E=dt(o.ref,S),C=dt(E,r),P=function(e){return function(t){e&&(void 0===t?e(k.current):e(k.current,t))}},R=P((function(e,t){ir(l,e),Qn(e),s&&s(e,t)})),O=P((function(e,t){var n=Jn({timeout:y,style:m},{mode:"enter"});e.style.webkitTransition=w.transitions.create("-webkit-transform",(0,a.Z)({},n,{easing:w.transitions.easing.easeOut})),e.style.transition=w.transitions.create("transform",(0,a.Z)({},n,{easing:w.transitions.easing.easeOut})),e.style.webkitTransform="none",e.style.transform="none",f&&f(e,t)})),T=P(c),_=P(h),N=P((function(e){var t=Jn({timeout:y,style:m},{mode:"exit"});e.style.webkitTransition=w.transitions.create("-webkit-transform",(0,a.Z)({},t,{easing:w.transitions.easing.sharp})),e.style.transition=w.transitions.create("transform",(0,a.Z)({},t,{easing:w.transitions.easing.sharp})),ir(l,e),d&&d(e)})),M=P((function(e){e.style.webkitTransition="",e.style.transition="",p&&p(e)})),I=e.useCallback((function(){k.current&&ir(l,k.current)}),[l]);return e.useEffect((function(){if(!u&&"down"!==l&&"right"!==l){var e=function(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:166;function r(){for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];var a=this,l=function(){e.apply(a,o)};clearTimeout(t),t=setTimeout(l,n)}return r.clear=function(){clearTimeout(t)},r}((function(){k.current&&ir(l,k.current)}));return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}}}),[l,u]),e.useEffect((function(){u||I()}),[u,I]),e.createElement(b,(0,a.Z)({nodeRef:k,onEnter:R,onEntered:T,onEntering:O,onExit:N,onExited:M,onExiting:_,appear:!0,in:u,timeout:y},x),(function(t,n){return e.cloneElement(o,(0,a.Z)({ref:C,style:(0,a.Z)({visibility:"exited"!==t||u?void 0:"hidden"},m,o.props.style)},n))}))})),ur={left:"right",right:"left",top:"down",bottom:"up"};function sr(e){return-1!==["left","right"].indexOf(e)}function cr(e,t){return"rtl"===e.direction&&sr(t)?ur[t]:t}var fr={enter:Ue.enteringScreen,exit:Ue.leavingScreen},dr=e.forwardRef((function(t,n){var r=t.anchor,o=void 0===r?"left":r,i=t.BackdropProps,l=t.children,u=t.classes,s=t.className,c=t.elevation,f=void 0===c?16:c,d=t.ModalProps,p=(d=void 0===d?{}:d).BackdropProps,h=(0,K.Z)(d,["BackdropProps"]),m=t.onClose,v=t.open,y=void 0!==v&&v,g=t.PaperProps,b=void 0===g?{}:g,x=t.SlideProps,w=t.TransitionComponent,k=void 0===w?lr:w,S=t.transitionDuration,E=void 0===S?fr:S,C=t.variant,P=void 0===C?"temporary":C,R=(0,K.Z)(t,["anchor","BackdropProps","children","classes","className","elevation","ModalProps","onClose","open","PaperProps","SlideProps","TransitionComponent","transitionDuration","variant"]),O=Xn(),T=e.useRef(!1);e.useEffect((function(){T.current=!0}),[]);var _=cr(O,o),N=e.createElement(gn,(0,a.Z)({elevation:"temporary"===P?f:0,square:!0},b,{className:(0,nt.Z)(u.paper,u["paperAnchor".concat(rt(_))],b.className,"temporary"!==P&&u["paperAnchorDocked".concat(rt(_))])}),l);if("permanent"===P)return e.createElement("div",(0,a.Z)({className:(0,nt.Z)(u.root,u.docked,s),ref:n},R),N);var M=e.createElement(k,(0,a.Z)({in:y,direction:ur[_],timeout:E,appear:T.current},x),N);return"persistent"===P?e.createElement("div",(0,a.Z)({className:(0,nt.Z)(u.root,u.docked,s),ref:n},R),M):e.createElement(Wn,(0,a.Z)({BackdropProps:(0,a.Z)({},i,p,{transitionDuration:E}),BackdropComponent:or,className:(0,nt.Z)(u.root,u.modal,s),open:y,onClose:m,ref:n},R,h),M)})),pr=Ke((function(e){return{root:{},docked:{flex:"0 0 auto"},paper:{overflowY:"auto",display:"flex",flexDirection:"column",height:"100%",flex:"1 0 auto",zIndex:e.zIndex.drawer,WebkitOverflowScrolling:"touch",position:"fixed",top:0,outline:0},paperAnchorLeft:{left:0,right:"auto"},paperAnchorRight:{left:"auto",right:0},paperAnchorTop:{top:0,left:0,bottom:"auto",right:0,height:"auto",maxHeight:"100%"},paperAnchorBottom:{top:"auto",left:0,bottom:0,right:0,height:"auto",maxHeight:"100%"},paperAnchorDockedLeft:{borderRight:"1px solid ".concat(e.palette.divider)},paperAnchorDockedTop:{borderBottom:"1px solid ".concat(e.palette.divider)},paperAnchorDockedRight:{borderLeft:"1px solid ".concat(e.palette.divider)},paperAnchorDockedBottom:{borderTop:"1px solid ".concat(e.palette.divider)},modal:{}}}),{name:"MuiDrawer",flip:!1})(dr),hr="undefined"!=typeof window?e.useLayoutEffect:e.useEffect,mr=function(t){var n=t.children,r=t.defer,o=void 0!==r&&r,i=t.fallback,a=void 0===i?null:i,l=e.useState(!1),u=l[0],s=l[1];return hr((function(){o||s(!0)}),[o]),e.useEffect((function(){o&&s(!0)}),[o]),e.createElement(e.Fragment,null,u?n:a)},vr=e.forwardRef((function(t,n){var r=t.anchor,o=t.classes,i=t.className,l=t.width,u=(0,K.Z)(t,["anchor","classes","className","width"]);return e.createElement("div",(0,a.Z)({className:(0,nt.Z)(o.root,o["anchor".concat(rt(r))],i),ref:n,style:(0,J.Z)({},sr(r)?"width":"height",l)},u))})),yr=Ke((function(e){return{root:{position:"fixed",top:0,left:0,bottom:0,zIndex:e.zIndex.drawer-1},anchorLeft:{right:"auto"},anchorRight:{left:"auto",right:0},anchorTop:{bottom:"auto",right:0},anchorBottom:{top:"auto",bottom:0,right:0}}}),{name:"PrivateSwipeArea"})(vr),gr=null;function br(e,t){return"right"===e?document.body.offsetWidth-t[0].pageX:t[0].pageX}function xr(e,t){return"bottom"===e?window.innerHeight-t[0].clientY:t[0].clientY}function wr(e,t){return e?t.clientWidth:t.clientHeight}function kr(e,t,n,r){return Math.min(Math.max(n?t-e:r+t-e,0),r)}var Sr="undefined"!=typeof navigator&&/iPad|iPhone|iPod/.test(navigator.userAgent),Er={enter:Ue.enteringScreen,exit:Ue.leavingScreen},Cr="undefined"!=typeof window?e.useLayoutEffect:e.useEffect,Pr=e.forwardRef((function(n,r){var o=Xn(),i=(0,Yt.Z)({name:"MuiSwipeableDrawer",props:(0,a.Z)({},n),theme:o}),l=i.anchor,u=void 0===l?"left":l,s=i.disableBackdropTransition,c=void 0!==s&&s,f=i.disableDiscovery,d=void 0!==f&&f,p=i.disableSwipeToOpen,h=void 0===p?Sr:p,m=i.hideBackdrop,v=i.hysteresis,y=void 0===v?.52:v,g=i.minFlingVelocity,b=void 0===g?450:g,x=i.ModalProps,w=(x=void 0===x?{}:x).BackdropProps,k=(0,K.Z)(x,["BackdropProps"]),S=i.onClose,E=i.onOpen,C=i.open,P=i.PaperProps,R=void 0===P?{}:P,O=i.SwipeAreaProps,T=i.swipeAreaWidth,_=void 0===T?20:T,N=i.transitionDuration,M=void 0===N?Er:N,I=i.variant,j=void 0===I?"temporary":I,z=(0,K.Z)(i,["anchor","disableBackdropTransition","disableDiscovery","disableSwipeToOpen","hideBackdrop","hysteresis","minFlingVelocity","ModalProps","onClose","onOpen","open","PaperProps","SwipeAreaProps","swipeAreaWidth","transitionDuration","variant"]),A=e.useState(!1),Z=A[0],L=A[1],F=e.useRef({isSwiping:null}),D=e.useRef(),W=e.useRef(),$=e.useRef(),U=e.useRef(!1),B=e.useRef();Cr((function(){B.current=null}),[C]);var V=e.useCallback((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.mode,r=void 0===n?null:n,i=t.changeTransition,a=void 0===i||i,l=cr(o,u),s=-1!==["right","bottom"].indexOf(l)?1:-1,f=sr(u),d=f?"translate(".concat(s*e,"px, 0)"):"translate(0, ".concat(s*e,"px)"),p=$.current.style;p.webkitTransform=d,p.transform=d;var h="";if(r&&(h=o.transitions.create("all",Jn({timeout:M},{mode:r}))),a&&(p.webkitTransition=h,p.transition=h),!c&&!m){var v=W.current.style;v.opacity=1-e/wr(f,$.current),a&&(v.webkitTransition=h,v.transition=h)}}),[u,c,m,o,M]),H=ht((function(e){if(U.current)if(gr=null,U.current=!1,L(!1),F.current.isSwiping){F.current.isSwiping=null;var t,n=cr(o,u),r=sr(u);t=r?br(n,e.changedTouches):xr(n,e.changedTouches);var i=r?F.current.startX:F.current.startY,a=wr(r,$.current),l=kr(t,i,C,a),s=l/a;Math.abs(F.current.velocity)>b&&(B.current=1e3*Math.abs((a-l)/F.current.velocity)),C?F.current.velocity>b||s>y?S():V(0,{mode:"exit"}):F.current.velocity<-b||1-s>y?E():V(wr(r,$.current),{mode:"enter"})}else F.current.isSwiping=null})),Y=ht((function(e){if($.current&&U.current&&(null==gr||gr===F.current)){var t=cr(o,u),n=sr(u),r=br(t,e.touches),i=xr(t,e.touches);if(C&&$.current.contains(e.target)&&null==gr){var a=function(e){var t=e.start,n=e.current,r=e.anchor,o={x:"scrollLeft",y:"scrollTop"},i={x:"scrollWidth",y:"scrollHeight"},a={x:"clientWidth",y:"clientHeight"};return e.domTreeShapes.some((function(e){var l=n>=t;"top"!==r&&"left"!==r||(l=!l);var u="left"===r||"right"===r?"x":"y",s=e[o[u]],c=s>0,f=s+e[a[u]]<e[i[u]];return l&&f||!l&&c?e:null}))}({domTreeShapes:function(e,t){for(var n=[];e&&e!==t;){var r=window.getComputedStyle(e);"absolute"===r.getPropertyValue("position")||"hidden"===r.getPropertyValue("overflow-x")?n=[]:(e.clientWidth>0&&e.scrollWidth>e.clientWidth||e.clientHeight>0&&e.scrollHeight>e.clientHeight)&&n.push(e),e=e.parentElement}return n}(e.target,$.current),start:n?F.current.startX:F.current.startY,current:n?r:i,anchor:u});if(a)return void(gr=a);gr=F.current}if(null==F.current.isSwiping){var l=Math.abs(r-F.current.startX),s=Math.abs(i-F.current.startY);l>s&&e.cancelable&&e.preventDefault();var c=n?l>s&&l>3:s>l&&s>3;if(!0===c||(n?s>3:l>3)){if(F.current.isSwiping=c,!c)return void H(e);F.current.startX=r,F.current.startY=i,d||C||(n?F.current.startX-=_:F.current.startY-=_)}}if(F.current.isSwiping){var f=wr(n,$.current),p=n?F.current.startX:F.current.startY;C&&!F.current.paperHit&&(p=Math.min(p,f));var h=kr(n?r:i,p,C,f);if(C)if(F.current.paperHit)0===h&&(F.current.startX=r,F.current.startY=i);else{if(!(n?r<f:i<f))return;F.current.paperHit=!0,F.current.startX=r,F.current.startY=i}null===F.current.lastTranslate&&(F.current.lastTranslate=h,F.current.lastTime=performance.now()+1);var m=(h-F.current.lastTranslate)/(performance.now()-F.current.lastTime)*1e3;F.current.velocity=.4*F.current.velocity+.6*m,F.current.lastTranslate=h,F.current.lastTime=performance.now(),e.cancelable&&e.preventDefault(),V(h)}}})),q=ht((function(e){if(!e.defaultPrevented&&!e.muiHandled&&(!C||W.current.contains(e.target)||$.current.contains(e.target))){var t=cr(o,u),n=sr(u),r=br(t,e.touches),i=xr(t,e.touches);if(!C){if(h||e.target!==D.current)return;if(n){if(r>_)return}else if(i>_)return}e.muiHandled=!0,gr=null,F.current.startX=r,F.current.startY=i,L(!0),!C&&$.current&&V(wr(n,$.current)+(d?20:-_),{changeTransition:!1}),F.current.velocity=0,F.current.lastTime=null,F.current.lastTranslate=null,F.current.paperHit=!1,U.current=!0}}));e.useEffect((function(){if("temporary"===j){var e=Cn($.current);return e.addEventListener("touchstart",q),e.addEventListener("touchmove",Y,{passive:!1}),e.addEventListener("touchend",H),function(){e.removeEventListener("touchstart",q),e.removeEventListener("touchmove",Y,{passive:!1}),e.removeEventListener("touchend",H)}}}),[j,q,Y,H]),e.useEffect((function(){return function(){gr===F.current&&(gr=null)}}),[]),e.useEffect((function(){C||L(!1)}),[C]);var G=e.useCallback((function(e){W.current=t.findDOMNode(e)}),[]);return e.createElement(e.Fragment,null,e.createElement(pr,(0,a.Z)({open:!("temporary"!==j||!Z)||C,variant:j,ModalProps:(0,a.Z)({BackdropProps:(0,a.Z)({},w,{ref:G})},k),PaperProps:(0,a.Z)({},R,{style:(0,a.Z)({pointerEvents:"temporary"!==j||C?"":"none"},R.style),ref:$}),anchor:u,transitionDuration:B.current||M,onClose:S,ref:r},z)),!h&&"temporary"===j&&e.createElement(mr,null,e.createElement(yr,(0,a.Z)({anchor:u,ref:D,width:_},O))))})),Rr=function(){function e(){}return e.ROOT="/index",e.SIGNIN="/sign_in",e.SIGNUP="/sign_up",e.PRIVACY_POLICY="/privacypolicy_page",e.TERMS_POLICY="/terms_page",e.MYPAGE="/my_page",e.MEMBER_REGIST="/member_regist",e.REMOVE_ACCOUNT="/remove_page",e}();function Or(t){var n=L(),r=Z(_).location,o=rn(),i=(0,$t.Z)(),a=(0,e.useState)(!1),l=a[0],u=a[1],s=(0,e.useState)(!1),c=s[0],f=(s[1],"white"===t.color?{background:"rgba(255,255,255,0.7)",color:i.palette.text.primary}:{backgroundColor:i.palette.primary.main,color:i.palette.primary.contrastText});return e.createElement(e.Fragment,null,e.createElement(xn,{position:"fixed",style:f},e.createElement(kn,null,e.createElement("div",{style:{flexGrow:1}},e.createElement(Vt,{color:"inherit",className:o.textSubTitle,onClick:function(){return n.push("/")}},"S-Suport")),c&&e.createElement(En,{color:"inherit",onClick:function(){n.push(Rr.ROOT)}},e.createElement(dn,null,"logout")),e.createElement(En,{color:"inherit",onClick:function(){return u(!l)}},e.createElement(dn,null,"menu")))),e.createElement(Pr,{anchor:"top",open:l,onOpen:function(){return u(!0)},onClose:function(){return u(!1)}},e.createElement(ln,null,function(e){var t=[{name:"トップページ",href:Rr.ROOT,icon:"home"},{name:"ご利用規約",href:Rr.TERMS_POLICY,icon:"assignment"},{name:"プライバシーポリシー",href:Rr.PRIVACY_POLICY,icon:"privacy_tip"}];return e.isLogined?t.push({name:"マイページ",href:Rr.MYPAGE,icon:"person"}):(t.push({name:"会員登録",href:Rr.SIGNUP,icon:"how_to_reg"}),t.push({name:"ログイン",href:Rr.SIGNIN,icon:"person"})),t}({isLogined:c}).filter((function(e){return e.href!==r.pathname})).map((function(t,r){return e.createElement(cn,{key:r,button:!0,onClick:function(){return n.push(t.href)},style:{width:"100%"}},e.createElement(vn,null,e.createElement(dn,{color:"inherit"},t.icon)),e.createElement(hn,{color:"inherit",primary:t.name,style:{paddingRight:i.spacing(6)}}))})))))}var Tr=e.forwardRef((function(t,n){var r=t.absolute,o=void 0!==r&&r,i=t.classes,l=t.className,u=t.component,s=void 0===u?"hr":u,c=t.flexItem,f=void 0!==c&&c,d=t.light,p=void 0!==d&&d,h=t.orientation,m=void 0===h?"horizontal":h,v=t.role,y=void 0===v?"hr"!==s?"separator":void 0:v,g=t.variant,b=void 0===g?"fullWidth":g,x=(0,K.Z)(t,["absolute","classes","className","component","flexItem","light","orientation","role","variant"]);return e.createElement(s,(0,a.Z)({className:(0,nt.Z)(i.root,l,"fullWidth"!==b&&i[b],o&&i.absolute,f&&i.flexItem,p&&i.light,"vertical"===m&&i.vertical),role:y,ref:n},x))})),_r=Ke((function(e){return{root:{height:1,margin:0,border:"none",flexShrink:0,backgroundColor:e.palette.divider},absolute:{position:"absolute",bottom:0,left:0,width:"100%"},inset:{marginLeft:72},light:{backgroundColor:Pe(e.palette.divider,.08)},middle:{marginLeft:e.spacing(2),marginRight:e.spacing(2)},vertical:{height:"100%",width:1},flexItem:{alignSelf:"stretch",height:"auto"}}}),{name:"MuiDivider"})(Tr);function Nr(){var t=rn();return e.createElement(e.Fragment,null,e.createElement("div",{style:{height:"3em"}}),e.createElement(_r,null),e.createElement(Vt,{align:"right",color:"textSecondary",style:{marginTop:"3em",marginBottom:"1em"},className:t.textParagraph},"sample"),e.createElement(Vt,{align:"right",color:"textSecondary",style:{marginTop:"3em",marginBottom:"1em"},className:t.textParagraph},"sample.co.ltd"),e.createElement("div",{style:{height:"3em"}}))}var Mr=function(t){var n=rn(),r=(0,$t.Z)();return e.createElement(e.Fragment,null,e.createElement(Or,{color:"primary"}),e.createElement(it,{className:Qt.clsx.join(t.className,n.contentSectionContainer)},e.createElement("div",{className:n.toolbar}),e.createElement("div",{style:{marginTop:r.spacing(3)}}),e.createElement(e.Fragment,null,t.children)),e.createElement(Nr,null))},Ir=function(t){var n=(0,$t.Z)(),r=rn();return e.createElement(e.Fragment,null,e.createElement(Or,{color:"white"}),e.createElement("div",{className:r.toolbar}),e.createElement("div",{style:{marginTop:n.spacing(3)}}),e.createElement(e.Fragment,null,t.children),e.createElement(Nr,null))},jr={top:{title:"sample site",msgs1:"sample message",msgs2:"sample message description",bgImage:"https://lh3.googleusercontent.com/pw/ACtC-3dlydaZtfYp4bvlQ8NhZhoY7W92LKxA3xSJDJwHeq3bNuyEtphgGUltvKB7GAr6GL6Ok43t7q7M7va2mFPCQkSqSHgx0ystnpWQy_KAfUF8_vwiAq-eiJ1sFRFeEkHAFlMokyOLGkteEPUDF5BAngk"},descs:[{title:"sample site",msgs1:"sample message",bgImage:"https://lh3.googleusercontent.com/pw/ACtC-3d2EN1Q1Ray9Ib9a2bLA_uC7Ngq5hWkFnVkDsalHNt4ccLUuxCr9FAPpt4rnaA3Y28hYADp6TVi9yzKKkaw5lOEWOaYhu0UW3d7hT7giMcfXgis4jyz3SCetsiGPYkxiESojwSpAsS0pssuyUkguW8"},{title:"sample site",msgs1:"sample message",bgImage:"https://lh3.googleusercontent.com/pw/ACtC-3fn1bck56ecJUGCyChRCP2zpzUSHQVsdsp3iZ5FLxe-YXfPxYjHMNCusG8Id7ojrU4_KUMnqg25_7CMcONDWjRrhj2pnfQ27DmIwbCoCjCEFZ-X4sYTm1uh9ojyc4v68DmEccoe9vwgIeoEIg0EJfg"}]},zr=en((function(e){return nn({InImageTitleText:{textAlign:"center",fontWeight:e.typography.fontWeightBold,color:"inherit"},InImageSubTitleText:{textAlign:"center",fontWeight:e.typography.fontWeightBold,color:"inherit"},InImageParagraphText:{textAlign:"center",fontWeight:e.typography.fontWeightBold,maxWidth:e.breakpoints.width("sm"),color:"inherit"},CardContainer:{backgroundSize:"cover",backgroundPosition:"center",color:"#fff",height:"60vh",width:"inherit"},Inducation:{height:"30vh",marginTop:"5vh"}})})),Ar=e.forwardRef((function(t,n){var r=t.classes,o=t.className,i=t.raised,l=void 0!==i&&i,u=(0,K.Z)(t,["classes","className","raised"]);return e.createElement(gn,(0,a.Z)({className:(0,nt.Z)(r.root,o),elevation:l?8:1,ref:n},u))})),Zr=Ke({root:{overflow:"hidden"}},{name:"MuiCard"})(Ar),Lr=function(t){var n=t.nowHeight,r=t.children,o=t.transitionType,i=(0,e.useRef)(null),a=rn(),l=(0,e.useState)(!1),u=l[0],s=l[1],c=(0,e.useState)(o),f=c[0],d=c[1];return(0,e.useEffect)((function(){var e;if(!u){var t=n+window.innerHeight/1.3,r=null===(e=i.current)||void 0===e?void 0:e.offsetTop;void 0!==r&&("up"===function(e,t,n){return n>t?"up":n-100<t&&n-100<e?"down":"in"}(n,t,r)?d(u?a.transitionFadeInEnd:o):(s(!0),d(a.transitionFadeInRun)))}}),[n]),e.createElement("div",{ref:i,className:f},r)},Fr=n(5280),Dr=function(){var t=rn(),n=zr(),r=(0,$t.Z)(),o=L(),i=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=(0,Ht.Z)(),o=(0,Yt.Z)({theme:r,name:"MuiUseMediaQuery",props:{}}),i="function"==typeof t?t(r):t;i=i.replace(/^@media( ?)/m,"");var l="undefined"!=typeof window&&void 0!==window.matchMedia,u=(0,a.Z)({},o,n),s=u.defaultMatches,c=void 0!==s&&s,f=u.matchMedia,d=void 0===f?l?window.matchMedia:null:f,p=u.noSsr,h=void 0!==p&&p,m=u.ssrMatchMedia,v=void 0===m?null:m,y=e.useState((function(){return h&&l?d(i).matches:v?v(i).matches:c})),g=y[0],b=y[1];return e.useEffect((function(){var e=!0;if(l){var t=d(i),n=function(){e&&b(t.matches)};return n(),t.addListener(n),function(){e=!1,t.removeListener(n)}}}),[i,d,l]),g}(r.breakpoints.down("sm")),l=(0,e.useState)(0),u=l[0],s=l[1];return(0,e.useEffect)((function(){var e=!0,t=function(){e&&s(Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop))},n=Fr.Tools.throttle(t,100);return document.addEventListener("scroll",n),function(){document.removeEventListener("scroll",t),e=!1}}),[]),e.createElement(Ir,null,e.createElement(it,{maxWidth:"lg"},e.createElement(Lr,{nowHeight:u,transitionType:t.transitionFadeInUpPending},e.createElement(Zr,{className:Qt.clsx.join(t.positionCentering,t.cardBasic,n.CardContainer),style:{backgroundImage:"url("+jr.top.bgImage+")"}},e.createElement(ct,{container:!0,justify:"center",alignItems:"stretch",spacing:3,style:{height:"100%"}},e.createElement(ct,{item:!0,xs:12,md:6},e.createElement("div",{className:Qt.clsx.boolSwitch(i,t.positionXCenterYBottom,t.positionCentering)},e.createElement(Vt,{component:"h1",className:Qt.clsx.join(t.textTitle,n.InImageTitleText)},jr.top.title))),e.createElement(ct,{item:!0,xs:12,md:6},e.createElement("div",{className:Qt.clsx.boolSwitch(i,t.positionXCenterYTop,t.positionCentering)},e.createElement("div",null,e.createElement(Vt,{component:"h2",className:Qt.clsx.join(t.textSubTitle,n.InImageSubTitleText)},jr.top.msgs1),e.createElement(Vt,{className:Qt.clsx.join(t.textCaption,n.InImageParagraphText)},jr.top.msgs2))))))),e.createElement("div",{className:Qt.clsx.join(t.positionXCenterYTop,n.Inducation)},e.createElement(Xt,null)),jr.descs.map((function(r,o){return e.createElement(e.Fragment,{key:o},e.createElement(Lr,{nowHeight:u,transitionType:Qt.clsx.boolSwitch(o+0===0,t.transitionFadeInRightPending,t.transitionFadeInLeftPending)},e.createElement("div",{style:{display:"flex",flexDirection:"column",width:"inherit"}},e.createElement(Zr,{className:Qt.clsx.join(t.positionCentering,t.cardBasic,n.CardContainer),style:{backgroundImage:"url("+r.bgImage+")"}},e.createElement(ct,{container:!0,justify:"center",alignItems:"stretch",spacing:3,style:{height:"inherit%"}},e.createElement(ct,{item:!0,xs:12,md:6},e.createElement("div",{className:Qt.clsx.boolSwitch(i,t.positionXCenterYBottom,t.positionCentering)},e.createElement(Vt,{component:"h2",className:Qt.clsx.join(t.textSubTitle,n.InImageSubTitleText)},r.title))),e.createElement(ct,{item:!0,xs:12,md:6},e.createElement("div",{className:Qt.clsx.boolSwitch(i,t.positionXCenterYTop,t.positionCentering)},e.createElement("div",null,e.createElement(Vt,{className:Qt.clsx.join(t.textCaption,n.InImageParagraphText)},r.msgs1)))))),e.createElement("div",{className:Qt.clsx.join(t.positionXCenterYTop,n.Inducation)},e.createElement(Xt,null)))))})),e.createElement("div",{style:{height:"40vh"}},e.createElement("div",{className:t.positionCentering},e.createElement(Lr,{nowHeight:u,transitionType:t.transitionFadeInUpPending},e.createElement(Vt,{component:"h2",color:"primary",align:"center",className:t.textSubTitle},"画面遷移メッセージ"),e.createElement("div",{style:{height:"3em"}}),e.createElement(Wt,{className:t.buttonPrimary,size:"large",type:"button",variant:"contained",fullWidth:!0,onClick:function(){o.push(Rr.MYPAGE)}},"画面遷移ボタン"),e.createElement("div",{style:{height:"20vh"}}))))))};function Wr(){var t=rn();return L(),e.createElement(Mr,null,e.createElement("div",{className:t.positionCentering,style:{height:"60vh"}},e.createElement("div",null,e.createElement(Vt,{component:"h2",align:"center",color:"inherit",className:t.textSubTitle,style:{fontWeight:"bold",width:"100%"}},"ログイン"),e.createElement(Vt,{align:"center",color:"textSecondary",className:t.textParagraph},"ログイン方法を選択して下さい"))))}function $r(){var t=rn(),n=L();return e.createElement(Mr,null,e.createElement(Zr,{className:Qt.clsx.join(t.cardBasic)},e.createElement(ct,{container:!0,direction:"column",justify:"center",alignItems:"stretch",spacing:3},e.createElement(ct,{item:!0},e.createElement("div",{style:{height:"2em"}}),e.createElement(Vt,{align:"center",color:"inherit",className:t.textSubTitle,style:{fontWeight:"bold"}},"プライバシーポリシー")),e.createElement(ct,{item:!0},e.createElement("div",{className:t.positionCentering},e.createElement(Wt,{type:"button",size:"small",className:t.buttonPrimary,style:{width:"60vw"},onClick:function(){n.goBack()}},"戻る"))))))}function Ur(){var t=rn(),n=L();return e.createElement(Mr,null,e.createElement(Zr,{className:Qt.clsx.join(t.cardBasic)},e.createElement(ct,{container:!0,direction:"column",justify:"center",alignItems:"stretch",spacing:3},e.createElement(ct,{item:!0},e.createElement("div",{style:{height:"2em"}}),e.createElement(Vt,{align:"center",color:"inherit",className:t.textSubTitle,style:{fontWeight:"bold"}},"利用規約")),e.createElement(ct,{item:!0},e.createElement("div",{className:t.positionCentering},e.createElement(Wt,{type:"button",size:"small",className:t.buttonPrimary,style:{width:"60vw"},onClick:function(){n.goBack()}},"戻る"))))))}function Br(){var t=rn();return L(),e.createElement(Mr,null,e.createElement("div",{className:t.positionCentering,style:{height:"60vh"}},e.createElement("div",null,e.createElement(Vt,{component:"h2",align:"center",color:"inherit",className:t.textSubTitle,style:{fontWeight:"bold",width:"100%"}},"会員登録"),e.createElement(Vt,{align:"center",color:"textSecondary",className:t.textParagraph},"アカウントの登録方法を選択下さい"))))}var Vr=e.createContext(),Hr="table",Yr=e.forwardRef((function(t,n){var r=t.classes,o=t.className,i=t.component,l=void 0===i?Hr:i,u=t.padding,s=void 0===u?"default":u,c=t.size,f=void 0===c?"medium":c,d=t.stickyHeader,p=void 0!==d&&d,h=(0,K.Z)(t,["classes","className","component","padding","size","stickyHeader"]),m=e.useMemo((function(){return{padding:s,size:f,stickyHeader:p}}),[s,f,p]);return e.createElement(Vr.Provider,{value:m},e.createElement(l,(0,a.Z)({role:l===Hr?null:"table",ref:n,className:(0,nt.Z)(r.root,o,p&&r.stickyHeader)},h)))})),qr=Ke((function(e){return{root:{display:"table",width:"100%",borderCollapse:"collapse",borderSpacing:0,"& caption":(0,a.Z)({},e.typography.body2,{padding:e.spacing(2),color:e.palette.text.secondary,textAlign:"left",captionSide:"bottom"})},stickyHeader:{borderCollapse:"separate"}}}),{name:"MuiTable"})(Yr),Kr=e.createContext(),Gr={variant:"body"},Xr="tbody",Qr=e.forwardRef((function(t,n){var r=t.classes,o=t.className,i=t.component,l=void 0===i?Xr:i,u=(0,K.Z)(t,["classes","className","component"]);return e.createElement(Kr.Provider,{value:Gr},e.createElement(l,(0,a.Z)({className:(0,nt.Z)(r.root,o),ref:n,role:l===Xr?null:"rowgroup"},u)))})),Jr=Ke({root:{display:"table-row-group"}},{name:"MuiTableBody"})(Qr),eo=e.forwardRef((function(t,n){var r,o,i=t.align,l=void 0===i?"inherit":i,u=t.classes,s=t.className,c=t.component,f=t.padding,d=t.scope,p=t.size,h=t.sortDirection,m=t.variant,v=(0,K.Z)(t,["align","classes","className","component","padding","scope","size","sortDirection","variant"]),y=e.useContext(Vr),g=e.useContext(Kr),b=g&&"head"===g.variant;c?(o=c,r=b?"columnheader":"cell"):o=b?"th":"td";var x=d;!x&&b&&(x="col");var w=f||(y&&y.padding?y.padding:"default"),k=p||(y&&y.size?y.size:"medium"),S=m||g&&g.variant,E=null;return h&&(E="asc"===h?"ascending":"descending"),e.createElement(o,(0,a.Z)({ref:n,className:(0,nt.Z)(u.root,u[S],s,"inherit"!==l&&u["align".concat(rt(l))],"default"!==w&&u["padding".concat(rt(w))],"medium"!==k&&u["size".concat(rt(k))],"head"===S&&y&&y.stickyHeader&&u.stickyHeader),"aria-sort":E,role:r,scope:x},v))})),to=Ke((function(e){return{root:(0,a.Z)({},e.typography.body2,{display:"table-cell",verticalAlign:"inherit",borderBottom:"1px solid\n    ".concat("light"===e.palette.type?Oe(Pe(e.palette.divider,1),.88):Re(Pe(e.palette.divider,1),.68)),textAlign:"left",padding:16}),head:{color:e.palette.text.primary,lineHeight:e.typography.pxToRem(24),fontWeight:e.typography.fontWeightMedium},body:{color:e.palette.text.primary},footer:{color:e.palette.text.secondary,lineHeight:e.typography.pxToRem(21),fontSize:e.typography.pxToRem(12)},sizeSmall:{padding:"6px 24px 6px 16px","&:last-child":{paddingRight:16},"&$paddingCheckbox":{width:24,padding:"0 12px 0 16px","&:last-child":{paddingLeft:12,paddingRight:16},"& > *":{padding:0}}},paddingCheckbox:{width:48,padding:"0 0 0 4px","&:last-child":{paddingLeft:0,paddingRight:4}},paddingNone:{padding:0,"&:last-child":{padding:0}},alignLeft:{textAlign:"left"},alignCenter:{textAlign:"center"},alignRight:{textAlign:"right",flexDirection:"row-reverse"},alignJustify:{textAlign:"justify"},stickyHeader:{position:"sticky",top:0,left:0,zIndex:2,backgroundColor:e.palette.background.default}}}),{name:"MuiTableCell"})(eo),no=e.forwardRef((function(t,n){var r=t.classes,o=t.className,i=t.component,l=void 0===i?"div":i,u=(0,K.Z)(t,["classes","className","component"]);return e.createElement(l,(0,a.Z)({ref:n,className:(0,nt.Z)(r.root,o)},u))})),ro=Ke({root:{width:"100%",overflowX:"auto"}},{name:"MuiTableContainer"})(no),oo=e.forwardRef((function(t,n){var r=t.classes,o=t.className,i=t.component,l=void 0===i?"tr":i,u=t.hover,s=void 0!==u&&u,c=t.selected,f=void 0!==c&&c,d=(0,K.Z)(t,["classes","className","component","hover","selected"]),p=e.useContext(Kr);return e.createElement(l,(0,a.Z)({ref:n,className:(0,nt.Z)(r.root,o,p&&{head:r.head,footer:r.footer}[p.variant],s&&r.hover,f&&r.selected),role:"tr"===l?null:"row"},d))})),io=Ke((function(e){return{root:{color:"inherit",display:"table-row",verticalAlign:"middle",outline:0,"&$hover:hover":{backgroundColor:e.palette.action.hover},"&$selected, &$selected:hover":{backgroundColor:Pe(e.palette.secondary.main,e.palette.action.selectedOpacity)}},selected:{},hover:{},head:{},footer:{}}}),{name:"MuiTableRow"})(oo),ao=function(t){var n=t.data;return e.createElement(ro,{component:gn},e.createElement(qr,null,e.createElement(Jr,null,n.map((function(t){return e.createElement(io,{key:t.name},e.createElement(to,{color:"primary",align:"center",component:"th",scope:"row"},t.name),e.createElement(to,{align:"left",component:"th",scope:"row"},t.value))})))))},lo=44,uo=e.forwardRef((function(t,n){var r=t.classes,o=t.className,i=t.color,l=void 0===i?"primary":i,u=t.disableShrink,s=void 0!==u&&u,c=t.size,f=void 0===c?40:c,d=t.style,p=t.thickness,h=void 0===p?3.6:p,m=t.value,v=void 0===m?0:m,y=t.variant,g=void 0===y?"indeterminate":y,b=(0,K.Z)(t,["classes","className","color","disableShrink","size","style","thickness","value","variant"]),x={},w={},k={};if("determinate"===g||"static"===g){var S=2*Math.PI*((lo-h)/2);x.strokeDasharray=S.toFixed(3),k["aria-valuenow"]=Math.round(v),x.strokeDashoffset="".concat(((100-v)/100*S).toFixed(3),"px"),w.transform="rotate(-90deg)"}return e.createElement("div",(0,a.Z)({className:(0,nt.Z)(r.root,o,"inherit"!==l&&r["color".concat(rt(l))],{determinate:r.determinate,indeterminate:r.indeterminate,static:r.static}[g]),style:(0,a.Z)({width:f,height:f},w,d),ref:n,role:"progressbar"},k,b),e.createElement("svg",{className:r.svg,viewBox:"".concat(22," ").concat(22," ").concat(lo," ").concat(lo)},e.createElement("circle",{className:(0,nt.Z)(r.circle,s&&r.circleDisableShrink,{determinate:r.circleDeterminate,indeterminate:r.circleIndeterminate,static:r.circleStatic}[g]),style:x,cx:lo,cy:lo,r:(lo-h)/2,fill:"none",strokeWidth:h})))})),so=Ke((function(e){return{root:{display:"inline-block"},static:{transition:e.transitions.create("transform")},indeterminate:{animation:"$circular-rotate 1.4s linear infinite"},determinate:{transition:e.transitions.create("transform")},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},svg:{display:"block"},circle:{stroke:"currentColor"},circleStatic:{transition:e.transitions.create("stroke-dashoffset")},circleIndeterminate:{animation:"$circular-dash 1.4s ease-in-out infinite",strokeDasharray:"80px, 200px",strokeDashoffset:"0px"},circleDeterminate:{transition:e.transitions.create("stroke-dashoffset")},"@keyframes circular-rotate":{"0%":{transformOrigin:"50% 50%"},"100%":{transform:"rotate(360deg)"}},"@keyframes circular-dash":{"0%":{strokeDasharray:"1px, 200px",strokeDashoffset:"0px"},"50%":{strokeDasharray:"100px, 200px",strokeDashoffset:"-15px"},"100%":{strokeDasharray:"100px, 200px",strokeDashoffset:"-125px"}},circleDisableShrink:{animation:"none"}}}),{name:"MuiCircularProgress",flip:!1})(uo);function co(t){var n=rn();return e.createElement("div",null,t.loadFlag?e.createElement("div",{className:n.positionFixedCentering,style:{zIndex:9995,backgroundColor:"rgba(255, 255, 255, 0.7)",width:"100vw",height:"100vh"}},e.createElement("div",{className:n.positionFixedCentering},e.createElement(so,{color:"primary",style:{zIndex:9999,opacity:1}}))):e.createElement("div",null))}var fo=function(){return(fo=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function po(){var t=rn(),n=L(),r=(0,e.useState)(void 0),o=r[0],i=(r[1],e.useState(!0)),a=i[0];return i[1],(0,e.useEffect)((function(){return function(){}}),[]),null==o?e.createElement(Mr,null,e.createElement(co,{loadFlag:a})):e.createElement(Mr,null,e.createElement(Vt,{align:"center",className:t.textCaption,style:{margin:"1em"}},"マイページ"),e.createElement(it,{maxWidth:"md"},e.createElement(ao,fo({},{data:[{name:"氏名",value:o.lastName+" "+o.firstName},{name:"メール",value:o.email},{name:"電話番号",value:o.phone},{name:"組織名称",value:o.organizeName},{name:"資本金額",value:Fr.Molding.to3DigitNum(Number(o.capital))+" 円"},{name:"創業年度",value:Fr.Molding.to3DigitNum(Number(o.establishedYear))+" 年"},{name:"従業員数",value:Fr.Molding.to3DigitNum(Number(o.employeesCount))+" 人"},{name:"都道府県",value:o.prefectures},{name:"業種",value:o.industry}]})),e.createElement("div",{style:{width:"100%"},className:t.positionLefting},e.createElement(Wt,{size:"small",style:{margin:"1em"},className:t.buttonPrimary,onClick:function(e){n.push(Rr.MEMBER_REGIST)}},"編集"),e.createElement(Wt,{size:"small",style:{margin:"1em"},className:t.buttonSecondary,onClick:function(e){return n.push(Rr.REMOVE_ACCOUNT)}},"退会"))))}function ho(){var t=rn(),n=L();return e.createElement(Mr,null,e.createElement(Vt,{component:"h2",align:"center",className:t.textSubTitle,style:{width:"100%",fontWeight:"bold",marginTop:"2em"}},"退会処理"),e.createElement(Vt,{align:"center",className:t.textParagraph},"一度退会するとアカウントを復活させる事は出来ません",e.createElement("br",null),"退会しますか？"),e.createElement("div",{className:t.positionCentering,style:{marginTop:"2em",marginBottom:"3em"}},e.createElement(ct,{container:!0,direction:"row",justify:"center",alignItems:"center",spacing:3,style:{width:"60vw"}},e.createElement(ct,{item:!0,xs:6},e.createElement(Wt,{className:t.buttonPrimary,onClick:function(){},fullWidth:!0},"はい")),e.createElement(ct,{item:!0,xs:6},e.createElement(Wt,{className:t.buttonSecondary,onClick:function(){n.goBack()},fullWidth:!0},"いいえ")))))}(0,t.render)(e.createElement((function(){var t=rn();return e.createElement(e.Fragment,null,e.createElement(Qe,null),e.createElement("div",{className:t.rootContainer},e.createElement(Je.Z,{theme:tt},e.createElement(F,null,e.createElement(A,null,e.createElement(z,{exact:!0,path:Rr.ROOT,component:Dr}),e.createElement(z,{path:Rr.SIGNIN,component:Wr}),e.createElement(z,{path:Rr.SIGNUP,component:Br}),e.createElement(z,{path:Rr.PRIVACY_POLICY,component:$r}),e.createElement(z,{path:Rr.TERMS_POLICY,component:Ur}),e.createElement(z,{path:Rr.MYPAGE,component:po}),e.createElement(z,{path:Rr.REMOVE_ACCOUNT,component:ho}),e.createElement(z,{component:Dr}))))))}),null),document.getElementById("root"))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlMaWtlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aEhvbGVzLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVSZXN0LmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRob3V0SG9sZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVTcHJlYWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvY29sb3JzL2JsdWUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2NvbG9ycy9jb21tb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2NvbG9ycy9ncmVlbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvY29sb3JzL2dyZXkuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2NvbG9ycy9pbmRpZ28uanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2NvbG9ycy9vcmFuZ2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2NvbG9ycy9waW5rLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9jb2xvcnMvcmVkLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvY29sb3JNYW5pcHVsYXRvci5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2NyZWF0ZUJyZWFrcG9pbnRzLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvY3JlYXRlTWl4aW5zLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvY3JlYXRlTXVpVGhlbWUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9jcmVhdGVQYWxldHRlLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvY3JlYXRlU3BhY2luZy5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2NyZWF0ZVN0eWxlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2NyZWF0ZVR5cG9ncmFwaHkuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9kZWZhdWx0VGhlbWUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9tYWtlU3R5bGVzLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvc2hhZG93cy5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL3NoYXBlLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvdHJhbnNpdGlvbnMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy91c2VUaGVtZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL3pJbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vU3R5bGVzUHJvdmlkZXIvU3R5bGVzUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL1RoZW1lUHJvdmlkZXIvVGhlbWVQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vVGhlbWVQcm92aWRlci9uZXN0ZWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9jcmVhdGVTdHlsZXMvY3JlYXRlU3R5bGVzLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9nZXRUaGVtZVByb3BzL2dldFRoZW1lUHJvcHMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL1NlcnZlclN0eWxlU2hlZXRzL1NlcnZlclN0eWxlU2hlZXRzLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9zdHlsZWQvc3R5bGVkLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS93aXRoVGhlbWUvd2l0aFRoZW1lLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLXJ1bGUtdmFsdWUtZnVuY3Rpb24vZGlzdC9qc3MtcGx1Z2luLXJ1bGUtdmFsdWUtZnVuY3Rpb24uZXNtLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLWdsb2JhbC9kaXN0L2pzcy1wbHVnaW4tZ2xvYmFsLmVzbS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1uZXN0ZWQvZGlzdC9qc3MtcGx1Z2luLW5lc3RlZC5lc20uanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2h5cGhlbmF0ZS1zdHlsZS1uYW1lL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLWNhbWVsLWNhc2UvZGlzdC9qc3MtcGx1Z2luLWNhbWVsLWNhc2UuZXNtLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLWRlZmF1bHQtdW5pdC9kaXN0L2pzcy1wbHVnaW4tZGVmYXVsdC11bml0LmVzbS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvY3NzLXZlbmRvci9kaXN0L2Nzcy12ZW5kb3IuZXNtLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLXZlbmRvci1wcmVmaXhlci9kaXN0L2pzcy1wbHVnaW4tdmVuZG9yLXByZWZpeGVyLmVzbS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vanNzUHJlc2V0L2pzc1ByZXNldC5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1wcm9wcy1zb3J0L2Rpc3QvanNzLXBsdWdpbi1wcm9wcy1zb3J0LmVzbS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vbWFrZVN0eWxlcy9tdWx0aUtleVN0b3JlLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9tYWtlU3R5bGVzL2luZGV4Q291bnRlci5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vZ2V0U3R5bGVzQ3JlYXRvci9nZXRTdHlsZXNDcmVhdG9yLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9nZXRTdHlsZXNDcmVhdG9yL25vb3BUaGVtZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vbWFrZVN0eWxlcy9tYWtlU3R5bGVzLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9tZXJnZUNsYXNzZXMvbWVyZ2VDbGFzc2VzLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS91c2VUaGVtZS9UaGVtZUNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL3VzZVRoZW1lL3VzZVRoZW1lLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS93aXRoU3R5bGVzL3dpdGhTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL2JyZWFrcG9pbnRzLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9zdHlsZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vY29tcG9zZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vYm9yZGVycy5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vY3NzLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9kaXNwbGF5LmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9mbGV4Ym94LmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9ncmlkLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9wYWxldHRlLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9wb3NpdGlvbnMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL3NoYWRvd3MuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL3NpemluZy5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vdHlwb2dyYXBoeS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL21lbW9pemUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL3NwYWNpbmcuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS91dGlscy9lc20vZGVlcG1lcmdlLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvdXRpbHMvZXNtL2Zvcm1hdE11aUVycm9yTWVzc2FnZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3V0aWxzL2VzbS9jaGFpblByb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3V0aWxzL2VzbS9lbGVtZW50QWNjZXB0aW5nUmVmLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvdXRpbHMvZXNtL2VsZW1lbnRUeXBlQWNjZXB0aW5nUmVmLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvdXRpbHMvZXNtL2V4YWN0UHJvcC5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3V0aWxzL2VzbS9nZXREaXNwbGF5TmFtZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3V0aWxzL2VzbS9IVE1MRWxlbWVudFR5cGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS91dGlscy9lc20vcG9ueWZpbGxHbG9iYWwuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS91dGlscy9lc20vcmVmVHlwZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3V0aWxzL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS91dGlscy9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2Nsc3gvZGlzdC9jbHN4Lm0uanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9pcy1pbi1icm93c2VyL2Rpc3QvbW9kdWxlLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9qc3MvZGlzdC9qc3MuZXNtLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9wYXRoLXRvLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9yZWFjdC11dGlsaXRpZXMvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvdHMtdXRpbGl0aWVzL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXBhdGhuYW1lL2VzbS9yZXNvbHZlLXBhdGhuYW1lLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy90aW55LWludmFyaWFudC9kaXN0L3RpbnktaW52YXJpYW50LmVzbS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lc20vaGlzdG9yeS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dC9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzbS9yZWFjdC1yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXNtL3JlYWN0LXJvdXRlci1kb20uanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlQnJlYWtwb2ludHMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlTWl4aW5zLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9ncmV5LmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL2luZGlnby5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9waW5rLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL3JlZC5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9vcmFuZ2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvYmx1ZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9ncmVlbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jb2xvck1hbmlwdWxhdG9yLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NyZWF0ZVBhbGV0dGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlVHlwb2dyYXBoeS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9zaGFkb3dzLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3NoYXBlLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NyZWF0ZVNwYWNpbmcuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvdHJhbnNpdGlvbnMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvekluZGV4LmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NyZWF0ZU11aVRoZW1lLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2RlZmF1bHRUaGVtZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy93aXRoU3R5bGVzLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQ3NzQmFzZWxpbmUvQ3NzQmFzZWxpbmUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vc3JjL1N0eWxlcy90aGVtZS50cyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL2NhcGl0YWxpemUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Db250YWluZXIvQ29udGFpbmVyLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vR3JpZC9HcmlkLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvc2V0UmVmLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvdXNlRm9ya1JlZi5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy91c2VJc0ZvY3VzVmlzaWJsZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vdXRpbHMvQ2hpbGRNYXBwaW5nLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uR3JvdXAuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9CdXR0b25CYXNlL1JpcHBsZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0J1dHRvbkJhc2UvVG91Y2hSaXBwbGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9CdXR0b25CYXNlL0J1dHRvbkJhc2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9CdXR0b24vQnV0dG9uLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVHlwb2dyYXBoeS9UeXBvZ3JhcGh5LmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL3NyYy9Db21wb25lbnRzL0luZHVjdGlvbi50c3giLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvbWFrZVN0eWxlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jcmVhdGVTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vc3JjL1N0eWxlcy9nbG9iYWxDbHN4LnRzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTGlzdC9MaXN0Q29udGV4dC5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0xpc3QvTGlzdC5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0xpc3RJdGVtL0xpc3RJdGVtLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvaXNNdWlFbGVtZW50LmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vSWNvbi9JY29uLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTGlzdEl0ZW1UZXh0L0xpc3RJdGVtVGV4dC5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0xpc3RJdGVtSWNvbi9MaXN0SXRlbUljb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9QYXBlci9QYXBlci5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0FwcEJhci9BcHBCYXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Ub29sYmFyL1Rvb2xiYXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9JY29uQnV0dG9uL0ljb25CdXR0b24uanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9vd25lckRvY3VtZW50LmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vUG9ydGFsL1BvcnRhbC5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL01vZGFsL01vZGFsTWFuYWdlci5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL293bmVyV2luZG93LmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvZ2V0U2Nyb2xsYmFyU2l6ZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1Vuc3RhYmxlX1RyYXBGb2N1cy9VbnN0YWJsZV9UcmFwRm9jdXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Nb2RhbC9TaW1wbGVCYWNrZHJvcC5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL01vZGFsL01vZGFsLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3VzZVRoZW1lLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdHJhbnNpdGlvbnMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9GYWRlL0ZhZGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9CYWNrZHJvcC9CYWNrZHJvcC5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1NsaWRlL1NsaWRlLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9EcmF3ZXIvRHJhd2VyLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTm9Tc3IvTm9Tc3IuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Td2lwZWFibGVEcmF3ZXIvU3dpcGVBcmVhLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vU3dpcGVhYmxlRHJhd2VyL1N3aXBlYWJsZURyYXdlci5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9zcmMvRGF0YVN0cnVjdHVyZS9Sb3V0ZXJQYXRoLnRzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL3NyYy9PcmdhbmlzbXMvSGVhZGVyQW5kRHJhd2VyLnRzeCIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0RpdmlkZXIvRGl2aWRlci5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9zcmMvT3JnYW5pc21zL1NpdGVGb290ZXIudHN4Iiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL3NyYy9PcmdhbmlzbXMvUGFnZVJvb3QudHN4Iiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL3NyYy9QYWdlcy9Qcm9kdWN0UGFnZS9Qcm9kdWN0UGFnZURhdGEudHMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vc3JjL1BhZ2VzL1Byb2R1Y3RQYWdlL1Byb2R1Y3RQYWdlQ3NzLnRzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQ2FyZC9DYXJkLmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL3NyYy9Db21wb25lbnRzL0ZhZGUudHN4Iiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL3NyYy9QYWdlcy9Qcm9kdWN0UGFnZS9pbmRleC50c3giLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91c2VNZWRpYVF1ZXJ5L3VzZU1lZGlhUXVlcnkuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vc3JjL1BhZ2VzL0F1dGhQYWdlL1NpZ25JblNjcmVlbi50c3giLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vc3JjL1BhZ2VzL0F1dGhQYWdlL1ByaXZhY3kvUHJpdmFjeVBvbGljeVBhZ2UudHN4Iiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL3NyYy9QYWdlcy9BdXRoUGFnZS9UZXJtcy9UZXJtc1BhZ2UudHN4Iiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL3NyYy9QYWdlcy9BdXRoUGFnZS9TaWduVXBTY3JlZW4udHN4Iiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGFibGUvVGFibGVDb250ZXh0LmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGFibGUvVGFibGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9UYWJsZS9UYWJsZWx2bDJDb250ZXh0LmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGFibGVCb2R5L1RhYmxlQm9keS5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1RhYmxlQ2VsbC9UYWJsZUNlbGwuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9UYWJsZUNvbnRhaW5lci9UYWJsZUNvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1RhYmxlUm93L1RhYmxlUm93LmpzIiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL3NyYy9Db21wb25lbnRzL1RhYmxlLnRzeCIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0NpcmN1bGFyUHJvZ3Jlc3MvQ2lyY3VsYXJQcm9ncmVzcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC13cC1hcHAtdGVtcGxhdGUvLi9zcmMvT3JnYW5pc21zL0xvYWRDaXJjbGUudHN4Iiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL3NyYy9QYWdlcy9NeVBhZ2UvaW5kZXgudHN4Iiwid2VicGFjazovL3JlYWN0LXdwLWFwcC10ZW1wbGF0ZS8uL3NyYy9QYWdlcy9BdXRoUGFnZS9SZW1vdmUvUmVtb3ZlUGFnZS50c3giLCJ3ZWJwYWNrOi8vcmVhY3Qtd3AtYXBwLXRlbXBsYXRlLy4vc3JjL0FwcC50c3giXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIm9iaiIsImtleSIsInZhbHVlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfX2VzTW9kdWxlIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJsZW5ndGgiLCJpIiwiYXJyMiIsIkFycmF5IiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsIl9jcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsIl9kZWZpbmVQcm9wZXJ0eSIsIl9leHRlbmRzIiwiYXNzaWduIiwiYXJndW1lbnRzIiwic291cmNlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJ0aGlzIiwiX3NldFByb3RvdHlwZU9mIiwibyIsInAiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJleGNsdWRlZCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInNvdXJjZVN5bWJvbEtleXMiLCJpbmRleE9mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsInNvdXJjZUtleXMiLCJrZXlzIiwiX3NsaWNlZFRvQXJyYXkiLCJpc0FycmF5IiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwidW5kZWZpbmVkIiwiX3MiLCJfaSIsIm5leHQiLCJkb25lIiwicHVzaCIsImVyciIsInVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiYXJyYXlMaWtlVG9BcnJheSIsIml0ZXIiLCJmcm9tIiwiX3R5cGVvZiIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIm1pbkxlbiIsIm4iLCJ0b1N0cmluZyIsInNsaWNlIiwibmFtZSIsInRlc3QiLCJvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZGVmYXVsdCIsIjUwIiwiMTAwIiwiMjAwIiwiMzAwIiwiNDAwIiwiNTAwIiwiNjAwIiwiNzAwIiwiODAwIiwiOTAwIiwiQTEwMCIsIkEyMDAiLCJBNDAwIiwiQTcwMCIsImJsYWNrIiwid2hpdGUiLCJoZXhUb1JnYiIsInJnYlRvSGV4IiwiY29sb3IiLCJ2YWx1ZXMiLCJkZWNvbXBvc2VDb2xvciIsImNvbmNhdCIsIm1hcCIsImhleCIsImpvaW4iLCJoc2xUb1JnYiIsInJlY29tcG9zZUNvbG9yIiwiZ2V0Q29udHJhc3RSYXRpbyIsImZvcmVncm91bmQiLCJiYWNrZ3JvdW5kIiwibHVtQSIsImdldEx1bWluYW5jZSIsImx1bUIiLCJNYXRoIiwibWF4IiwibWluIiwiZW1waGFzaXplIiwiY29lZmZpY2llbnQiLCJkYXJrZW4iLCJsaWdodGVuIiwiZmFkZSIsImNsYW1wIiwidHlwZSIsIl91dGlscyIsInN1YnN0ciIsInJlIiwiUmVnRXhwIiwiY29sb3JzIiwibWF0Y2giLCJpbmRleCIsInBhcnNlSW50Iiwicm91bmQiLCJoIiwicyIsImwiLCJhIiwiZiIsImsiLCJyZ2IiLCJjaGFyQXQiLCJtYXJrZXIiLCJzdWJzdHJpbmciLCJFcnJvciIsImZvcm1hdE11aUVycm9yTWVzc2FnZSIsInNwbGl0IiwicGFyc2VGbG9hdCIsInZhbCIsInBvdyIsIk51bWJlciIsInRvRml4ZWQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiYnJlYWtwb2ludHMiLCJfYnJlYWtwb2ludHMkdmFsdWVzIiwieHMiLCJzbSIsIm1kIiwibGciLCJ4bCIsIl9icmVha3BvaW50cyR1bml0IiwidW5pdCIsIl9icmVha3BvaW50cyRzdGVwIiwic3RlcCIsIm90aGVyIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiIsInVwIiwiYmV0d2VlbiIsInN0YXJ0IiwiZW5kIiwiZW5kSW5kZXgiLCJfZXh0ZW5kczIiLCJkb3duIiwidXBwZXJib3VuZCIsIm9ubHkiLCJ3aWR0aCIsInNwYWNpbmciLCJtaXhpbnMiLCJfdG9vbGJhciIsIl9leHRlbmRzMyIsImd1dHRlcnMiLCJzdHlsZXMiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJ0b29sYmFyIiwibWluSGVpZ2h0IiwiX2NyZWF0ZUJyZWFrcG9pbnRzIiwiX2NyZWF0ZU1peGlucyIsIl9jcmVhdGVQYWxldHRlIiwiX2NyZWF0ZVR5cG9ncmFwaHkiLCJfc2hhZG93cyIsIl9zaGFwZSIsIl9jcmVhdGVTcGFjaW5nIiwiX3RyYW5zaXRpb25zIiwiX3pJbmRleCIsIm9wdGlvbnMiLCJfb3B0aW9ucyRicmVha3BvaW50cyIsImJyZWFrcG9pbnRzSW5wdXQiLCJfb3B0aW9ucyRtaXhpbnMiLCJtaXhpbnNJbnB1dCIsIl9vcHRpb25zJHBhbGV0dGUiLCJwYWxldHRlIiwicGFsZXR0ZUlucHV0Iiwic3BhY2luZ0lucHV0IiwiX29wdGlvbnMkdHlwb2dyYXBoeSIsInR5cG9ncmFwaHkiLCJ0eXBvZ3JhcGh5SW5wdXQiLCJtdWlUaGVtZSIsImRlZXBtZXJnZSIsImRpcmVjdGlvbiIsIm92ZXJyaWRlcyIsInNoYWRvd3MiLCJzaGFwZSIsInRyYW5zaXRpb25zIiwiekluZGV4IiwiX2xlbiIsImFyZ3MiLCJfa2V5IiwicmVkdWNlIiwiYWNjIiwiYXJndW1lbnQiLCJfcGFsZXR0ZSRwcmltYXJ5IiwicHJpbWFyeSIsImxpZ2h0IiwiX2luZGlnbyIsIm1haW4iLCJkYXJrIiwiX3BhbGV0dGUkc2Vjb25kYXJ5Iiwic2Vjb25kYXJ5IiwiX3BpbmsiLCJfcGFsZXR0ZSRlcnJvciIsImVycm9yIiwiX3JlZCIsIl9wYWxldHRlJHdhcm5pbmciLCJ3YXJuaW5nIiwiX29yYW5nZSIsIl9wYWxldHRlJGluZm8iLCJpbmZvIiwiX2JsdWUiLCJfcGFsZXR0ZSRzdWNjZXNzIiwic3VjY2VzcyIsIl9ncmVlbiIsIl9wYWxldHRlJHR5cGUiLCJfcGFsZXR0ZSRjb250cmFzdFRocmUiLCJjb250cmFzdFRocmVzaG9sZCIsIl9wYWxldHRlJHRvbmFsT2Zmc2V0IiwidG9uYWxPZmZzZXQiLCJnZXRDb250cmFzdFRleHQiLCJfY29sb3JNYW5pcHVsYXRvciIsInRleHQiLCJhdWdtZW50Q29sb3IiLCJtYWluU2hhZGUiLCJsaWdodFNoYWRlIiwiZGFya1NoYWRlIiwiX2Zvcm1hdE11aUVycm9yTWVzc2FnZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJhZGRMaWdodE9yRGFyayIsImNvbnRyYXN0VGV4dCIsInR5cGVzIiwiY29tbW9uIiwiX2NvbW1vbiIsImdyZXkiLCJfZ3JleSIsImRpc2FibGVkIiwiaGludCIsImRpdmlkZXIiLCJwYXBlciIsImFjdGlvbiIsImFjdGl2ZSIsImhvdmVyIiwiaG92ZXJPcGFjaXR5Iiwic2VsZWN0ZWQiLCJzZWxlY3RlZE9wYWNpdHkiLCJkaXNhYmxlZEJhY2tncm91bmQiLCJkaXNhYmxlZE9wYWNpdHkiLCJmb2N1cyIsImZvY3VzT3BhY2l0eSIsImFjdGl2YXRlZE9wYWNpdHkiLCJpY29uIiwiaW50ZW50Iiwic2hhZGUiLCJ0b25hbE9mZnNldExpZ2h0IiwidG9uYWxPZmZzZXREYXJrIiwibXVpIiwidHJhbnNmb3JtIiwiX3N5c3RlbSIsImNyZWF0ZVVuYXJ5U3BhY2luZyIsIm91dHB1dCIsImdldCIsIl9zdHlsZXMiLCJjcmVhdGVTdHlsZXMiLCJfcmVmIiwiX3JlZiRmb250RmFtaWx5IiwiZm9udEZhbWlseSIsImRlZmF1bHRGb250RmFtaWx5IiwiX3JlZiRmb250U2l6ZSIsImZvbnRTaXplIiwiX3JlZiRmb250V2VpZ2h0TGlnaHQiLCJmb250V2VpZ2h0TGlnaHQiLCJfcmVmJGZvbnRXZWlnaHRSZWd1bGEiLCJmb250V2VpZ2h0UmVndWxhciIsIl9yZWYkZm9udFdlaWdodE1lZGl1bSIsImZvbnRXZWlnaHRNZWRpdW0iLCJfcmVmJGZvbnRXZWlnaHRCb2xkIiwiZm9udFdlaWdodEJvbGQiLCJfcmVmJGh0bWxGb250U2l6ZSIsImh0bWxGb250U2l6ZSIsImFsbFZhcmlhbnRzIiwicHhUb1JlbTIiLCJweFRvUmVtIiwiY29lZiIsInNpemUiLCJidWlsZFZhcmlhbnQiLCJmb250V2VpZ2h0IiwibGluZUhlaWdodCIsImxldHRlclNwYWNpbmciLCJjYXNpbmciLCJ2YXJpYW50cyIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDUiLCJoNiIsInN1YnRpdGxlMSIsInN1YnRpdGxlMiIsImJvZHkxIiwiYm9keTIiLCJidXR0b24iLCJjYXNlQWxsQ2FwcyIsImNhcHRpb24iLCJvdmVybGluZSIsImNsb25lIiwidGV4dFRyYW5zZm9ybSIsIl9kZWZhdWx0IiwiX2RlZmF1bHRUaGVtZSIsInN0eWxlc09yQ3JlYXRvciIsIm1ha2VTdHlsZXMiLCJkZWZhdWx0VGhlbWUiLCJjcmVhdGVTaGFkb3ciLCJib3JkZXJSYWRpdXMiLCJkdXJhdGlvbiIsImVhc2luZyIsImVhc2VJbk91dCIsImVhc2VPdXQiLCJlYXNlSW4iLCJzaGFycCIsInNob3J0ZXN0Iiwic2hvcnRlciIsInNob3J0Iiwic3RhbmRhcmQiLCJjb21wbGV4IiwiZW50ZXJpbmdTY3JlZW4iLCJsZWF2aW5nU2NyZWVuIiwiZm9ybWF0TXMiLCJtaWxsaXNlY29uZHMiLCJfb3B0aW9ucyRkdXJhdGlvbiIsImR1cmF0aW9uT3B0aW9uIiwiX29wdGlvbnMkZWFzaW5nIiwiZWFzaW5nT3B0aW9uIiwiX29wdGlvbnMkZGVsYXkiLCJkZWxheSIsImFuaW1hdGVkUHJvcCIsImdldEF1dG9IZWlnaHREdXJhdGlvbiIsImhlaWdodCIsImNvbnN0YW50IiwidXNlVGhlbWUiLCJtb2JpbGVTdGVwcGVyIiwic3BlZWREaWFsIiwiYXBwQmFyIiwiZHJhd2VyIiwibW9kYWwiLCJzbmFja2JhciIsInRvb2x0aXAiLCJpbmplY3RGaXJzdE5vZGUiLCJqc3MiLCJnZW5lcmF0ZUNsYXNzTmFtZSIsInNoZWV0c01hbmFnZXIiLCJNYXAiLCJkZWZhdWx0T3B0aW9ucyIsImRpc2FibGVHZW5lcmF0aW9uIiwic2hlZXRzQ2FjaGUiLCJzaGVldHNSZWdpc3RyeSIsIlN0eWxlc0NvbnRleHQiLCJTdHlsZXNQcm92aWRlciIsImNoaWxkcmVuIiwiX3Byb3BzJGluamVjdEZpcnN0IiwiaW5qZWN0Rmlyc3QiLCJfcHJvcHMkZGlzYWJsZUdlbmVyYXQiLCJsb2NhbE9wdGlvbnMiLCJvdXRlck9wdGlvbnMiLCJjb250ZXh0IiwiaW5zZXJ0aW9uUG9pbnQiLCJ3aW5kb3ciLCJoZWFkIiwiZG9jdW1lbnQiLCJjcmVhdGVDb21tZW50IiwiaW5zZXJ0QmVmb3JlIiwiZmlyc3RDaGlsZCIsInBsdWdpbnMiLCJQcm92aWRlciIsImxvY2FsVGhlbWUiLCJ0aGVtZSIsIm91dGVyVGhlbWUiLCJtZXJnZU91dGVyTG9jYWxUaGVtZSIsImhhc1N5bWJvbCIsImZvciIsInBzZXVkb0NsYXNzZXMiLCJjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSIsIl9vcHRpb25zJGRpc2FibGVHbG9iYSIsImRpc2FibGVHbG9iYWwiLCJfb3B0aW9ucyRwcm9kdWN0aW9uUHIiLCJwcm9kdWN0aW9uUHJlZml4IiwiX29wdGlvbnMkc2VlZCIsInNlZWQiLCJzZWVkUHJlZml4IiwicnVsZUNvdW50ZXIiLCJnZXROZXh0Q291bnRlcklkIiwicnVsZSIsInN0eWxlU2hlZXQiLCJsaW5rIiwicHJlZml4IiwiZ2V0VGhlbWVQcm9wcyIsInBhcmFtcyIsInByb3BOYW1lIiwiZGVmYXVsdFByb3BzIiwiU2VydmVyU3R5bGVTaGVldHMiLCJzZXJ2ZXJHZW5lcmF0ZUNsYXNzTmFtZSIsImlkIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJvbWl0IiwiaW5wdXQiLCJmaWVsZHMiLCJmb3JFYWNoIiwicHJvcCIsInN0eWxlZCIsIkNvbXBvbmVudCIsInN0eWxlIiwiZmlsdGVyUHJvcHMiLCJzdHlsZXNPcHRpb25zIiwiY2xhc3NOYW1lUHJlZml4Iiwicm9vdCIsInVzZVN0eWxlcyIsImRpc3BsYXlOYW1lIiwicHJvcFR5cGVzIiwiU3R5bGVkQ29tcG9uZW50IiwicmVmIiwiY2xhc3NOYW1lUHJvcCIsImNsYXNzTmFtZSIsIkNvbXBvbmVudFByb3AiLCJjb21wb25lbnQiLCJjbGFzc2VzIiwic3ByZWFkIiwiRmluYWxDb21wb25lbnQiLCJ3aXRoVGhlbWVDcmVhdG9yIiwid2l0aFRoZW1lIiwiV2l0aFRoZW1lIiwiaW5uZXJSZWYiLCJub3ciLCJEYXRlIiwiZm5WYWx1ZXNOcyIsImZuUnVsZU5zIiwiYXQiLCJhdFByZWZpeCIsIkdsb2JhbENvbnRhaW5lclJ1bGUiLCJzZWxlY3RvciIsInJ1bGVzIiwiaXNQcm9jZXNzZWQiLCJwYXJlbnQiLCJhZGQiLCJwcm9jZXNzIiwiX3Byb3RvIiwiZ2V0UnVsZSIsImFkZFJ1bGUiLCJvblByb2Nlc3NSdWxlIiwiR2xvYmFsUHJlZml4ZWRSdWxlIiwiY3JlYXRlUnVsZSIsInNlcGFyYXRvclJlZ0V4cCIsImFkZFNjb3BlIiwic2NvcGUiLCJwYXJ0cyIsInNjb3BlZCIsInRyaW0iLCJwYXJlbnRSZWdFeHAiLCJyZWZSZWdFeHAiLCJnZXRSZXBsYWNlUmVmIiwiY29udGFpbmVyIiwic2hlZXQiLCJyZXBsYWNlUGFyZW50UmVmcyIsIm5lc3RlZFByb3AiLCJwYXJlbnRQcm9wIiwicGFyZW50U2VsZWN0b3JzIiwibmVzdGVkU2VsZWN0b3JzIiwicmVzdWx0IiwiaiIsIm5lc3RlZCIsInJlcGxhY2UiLCJnZXRPcHRpb25zIiwicHJldk9wdGlvbnMiLCJuZXN0aW5nTGV2ZWwiLCJvblByb2Nlc3NTdHlsZSIsInJlcGxhY2VSZWYiLCJzdHlsZVJ1bGUiLCJpc05lc3RlZCIsImlzTmVzdGVkQ29uZGl0aW9uYWwiLCJ1cHBlcmNhc2VQYXR0ZXJuIiwibXNQYXR0ZXJuIiwiY2FjaGUiLCJ0b0h5cGhlbkxvd2VyIiwidG9Mb3dlckNhc2UiLCJoTmFtZSIsImNvbnZlcnRDYXNlIiwiY29udmVydGVkIiwiZmFsbGJhY2tzIiwicHgiLCJDU1MiLCJtcyIsInBlcmNlbnQiLCJhZGRDYW1lbENhc2VkVmVyc2lvbiIsInJlZ0V4cCIsInN0ciIsInRvVXBwZXJDYXNlIiwibmV3T2JqIiwidW5pdHMiLCJib3JkZXIiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm90dG9tIiwibGVmdCIsInRvcCIsInJpZ2h0IiwiaW5zZXQiLCJtb3Rpb24iLCJvdXRsaW5lIiwicGVyc3BlY3RpdmUiLCJnYXAiLCJncmlkIiwiaXRlcmF0ZSIsImlubmVyUHJvcCIsIl9pbm5lclByb3AiLCJpc05hTiIsImNhbWVsQ2FzZWRPcHRpb25zIiwib25DaGFuZ2VWYWx1ZSIsImpzIiwiY3NzIiwidmVuZG9yIiwiYnJvd3NlciIsImlzVG91Y2giLCJkb2N1bWVudEVsZW1lbnQiLCJqc0Nzc01hcCIsIk1veiIsIk8iLCJXZWJraXQiLCJjcmVhdGVFbGVtZW50IiwiYXBwZWFyZW5jZSIsIm5vUHJlZmlsbCIsInN1cHBvcnRlZFByb3BlcnR5IiwiY29sb3JBZGp1c3QiLCJ0b1VwcGVyIiwiYyIsImNhbWVsaXplIiwicGFzY2FsaXplIiwiZWwiLCJtYXNrIiwibG9uZ2hhbmQiLCJ0ZXh0T3JpZW50YXRpb24iLCJ0cmFuc2l0aW9uIiwid3JpdGluZ01vZGUiLCJ1c2VyU2VsZWN0IiwiYnJlYWtQcm9wc09sZCIsImlubGluZUxvZ2ljYWxPbGQiLCJuZXdQcm9wIiwidW5wcmVmaXhlZCIsInByZWZpeGVkIiwicGFzY2FsaXplZCIsInNjcm9sbFNuYXAiLCJvdmVyc2Nyb2xsQmVoYXZpb3IiLCJwcm9wTWFwIiwib3JkZXIiLCJmbGV4MjAxMiIsInByb3BNYXAkMSIsImZsZXgiLCJwcm9wS2V5cyIsInByZWZpeENzcyIsIm11bHRpcGxlIiwicHJvcGVydHlEZXRlY3RvcnMiLCJmaWx0ZXIiLCJjb21wdXRlZCIsImdldENvbXB1dGVkU3R5bGUiLCJrZXkkMSIsIngiLCJlbCQxIiwiY2FjaGUkMSIsInRyYW5zaXRpb25Qcm9wZXJ0aWVzIiwidHJhbnNQcm9wc1JlZ0V4cCIsInByZWZpeFRyYW5zaXRpb25DYWxsYmFjayIsInAxIiwicDIiLCJzdXBwb3J0ZWRWYWx1ZSIsInByb3BlcnR5IiwicHJlZml4ZWRWYWx1ZSIsImNhY2hlS2V5IiwicHJlZml4U3R5bGUiLCJjaGFuZ2VQcm9wIiwic3VwcG9ydGVkUHJvcCIsImNoYW5nZVZhbHVlIiwic3VwcG9ydGVkVmFsdWUkMSIsImF0UnVsZSIsInN1cHBvcnRlZEtleWZyYW1lcyIsImpzc1ByZXNldCIsIm9uQ3JlYXRlUnVsZSIsImRlY2wiLCJmblZhbHVlcyIsIm9uVXBkYXRlIiwiZGF0YSIsImZuUnVsZSIsIl9wcm9wIiwiaGFuZGxlTmVzdGVkR2xvYmFsQ29udGFpbmVyUnVsZSIsImhhbmRsZVByZWZpeGVkR2xvYmFsUnVsZSIsImh5cGhlbmF0ZWRQcm9wIiwic29ydCIsInByb3AwIiwicHJvcDEiLCJuZXdTdHlsZSIsImtleTEiLCJrZXkyIiwic3ViQ2FjaGUiLCJzZXQiLCJkZWxldGUiLCJpbmRleENvdW50ZXIiLCJpbmNyZW1lbnQiLCJnZXRTdHlsZXNDcmVhdG9yIiwidGhlbWluZ0VuYWJsZWQiLCJzdHlsZXNXaXRoT3ZlcnJpZGVzIiwiZ2V0Q2xhc3NlcyIsInN0YXRlIiwiY2FjaGVDbGFzc2VzIiwibGFzdFByb3AiLCJsYXN0SlNTIiwiZ2VuZXJhdGUiLCJtZXJnZUNsYXNzZXMiLCJiYXNlQ2xhc3NlcyIsIm5ld0NsYXNzZXMiLCJhdHRhY2giLCJfcmVmMiIsInN0eWxlc0NyZWF0b3IiLCJzaGVldE1hbmFnZXIiLCJyZWZzIiwic3RhdGljU2hlZXQiLCJkeW5hbWljU3R5bGVzIiwiZmxpcCIsImdlbmVyYXRlSWQiLCJjcmVhdGVTdHlsZVNoZWV0IiwiZHluYW1pY1NoZWV0IiwidXBkYXRlIiwiX3JlZjMiLCJkZXRhY2giLCJfcmVmNCIsInJlbW92ZVN0eWxlU2hlZXQiLCJyZW1vdmUiLCJ1c2VTeW5jaHJvbm91c0VmZmVjdCIsImZ1bmMiLCJjdXJyZW50S2V5IiwiY3VycmVudCIsImNsYXNzTmFtZVByZWZpeE9wdGlvbiIsIl9vcHRpb25zJGRlZmF1bHRUaGVtZSIsInN0eWxlc09wdGlvbnMyIiwibWV0YSIsInNob3VsZFVwZGF0ZSIsIm5leHRDbGFzc2VzIiwiVGhlbWVDb250ZXh0IiwiX29wdGlvbnMkd2l0aFRoZW1lIiwiV2l0aFN0eWxlcyIsIm1vcmUiLCJkZWZhdWx0QnJlYWtwb2ludHMiLCJoYW5kbGVCcmVha3BvaW50cyIsInByb3BWYWx1ZSIsInN0eWxlRnJvbVByb3BWYWx1ZSIsInRoZW1lQnJlYWtwb2ludHMiLCJpdGVtIiwiX3RoZW1lQnJlYWtwb2ludHMiLCJicmVha3BvaW50Iiwic3R5bGVGdW5jdGlvbiIsIm5ld1N0eWxlRnVuY3Rpb24iLCJiYXNlIiwiZXh0ZW5kZWQiLCJnZXRQYXRoIiwicGF0aCIsIl9vcHRpb25zJGNzc1Byb3BlcnR5IiwiY3NzUHJvcGVydHkiLCJ0aGVtZUtleSIsImZuIiwidGhlbWVNYXBwaW5nIiwicHJvcFZhbHVlRmluYWwiLCJtZXJnZSIsImdldEJvcmRlciIsImJvcmRlclRvcCIsImJvcmRlclJpZ2h0IiwiYm9yZGVyQm90dG9tIiwiYm9yZGVyTGVmdCIsImJvcmRlckNvbG9yIiwiZGlzcGxheVByaW50IiwiZGlzcGxheSIsImRpc3BsYXlSYXciLCJvdmVyZmxvdyIsInRleHRPdmVyZmxvdyIsInZpc2liaWxpdHkiLCJ3aGl0ZVNwYWNlIiwiZmxleEJhc2lzIiwiZmxleERpcmVjdGlvbiIsImZsZXhXcmFwIiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwiYWxpZ25Db250ZW50IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwiYWxpZ25TZWxmIiwianVzdGlmeUl0ZW1zIiwianVzdGlmeVNlbGYiLCJncmlkR2FwIiwiZ3JpZENvbHVtbkdhcCIsImdyaWRSb3dHYXAiLCJncmlkQ29sdW1uIiwiZ3JpZFJvdyIsImdyaWRBdXRvRmxvdyIsImdyaWRBdXRvQ29sdW1ucyIsImdyaWRBdXRvUm93cyIsImdyaWRUZW1wbGF0ZUNvbHVtbnMiLCJncmlkVGVtcGxhdGVSb3dzIiwiZ3JpZFRlbXBsYXRlQXJlYXMiLCJncmlkQXJlYSIsImJnY29sb3IiLCJwb3NpdGlvbiIsIm1heFdpZHRoIiwibWluV2lkdGgiLCJtYXhIZWlnaHQiLCJzaXplV2lkdGgiLCJzaXplSGVpZ2h0IiwiYm94U2l6aW5nIiwiZm9udFN0eWxlIiwidGV4dEFsaWduIiwicHJvcGVydGllcyIsIm0iLCJkaXJlY3Rpb25zIiwidCIsInIiLCJiIiwieSIsImFsaWFzZXMiLCJtYXJnaW5YIiwibWFyZ2luWSIsInBhZGRpbmdYIiwicGFkZGluZ1kiLCJnZXRDc3NQcm9wZXJ0aWVzIiwiX3Byb3Akc3BsaXQiLCJfcHJvcCRzcGxpdDIiLCJkaXIiLCJhcmciLCJzcGFjaW5nS2V5cyIsInRoZW1lU3BhY2luZyIsImFicyIsInRyYW5zZm9ybWVyIiwiY3NzUHJvcGVydGllcyIsInRyYW5zZm9ybWVkIiwiZ2V0VmFsdWUiLCJnZXRTdHlsZUZyb21Qcm9wVmFsdWUiLCJpc1BsYWluT2JqZWN0IiwiY29kZSIsInVybCIsImVuY29kZVVSSUNvbXBvbmVudCIsImNoYWluUHJvcFR5cGVzIiwicHJvcFR5cGUxIiwicHJvcFR5cGUyIiwiZWxlbWVudEFjY2VwdGluZ1JlZiIsImlzUmVxdWlyZWQiLCJleGFjdFByb3AiLCJmbk5hbWVNYXRjaFJlZ2V4IiwiZ2V0RnVuY3Rpb25OYW1lIiwiZ2V0RnVuY3Rpb25Db21wb25lbnROYW1lIiwiZmFsbGJhY2siLCJnZXRXcmFwcGVkTmFtZSIsIm91dGVyVHlwZSIsImlubmVyVHlwZSIsIndyYXBwZXJOYW1lIiwiZnVuY3Rpb25OYW1lIiwiZ2V0RGlzcGxheU5hbWUiLCIkJHR5cGVvZiIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJNZW1vIiwiSFRNTEVsZW1lbnRUeXBlIiwiY29tcG9uZW50TmFtZSIsImxvY2F0aW9uIiwicHJvcEZ1bGxOYW1lIiwiRnVuY3Rpb24iLCJCIiwiRSIsInRvVmFsIiwibWl4IiwidG1wIiwicmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJpc01lbW8iLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiZSIsImlzQnJvd3NlciIsIm5vZGVUeXBlIiwicGxhaW5PYmplY3RDb25zdHJ1cmN0b3IiLCJjbG9uZVN0eWxlIiwiZGVjbENvcHkiLCJieSIsInRvQ3NzVmFsdWUiLCJpZ25vcmVJbXBvcnRhbnQiLCJjc3NWYWx1ZSIsImluZGVudFN0ciIsImluZGVudCIsInRvQ3NzIiwiX29wdGlvbnMkaW5kZW50IiwiX3ZhbHVlIiwiX3Byb3AyIiwiX3ZhbHVlMiIsImFsbG93RW1wdHkiLCJlc2NhcGVSZWdleCIsIm5hdGl2ZUVzY2FwZSIsImVzY2FwZSIsIkJhc2VTdHlsZVJ1bGUiLCJyZW5kZXJlciIsInJlbmRlcmFibGUiLCJSZW5kZXJlciIsImZvcmNlIiwibmV3VmFsdWUiLCJpc0VtcHR5IiwiaXNEZWZpbmVkIiwicmVtb3ZlUHJvcGVydHkiLCJzZXRQcm9wZXJ0eSIsImF0dGFjaGVkIiwiU3R5bGVSdWxlIiwiX0Jhc2VTdHlsZVJ1bGUiLCJfdGhpcyIsInNlbGVjdG9yVGV4dCIsIl9wcm90bzIiLCJhcHBseVRvIiwianNvbiIsInRvSlNPTiIsIm9wdHMiLCJzZXRTZWxlY3RvciIsInJlcGxhY2VSdWxlIiwicGx1Z2luU3R5bGVSdWxlIiwiZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyIsImF0UmVnRXhwIiwiQ29uZGl0aW9uYWxSdWxlIiwicXVlcnkiLCJhdE1hdGNoIiwiUnVsZUxpc3QiLCJrZXlSZWdFeHAiLCJwbHVnaW5Db25kaXRpb25hbFJ1bGUiLCJkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEiLCJuYW1lUmVnRXhwIiwiS2V5ZnJhbWVzUnVsZSIsImZyYW1lcyIsIm5hbWVNYXRjaCIsImtleVJlZ0V4cCQxIiwiZmluZFJlZmVyZW5jZWRLZXlmcmFtZSIsImtleWZyYW1lcyIsInJlZktleWZyYW1lIiwicGx1Z2luIiwiS2V5ZnJhbWVSdWxlIiwicGx1Z2luS2V5ZnJhbWVSdWxlIiwiRm9udEZhY2VSdWxlIiwia2V5UmVnRXhwJDIiLCJwbHVnaW5Gb250RmFjZVJ1bGUiLCJWaWV3cG9ydFJ1bGUiLCJwbHVnaW5WaWV3cG9ydFJ1bGUiLCJTaW1wbGVSdWxlIiwia2V5c01hcCIsImRlZmF1bHRVcGRhdGVPcHRpb25zIiwiZm9yY2VVcGRhdGVPcHRpb25zIiwicmF3IiwiY291bnRlciIsInJ1bGVPcHRpb25zIiwiX3RoaXMkb3B0aW9ucyIsInJlZ2lzdGVyIiwic3BsaWNlIiwidW5yZWdpc3RlciIsInVwZGF0ZU9uZSIsIl90aGlzJG9wdGlvbnMyIiwibmV4dFZhbHVlIiwiX25leHRWYWx1ZSIsIl9wcmV2VmFsdWUiLCJTdHlsZVNoZWV0IiwiZGVwbG95ZWQiLCJxdWV1ZSIsImRlcGxveSIsImluc2VydFJ1bGUiLCJhZGRSdWxlcyIsImFkZGVkIiwiZGVsZXRlUnVsZSIsIl90aGlzJHJ1bGVzIiwiUGx1Z2luc1JlZ2lzdHJ5IiwiaW50ZXJuYWwiLCJleHRlcm5hbCIsInJlZ2lzdHJ5Iiwib25Qcm9jZXNzU2hlZXQiLCJwcm9jZXNzZWRWYWx1ZSIsInVzZSIsIm5ld1BsdWdpbiIsIlNoZWV0c1JlZ2lzdHJ5IiwicmVzZXQiLCJfdGVtcCIsImdsb2JhbFRoaXMkMSIsImdsb2JhbFRoaXMiLCJucyIsIm1vZHVsZUlkIiwiY3JlYXRlR2VuZXJhdGVJZCIsImpzc0lkIiwiU3RyaW5nIiwibWluaWZ5IiwibWVtb2l6ZSIsImdldFByb3BlcnR5VmFsdWUiLCJjc3NSdWxlIiwiYXR0cmlidXRlU3R5bGVNYXAiLCJnZXRIZWFkIiwicXVlcnlTZWxlY3RvciIsImdldE5vbmNlIiwibm9kZSIsImdldEF0dHJpYnV0ZSIsIl9pbnNlcnRSdWxlIiwiYXBwZW5kUnVsZSIsImNzc1J1bGVzIiwiZ2V0VmFsaWRSdWxlSW5zZXJ0aW9uSW5kZXgiLCJtYXhJbmRleCIsIkRvbVJlbmRlcmVyIiwiZWxlbWVudCIsImhhc0luc2VydGVkUnVsZXMiLCJtZWRpYSIsInRleHRDb250ZW50Iiwic2V0QXR0cmlidXRlIiwibm9uY2UiLCJwYXJlbnROb2RlIiwibmV4dE5vZGUiLCJyZWdpc3RyeSQxIiwiZmluZEhpZ2hlclNoZWV0IiwiZmluZEhpZ2hlc3RTaGVldCIsIm5leHRTaWJsaW5nIiwiY29tbWVudCIsImNoaWxkTm9kZXMiLCJub2RlVmFsdWUiLCJmaW5kQ29tbWVudE5vZGUiLCJmaW5kUHJldk5vZGUiLCJpbnNlcnRpb25Qb2ludEVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsImluc2VydFN0eWxlIiwiQm9vbGVhbiIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0UnVsZXMiLCJuYXRpdmVQYXJlbnQiLCJsYXRlc3ROYXRpdmVQYXJlbnQiLCJfaW5zZXJ0aW9uSW5kZXgiLCJyZWZDc3NSdWxlIiwicnVsZVN0ciIsImluc2VydGlvbkluZGV4IiwibmF0aXZlUnVsZSIsImdldFJ1bGVzIiwiaW5zdGFuY2VDb3VudGVyIiwiSnNzIiwidmVyc2lvbiIsInNldHVwIiwiZ2V0RHluYW1pY1N0eWxlcyIsInRvIiwiZXh0cmFjdGVkIiwiaGFzQ1NTVE9NU3VwcG9ydCIsInByb3BJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInRlc3QxIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsInN5bWJvbHMiLCJpc2FycmF5IiwicGF0aFRvUmVnZXhwIiwiZ3JvdXBzIiwiZGVsaW1pdGVyIiwib3B0aW9uYWwiLCJyZXBlYXQiLCJwYXJ0aWFsIiwiYXN0ZXJpc2siLCJwYXR0ZXJuIiwiYXR0YWNoS2V5cyIsInJlZ2V4cFRvUmVnZXhwIiwiZmxhZ3MiLCJhcnJheVRvUmVnZXhwIiwidG9rZW5zVG9SZWdFeHAiLCJwYXJzZSIsInN0cmluZ1RvUmVnZXhwIiwiY29tcGlsZSIsInRva2Vuc1RvRnVuY3Rpb24iLCJQQVRIX1JFR0VYUCIsInJlcyIsInRva2VucyIsImRlZmF1bHREZWxpbWl0ZXIiLCJleGVjIiwiZXNjYXBlZCIsIm9mZnNldCIsImNhcHR1cmUiLCJncm91cCIsIm1vZGlmaWVyIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJjaGFyQ29kZUF0IiwibWF0Y2hlcyIsImVuY29kZSIsInByZXR0eSIsInRva2VuIiwic2VnbWVudCIsInNlbnNpdGl2ZSIsInN0cmljdCIsInJvdXRlIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwic2VjcmV0IiwiZ2V0U2hpbSIsIlJlYWN0UHJvcFR5cGVzIiwiYXJyYXkiLCJib29sIiwibnVtYmVyIiwib2JqZWN0Iiwic3RyaW5nIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImVsZW1lbnRUeXBlIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYWEiLCJiYSIsIlNldCIsImNhIiwiZGEiLCJlYSIsImZhIiwiaGEiLCJpYSIsImphIiwia2EiLCJkIiwiZyIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwiRCIsIm9hIiwicGEiLCJxYSIsIm1hIiwibmEiLCJsYSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwieGxpbmtIcmVmIiwicmEiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsInNhIiwidGEiLCJ1YSIsIndhIiwieGEiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJNYSIsIkthIiwiTGEiLCJOYSIsInN0YWNrIiwiT2EiLCJQYSIsInByZXBhcmVTdGFja1RyYWNlIiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsIlFhIiwidGFnIiwiX3JlbmRlciIsIlJhIiwiX2NvbnRleHQiLCJfcGF5bG9hZCIsIl9pbml0IiwiU2EiLCJUYSIsIm5vZGVOYW1lIiwiVmEiLCJfdmFsdWVUcmFja2VyIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJVYSIsIldhIiwiY2hlY2tlZCIsIlhhIiwiYWN0aXZlRWxlbWVudCIsImJvZHkiLCJZYSIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiWmEiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiJGEiLCJhYiIsImJiIiwiY2IiLCJvd25lckRvY3VtZW50IiwiZWIiLCJDaGlsZHJlbiIsImRiIiwiZmIiLCJkZWZhdWx0U2VsZWN0ZWQiLCJnYiIsImhiIiwiaWIiLCJqYiIsImtiIiwibGIiLCJtYiIsIm5iIiwib2IiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJ2YWx1ZU9mIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsInBiIiwibGFzdENoaWxkIiwicWIiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleFBvc2l0aXZlIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwibGluZUNsYW1wIiwib3BhY2l0eSIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInJiIiwic2IiLCJ0YiIsInViIiwibWVudWl0ZW0iLCJhcmVhIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwia2V5Z2VuIiwicGFyYW0iLCJ0cmFjayIsIndiciIsInZiIiwid2IiLCJpcyIsInhiIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwieWIiLCJ6YiIsIkFiIiwiQmIiLCJDYiIsInN0YXRlTm9kZSIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiT2IiLCJQYiIsIlFiIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJSYiIsIm9uRXJyb3IiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJaYiIsImFsdGVybmF0ZSIsInJldHVybiIsIiRiIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJhYyIsImNjIiwiY2hpbGQiLCJzaWJsaW5nIiwiYmMiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJtYyIsIm5jIiwib2MiLCJwYyIsInFjIiwicmMiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwibmF0aXZlRXZlbnQiLCJ0YXJnZXRDb250YWluZXJzIiwic2MiLCJwb2ludGVySWQiLCJ0YyIsInZjIiwid2MiLCJsYW5lUHJpb3JpdHkiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJwcmlvcml0eSIsImh5ZHJhdGUiLCJjb250YWluZXJJbmZvIiwieGMiLCJ5YyIsInNoaWZ0IiwiemMiLCJBYyIsIkJjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiQ2MiLCJEYyIsIkVjIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiRmMiLCJHYyIsIkhjIiwiYW5pbWF0aW9uIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIlFjIiwidW5zdGFibGVfbm93IiwiRiIsIlJjIiwiVWMiLCJwZW5kaW5nTGFuZXMiLCJleHBpcmVkTGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwiVmMiLCJlbnRhbmdsZWRMYW5lcyIsImVudGFuZ2xlbWVudHMiLCJXYyIsIlhjIiwiWWMiLCJaYyIsIiRjIiwiZXZlbnRUaW1lcyIsImNsejMyIiwiYmQiLCJjZCIsImxvZyIsIkxOMiIsImRkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlZCIsImZkIiwiZ2QiLCJoZCIsImJpbmQiLCJ1YyIsImpkIiwia2QiLCJsZCIsIm5kIiwib2QiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJwZCIsInFkIiwicmQiLCJfcmVhY3ROYW1lIiwiX3RhcmdldEluc3QiLCJjdXJyZW50VGFyZ2V0IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJpc1BlcnNpc3RlbnQiLCJ3ZCIsInhkIiwieWQiLCJzZCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsImlzVHJ1c3RlZCIsInRkIiwidWQiLCJ2aWV3IiwiZGV0YWlsIiwidmQiLCJBZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImdldE1vZGlmaWVyU3RhdGUiLCJ6ZCIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJCZCIsIkRkIiwiZGF0YVRyYW5zZmVyIiwiRmQiLCJIZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJKZCIsImNsaXBib2FyZERhdGEiLCJMZCIsIk1kIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIk5kIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsIk9kIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlBkIiwiUmQiLCJsb2NhbGUiLCJ3aGljaCIsIlRkIiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlZkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIlhkIiwiWmQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIiRkIiwiYWUiLCJiZSIsImRvY3VtZW50TW9kZSIsImNlIiwiZGUiLCJlZSIsImZlIiwiZ2UiLCJoZSIsImllIiwibGUiLCJkYXRlIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwicGFzc3dvcmQiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsInRpbWUiLCJ3ZWVrIiwibWUiLCJuZSIsIm9lIiwiZXZlbnQiLCJsaXN0ZW5lcnMiLCJwZSIsInFlIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJ6ZSIsIm9uaW5wdXQiLCJBZSIsImRldGFjaEV2ZW50IiwiQmUiLCJDZSIsImF0dGFjaEV2ZW50IiwiRGUiLCJFZSIsIkZlIiwiSGUiLCJJZSIsIkplIiwiS2UiLCJMZSIsIk1lIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIk5lIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50V2luZG93IiwiaHJlZiIsIk9lIiwiY29udGVudEVkaXRhYmxlIiwiUGUiLCJRZSIsIlJlIiwiU2UiLCJUZSIsIlVlIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsIlZlIiwiV2UiLCJYZSIsIlllIiwiWmUiLCJZYiIsImxpc3RlbmVyIiwiRyIsIiRlIiwiaGFzIiwiYWYiLCJiZiIsInJhbmRvbSIsImNmIiwiZGYiLCJwYXNzaXZlIiwiTmIiLCJ3IiwieiIsInUiLCJxIiwidiIsImVmIiwiZmYiLCJwYXJlbnRXaW5kb3ciLCJnZiIsImhmIiwiSiIsIksiLCJRIiwiTCIsImplIiwiY2hhciIsImtlIiwidW5zaGlmdCIsImpmIiwia2YiLCJsZiIsIm1mIiwiYXV0b0ZvY3VzIiwibmYiLCJvZiIsInNldFRpbWVvdXQiLCJwZiIsImNsZWFyVGltZW91dCIsInFmIiwicmYiLCJzZiIsInByZXZpb3VzU2libGluZyIsInRmIiwidmYiLCJ3ZiIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJIIiwiSSIsIkNmIiwiTSIsIk4iLCJEZiIsIkVmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiRmYiLCJHZiIsIkhmIiwiSWYiLCJnZXRDaGlsZENvbnRleHQiLCJKZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJPZiIsIlBmIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJRZiIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiUmYiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJTZiIsIlRmIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJVZiIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiVmYiLCJXZiIsIlhmIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJZZiIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsIlpmIiwiJGYiLCJhZyIsImJnIiwiY2ciLCJkZyIsImVnIiwiZmciLCJnZyIsImhnIiwiaWciLCJqZyIsImtnIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwicmciLCJfY3VycmVudFZhbHVlIiwic2ciLCJjaGlsZExhbmVzIiwidGciLCJkZXBlbmRlbmNpZXMiLCJmaXJzdENvbnRleHQiLCJsYW5lcyIsInVnIiwidmciLCJvYnNlcnZlZEJpdHMiLCJyZXNwb25kZXJzIiwid2ciLCJ4ZyIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiZmlyc3RCYXNlVXBkYXRlIiwibGFzdEJhc2VVcGRhdGUiLCJzaGFyZWQiLCJwZW5kaW5nIiwiZWZmZWN0cyIsInlnIiwiemciLCJldmVudFRpbWUiLCJsYW5lIiwicGF5bG9hZCIsImNhbGxiYWNrIiwiQWciLCJCZyIsIkNnIiwiQSIsIkMiLCJEZyIsIkVnIiwiRmciLCJHZyIsIktnIiwiaXNNb3VudGVkIiwiX3JlYWN0SW50ZXJuYWxzIiwiZW5xdWV1ZVNldFN0YXRlIiwiSGciLCJJZyIsIkpnIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsIkxnIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJNZyIsInVwZGF0ZXIiLCJOZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIk9nIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJQZyIsIlFnIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsIlJnIiwiU2ciLCJsYXN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0IiwiVGciLCJVZyIsIm1vZGUiLCJWZyIsImltcGxlbWVudGF0aW9uIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZWgiLCJ0YWdOYW1lIiwiZmgiLCJnaCIsImhoIiwiUCIsImloIiwibWVtb2l6ZWRQcm9wcyIsInJldmVhbE9yZGVyIiwiamgiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwicGVuZGluZ1Byb3BzIiwicGgiLCJxaCIsInJoIiwic2giLCJ0aCIsInVoIiwiX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnkiLCJ2aCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJ3aCIsInhoIiwiUiIsIlMiLCJUIiwieWgiLCJ6aCIsIkFoIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJGaCIsIkdoIiwiSGgiLCJiYXNlUXVldWUiLCJJaCIsIkpoIiwiS2giLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiZWFnZXJSZWR1Y2VyIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZGlzcGF0Y2giLCJMaCIsIk1oIiwiX2dldFZlcnNpb24iLCJfc291cmNlIiwibXV0YWJsZVJlYWRMYW5lcyIsIk5oIiwiVSIsInVzZVN0YXRlIiwiZ2V0U25hcHNob3QiLCJzdWJzY3JpYmUiLCJ1c2VFZmZlY3QiLCJzZXRTbmFwc2hvdCIsIk9oIiwiUGgiLCJRaCIsIlJoIiwiZGVzdHJveSIsImRlcHMiLCJTaCIsIlRoIiwiVWgiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJkaSIsInJlYWRDb250ZXh0IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlRGVidWdWYWx1ZSIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZU9wYXF1ZUlkZW50aWZpZXIiLCJ1bnN0YWJsZV9pc05ld1JlY29uY2lsZXIiLCJ1ZiIsImVpIiwiUmVhY3RDdXJyZW50T3duZXIiLCJmaSIsImdpIiwiaGkiLCJpaSIsImppIiwia2kiLCJsaSIsIm1pIiwiYmFzZUxhbmVzIiwibmkiLCJvaSIsInBpIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicWkiLCJyaSIsInBlbmRpbmdDb250ZXh0IiwiQmkiLCJEaSIsIkVpIiwic2kiLCJyZXRyeUxhbmUiLCJ0aSIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwidWkiLCJ1bnN0YWJsZV9leHBlY3RlZExvYWRUaW1lIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwibGFzdCIsInRhaWwiLCJ0YWlsTW9kZSIsIkFpIiwiRmkiLCJHaSIsIndhc011bHRpcGxlIiwib25DbGljayIsIm9uY2xpY2siLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVUZXh0Tm9kZSIsIlYiLCJIaSIsIklpIiwiVyIsIkppIiwiS2kiLCJMaSIsIk1pIiwibWVzc2FnZSIsIk5pIiwiY29uc29sZSIsIk9pIiwiV2Vha01hcCIsIlBpIiwiUWkiLCJSaSIsIlNpIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJUaSIsImNvbXBvbmVudFN0YWNrIiwiVWkiLCJXZWFrU2V0IiwiVmkiLCJXaSIsIlhpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJZaSIsIlppIiwiJGkiLCJhaiIsImJqIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImNqIiwiZGoiLCJlaiIsImZqIiwiZ2oiLCJoaiIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJpaiIsImpqIiwia2oiLCJsaiIsInRoZW4iLCJtaiIsIm5qIiwiY2VpbCIsIm9qIiwicGoiLCJYIiwiWSIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIkluZmluaXR5Iiwid2oiLCJjayIsIloiLCJ4aiIsInlqIiwiemoiLCJBaiIsIkJqIiwiQ2oiLCJEaiIsIkVqIiwiRmoiLCJHaiIsIkhqIiwiSWoiLCJKaiIsIlNjIiwiS2oiLCJMaiIsIk1qIiwiY2FsbGJhY2tOb2RlIiwiZXhwaXJhdGlvblRpbWVzIiwiY2FsbGJhY2tQcmlvcml0eSIsIlRjIiwiTmoiLCJPaiIsIlBqIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiVWoiLCJ0aW1lb3V0SGFuZGxlIiwiV2oiLCJYaiIsInBpbmdDYWNoZSIsIllqIiwiWmoiLCJ2YSIsImFrIiwiYmsiLCJkayIsInJhbmdlQ291bnQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiZWsiLCJleHRlbmQiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwib25Db21taXRGaWJlclJvb3QiLCJmayIsImdrIiwiaWsiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiamsiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwia2siLCJsayIsIm1rIiwibmsiLCJvayIsInFrIiwiaHlkcmF0aW9uT3B0aW9ucyIsIm11dGFibGVTb3VyY2VzIiwiX2ludGVybmFsUm9vdCIsInJrIiwidGsiLCJoYXNBdHRyaWJ1dGUiLCJzayIsInVrIiwiaGsiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJ1bm1vdW50IiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJWaiIsInZrIiwiRXZlbnRzIiwid2siLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwieGsiLCJyZW5kZXJlckNvbmZpZyIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoIiwib3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoIiwib3ZlcnJpZGVQcm9wcyIsIm92ZXJyaWRlUHJvcHNEZWxldGVQYXRoIiwib3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGgiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsInlrIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsImZsdXNoU3luYyIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY2hlY2tEQ0UiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJGcmFnbWVudCIsIkxhenkiLCJQb3J0YWwiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImlzVmFsaWRFbGVtZW50VHlwZSIsInR5cGVPZiIsInB0IiwiZnIiLCJtdCIsIl8iLCIkIiwid2FybiIsImRyIiwidnQiLCJwciIsIm5vIiwiZ3QiLCJodCIsIm1yIiwiYW8iLCJ5dCIsIk90Iiwib28iLCJidCIsInZyIiwieHQiLCJFdCIsIl90IiwiUnQiLCJpbyIsIlR0IiwiZ2EiLCJ3dCIsImV2ZXJ5IiwiZW50cmllcyIsImdyIiwidW8iLCJBdCIsIkN0IiwiZW4iLCJzZXRFeHRyYVN0YWNrRnJhbWUiLCJnZXRDdXJyZW50U3RhY2siLCJnZXRTdGFja0FkZGVuZHVtIiwiSXNTb21lUmVuZGVyZXJBY3RpbmciLCJSZWFjdERlYnVnQ3VycmVudEZyYW1lIiwiZnJlZXplIiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsInJlcGxhY2VTdGF0ZSIsImVyIiwiX19zZWxmIiwiX19zb3VyY2UiLCJOciIsImlzUmVhY3RXYXJuaW5nIiwiV3IiLCJzbiIsImNuIiwicnIiLCJfc3RvcmUiLCJsbiIsInBuIiwiX3NlbGYiLCJZciIsImduIiwiTHIiLCJ0ciIsInZuIiwiZG4iLCJzciIsImN0IiwibHQiLCJkdCIsIlRuIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJ6ciIsIkZyIiwicXIiLCJCciIsIkhyIiwiS3IiLCJHciIsIkpyIiwiWHIiLCJfX3JlYWN0RGlzYWJsZWRMb2ciLCJvciIsImFyIiwiaXIiLCJMbiIsIlFyIiwiZ3JvdXBDb2xsYXBzZWQiLCJncm91cEVuZCIsImRlZmluZVByb3BlcnRpZXMiLCJVbiIsIlluIiwiWnIiLCJWbiIsInVyIiwiZXQiLCJydCIsInR0IiwicW4iLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJGbiIsIm50IiwidmFsaWRhdGVkIiwiQm4iLCJvdCIsIml0Iiwiem4iLCJpc1JlYWN0Q2xhc3NBcHByb3ZlZCIsIkhuIiwidXQiLCJzdCIsImZ0IiwiSm4iLCJabiIsImNvdW50IiwidG9BcnJheSIsIlB1cmVDb21wb25lbnQiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJDb25zdW1lciIsIl9jdXJyZW50UmVuZGVyZXIiLCJfY3VycmVudFJlbmRlcmVyMiIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJzZWFsIiwiZm9yd2FyZFJlZiIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsIm1lbW8iLCJybiIsImNsc3giLCJjciIsImRldmljZSIsIiRyIiwiYm9vbFN3aXRjaCIsImxyIiwiU3QiLCJ5ciIsImp0IiwiRGV2aWNlVHlwZSIsImRldmljZVNpemUiLCJkZXZpY2VUeXBlQnlVYSIsImdldEltYWdlV2lkdGgiLCJ4ciIsIkVyIiwiR2UiLCJNdCIsIl9yIiwiRHQiLCJJdCIsImt0IiwiT3IiLCIkdCIsIk50IiwiV3QiLCJUciIsIlV0IiwiWXQiLCJMdCIsIlZ0IiwienQiLCJIdCIsInF0Iiwid3IiLCJSciIsIkFyIiwiQ3IiLCJTciIsImpyIiwiQnQiLCJGdCIsImtyIiwiS3QiLCJHdCIsIkp0IiwiWHQiLCJRdCIsIklyIiwibm4iLCJhbiIsIm9uIiwiWnQiLCJ1biIsImRlc2t0b3AiLCJ0YWJsZXQiLCJtb2JpbGUiLCJNciIsIkRyIiwiaW5uZXJXaWR0aCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInBlcmZvcm1hbmNlIiwiTWVzc2FnZUNoYW5uZWwiLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZmxvb3IiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJwb3AiLCJzb3J0SW5kZXgiLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwiX19kZWZQcm9wIiwiX19leHBvcnQiLCJhbGwiLCJGdW5jdGlvbmFsIiwiRnVuY3Rpb25hbF9leHBvcnRzIiwiTW9sZGluZyIsIk1vbGRpbmdfZXhwb3J0cyIsIlRvb2xzIiwiVG9vbHNfZXhwb3J0cyIsIlR5cGVHdWFyZCIsIlR5cGVHdWFyZF9leHBvcnRzIiwiVmFsdWVDaGVjayIsIlZhbHVlQ2hlY2tfZXhwb3J0cyIsImlzTm90TnVsbCIsImlzTm90VW5kZWZpbmVkIiwiaXNOb3RVbmRlZmluZWRBbmROdWxsIiwiaW52YWxpZERhdGFUb1RvZGF5IiwiaXNaZXJvTGVuZ3RoIiwibmFuVG9aZXJvIiwibnVsbFRvQmxhbmsiLCJ1bmRlZmluZWRBbmROdWxsVG9CbGFuayIsInVuZGVmaW5lZFRvQmxhbmsiLCJnZXRUaW1lIiwiUGlwZSIsInRvM0RpZ2l0TnVtIiwidG9Xb3JkUGFkZGluZyIsInRvWmVyb1BhZGRpbmciLCJudW0iLCJ0b0xvY2FsZVN0cmluZyIsImRpZ2l0Iiwid29yZCIsImNyZWF0ZUhhc2hLZXkiLCJzd2FwRG93biIsInN3YXBVcCIsInRocm90dGxlIiwiaW50ZXJ2YWwiLCJsYXN0VGltZSIsInJhbmROdW1zIiwiaGFzaF9rZXkiLCJieXRlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJkZWZpbml0aW9uIiwidG9TdHJpbmdUYWciLCJpc0Fic29sdXRlIiwicGF0aG5hbWUiLCJzcGxpY2VPbmUiLCJsaXN0IiwiY29uZGl0aW9uIiwiYWRkTGVhZGluZ1NsYXNoIiwic3RyaXBCYXNlbmFtZSIsImhhc0Jhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwiY3JlYXRlUGF0aCIsImhhc2giLCJjdXJyZW50TG9jYXRpb24iLCJoYXNoSW5kZXgiLCJzZWFyY2hJbmRleCIsInBhcnNlUGF0aCIsImRlY29kZVVSSSIsIlVSSUVycm9yIiwiaGFzVHJhaWxpbmdTbGFzaCIsInRvUGFydHMiLCJmcm9tUGFydHMiLCJpc1RvQWJzIiwiaXNGcm9tQWJzIiwibXVzdEVuZEFicyIsInBhcnQiLCJjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsInByb21wdCIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImFwcGVuZExpc3RlbmVyIiwiaXNBY3RpdmUiLCJub3RpZnlMaXN0ZW5lcnMiLCJjYW5Vc2VET00iLCJnZXRDb25maXJtYXRpb24iLCJjb25maXJtIiwiUG9wU3RhdGVFdmVudCIsIkhhc2hDaGFuZ2VFdmVudCIsImdldEhpc3RvcnlTdGF0ZSIsImhpc3RvcnkiLCJjcmVhdGVCcm93c2VySGlzdG9yeSIsImdsb2JhbEhpc3RvcnkiLCJjYW5Vc2VIaXN0b3J5IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJfcHJvcHMiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiZm9yY2VSZWZyZXNoIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGtleUxlbmd0aCIsImtleUxlbmd0aCIsImJhc2VuYW1lIiwiZ2V0RE9NTG9jYXRpb24iLCJoaXN0b3J5U3RhdGUiLCJfd2luZG93JGxvY2F0aW9uIiwiY3JlYXRlS2V5IiwidHJhbnNpdGlvbk1hbmFnZXIiLCJuZXh0U3RhdGUiLCJoYW5kbGVQb3BTdGF0ZSIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJoYW5kbGVQb3AiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZm9yY2VOZXh0UG9wIiwiZnJvbUxvY2F0aW9uIiwidG9Mb2NhdGlvbiIsInRvSW5kZXgiLCJhbGxLZXlzIiwiZnJvbUluZGV4IiwiZGVsdGEiLCJnbyIsInJldmVydFBvcCIsImluaXRpYWxMb2NhdGlvbiIsImNyZWF0ZUhyZWYiLCJsaXN0ZW5lckNvdW50IiwiY2hlY2tET01MaXN0ZW5lcnMiLCJpc0Jsb2NrZWQiLCJwdXNoU3RhdGUiLCJwcmV2SW5kZXgiLCJuZXh0S2V5cyIsImdvQmFjayIsImdvRm9yd2FyZCIsImJsb2NrIiwidW5ibG9jayIsImxpc3RlbiIsInVubGlzdGVuIiwiTUFYX1NJR05FRF8zMV9CSVRfSU5UIiwiY29tbW9uanNHbG9iYWwiLCJjcmVhdGVFdmVudEVtaXR0ZXIiLCJoYW5kbGVycyIsImhhbmRsZXIiLCJvZmYiLCJjaGFuZ2VkQml0cyIsImNhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4IiwiX0NvbnN1bWVyJGNvbnRleHRUeXBlIiwiY29udGV4dFByb3AiLCJfQ29tcG9uZW50IiwiZW1pdHRlciIsIm5leHRQcm9wcyIsIm9sZFZhbHVlIiwiX0NvbXBvbmVudDIiLCJfdGhpczIiLCJoaXN0b3J5Q29udGV4dCIsImNyZWF0ZU5hbWVkQ29udGV4dCIsImNyZWF0ZU5hbWVkQ29udGV4dCQxIiwiUm91dGVyIiwiX1JlYWN0JENvbXBvbmVudCIsIl9pc01vdW50ZWQiLCJfcGVuZGluZ0xvY2F0aW9uIiwic3RhdGljQ29udGV4dCIsImNvbXB1dGVSb290TWF0Y2giLCJpc0V4YWN0IiwiY2FjaGVDb3VudCQxIiwibWF0Y2hQYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsIm1hdGNoZWQiLCJfY29tcGlsZVBhdGgiLCJwYXRoQ2FjaGUiLCJyZWdleHAiLCJjb21waWxlUGF0aCQxIiwiUm91dGUiLCJjb250ZXh0JDEiLCJjb21wdXRlZE1hdGNoIiwiX3RoaXMkcHJvcHMiLCJTd2l0Y2giLCJ1c2VIaXN0b3J5IiwiQnJvd3NlclJvdXRlciIsInJlc29sdmVUb0xvY2F0aW9uIiwibm9ybWFsaXplVG9Mb2NhdGlvbiIsImZvcndhcmRSZWZTaGltIiwiTGlua0FuY2hvciIsImZvcndhcmRlZFJlZiIsIm5hdmlnYXRlIiwiX29uQ2xpY2siLCJyZXN0IiwiZXgiLCJpc01vZGlmaWVkRXZlbnQiLCJMaW5rIiwiX3JlZjIkY29tcG9uZW50IiwiZm9yd2FyZFJlZlNoaW0kMSIsImZvcndhcmRSZWYkMSIsIl9yZWYkYXJpYUN1cnJlbnQiLCJhcmlhQ3VycmVudCIsIl9yZWYkYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlU3R5bGUiLCJpc0FjdGl2ZVByb3AiLCJsb2NhdGlvblByb3AiLCJzdHlsZVByb3AiLCJlc2NhcGVkUGF0aCIsImNsYXNzbmFtZXMiLCJqb2luQ2xhc3NuYW1lcyIsImNyZWF0ZUJyZWFrcG9pbnRzIiwiY3JlYXRlTWl4aW5zIiwiY3JlYXRlUGFsZXR0ZSIsImNyZWF0ZVR5cG9ncmFwaHkiLCJjcmVhdGVTcGFjaW5nIiwid2l0aFN0eWxlcyIsImh0bWwiLCJXZWJraXRGb250U21vb3RoaW5nIiwiTW96T3N4Rm9udFNtb290aGluZyIsImJhY2tncm91bmRDb2xvciIsIl9wcm9wcyRjaGlsZHJlbiIsImNhcGl0YWxpemUiLCJDb250YWluZXIiLCJfcHJvcHMkY29tcG9uZW50IiwiX3Byb3BzJGRpc2FibGVHdXR0ZXJzIiwiZGlzYWJsZUd1dHRlcnMiLCJfcHJvcHMkZml4ZWQiLCJmaXhlZCIsIl9wcm9wcyRtYXhXaWR0aCIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsIm1heFdpZHRoWHMiLCJtYXhXaWR0aFNtIiwibWF4V2lkdGhNZCIsIm1heFdpZHRoTGciLCJtYXhXaWR0aFhsIiwiU1BBQ0lOR1MiLCJHUklEX1NJWkVTIiwiZ2V0T2Zmc2V0IiwiZGl2IiwiR3JpZCIsIl9wcm9wcyRhbGlnbkNvbnRlbnQiLCJfcHJvcHMkYWxpZ25JdGVtcyIsIl9wcm9wcyRjb250YWluZXIiLCJfcHJvcHMkZGlyZWN0aW9uIiwiX3Byb3BzJGl0ZW0iLCJfcHJvcHMkanVzdGlmeSIsImp1c3RpZnkiLCJfcHJvcHMkbGciLCJfcHJvcHMkbWQiLCJfcHJvcHMkc20iLCJfcHJvcHMkc3BhY2luZyIsIl9wcm9wcyR3cmFwIiwid3JhcCIsIl9wcm9wcyR4bCIsIl9wcm9wcyR4cyIsIl9wcm9wcyR6ZXJvTWluV2lkdGgiLCJ6ZXJvTWluV2lkdGgiLCJnZW5lcmF0ZUd1dHRlciIsImFjY3VtdWxhdG9yIiwiZ2xvYmFsU3R5bGVzIiwiZ2VuZXJhdGVHcmlkIiwic2V0UmVmIiwidXNlRm9ya1JlZiIsInJlZkEiLCJyZWZCIiwicmVmVmFsdWUiLCJ1c2VFbmhhbmNlZEVmZmVjdCIsInVzZUV2ZW50Q2FsbGJhY2siLCJoYWRLZXlib2FyZEV2ZW50IiwiaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkiLCJoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQiLCJpbnB1dFR5cGVzV2hpdGVsaXN0IiwiaGFuZGxlS2V5RG93biIsImhhbmRsZVBvaW50ZXJEb3duIiwiaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSIsInZpc2liaWxpdHlTdGF0ZSIsImlzRm9jdXNWaXNpYmxlIiwicmVhZE9ubHkiLCJpc0NvbnRlbnRFZGl0YWJsZSIsImhhbmRsZUJsdXJWaXNpYmxlIiwidXNlSXNGb2N1c1Zpc2libGUiLCJvbkJsdXJWaXNpYmxlIiwiZG9jIiwiZ2V0Q2hpbGRNYXBwaW5nIiwibWFwRm4iLCJtYXBwZXIiLCJnZXRQcm9wIiwiZ2V0TmV4dENoaWxkTWFwcGluZyIsInByZXZDaGlsZE1hcHBpbmciLCJvbkV4aXRlZCIsIm5leHRDaGlsZE1hcHBpbmciLCJwcmV2IiwiZ2V0VmFsdWVGb3JLZXkiLCJuZXh0S2V5c1BlbmRpbmciLCJwZW5kaW5nS2V5cyIsInByZXZLZXkiLCJjaGlsZE1hcHBpbmciLCJuZXh0S2V5IiwicGVuZGluZ05leHRLZXkiLCJtZXJnZUNoaWxkTWFwcGluZ3MiLCJoYXNQcmV2IiwiaGFzTmV4dCIsInByZXZDaGlsZCIsImlzTGVhdmluZyIsImluIiwiZXhpdCIsImVudGVyIiwiVHJhbnNpdGlvbkdyb3VwIiwiaGFuZGxlRXhpdGVkIiwiY29udGV4dFZhbHVlIiwiaXNNb3VudGluZyIsImZpcnN0UmVuZGVyIiwibW91bnRlZCIsImFwcGVhciIsImN1cnJlbnRDaGlsZE1hcHBpbmciLCJjaGlsZEZhY3RvcnkiLCJUcmFuc2l0aW9uR3JvdXBDb250ZXh0IiwiX3Byb3BzJHB1bHNhdGUiLCJwdWxzYXRlIiwicmlwcGxlWCIsInJpcHBsZVkiLCJyaXBwbGVTaXplIiwiaW5Qcm9wIiwiX3Byb3BzJG9uRXhpdGVkIiwidGltZW91dCIsIl9SZWFjdCR1c2VTdGF0ZSIsImxlYXZpbmciLCJzZXRMZWF2aW5nIiwicmlwcGxlQ2xhc3NOYW1lIiwicmlwcGxlIiwicmlwcGxlVmlzaWJsZSIsInJpcHBsZVB1bHNhdGUiLCJyaXBwbGVTdHlsZXMiLCJjaGlsZENsYXNzTmFtZSIsImNoaWxkTGVhdmluZyIsImNoaWxkUHVsc2F0ZSIsInRpbWVvdXRJZCIsIlRvdWNoUmlwcGxlIiwiX3Byb3BzJGNlbnRlciIsImNlbnRlciIsImNlbnRlclByb3AiLCJyaXBwbGVzIiwic2V0UmlwcGxlcyIsInJpcHBsZUNhbGxiYWNrIiwiaWdub3JpbmdNb3VzZURvd24iLCJzdGFydFRpbWVyIiwic3RhcnRUaW1lckNvbW1pdCIsInN0YXJ0Q29tbWl0Iiwib2xkUmlwcGxlcyIsIl9vcHRpb25zJHB1bHNhdGUiLCJfb3B0aW9ucyRjZW50ZXIiLCJfb3B0aW9ucyRmYWtlRWxlbWVudCIsImZha2VFbGVtZW50IiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInNxcnQiLCJzaXplWCIsImNsaWVudFdpZHRoIiwic2l6ZVkiLCJjbGllbnRIZWlnaHQiLCJzdG9wIiwicG9pbnRlckV2ZW50cyIsImFuaW1hdGlvbkR1cmF0aW9uIiwiQnV0dG9uQmFzZSIsImJ1dHRvblJlZlByb3AiLCJidXR0b25SZWYiLCJfcHJvcHMkY2VudGVyUmlwcGxlIiwiY2VudGVyUmlwcGxlIiwiX3Byb3BzJGRpc2FibGVkIiwiX3Byb3BzJGRpc2FibGVSaXBwbGUiLCJkaXNhYmxlUmlwcGxlIiwiX3Byb3BzJGRpc2FibGVUb3VjaFJpIiwiZGlzYWJsZVRvdWNoUmlwcGxlIiwiX3Byb3BzJGZvY3VzUmlwcGxlIiwiZm9jdXNSaXBwbGUiLCJmb2N1c1Zpc2libGVDbGFzc05hbWUiLCJvbkJsdXIiLCJvbkZvY3VzIiwib25Gb2N1c1Zpc2libGUiLCJvbktleURvd24iLCJvbktleVVwIiwib25Nb3VzZURvd24iLCJvbk1vdXNlTGVhdmUiLCJvbk1vdXNlVXAiLCJvblRvdWNoRW5kIiwib25Ub3VjaE1vdmUiLCJvblRvdWNoU3RhcnQiLCJvbkRyYWdMZWF2ZSIsIl9wcm9wcyR0YWJJbmRleCIsInRhYkluZGV4IiwiVG91Y2hSaXBwbGVQcm9wcyIsIl9wcm9wcyR0eXBlIiwicmlwcGxlUmVmIiwiZm9jdXNWaXNpYmxlIiwic2V0Rm9jdXNWaXNpYmxlIiwiX3VzZUlzRm9jdXNWaXNpYmxlIiwiZm9jdXNWaXNpYmxlUmVmIiwidXNlUmlwcGxlSGFuZGxlciIsInJpcHBsZUFjdGlvbiIsImV2ZW50Q2FsbGJhY2siLCJza2lwUmlwcGxlQWN0aW9uIiwiaGFuZGxlTW91c2VEb3duIiwiaGFuZGxlRHJhZ0xlYXZlIiwiaGFuZGxlTW91c2VVcCIsImhhbmRsZU1vdXNlTGVhdmUiLCJoYW5kbGVUb3VjaFN0YXJ0IiwiaGFuZGxlVG91Y2hFbmQiLCJoYW5kbGVUb3VjaE1vdmUiLCJoYW5kbGVCbHVyIiwiaGFuZGxlRm9jdXMiLCJpc05vbk5hdGl2ZUJ1dHRvbiIsImtleWRvd25SZWYiLCJoYW5kbGVLZXlVcCIsImJ1dHRvblByb3BzIiwicm9sZSIsImhhbmRsZVVzZXJSZWYiLCJoYW5kbGVPd25SZWYiLCJoYW5kbGVSZWYiLCJfUmVhY3QkdXNlU3RhdGUyIiwibW91bnRlZFN0YXRlIiwic2V0TW91bnRlZFN0YXRlIiwiZW5hYmxlVG91Y2hSaXBwbGUiLCJXZWJraXRUYXBIaWdobGlnaHRDb2xvciIsImN1cnNvciIsInZlcnRpY2FsQWxpZ24iLCJ0ZXh0RGVjb3JhdGlvbiIsImJvcmRlclN0eWxlIiwiQnV0dG9uIiwiX3Byb3BzJGNvbG9yIiwiX3Byb3BzJGRpc2FibGVFbGV2YXRpIiwiZGlzYWJsZUVsZXZhdGlvbiIsIl9wcm9wcyRkaXNhYmxlRm9jdXNSaSIsImRpc2FibGVGb2N1c1JpcHBsZSIsImVuZEljb25Qcm9wIiwiZW5kSWNvbiIsIl9wcm9wcyRmdWxsV2lkdGgiLCJmdWxsV2lkdGgiLCJfcHJvcHMkc2l6ZSIsInN0YXJ0SWNvblByb3AiLCJzdGFydEljb24iLCJfcHJvcHMkdmFyaWFudCIsInZhcmlhbnQiLCJjb2xvckluaGVyaXQiLCJsYWJlbCIsInRleHRQcmltYXJ5IiwidGV4dFNlY29uZGFyeSIsIm91dGxpbmVkIiwib3V0bGluZWRQcmltYXJ5Iiwib3V0bGluZWRTZWNvbmRhcnkiLCJjb250YWluZWQiLCJib3hTaGFkb3ciLCJjb250YWluZWRQcmltYXJ5IiwiY29udGFpbmVkU2Vjb25kYXJ5IiwidGV4dFNpemVTbWFsbCIsInRleHRTaXplTGFyZ2UiLCJvdXRsaW5lZFNpemVTbWFsbCIsIm91dGxpbmVkU2l6ZUxhcmdlIiwiY29udGFpbmVkU2l6ZVNtYWxsIiwiY29udGFpbmVkU2l6ZUxhcmdlIiwic2l6ZVNtYWxsIiwic2l6ZUxhcmdlIiwiaWNvblNpemVTbWFsbCIsImljb25TaXplTWVkaXVtIiwiaWNvblNpemVMYXJnZSIsImRlZmF1bHRWYXJpYW50TWFwcGluZyIsIlR5cG9ncmFwaHkiLCJfcHJvcHMkYWxpZ24iLCJhbGlnbiIsIl9wcm9wcyRkaXNwbGF5IiwiX3Byb3BzJGd1dHRlckJvdHRvbSIsImd1dHRlckJvdHRvbSIsIl9wcm9wcyRub1dyYXAiLCJub1dyYXAiLCJfcHJvcHMkcGFyYWdyYXBoIiwicGFyYWdyYXBoIiwiX3Byb3BzJHZhcmlhbnRNYXBwaW5nIiwidmFyaWFudE1hcHBpbmciLCJzck9ubHkiLCJhbGlnbkxlZnQiLCJhbGlnbkNlbnRlciIsImFsaWduUmlnaHQiLCJhbGlnbkp1c3RpZnkiLCJtYXJnaW5Cb3R0b20iLCJjb2xvclByaW1hcnkiLCJjb2xvclNlY29uZGFyeSIsImNvbG9yVGV4dFByaW1hcnkiLCJjb2xvclRleHRTZWNvbmRhcnkiLCJjb2xvckVycm9yIiwiZGlzcGxheUlubGluZSIsImRpc3BsYXlCbG9jayIsInVzZVN0eWxlIiwiQmFzaWNJbmR1Y3Rpb25Db250YWluZXIiLCJhbmltYXRpb25UaW1pbmdGdW5jdGlvbiIsImFuaW1hdGlvbkRpcmVjdGlvbiIsIkJhc2ljSW5kdWN0aW9uIiwiR2xvYmFsU3R5bGVzIiwiX2EiLCJfYiIsIl9jIiwiX2YiLCJfZyIsIl9oIiwiYnV0dG9uUHJpbWFyeSIsImJ1dHRvblNlY29uZGFyeSIsInRleHRUaXRsZSIsInRleHRTdWJUaXRsZSIsInRleHRDYXB0aW9uIiwidGV4dFBhcmFncmFwaCIsInRleHRSZW1hcmsiLCJtb2RhbEJhc2ljIiwiY2FyZEJhc2ljIiwiY2FyZEZ1bGxXaWR0aCIsInBvc2l0aW9uQ2VudGVyaW5nIiwicG9zaXRpb25MZWZ0aW5nIiwicG9zaXRpb25YQ2VudGVyWUJvdHRvbSIsInBvc2l0aW9uWENlbnRlcllUb3AiLCJwb3NpdGlvbkZpeGVkQ2VudGVyaW5nIiwidHJhbnNpdGlvblNpbXBsZUZhZGVJbiIsInRyYW5zaXRpb25GYWRlSW5Eb3duUGVuZGluZyIsInRyYW5zaXRpb25GYWRlSW5VcFBlbmRpbmciLCJ0cmFuc2l0aW9uRmFkZUluUmlnaHRQZW5kaW5nIiwidHJhbnNpdGlvbkZhZGVJbkxlZnRQZW5kaW5nIiwidHJhbnNpdGlvbkZhZGVJblJ1biIsInRyYW5zaXRpb25GYWRlSW5FbmQiLCJjb250ZW50U2VjdGlvbkNvbnRhaW5lciIsInJvb3RDb250YWluZXIiLCJkcmF3ZXJDb250YWluZXIiLCJMaXN0IiwiX3Byb3BzJGRlbnNlIiwiZGVuc2UiLCJfcHJvcHMkZGlzYWJsZVBhZGRpbmciLCJkaXNhYmxlUGFkZGluZyIsInN1YmhlYWRlciIsImxpc3RTdHlsZSIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwiTGlzdEl0ZW0iLCJfcHJvcHMkYXV0b0ZvY3VzIiwiX3Byb3BzJGJ1dHRvbiIsImNoaWxkcmVuUHJvcCIsImNvbXBvbmVudFByb3AiLCJfcHJvcHMkQ29udGFpbmVyQ29tcG8iLCJDb250YWluZXJDb21wb25lbnQiLCJfcHJvcHMkQ29udGFpbmVyUHJvcHMiLCJDb250YWluZXJQcm9wcyIsIkNvbnRhaW5lckNsYXNzTmFtZSIsIl9wcm9wcyRkaXZpZGVyIiwiX3Byb3BzJHNlbGVjdGVkIiwiY2hpbGRDb250ZXh0IiwibGlzdEl0ZW1SZWYiLCJtdWlOYW1lcyIsImhhc1NlY29uZGFyeUFjdGlvbiIsIm11aU5hbWUiLCJjb21wb25lbnRQcm9wcyIsImFsaWduSXRlbXNGbGV4U3RhcnQiLCJzZWNvbmRhcnlBY3Rpb24iLCJiYWNrZ3JvdW5kQ2xpcCIsIkljb24iLCJfcHJvcHMkZm9udFNpemUiLCJjb2xvckFjdGlvbiIsImNvbG9yRGlzYWJsZWQiLCJmb250U2l6ZUluaGVyaXQiLCJmb250U2l6ZVNtYWxsIiwiZm9udFNpemVMYXJnZSIsIkxpc3RJdGVtVGV4dCIsIl9wcm9wcyRkaXNhYmxlVHlwb2dyYSIsImRpc2FibGVUeXBvZ3JhcGh5IiwiX3Byb3BzJGluc2V0IiwicHJpbWFyeVByb3AiLCJwcmltYXJ5VHlwb2dyYXBoeVByb3BzIiwic2Vjb25kYXJ5UHJvcCIsInNlY29uZGFyeVR5cG9ncmFwaHlQcm9wcyIsIm11bHRpbGluZSIsIm1hcmdpblRvcCIsIkxpc3RJdGVtSWNvbiIsIl9wcm9wcyRzcXVhcmUiLCJzcXVhcmUiLCJfcHJvcHMkZWxldmF0aW9uIiwiZWxldmF0aW9uIiwicm91bmRlZCIsImVsZXZhdGlvbnMiLCJzaGFkb3ciLCJBcHBCYXIiLCJfcHJvcHMkcG9zaXRpb24iLCJiYWNrZ3JvdW5kQ29sb3JEZWZhdWx0IiwicG9zaXRpb25GaXhlZCIsInBvc2l0aW9uQWJzb2x1dGUiLCJwb3NpdGlvblN0aWNreSIsInBvc2l0aW9uU3RhdGljIiwicG9zaXRpb25SZWxhdGl2ZSIsImNvbG9yRGVmYXVsdCIsImNvbG9yVHJhbnNwYXJlbnQiLCJUb29sYmFyIiwicmVndWxhciIsIkljb25CdXR0b24iLCJfcHJvcHMkZWRnZSIsImVkZ2UiLCJlZGdlU3RhcnQiLCJlZGdlRW5kIiwiX3Byb3BzJGRpc2FibGVQb3J0YWwiLCJkaXNhYmxlUG9ydGFsIiwib25SZW5kZXJlZCIsIm1vdW50Tm9kZSIsInNldE1vdW50Tm9kZSIsImdldENvbnRhaW5lciIsImNyZWF0ZUNoYWluZWRGdW5jdGlvbiIsImZ1bmNzIiwiX2xlbjIiLCJfa2V5MiIsImFyaWFIaWRkZW4iLCJzaG93IiwiZ2V0UGFkZGluZ1JpZ2h0IiwiYXJpYUhpZGRlblNpYmxpbmdzIiwiY3VycmVudE5vZGUiLCJub2Rlc1RvRXhjbHVkZSIsImJsYWNrbGlzdFRhZ05hbWVzIiwiZmluZEluZGV4T2YiLCJpZHgiLCJzb21lIiwiaGFuZGxlQ29udGFpbmVyIiwiZml4ZWROb2RlcyIsInJlc3RvcmVTdHlsZSIsInJlc3RvcmVQYWRkaW5ncyIsImRpc2FibGVTY3JvbGxMb2NrIiwic2Nyb2xsSGVpZ2h0IiwiaXNPdmVyZmxvd2luZyIsInNjcm9sbGJhclNpemUiLCJzY3JvbGxEaXYiLCJvZmZzZXRXaWR0aCIsImdldFNjcm9sbGJhclNpemUiLCJwYXJlbnRFbGVtZW50Iiwic2Nyb2xsQ29udGFpbmVyIiwiTW9kYWxNYW5hZ2VyIiwibW9kYWxzIiwiY29udGFpbmVycyIsIm1vZGFsSW5kZXgiLCJtb2RhbFJlZiIsImhpZGRlblNpYmxpbmdOb2RlcyIsImhpZGRlblNpYmxpbmdzIiwiZ2V0SGlkZGVuU2libGluZ3MiLCJjb250YWluZXJJbmRleCIsInJlc3RvcmUiLCJuZXh0VG9wIiwiX3Byb3BzJGRpc2FibGVBdXRvRm9jIiwiZGlzYWJsZUF1dG9Gb2N1cyIsIl9wcm9wcyRkaXNhYmxlRW5mb3JjZSIsImRpc2FibGVFbmZvcmNlRm9jdXMiLCJfcHJvcHMkZGlzYWJsZVJlc3RvcmUiLCJkaXNhYmxlUmVzdG9yZUZvY3VzIiwiZ2V0RG9jIiwiaXNFbmFibGVkIiwib3BlbiIsImlnbm9yZU5leHRFbmZvcmNlRm9jdXMiLCJzZW50aW5lbFN0YXJ0Iiwic2VudGluZWxFbmQiLCJub2RlVG9SZXN0b3JlIiwicm9vdFJlZiIsInByZXZPcGVuUmVmIiwiY29udGFpbiIsImhhc0ZvY3VzIiwibG9vcEZvY3VzIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiaW52aXNpYmxlIiwiX3Byb3BzJGludmlzaWJsZSIsImRlZmF1bHRNYW5hZ2VyIiwiaW5Qcm9wcyIsIl9wcm9wcyRCYWNrZHJvcENvbXBvbiIsIkJhY2tkcm9wQ29tcG9uZW50IiwiQmFja2Ryb3BQcm9wcyIsIl9wcm9wcyRjbG9zZUFmdGVyVHJhbiIsImNsb3NlQWZ0ZXJUcmFuc2l0aW9uIiwiX3Byb3BzJGRpc2FibGVCYWNrZHJvIiwiZGlzYWJsZUJhY2tkcm9wQ2xpY2siLCJfcHJvcHMkZGlzYWJsZUVzY2FwZUsiLCJkaXNhYmxlRXNjYXBlS2V5RG93biIsIl9wcm9wcyRkaXNhYmxlU2Nyb2xsTCIsIl9wcm9wcyRoaWRlQmFja2Ryb3AiLCJoaWRlQmFja2Ryb3AiLCJfcHJvcHMka2VlcE1vdW50ZWQiLCJrZWVwTW91bnRlZCIsIl9wcm9wcyRtYW5hZ2VyIiwibWFuYWdlciIsIm9uQmFja2Ryb3BDbGljayIsIm9uQ2xvc2UiLCJvbkVzY2FwZUtleURvd24iLCJleGl0ZWQiLCJzZXRFeGl0ZWQiLCJtb3VudE5vZGVSZWYiLCJoYXNUcmFuc2l0aW9uIiwiZ2V0SGFzVHJhbnNpdGlvbiIsImdldE1vZGFsIiwiaGFuZGxlTW91bnRlZCIsIm1vdW50IiwiaGFuZGxlT3BlbiIsInJlc29sdmVkQ29udGFpbmVyIiwiaXNUb3BNb2RhbCIsImhhbmRsZVBvcnRhbFJlZiIsImhhbmRsZUNsb3NlIiwiaW5saW5lU3R5bGUiLCJoaWRkZW4iLCJjaGlsZFByb3BzIiwib25FbnRlciIsIlVOTU9VTlRFRCIsIkVYSVRFRCIsIkVOVEVSSU5HIiwiRU5URVJFRCIsIkVYSVRJTkciLCJUcmFuc2l0aW9uIiwiaW5pdGlhbFN0YXR1cyIsImFwcGVhclN0YXR1cyIsInVubW91bnRPbkV4aXQiLCJtb3VudE9uRW50ZXIiLCJzdGF0dXMiLCJuZXh0Q2FsbGJhY2siLCJwcmV2U3RhdGUiLCJ1cGRhdGVTdGF0dXMiLCJwcmV2UHJvcHMiLCJuZXh0U3RhdHVzIiwiY2FuY2VsTmV4dENhbGxiYWNrIiwiZ2V0VGltZW91dHMiLCJtb3VudGluZyIsInBlcmZvcm1FbnRlciIsInBlcmZvcm1FeGl0IiwiYXBwZWFyaW5nIiwibm9kZVJlZiIsIm1heWJlTm9kZSIsIm1heWJlQXBwZWFyaW5nIiwidGltZW91dHMiLCJlbnRlclRpbWVvdXQiLCJzYWZlU2V0U3RhdGUiLCJvbkVudGVyaW5nIiwib25UcmFuc2l0aW9uRW5kIiwib25FbnRlcmVkIiwiX3RoaXMzIiwib25FeGl0Iiwib25FeGl0aW5nIiwiY2FuY2VsIiwic2V0TmV4dENhbGxiYWNrIiwiX3RoaXM0IiwiZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lciIsImFkZEVuZExpc3RlbmVyIiwibWF5YmVOZXh0Q2FsbGJhY2siLCJyZWZsb3ciLCJnZXRUcmFuc2l0aW9uUHJvcHMiLCJfcHJvcHMkc3R5bGUiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRGVsYXkiLCJlbnRlcmluZyIsImVudGVyZWQiLCJkZWZhdWx0VGltZW91dCIsIl9wcm9wcyRkaXNhYmxlU3RyaWN0TSIsImRpc2FibGVTdHJpY3RNb2RlQ29tcGF0IiwiX3Byb3BzJFRyYW5zaXRpb25Db21wIiwiVHJhbnNpdGlvbkNvbXBvbmVudCIsIl9wcm9wcyR0aW1lb3V0IiwiZW5hYmxlU3RyaWN0TW9kZUNvbXBhdCIsInVuc3RhYmxlX3N0cmljdE1vZGUiLCJmb3JlaWduUmVmIiwibm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayIsIm5vZGVPckFwcGVhcmluZyIsImlzQXBwZWFyaW5nIiwiaGFuZGxlRW50ZXJpbmciLCJoYW5kbGVFbnRlciIsInRyYW5zaXRpb25Qcm9wcyIsIndlYmtpdFRyYW5zaXRpb24iLCJoYW5kbGVFbnRlcmVkIiwiaGFuZGxlRXhpdGluZyIsImhhbmRsZUV4aXQiLCJCYWNrZHJvcCIsInNldFRyYW5zbGF0ZVZhbHVlIiwiZmFrZVRyYW5zZm9ybSIsImNvbXB1dGVkU3R5bGUiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInRyYW5zZm9ybVZhbHVlcyIsImlubmVySGVpZ2h0IiwiZ2V0VHJhbnNsYXRlVmFsdWUiLCJ3ZWJraXRUcmFuc2Zvcm0iLCJjaGlsZHJlblJlZiIsImhhbmRsZVJlZkludGVybWVkaWFyeSIsInVwZGF0ZVBvc2l0aW9uIiwiaGFuZGxlUmVzaXplIiwid2FpdCIsImRlYm91bmNlZCIsInRoYXQiLCJsYXRlciIsImNsZWFyIiwiZGVib3VuY2UiLCJvcHBvc2l0ZURpcmVjdGlvbiIsImlzSG9yaXpvbnRhbCIsImFuY2hvciIsImdldEFuY2hvciIsImRlZmF1bHRUcmFuc2l0aW9uRHVyYXRpb24iLCJEcmF3ZXIiLCJfcHJvcHMkYW5jaG9yIiwiYW5jaG9yUHJvcCIsIl9wcm9wcyRNb2RhbFByb3BzIiwiTW9kYWxQcm9wcyIsIkJhY2tkcm9wUHJvcHNQcm9wIiwiX3Byb3BzJG9wZW4iLCJfcHJvcHMkUGFwZXJQcm9wcyIsIlBhcGVyUHJvcHMiLCJTbGlkZVByb3BzIiwiX3Byb3BzJHRyYW5zaXRpb25EdXJhIiwiZG9ja2VkIiwic2xpZGluZ0RyYXdlciIsIm92ZXJmbG93WSIsIldlYmtpdE92ZXJmbG93U2Nyb2xsaW5nIiwicGFwZXJBbmNob3JMZWZ0IiwicGFwZXJBbmNob3JSaWdodCIsInBhcGVyQW5jaG9yVG9wIiwicGFwZXJBbmNob3JCb3R0b20iLCJwYXBlckFuY2hvckRvY2tlZExlZnQiLCJwYXBlckFuY2hvckRvY2tlZFRvcCIsInBhcGVyQW5jaG9yRG9ja2VkUmlnaHQiLCJwYXBlckFuY2hvckRvY2tlZEJvdHRvbSIsIl9wcm9wcyRkZWZlciIsImRlZmVyIiwiX3Byb3BzJGZhbGxiYWNrIiwiU3dpcGVBcmVhIiwiYW5jaG9yTGVmdCIsImFuY2hvclJpZ2h0IiwiYW5jaG9yVG9wIiwiYW5jaG9yQm90dG9tIiwibm9kZVRoYXRDbGFpbWVkVGhlU3dpcGUiLCJjYWxjdWxhdGVDdXJyZW50WCIsImNhbGN1bGF0ZUN1cnJlbnRZIiwiZ2V0TWF4VHJhbnNsYXRlIiwiaG9yaXpvbnRhbFN3aXBlIiwicGFwZXJJbnN0YW5jZSIsImdldFRyYW5zbGF0ZSIsImN1cnJlbnRUcmFuc2xhdGUiLCJzdGFydExvY2F0aW9uIiwibWF4VHJhbnNsYXRlIiwiaU9TIiwidHJhbnNpdGlvbkR1cmF0aW9uRGVmYXVsdCIsImRpc2FibGVCYWNrZHJvcFRyYW5zaXRpb24iLCJfcHJvcHMkZGlzYWJsZURpc2NvdmUiLCJkaXNhYmxlRGlzY292ZXJ5IiwiX3Byb3BzJGRpc2FibGVTd2lwZVRvIiwiZGlzYWJsZVN3aXBlVG9PcGVuIiwiX3Byb3BzJGh5c3RlcmVzaXMiLCJoeXN0ZXJlc2lzIiwiX3Byb3BzJG1pbkZsaW5nVmVsb2NpIiwibWluRmxpbmdWZWxvY2l0eSIsIk1vZGFsUHJvcHNQcm9wIiwib25PcGVuIiwiU3dpcGVBcmVhUHJvcHMiLCJfcHJvcHMkc3dpcGVBcmVhV2lkdGgiLCJzd2lwZUFyZWFXaWR0aCIsIm1heWJlU3dpcGluZyIsInNldE1heWJlU3dpcGluZyIsInN3aXBlSW5zdGFuY2UiLCJpc1N3aXBpbmciLCJzd2lwZUFyZWFSZWYiLCJiYWNrZHJvcFJlZiIsInBhcGVyUmVmIiwidG91Y2hEZXRlY3RlZCIsImNhbGN1bGF0ZWREdXJhdGlvblJlZiIsInNldFBvc2l0aW9uIiwidHJhbnNsYXRlIiwiX29wdGlvbnMkbW9kZSIsIl9vcHRpb25zJGNoYW5nZVRyYW5zaSIsImNoYW5nZVRyYW5zaXRpb24iLCJhbmNob3JSdGwiLCJydGxUcmFuc2xhdGVNdWx0aXBsaWVyIiwiZHJhd2VyU3R5bGUiLCJiYWNrZHJvcFN0eWxlIiwiaGFuZGxlQm9keVRvdWNoRW5kIiwiaG9yaXpvbnRhbCIsInN0YXJ0WCIsInN0YXJ0WSIsInRyYW5zbGF0ZVJhdGlvIiwidmVsb2NpdHkiLCJoYW5kbGVCb2R5VG91Y2hNb3ZlIiwiY3VycmVudFgiLCJjdXJyZW50WSIsIm5hdGl2ZUhhbmRsZXIiLCJheGlzUHJvcGVydGllcyIsImRvbVRyZWVTaGFwZXMiLCJnb2luZ0ZvcndhcmQiLCJheGlzIiwic2Nyb2xsUG9zaXRpb24iLCJhcmVOb3RBdFN0YXJ0IiwiYXJlTm90QXRFbmQiLCJmaW5kTmF0aXZlSGFuZGxlciIsInJvb3ROb2RlIiwic2Nyb2xsV2lkdGgiLCJnZXREb21UcmVlU2hhcGVzIiwiZHgiLCJkeSIsImRlZmluaXRlbHlTd2lwaW5nIiwicGFwZXJIaXQiLCJsYXN0VHJhbnNsYXRlIiwiaGFuZGxlQm9keVRvdWNoU3RhcnQiLCJtdWlIYW5kbGVkIiwiaGFuZGxlQmFja2Ryb3BSZWYiLCJSb3V0ZXJQYXRoIiwiUk9PVCIsIlNJR05JTiIsIlNJR05VUCIsIlBSSVZBQ1lfUE9MSUNZIiwiVEVSTVNfUE9MSUNZIiwiTVlQQUdFIiwiTUVNQkVSX1JFR0lTVCIsIlJFTU9WRV9BQ0NPVU5UIiwiSGVhZGVyQW5kRHJhd2VyIiwic2V0QW5jaG9yIiwibG9naW5lZCIsImFwcEJhckNzcyIsImJhc2VQYWdlcyIsImlzTG9naW5lZCIsIlNJREVfQkFSX1BBR0VTIiwiRGl2aWRlciIsIl9wcm9wcyRhYnNvbHV0ZSIsImFic29sdXRlIiwiX3Byb3BzJGZsZXhJdGVtIiwiZmxleEl0ZW0iLCJfcHJvcHMkbGlnaHQiLCJfcHJvcHMkb3JpZW50YXRpb24iLCJvcmllbnRhdGlvbiIsIl9wcm9wcyRyb2xlIiwidmVydGljYWwiLCJtaWRkbGUiLCJTaXRlRm9vdGVyIiwiUGFnZVJvb3QiLCJnQ2xhc3NlcyIsIlBhZ2VSb290Tm9Db250YWluZXIiLCJDYXJkQXJncyIsInRpdGxlIiwibXNnczEiLCJtc2dzMiIsImJnSW1hZ2UiLCJkZXNjcyIsIkluSW1hZ2VUaXRsZVRleHQiLCJJbkltYWdlU3ViVGl0bGVUZXh0IiwiSW5JbWFnZVBhcmFncmFwaFRleHQiLCJDYXJkQ29udGFpbmVyIiwiYmFja2dyb3VuZFNpemUiLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJJbmR1Y2F0aW9uIiwiQ2FyZCIsIl9wcm9wcyRyYWlzZWQiLCJyYWlzZWQiLCJub3dIZWlnaHQiLCJ0cmFuc2l0aW9uVHlwZSIsImZpcnN0Iiwic2V0Rmlyc3QiLCJjbHN4TmFtZSIsInNldENsc3hOYW1lIiwib2Zmc2V0VG9wIiwicG9zaXRpb25TdGF0dXMiLCJQcm9kdWN0UGFnZSIsImxDbGFzc2VzIiwicXVlcnlJbnB1dCIsInN1cHBvcnRNYXRjaE1lZGlhIiwibWF0Y2hNZWRpYSIsIl9wcm9wcyRvcHRpb25zIiwiX3Byb3BzJG9wdGlvbnMkZGVmYXVsIiwiZGVmYXVsdE1hdGNoZXMiLCJfcHJvcHMkb3B0aW9ucyRtYXRjaE0iLCJfcHJvcHMkb3B0aW9ucyRub1NzciIsIm5vU3NyIiwiX3Byb3BzJG9wdGlvbnMkc3NyTWF0Iiwic3NyTWF0Y2hNZWRpYSIsInNldE1hdGNoIiwicXVlcnlMaXN0IiwidXBkYXRlTWF0Y2giLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwidXNlTWVkaWFRdWVyeSIsIm9uU2Nyb2xsIiwicGFnZVlPZmZzZXQiLCJzY3JvbGwiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJTaWduSW5TY3JlZW4iLCJQcml2YWN5UG9saWN5UGFnZSIsIlRlcm1zUGFnZSIsIlNpZ25VcFNjcmVlbiIsImRlZmF1bHRDb21wb25lbnQiLCJfcHJvcHMkcGFkZGluZyIsIl9wcm9wcyRzdGlja3lIZWFkZXIiLCJzdGlja3lIZWFkZXIiLCJ0YWJsZSIsImJvcmRlckNvbGxhcHNlIiwiYm9yZGVyU3BhY2luZyIsImNhcHRpb25TaWRlIiwidGFibGVsdmwyIiwicGFkZGluZ1Byb3AiLCJzY29wZVByb3AiLCJzaXplUHJvcCIsInNvcnREaXJlY3Rpb24iLCJ2YXJpYW50UHJvcCIsImlzSGVhZENlbGwiLCJhcmlhU29ydCIsImZvb3RlciIsInBhZGRpbmdDaGVja2JveCIsInBhZGRpbmdOb25lIiwib3ZlcmZsb3dYIiwiX3Byb3BzJGhvdmVyIiwiVHdvQ29sdW1uV2l0aFRpdGxlIiwicm93IiwiU0laRSIsIkNpcmN1bGFyUHJvZ3Jlc3MiLCJfcHJvcHMkZGlzYWJsZVNocmluayIsImRpc2FibGVTaHJpbmsiLCJfcHJvcHMkdGhpY2tuZXNzIiwidGhpY2tuZXNzIiwiX3Byb3BzJHZhbHVlIiwiY2lyY2xlU3R5bGUiLCJyb290U3R5bGUiLCJyb290UHJvcHMiLCJjaXJjdW1mZXJlbmNlIiwiUEkiLCJkZXRlcm1pbmF0ZSIsImluZGV0ZXJtaW5hdGUiLCJzdGF0aWMiLCJzdmciLCJ2aWV3Qm94IiwiY2lyY2xlIiwiY2lyY2xlRGlzYWJsZVNocmluayIsImNpcmNsZURldGVybWluYXRlIiwiY2lyY2xlSW5kZXRlcm1pbmF0ZSIsImNpcmNsZVN0YXRpYyIsImN4IiwiY3kiLCJmaWxsIiwic3Ryb2tlIiwidHJhbnNmb3JtT3JpZ2luIiwiTG9hZGluZ0NpcmNsZSIsImxvYWRGbGFnIiwiX19hc3NpZ24iLCJNeVBhZ2UiLCJzbmFwc2hvdCIsImxvYWQiLCJsYXN0TmFtZSIsImZpcnN0TmFtZSIsInBob25lIiwib3JnYW5pemVOYW1lIiwiY2FwaXRhbCIsImVzdGFibGlzaGVkWWVhciIsImVtcGxveWVlc0NvdW50IiwicHJlZmVjdHVyZXMiLCJpbmR1c3RyeSIsIlJlbW92ZVBhZ2UiLCJUaGVtZVByb3ZpZGVyIiwiZ2V0RWxlbWVudEJ5SWQiXSwibWFwcGluZ3MiOiI7b0NBZUFBLEVBQU9DLFFBZlAsU0FBeUJDLEVBQUtDLEVBQUtDLEdBWWpDLE9BWElELEtBQU9ELEVBQ1RHLE9BQU9DLGVBQWVKLEVBQUtDLEVBQUssQ0FDOUJDLE1BQU9BLEVBQ1BHLFlBQVksRUFDWkMsY0FBYyxFQUNkQyxVQUFVLElBR1pQLEVBQUlDLEdBQU9DLEVBR05GLEdBSVRGLEVBQU9DLFFBQVAsUUFBNEJELEVBQU9DLFFBQVNELEVBQU9DLFFBQVFTLFlBQWEsRyxpQ0NoQnpELFNBQVNDLEVBQWtCQyxFQUFLQyxJQUNsQyxNQUFQQSxHQUFlQSxFQUFNRCxFQUFJRSxVQUFRRCxFQUFNRCxFQUFJRSxRQUUvQyxJQUFLLElBQUlDLEVBQUksRUFBR0MsRUFBTyxJQUFJQyxNQUFNSixHQUFNRSxFQUFJRixFQUFLRSxJQUM5Q0MsRUFBS0QsR0FBS0gsRUFBSUcsR0FHaEIsT0FBT0MsRSxtRUNQTSxTQUFTRSxFQUF1QkMsR0FDN0MsUUFBYSxJQUFUQSxFQUNGLE1BQU0sSUFBSUMsZUFBZSw2REFHM0IsT0FBT0QsRSxtRUNMTSxTQUFTRSxFQUFnQkMsRUFBVUMsR0FDaEQsS0FBTUQsYUFBb0JDLEdBQ3hCLE1BQU0sSUFBSUMsVUFBVSxxQyxtRUNGeEIsU0FBU0MsRUFBa0JDLEVBQVFDLEdBQ2pDLElBQUssSUFBSVosRUFBSSxFQUFHQSxFQUFJWSxFQUFNYixPQUFRQyxJQUFLLENBQ3JDLElBQUlhLEVBQWFELEVBQU1aLEdBQ3ZCYSxFQUFXckIsV0FBYXFCLEVBQVdyQixhQUFjLEVBQ2pEcUIsRUFBV3BCLGNBQWUsRUFDdEIsVUFBV29CLElBQVlBLEVBQVduQixVQUFXLEdBQ2pESixPQUFPQyxlQUFlb0IsRUFBUUUsRUFBV3pCLElBQUt5QixJQUluQyxTQUFTQyxFQUFhTixFQUFhTyxFQUFZQyxHQUc1RCxPQUZJRCxHQUFZTCxFQUFrQkYsRUFBWVMsVUFBV0YsR0FDckRDLEdBQWFOLEVBQWtCRixFQUFhUSxHQUN6Q1IsRSxtRUNiTSxTQUFTVSxFQUFnQi9CLEVBQUtDLEVBQUtDLEdBWWhELE9BWElELEtBQU9ELEVBQ1RHLE9BQU9DLGVBQWVKLEVBQUtDLEVBQUssQ0FDOUJDLE1BQU9BLEVBQ1BHLFlBQVksRUFDWkMsY0FBYyxFQUNkQyxVQUFVLElBR1pQLEVBQUlDLEdBQU9DLEVBR05GLEUsbUVDWk0sU0FBU2dDLElBZXRCLE9BZEFBLEVBQVc3QixPQUFPOEIsUUFBVSxTQUFVVCxHQUNwQyxJQUFLLElBQUlYLEVBQUksRUFBR0EsRUFBSXFCLFVBQVV0QixPQUFRQyxJQUFLLENBQ3pDLElBQUlzQixFQUFTRCxVQUFVckIsR0FFdkIsSUFBSyxJQUFJWixLQUFPa0MsRUFDVmhDLE9BQU8yQixVQUFVTSxlQUFlQyxLQUFLRixFQUFRbEMsS0FDL0N1QixFQUFPdkIsR0FBT2tDLEVBQU9sQyxJQUszQixPQUFPdUIsSUFHT2MsTUFBTUMsS0FBTUwsVyxtRUNmZixTQUFTTSxFQUFnQkMsRUFBR0MsR0FNekMsT0FMQUYsRUFBa0JyQyxPQUFPd0MsZ0JBQWtCLFNBQXlCRixFQUFHQyxHQUVyRSxPQURBRCxFQUFFRyxVQUFZRixFQUNQRCxJQUdjQSxFQUFHQyxHQ0xiLFNBQVNHLEVBQWVDLEVBQVVDLEdBQy9DRCxFQUFTaEIsVUFBWTNCLE9BQU82QyxPQUFPRCxFQUFXakIsV0FDOUNnQixFQUFTaEIsVUFBVW1CLFlBQWNILEVBQ2pDLEVBQWVBLEVBQVVDLEcsaUhDSFosU0FBU0csRUFBeUJmLEVBQVFnQixHQUN2RCxHQUFjLE1BQVZoQixFQUFnQixNQUFPLEdBQzNCLElBQ0lsQyxFQUFLWSxFQURMVyxHQUFTLE9BQTZCVyxFQUFRZ0IsR0FHbEQsR0FBSWhELE9BQU9pRCxzQkFBdUIsQ0FDaEMsSUFBSUMsRUFBbUJsRCxPQUFPaUQsc0JBQXNCakIsR0FFcEQsSUFBS3RCLEVBQUksRUFBR0EsRUFBSXdDLEVBQWlCekMsT0FBUUMsSUFDdkNaLEVBQU1vRCxFQUFpQnhDLEdBQ25Cc0MsRUFBU0csUUFBUXJELElBQVEsR0FDeEJFLE9BQU8yQixVQUFVeUIscUJBQXFCbEIsS0FBS0YsRUFBUWxDLEtBQ3hEdUIsRUFBT3ZCLEdBQU9rQyxFQUFPbEMsSUFJekIsT0FBT3VCLEksa0NDakJNLFNBQVNnQyxFQUE4QnJCLEVBQVFnQixHQUM1RCxHQUFjLE1BQVZoQixFQUFnQixNQUFPLEdBQzNCLElBRUlsQyxFQUFLWSxFQUZMVyxFQUFTLEdBQ1RpQyxFQUFhdEQsT0FBT3VELEtBQUt2QixHQUc3QixJQUFLdEIsRUFBSSxFQUFHQSxFQUFJNEMsRUFBVzdDLE9BQVFDLElBQ2pDWixFQUFNd0QsRUFBVzVDLEdBQ2JzQyxFQUFTRyxRQUFRckQsSUFBUSxJQUM3QnVCLEVBQU92QixHQUFPa0MsRUFBT2xDLElBR3ZCLE9BQU91QixFLGlIQ1JNLFNBQVNtQyxFQUFlakQsRUFBS0csR0FDMUMsT0NMYSxTQUF5QkgsR0FDdEMsR0FBSUssTUFBTTZDLFFBQVFsRCxHQUFNLE9BQU9BLEVESXhCLENBQWVBLElFTFQsU0FBK0JBLEVBQUtHLEdBQ2pELEdBQXNCLG9CQUFYZ0QsUUFBNEJBLE9BQU9DLFlBQVkzRCxPQUFPTyxHQUFqRSxDQUNBLElBQUlxRCxFQUFPLEdBQ1BDLEdBQUssRUFDTEMsR0FBSyxFQUNMQyxPQUFLQyxFQUVULElBQ0UsSUFBSyxJQUFpQ0MsRUFBN0JDLEVBQUszRCxFQUFJbUQsT0FBT0MsY0FBbUJFLEdBQU1JLEVBQUtDLEVBQUdDLFFBQVFDLFFBQ2hFUixFQUFLUyxLQUFLSixFQUFHbEUsUUFFVFcsR0FBS2tELEVBQUtuRCxTQUFXQyxHQUg4Q21ELEdBQUssSUFLOUUsTUFBT1MsR0FDUFIsR0FBSyxFQUNMQyxFQUFLTyxFQUNMLFFBQ0EsSUFDT1QsR0FBc0IsTUFBaEJLLEVBQVcsUUFBV0EsRUFBVyxTQUM1QyxRQUNBLEdBQUlKLEVBQUksTUFBTUMsR0FJbEIsT0FBT0gsR0ZuQnVCLENBQXFCckQsRUFBS0csS0FBTSxFQUFBNkQsRUFBQSxHQUEyQmhFLEVBQUtHLElHTGpGLFdBQ2IsTUFBTSxJQUFJUyxVQUFVLDZJSElnRixLLHlGSUR2RixTQUFTcUQsRUFBbUJqRSxHQUN6QyxPQ0phLFNBQTRCQSxHQUN6QyxHQUFJSyxNQUFNNkMsUUFBUWxELEdBQU0sT0FBTyxFQUFBa0UsRUFBQSxHQUFpQmxFLEdER3pDLENBQWtCQSxJRUxaLFNBQTBCbUUsR0FDdkMsR0FBc0Isb0JBQVhoQixRQUEwQkEsT0FBT0MsWUFBWTNELE9BQU8wRSxHQUFPLE9BQU85RCxNQUFNK0QsS0FBS0QsR0ZJdkQsQ0FBZ0JuRSxLQUFRLEVBQUFnRSxFQUFBLEdBQTJCaEUsSUdMdkUsV0FDYixNQUFNLElBQUlZLFVBQVUsd0lISXdFLEssaUNJTC9FLFNBQVN5RCxFQUFRL0UsR0FhOUIsT0FURStFLEVBRG9CLG1CQUFYbEIsUUFBb0QsaUJBQXBCQSxPQUFPQyxTQUN0QyxTQUFpQjlELEdBQ3pCLGNBQWNBLEdBR04sU0FBaUJBLEdBQ3pCLE9BQU9BLEdBQXlCLG1CQUFYNkQsUUFBeUI3RCxFQUFJaUQsY0FBZ0JZLFFBQVU3RCxJQUFRNkQsT0FBTy9CLFVBQVksZ0JBQWtCOUIsSUFJOUdBLEcsZ0hDWkYsU0FBU2dGLEVBQTRCdkMsRUFBR3dDLEdBQ3JELEdBQUt4QyxFQUFMLENBQ0EsR0FBaUIsaUJBQU5BLEVBQWdCLE9BQU8sT0FBaUJBLEVBQUd3QyxHQUN0RCxJQUFJQyxFQUFJL0UsT0FBTzJCLFVBQVVxRCxTQUFTOUMsS0FBS0ksR0FBRzJDLE1BQU0sR0FBSSxHQUVwRCxNQURVLFdBQU5GLEdBQWtCekMsRUFBRVEsY0FBYWlDLEVBQUl6QyxFQUFFUSxZQUFZb0MsTUFDN0MsUUFBTkgsR0FBcUIsUUFBTkEsRUFBb0JuRSxNQUFNK0QsS0FBS3JDLEdBQ3hDLGNBQU55QyxHQUFxQiwyQ0FBMkNJLEtBQUtKLElBQVcsT0FBaUJ6QyxFQUFHd0MsUUFBeEcsSyxpQkNQRixTQUFTakQsSUFnQlAsT0FmQWxDLEVBQU9DLFFBQVVpQyxFQUFXN0IsT0FBTzhCLFFBQVUsU0FBVVQsR0FDckQsSUFBSyxJQUFJWCxFQUFJLEVBQUdBLEVBQUlxQixVQUFVdEIsT0FBUUMsSUFBSyxDQUN6QyxJQUFJc0IsRUFBU0QsVUFBVXJCLEdBRXZCLElBQUssSUFBSVosS0FBT2tDLEVBQ1ZoQyxPQUFPMkIsVUFBVU0sZUFBZUMsS0FBS0YsRUFBUWxDLEtBQy9DdUIsRUFBT3ZCLEdBQU9rQyxFQUFPbEMsSUFLM0IsT0FBT3VCLEdBR1QxQixFQUFPQyxRQUFQLFFBQTRCRCxFQUFPQyxRQUFTRCxFQUFPQyxRQUFRUyxZQUFhLEVBQ2pFd0IsRUFBU00sTUFBTUMsS0FBTUwsV0FHOUJwQyxFQUFPQyxRQUFVaUMsRUFDakJsQyxFQUFPQyxRQUFQLFFBQTRCRCxFQUFPQyxRQUFTRCxFQUFPQyxRQUFRUyxZQUFhLEcsaUJDZHhFVixFQUFPQyxRQU5QLFNBQWdDQyxHQUM5QixPQUFPQSxHQUFPQSxFQUFJUSxXQUFhUixFQUFNLENBQ25DLFFBQVdBLElBS2ZGLEVBQU9DLFFBQVAsUUFBNEJELEVBQU9DLFFBQVNELEVBQU9DLFFBQVFTLFlBQWEsRyxxQkNQeEUsSUFBSStFLEVBQStCLEVBQVEsTUFxQjNDekYsRUFBT0MsUUFuQlAsU0FBa0NvQyxFQUFRZ0IsR0FDeEMsR0FBYyxNQUFWaEIsRUFBZ0IsTUFBTyxHQUMzQixJQUNJbEMsRUFBS1ksRUFETFcsRUFBUytELEVBQTZCcEQsRUFBUWdCLEdBR2xELEdBQUloRCxPQUFPaUQsc0JBQXVCLENBQ2hDLElBQUlDLEVBQW1CbEQsT0FBT2lELHNCQUFzQmpCLEdBRXBELElBQUt0QixFQUFJLEVBQUdBLEVBQUl3QyxFQUFpQnpDLE9BQVFDLElBQ3ZDWixFQUFNb0QsRUFBaUJ4QyxHQUNuQnNDLEVBQVNHLFFBQVFyRCxJQUFRLEdBQ3hCRSxPQUFPMkIsVUFBVXlCLHFCQUFxQmxCLEtBQUtGLEVBQVFsQyxLQUN4RHVCLEVBQU92QixHQUFPa0MsRUFBT2xDLElBSXpCLE9BQU91QixHQUlUMUIsRUFBT0MsUUFBUCxRQUE0QkQsRUFBT0MsUUFBU0QsRUFBT0MsUUFBUVMsWUFBYSxHLGlCQ1B4RVYsRUFBT0MsUUFmUCxTQUF1Q29DLEVBQVFnQixHQUM3QyxHQUFjLE1BQVZoQixFQUFnQixNQUFPLEdBQzNCLElBRUlsQyxFQUFLWSxFQUZMVyxFQUFTLEdBQ1RpQyxFQUFhdEQsT0FBT3VELEtBQUt2QixHQUc3QixJQUFLdEIsRUFBSSxFQUFHQSxFQUFJNEMsRUFBVzdDLE9BQVFDLElBQ2pDWixFQUFNd0QsRUFBVzVDLEdBQ2JzQyxFQUFTRyxRQUFRckQsSUFBUSxJQUM3QnVCLEVBQU92QixHQUFPa0MsRUFBT2xDLElBR3ZCLE9BQU91QixHQUlUMUIsRUFBT0MsUUFBUCxRQUE0QkQsRUFBT0MsUUFBU0QsRUFBT0MsUUFBUVMsWUFBYSxHLGdDQ2R4RUwsT0FBT0MsZUFBZUwsRUFBUyxhQUFjLENBQzNDRyxPQUFPLElBRVRILEVBQVF5RixhQUFVLEVBa0JsQnpGLEVBQVF5RixRQWpCRyxDQUNUQyxHQUFJLFVBQ0pDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLEtBQU0sVUFDTkMsS0FBTSxVQUNOQyxLQUFNLFVBQ05DLEtBQU0sWSwrQkNsQlJuRyxPQUFPQyxlQUFlTCxFQUFTLGFBQWMsQ0FDM0NHLE9BQU8sSUFFVEgsRUFBUXlGLGFBQVUsRUFNbEJ6RixFQUFReUYsUUFMSyxDQUNYZSxNQUFPLE9BQ1BDLE1BQU8sUyxnQ0NOVHJHLE9BQU9DLGVBQWVMLEVBQVMsYUFBYyxDQUMzQ0csT0FBTyxJQUVUSCxFQUFReUYsYUFBVSxFQWtCbEJ6RixFQUFReUYsUUFqQkksQ0FDVkMsR0FBSSxVQUNKQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxLQUFNLFVBQ05DLEtBQU0sVUFDTkMsS0FBTSxVQUNOQyxLQUFNLFksK0JDbEJSbkcsT0FBT0MsZUFBZUwsRUFBUyxhQUFjLENBQzNDRyxPQUFPLElBRVRILEVBQVF5RixhQUFVLEVBa0JsQnpGLEVBQVF5RixRQWpCRyxDQUNUQyxHQUFJLFVBQ0pDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLEtBQU0sVUFDTkMsS0FBTSxVQUNOQyxLQUFNLFVBQ05DLEtBQU0sWSxnQ0NsQlJuRyxPQUFPQyxlQUFlTCxFQUFTLGFBQWMsQ0FDM0NHLE9BQU8sSUFFVEgsRUFBUXlGLGFBQVUsRUFrQmxCekYsRUFBUXlGLFFBakJLLENBQ1hDLEdBQUksVUFDSkMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsS0FBTSxVQUNOQyxLQUFNLFVBQ05DLEtBQU0sVUFDTkMsS0FBTSxZLGdDQ2xCUm5HLE9BQU9DLGVBQWVMLEVBQVMsYUFBYyxDQUMzQ0csT0FBTyxJQUVUSCxFQUFReUYsYUFBVSxFQWtCbEJ6RixFQUFReUYsUUFqQkssQ0FDWEMsR0FBSSxVQUNKQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxLQUFNLFVBQ05DLEtBQU0sVUFDTkMsS0FBTSxVQUNOQyxLQUFNLFksK0JDbEJSbkcsT0FBT0MsZUFBZUwsRUFBUyxhQUFjLENBQzNDRyxPQUFPLElBRVRILEVBQVF5RixhQUFVLEVBa0JsQnpGLEVBQVF5RixRQWpCRyxDQUNUQyxHQUFJLFVBQ0pDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLEtBQU0sVUFDTkMsS0FBTSxVQUNOQyxLQUFNLFVBQ05DLEtBQU0sWSxnQ0NsQlJuRyxPQUFPQyxlQUFlTCxFQUFTLGFBQWMsQ0FDM0NHLE9BQU8sSUFFVEgsRUFBUXlGLGFBQVUsRUFrQmxCekYsRUFBUXlGLFFBakJFLENBQ1JDLEdBQUksVUFDSkMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsS0FBTSxVQUNOQyxLQUFNLFVBQ05DLEtBQU0sVUFDTkMsS0FBTSxZLGtDQ2xCUm5HLE9BQU9DLGVBQWVMLEVBQVMsYUFBYyxDQUMzQ0csT0FBTyxJQUVUSCxFQUFRMEcsU0FBV0EsRUFDbkIxRyxFQUFRMkcsU0F1RVIsU0FBa0JDLEdBRWhCLEdBQTJCLElBQXZCQSxFQUFNckQsUUFBUSxLQUNoQixPQUFPcUQsRUFHVCxJQUNJQyxFQURrQkMsRUFBZUYsR0FDUkMsT0FFN0IsTUFBTyxJQUFJRSxPQUFPRixFQUFPRyxLQUFJLFNBQVU3QixHQUNyQyxPQXBCb0IsS0FEbEI4QixFQXFCYzlCLEVBckJKQyxTQUFTLEtBQ1p2RSxPQUFlLElBQUlrRyxPQUFPRSxHQUFPQSxFQUY5QyxJQUNNQSxLQXNCREMsS0FBSyxNQWpGVmxILEVBQVFtSCxTQUFXQSxFQUNuQm5ILEVBQVE4RyxlQUFpQkEsRUFDekI5RyxFQUFRb0gsZUFBaUJBLEVBQ3pCcEgsRUFBUXFILGlCQTRMUixTQUEwQkMsRUFBWUMsR0FDcEMsSUFBSUMsRUFBT0MsRUFBYUgsR0FDcEJJLEVBQU9ELEVBQWFGLEdBQ3hCLE9BQVFJLEtBQUtDLElBQUlKLEVBQU1FLEdBQVEsTUFBU0MsS0FBS0UsSUFBSUwsRUFBTUUsR0FBUSxNQTlMakUxSCxFQUFReUgsYUFBZUEsRUFDdkJ6SCxFQUFROEgsVUErTlIsU0FBbUJsQixHQUNqQixJQUFJbUIsRUFBYzVGLFVBQVV0QixPQUFTLFFBQXNCdUQsSUFBakJqQyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssSUFDdEYsT0FBT3NGLEVBQWFiLEdBQVMsR0FBTW9CLEVBQU9wQixFQUFPbUIsR0FBZUUsRUFBUXJCLEVBQU9tQixJQWhPakYvSCxFQUFRa0ksS0E0T1IsU0FBY3RCLEVBQU96RyxHQVNuQixPQVJBeUcsRUFBUUUsRUFBZUYsR0FDdkJ6RyxFQUFRZ0ksRUFBTWhJLElBRUssUUFBZnlHLEVBQU13QixNQUFpQyxRQUFmeEIsRUFBTXdCLFFBQ2hDeEIsRUFBTXdCLE1BQVEsS0FHaEJ4QixFQUFNQyxPQUFPLEdBQUsxRyxFQUNYaUgsRUFBZVIsSUFwUHhCNUcsRUFBUWdJLE9BQVNBLEVBQ2pCaEksRUFBUWlJLFFBQVVBLEVBRWxCLElBQUlJLEVBQVMsRUFBUSxNQVlyQixTQUFTRixFQUFNaEksR0FDYixJQUFJMEgsRUFBTTFGLFVBQVV0QixPQUFTLFFBQXNCdUQsSUFBakJqQyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssRUFDMUV5RixFQUFNekYsVUFBVXRCLE9BQVMsUUFBc0J1RCxJQUFqQmpDLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxFQVE5RSxPQUFPd0YsS0FBS0UsSUFBSUYsS0FBS0MsSUFBSUMsRUFBSzFILEdBQVF5SCxHQVV4QyxTQUFTbEIsRUFBU0UsR0FDaEJBLEVBQVFBLEVBQU0wQixPQUFPLEdBQ3JCLElBQUlDLEVBQUssSUFBSUMsT0FBTyxPQUFPekIsT0FBT0gsRUFBTS9GLFFBQVUsRUFBSSxFQUFJLEVBQUcsS0FBTSxLQUMvRDRILEVBQVM3QixFQUFNOEIsTUFBTUgsR0FRekIsT0FOSUUsR0FBK0IsSUFBckJBLEVBQU8sR0FBRzVILFNBQ3RCNEgsRUFBU0EsRUFBT3pCLEtBQUksU0FBVTdCLEdBQzVCLE9BQU9BLEVBQUlBLE1BSVJzRCxFQUFTLE1BQU0xQixPQUF5QixJQUFsQjBCLEVBQU81SCxPQUFlLElBQU0sR0FBSSxLQUFLa0csT0FBTzBCLEVBQU96QixLQUFJLFNBQVU3QixFQUFHd0QsR0FDL0YsT0FBT0EsRUFBUSxFQUFJQyxTQUFTekQsRUFBRyxJQUFNd0MsS0FBS2tCLE1BQU1ELFNBQVN6RCxFQUFHLElBQU0sSUFBTSxLQUFRLE9BQy9FK0IsS0FBSyxNQUFPLEtBQU8sR0FvQ3hCLFNBQVNDLEVBQVNQLEdBRWhCLElBQ0lDLEdBRkpELEVBQVFFLEVBQWVGLElBRUhDLE9BQ2hCaUMsRUFBSWpDLEVBQU8sR0FDWGtDLEVBQUlsQyxFQUFPLEdBQUssSUFDaEJtQyxFQUFJbkMsRUFBTyxHQUFLLElBQ2hCb0MsRUFBSUYsRUFBSXBCLEtBQUtFLElBQUltQixFQUFHLEVBQUlBLEdBRXhCRSxFQUFJLFNBQVcvRCxHQUNqQixJQUFJZ0UsRUFBSWhILFVBQVV0QixPQUFTLFFBQXNCdUQsSUFBakJqQyxVQUFVLEdBQW1CQSxVQUFVLElBQU1nRCxFQUFJMkQsRUFBSSxJQUFNLEdBQzNGLE9BQU9FLEVBQUlDLEVBQUl0QixLQUFLQyxJQUFJRCxLQUFLRSxJQUFJc0IsRUFBSSxFQUFHLEVBQUlBLEVBQUcsSUFBSyxJQUdsRGYsRUFBTyxNQUNQZ0IsRUFBTSxDQUFDekIsS0FBS2tCLE1BQWEsSUFBUEssRUFBRSxJQUFXdkIsS0FBS2tCLE1BQWEsSUFBUEssRUFBRSxJQUFXdkIsS0FBS2tCLE1BQWEsSUFBUEssRUFBRSxLQU94RSxNQUxtQixTQUFmdEMsRUFBTXdCLE9BQ1JBLEdBQVEsSUFDUmdCLEVBQUkzRSxLQUFLb0MsRUFBTyxLQUdYTyxFQUFlLENBQ3BCZ0IsS0FBTUEsRUFDTnZCLE9BQVF1QyxJQWFaLFNBQVN0QyxFQUFlRixHQUV0QixHQUFJQSxFQUFNd0IsS0FDUixPQUFPeEIsRUFHVCxHQUF3QixNQUFwQkEsRUFBTXlDLE9BQU8sR0FDZixPQUFPdkMsRUFBZUosRUFBU0UsSUFHakMsSUFBSTBDLEVBQVMxQyxFQUFNckQsUUFBUSxLQUN2QjZFLEVBQU94QixFQUFNMkMsVUFBVSxFQUFHRCxHQUU5QixJQUFzRCxJQUFsRCxDQUFDLE1BQU8sT0FBUSxNQUFPLFFBQVEvRixRQUFRNkUsR0FDekMsTUFBTSxJQUFJb0IsT0FBdUwsRUFBSW5CLEVBQU9vQix1QkFBdUIsRUFBRzdDLElBR3hPLElBQUlDLEVBQVNELEVBQU0yQyxVQUFVRCxFQUFTLEVBQUcxQyxFQUFNL0YsT0FBUyxHQUFHNkksTUFBTSxLQUlqRSxNQUFPLENBQ0x0QixLQUFNQSxFQUNOdkIsT0FMRkEsRUFBU0EsRUFBT0csS0FBSSxTQUFVN0csR0FDNUIsT0FBT3dKLFdBQVd4SixPQWlCdEIsU0FBU2lILEVBQWVSLEdBQ3RCLElBQUl3QixFQUFPeEIsRUFBTXdCLEtBQ2J2QixFQUFTRCxFQUFNQyxPQVluQixPQVY2QixJQUF6QnVCLEVBQUs3RSxRQUFRLE9BRWZzRCxFQUFTQSxFQUFPRyxLQUFJLFNBQVU3QixFQUFHckUsR0FDL0IsT0FBT0EsRUFBSSxFQUFJOEgsU0FBU3pELEVBQUcsSUFBTUEsTUFFRCxJQUF6QmlELEVBQUs3RSxRQUFRLFNBQ3RCc0QsRUFBTyxHQUFLLEdBQUdFLE9BQU9GLEVBQU8sR0FBSSxLQUNqQ0EsRUFBTyxHQUFLLEdBQUdFLE9BQU9GLEVBQU8sR0FBSSxNQUc1QixHQUFHRSxPQUFPcUIsRUFBTSxLQUFLckIsT0FBT0YsRUFBT0ssS0FBSyxNQUFPLEtBNkJ4RCxTQUFTTyxFQUFhYixHQUVwQixJQUFJd0MsRUFBcUIsU0FEekJ4QyxFQUFRRSxFQUFlRixJQUNQd0IsS0FBaUJ0QixFQUFlSyxFQUFTUCxJQUFRQyxPQUFTRCxFQUFNQyxPQU9oRixPQU5BdUMsRUFBTUEsRUFBSXBDLEtBQUksU0FBVTRDLEdBR3RCLE9BRkFBLEdBQU8sTUFFTyxPQUFVQSxFQUFNLE1BQVFqQyxLQUFLa0MsS0FBS0QsRUFBTSxNQUFTLE1BQU8sUUFHakVFLFFBQVEsTUFBU1YsRUFBSSxHQUFLLE1BQVNBLEVBQUksR0FBSyxNQUFTQSxFQUFJLElBQUlXLFFBQVEsSUE4QzlFLFNBQVMvQixFQUFPcEIsRUFBT21CLEdBSXJCLEdBSEFuQixFQUFRRSxFQUFlRixHQUN2Qm1CLEVBQWNJLEVBQU1KLElBRWUsSUFBL0JuQixFQUFNd0IsS0FBSzdFLFFBQVEsT0FDckJxRCxFQUFNQyxPQUFPLElBQU0sRUFBSWtCLE9BQ2xCLElBQW1DLElBQS9CbkIsRUFBTXdCLEtBQUs3RSxRQUFRLE9BQzVCLElBQUssSUFBSXpDLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxHQUFLLEVBQzFCOEYsRUFBTUMsT0FBTy9GLElBQU0sRUFBSWlILEVBSTNCLE9BQU9YLEVBQWVSLEdBV3hCLFNBQVNxQixFQUFRckIsRUFBT21CLEdBSXRCLEdBSEFuQixFQUFRRSxFQUFlRixHQUN2Qm1CLEVBQWNJLEVBQU1KLElBRWUsSUFBL0JuQixFQUFNd0IsS0FBSzdFLFFBQVEsT0FDckJxRCxFQUFNQyxPQUFPLEtBQU8sSUFBTUQsRUFBTUMsT0FBTyxJQUFNa0IsT0FDeEMsSUFBbUMsSUFBL0JuQixFQUFNd0IsS0FBSzdFLFFBQVEsT0FDNUIsSUFBSyxJQUFJekMsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLEdBQUssRUFDMUI4RixFQUFNQyxPQUFPL0YsS0FBTyxJQUFNOEYsRUFBTUMsT0FBTy9GLElBQU1pSCxFQUlqRCxPQUFPWCxFQUFlUixLLGtDQzlTeEIsSUFBSW9ELEVBQXlCLEVBQVEsTUFFckM1SixPQUFPQyxlQUFlTCxFQUFTLGFBQWMsQ0FDM0NHLE9BQU8sSUFFVEgsRUFBUXlGLFFBYVIsU0FBMkJ3RSxHQUN6QixJQUFJQyxFQUFzQkQsRUFBWXBELE9BQ2xDQSxPQUFpQyxJQUF4QnFELEVBQWlDLENBQzVDQyxHQUFJLEVBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUNKQyxHQUFJLEtBQ0pDLEdBQUksTUFDRkwsRUFDQU0sRUFBb0JQLEVBQVlRLEtBQ2hDQSxPQUE2QixJQUF0QkQsRUFBK0IsS0FBT0EsRUFDN0NFLEVBQW9CVCxFQUFZVSxLQUNoQ0EsT0FBNkIsSUFBdEJELEVBQStCLEVBQUlBLEVBQzFDRSxHQUFRLEVBQUlDLEVBQTBCcEYsU0FBU3dFLEVBQWEsQ0FBQyxTQUFVLE9BQVEsU0FFbkYsU0FBU2EsRUFBRzVLLEdBQ1YsSUFBSUMsRUFBK0IsaUJBQWhCMEcsRUFBTzNHLEdBQW9CMkcsRUFBTzNHLEdBQU9BLEVBQzVELE1BQU8scUJBQXFCNkcsT0FBTzVHLEdBQU80RyxPQUFPMEQsRUFBTSxLQWdCekQsU0FBU00sRUFBUUMsRUFBT0MsR0FDdEIsSUFBSUMsRUFBV3ZILEVBQUtKLFFBQVEwSCxHQUU1QixPQUFJQyxJQUFhdkgsRUFBSzlDLE9BQVMsRUFDdEJpSyxFQUFHRSxHQUdMLHFCQUFxQmpFLE9BQWdDLGlCQUFsQkYsRUFBT21FLEdBQXNCbkUsRUFBT21FLEdBQVNBLEdBQU9qRSxPQUFPMEQsRUFBTSxVQUFZLGNBQWMxRCxTQUFzQixJQUFkbUUsR0FBeUQsaUJBQS9CckUsRUFBT2xELEVBQUt1SCxFQUFXLElBQW1CckUsRUFBT2xELEVBQUt1SCxFQUFXLElBQU1ELEdBQU9OLEVBQU8sS0FBSzVELE9BQU8wRCxFQUFNLEtBV2hSLE9BQU8sRUFBSVUsRUFBVTFGLFNBQVMsQ0FDNUI5QixLQUFNQSxFQUNOa0QsT0FBUUEsRUFDUmlFLEdBQUlBLEVBQ0pNLEtBbkNGLFNBQWNsTCxHQUNaLElBQUlnTCxFQUFXdkgsRUFBS0osUUFBUXJELEdBQU8sRUFDL0JtTCxFQUFheEUsRUFBT2xELEVBQUt1SCxJQUU3QixPQUFJQSxJQUFhdkgsRUFBSzlDLE9BRWJpSyxFQUFHLE1BSUwscUJBQXFCL0QsUUFETSxpQkFBZnNFLEdBQTJCSCxFQUFXLEVBQUlHLEVBQWFuTCxHQUMvQnlLLEVBQU8sS0FBSzVELE9BQU8wRCxFQUFNLE1BMEJwRU0sUUFBU0EsRUFDVE8sS0FkRixTQUFjcEwsR0FDWixPQUFPNkssRUFBUTdLLEVBQUtBLElBY3BCcUwsTUFYRixTQUFlckwsR0FDYixPQUFPMkcsRUFBTzNHLEtBV2IwSyxJQXZFTDVLLEVBQVEyRCxVQUFPLEVBRWYsSUFBSXdILEVBQVluQixFQUF1QixFQUFRLE9BRTNDYSxFQUE0QmIsRUFBdUIsRUFBUSxPQUkzRHJHLEVBQU8sQ0FBQyxLQUFNLEtBQU0sS0FBTSxLQUFNLE1BRXBDM0QsRUFBUTJELEtBQU9BLEcsaUNDaEJmLElBQUlxRyxFQUF5QixFQUFRLE1BRXJDNUosT0FBT0MsZUFBZUwsRUFBUyxhQUFjLENBQzNDRyxPQUFPLElBRVRILEVBQVF5RixRQU1SLFNBQXNCd0UsRUFBYXVCLEVBQVNDLEdBQzFDLElBQUlDLEVBRUosT0FBTyxFQUFJQyxFQUFVbEcsU0FBUyxDQUM1Qm1HLFFBQVMsV0FDUCxJQUFJQyxFQUFTMUosVUFBVXRCLE9BQVMsUUFBc0J1RCxJQUFqQmpDLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxHQWlCakYsT0FBTyxFQUFJd0osRUFBVWxHLFNBQVMsQ0FDNUJxRyxZQUFhTixFQUFRLEdBQ3JCTyxhQUFjUCxFQUFRLElBQ3JCSyxHQUFRLEVBQUlHLEVBQWlCdkcsU0FBUyxHQUFJd0UsRUFBWWEsR0FBRyxPQUFPLEVBQUlhLEVBQVVsRyxTQUFTLENBQ3hGcUcsWUFBYU4sRUFBUSxHQUNyQk8sYUFBY1AsRUFBUSxJQUNyQkssRUFBTzVCLEVBQVlhLEdBQUcsV0FFM0JtQixTQUFVUCxFQUFXLENBQ25CUSxVQUFXLEtBQ1YsRUFBSUYsRUFBaUJ2RyxTQUFTaUcsRUFBVSxHQUFHM0UsT0FBT2tELEVBQVlhLEdBQUcsTUFBTyxpQ0FBa0MsQ0FDM0dvQixVQUFXLE1BQ1QsRUFBSUYsRUFBaUJ2RyxTQUFTaUcsRUFBVXpCLEVBQVlhLEdBQUcsTUFBTyxDQUNoRW9CLFVBQVcsS0FDVFIsSUFDSEQsSUF6Q0wsSUFBSU8sRUFBbUJoQyxFQUF1QixFQUFRLE9BRWxEMkIsRUFBWTNCLEVBQXVCLEVBQVEsUSxrQ0NUL0MsSUFBSUEsRUFBeUIsRUFBUSxNQUVyQzVKLE9BQU9DLGVBQWVMLEVBQVMsYUFBYyxDQUMzQ0csT0FBTyxJQUVUSCxFQUFReUYsYUFBVSxFQUVLdUUsRUFBdUIsRUFBUSxPQUF0RCxJQUVJYSxFQUE0QmIsRUFBdUIsRUFBUSxPQUUzRDNCLEVBQVMsRUFBUSxNQUVqQjhELEVBQXFCbkMsRUFBdUIsRUFBUSxPQUVwRG9DLEVBQWdCcEMsRUFBdUIsRUFBUSxNQUUvQ3FDLEVBQWlCckMsRUFBdUIsRUFBUSxPQUVoRHNDLEVBQW9CdEMsRUFBdUIsRUFBUSxPQUVuRHVDLEVBQVd2QyxFQUF1QixFQUFRLE1BRTFDd0MsRUFBU3hDLEVBQXVCLEVBQVEsT0FFeEN5QyxFQUFpQnpDLEVBQXVCLEVBQVEsT0FFaEQwQyxFQUFlMUMsRUFBdUIsRUFBUSxPQUU5QzJDLEVBQVUzQyxFQUF1QixFQUFRLE9BNEU3Q2hLLEVBQVF5RixRQTFFUixXQWdDRSxJQS9CQSxJQUFJbUgsRUFBVXpLLFVBQVV0QixPQUFTLFFBQXNCdUQsSUFBakJqQyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssR0FDOUUwSyxFQUF1QkQsRUFBUTNDLFlBQy9CNkMsT0FBNEMsSUFBekJELEVBQWtDLEdBQUtBLEVBQzFERSxFQUFrQkgsRUFBUW5CLE9BQzFCdUIsT0FBa0MsSUFBcEJELEVBQTZCLEdBQUtBLEVBQ2hERSxFQUFtQkwsRUFBUU0sUUFDM0JDLE9BQW9DLElBQXJCRixFQUE4QixHQUFLQSxFQUNsREcsRUFBZVIsRUFBUXBCLFFBQ3ZCNkIsRUFBc0JULEVBQVFVLFdBQzlCQyxPQUEwQyxJQUF4QkYsRUFBaUMsR0FBS0EsRUFDeER6QyxHQUFRLEVBQUlDLEVBQTBCcEYsU0FBU21ILEVBQVMsQ0FBQyxjQUFlLFNBQVUsVUFBVyxVQUFXLGVBQ3hHTSxHQUFVLEVBQUliLEVBQWU1RyxTQUFTMEgsR0FDdENsRCxHQUFjLEVBQUlrQyxFQUFtQjFHLFNBQVNxSCxHQUM5Q3RCLEdBQVUsRUFBSWlCLEVBQWVoSCxTQUFTMkgsR0FDdENJLEdBQVcsRUFBSW5GLEVBQU9vRixXQUFXLENBQ25DeEQsWUFBYUEsRUFDYnlELFVBQVcsTUFDWGpDLFFBQVEsRUFBSVcsRUFBYzNHLFNBQVN3RSxFQUFhdUIsRUFBU3dCLEdBQ3pEVyxVQUFXLEdBRVhULFFBQVNBLEVBQ1R4TCxNQUFPLEdBRVBrTSxRQUFTckIsRUFBUzlHLFFBQ2xCNkgsWUFBWSxFQUFJaEIsRUFBa0I3RyxTQUFTeUgsRUFBU0ssR0FDcEQvQixRQUFTQSxFQUNUcUMsTUFBT3JCLEVBQU8vRyxRQUNkcUksWUFBYXBCLEVBQWFqSCxRQUMxQnNJLE9BQVFwQixFQUFRbEgsU0FDZm1GLEdBRU1vRCxFQUFPN0wsVUFBVXRCLE9BQVFvTixFQUFPLElBQUlqTixNQUFNZ04sRUFBTyxFQUFJQSxFQUFPLEVBQUksR0FBSUUsRUFBTyxFQUFHQSxFQUFPRixFQUFNRSxJQUNsR0QsRUFBS0MsRUFBTyxHQUFLL0wsVUFBVStMLEdBcUM3QixPQWxDV0QsRUFBS0UsUUFBTyxTQUFVQyxFQUFLQyxHQUNwQyxPQUFPLEVBQUloRyxFQUFPb0YsV0FBV1csRUFBS0MsS0FDakNiLEssa0NDckVMLElBQUl4RCxFQUF5QixFQUFRLE1BRXJDNUosT0FBT0MsZUFBZUwsRUFBUyxhQUFjLENBQzNDRyxPQUFPLElBRVRILEVBQVF5RixRQWdIUixTQUF1QnlILEdBQ3JCLElBQUlvQixFQUFtQnBCLEVBQVFxQixRQUMzQkEsT0FBK0IsSUFBckJELEVBQThCLENBQzFDRSxNQUFPQyxFQUFRaEosUUFBUSxLQUN2QmlKLEtBQU1ELEVBQVFoSixRQUFRLEtBQ3RCa0osS0FBTUYsRUFBUWhKLFFBQVEsTUFDcEI2SSxFQUNBTSxFQUFxQjFCLEVBQVEyQixVQUM3QkEsT0FBbUMsSUFBdkJELEVBQWdDLENBQzlDSixNQUFPTSxFQUFNckosUUFBUVksS0FDckJxSSxLQUFNSSxFQUFNckosUUFBUWEsS0FDcEJxSSxLQUFNRyxFQUFNckosUUFBUWMsTUFDbEJxSSxFQUNBRyxFQUFpQjdCLEVBQVE4QixNQUN6QkEsT0FBMkIsSUFBbkJELEVBQTRCLENBQ3RDUCxNQUFPUyxFQUFLeEosUUFBUSxLQUNwQmlKLEtBQU1PLEVBQUt4SixRQUFRLEtBQ25Ca0osS0FBTU0sRUFBS3hKLFFBQVEsTUFDakJzSixFQUNBRyxFQUFtQmhDLEVBQVFpQyxRQUMzQkEsT0FBK0IsSUFBckJELEVBQThCLENBQzFDVixNQUFPWSxFQUFRM0osUUFBUSxLQUN2QmlKLEtBQU1VLEVBQVEzSixRQUFRLEtBQ3RCa0osS0FBTVMsRUFBUTNKLFFBQVEsTUFDcEJ5SixFQUNBRyxFQUFnQm5DLEVBQVFvQyxLQUN4QkEsT0FBeUIsSUFBbEJELEVBQTJCLENBQ3BDYixNQUFPZSxFQUFNOUosUUFBUSxLQUNyQmlKLEtBQU1hLEVBQU05SixRQUFRLEtBQ3BCa0osS0FBTVksRUFBTTlKLFFBQVEsTUFDbEI0SixFQUNBRyxFQUFtQnRDLEVBQVF1QyxRQUMzQkEsT0FBK0IsSUFBckJELEVBQThCLENBQzFDaEIsTUFBT2tCLEVBQU9qSyxRQUFRLEtBQ3RCaUosS0FBTWdCLEVBQU9qSyxRQUFRLEtBQ3JCa0osS0FBTWUsRUFBT2pLLFFBQVEsTUFDbkIrSixFQUNBRyxFQUFnQnpDLEVBQVE5RSxLQUN4QkEsT0FBeUIsSUFBbEJ1SCxFQUEyQixRQUFVQSxFQUM1Q0MsRUFBd0IxQyxFQUFRMkMsa0JBQ2hDQSxPQUE4QyxJQUExQkQsRUFBbUMsRUFBSUEsRUFDM0RFLEVBQXVCNUMsRUFBUTZDLFlBQy9CQSxPQUF1QyxJQUF6QkQsRUFBa0MsR0FBTUEsRUFDdERsRixHQUFRLEVBQUlDLEVBQTBCcEYsU0FBU3lILEVBQVMsQ0FBQyxVQUFXLFlBQWEsUUFBUyxVQUFXLE9BQVEsVUFBVyxPQUFRLG9CQUFxQixnQkFJekosU0FBUzhDLEVBQWdCekksR0FXdkIsT0FWbUIsRUFBSTBJLEVBQWtCNUksa0JBQWtCRSxFQUFZb0gsRUFBS3VCLEtBQUszQixVQUFZc0IsRUFBb0JsQixFQUFLdUIsS0FBSzNCLFFBQVVDLEVBQU0wQixLQUFLM0IsUUFhbEosSUFBSTRCLEVBQWUsU0FBc0J2SixHQUN2QyxJQUFJd0osRUFBWWpPLFVBQVV0QixPQUFTLFFBQXNCdUQsSUFBakJqQyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssSUFDaEZrTyxFQUFhbE8sVUFBVXRCLE9BQVMsUUFBc0J1RCxJQUFqQmpDLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxJQUNqRm1PLEVBQVluTyxVQUFVdEIsT0FBUyxRQUFzQnVELElBQWpCakMsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLElBT3BGLEtBTkF5RSxHQUFRLEVBQUl1RSxFQUFVMUYsU0FBUyxHQUFJbUIsSUFFeEI4SCxNQUFROUgsRUFBTXdKLEtBQ3ZCeEosRUFBTThILEtBQU85SCxFQUFNd0osS0FHaEJ4SixFQUFNOEgsS0FDVCxNQUFNLElBQUlsRixPQUErTSxFQUFJbkIsRUFBT29CLHVCQUF1QixFQUFHMkcsSUFHaFEsR0FBMEIsaUJBQWZ4SixFQUFNOEgsS0FDZixNQUFNLElBQUlsRixNQUE4ZStHLHVCQUF1QixFQUFHQyxLQUFLQyxVQUFVN0osRUFBTThILFFBVXppQixPQVBBZ0MsRUFBZTlKLEVBQU8sUUFBU3lKLEVBQVlOLEdBQzNDVyxFQUFlOUosRUFBTyxPQUFRMEosRUFBV1AsR0FFcENuSixFQUFNK0osZUFDVC9KLEVBQU0rSixhQUFlWCxFQUFnQnBKLEVBQU04SCxPQUd0QzlILEdBR0xnSyxFQUFRLENBQ1ZqQyxLQUFNQSxFQUNOSCxNQUFPQSxHQXdDVCxPQS9Cb0IsRUFBSW5HLEVBQU9vRixZQUFXLEVBQUl0QyxFQUFVMUYsU0FBUyxDQUUvRG9MLE9BQVFDLEVBQVFyTCxRQUVoQjJDLEtBQU1BLEVBRU5tRyxRQUFTNEIsRUFBYTVCLEdBRXRCTSxVQUFXc0IsRUFBYXRCLEVBQVcsT0FBUSxPQUFRLFFBRW5ERyxNQUFPbUIsRUFBYW5CLEdBRXBCRyxRQUFTZ0IsRUFBYWhCLEdBRXRCRyxLQUFNYSxFQUFhYixHQUVuQkcsUUFBU1UsRUFBYVYsR0FFdEJzQixLQUFNQyxFQUFNdkwsUUFHWm9LLGtCQUFtQkEsRUFFbkJHLGdCQUFpQkEsRUFFakJHLGFBQWNBLEVBSWRKLFlBQWFBLEdBQ1phLEVBQU14SSxJQUFRd0MsSUFqUG5CNUssRUFBUTJPLEtBQU8zTyxFQUFRd08sV0FBUSxFQUUvQixJQUFJckQsRUFBWW5CLEVBQXVCLEVBQVEsT0FFM0NhLEVBQTRCYixFQUF1QixFQUFRLE9BRTNEM0IsRUFBUyxFQUFRLE1BRWpCeUksRUFBVTlHLEVBQXVCLEVBQVEsTUFFekNnSCxFQUFRaEgsRUFBdUIsRUFBUSxNQUV2Q3lFLEVBQVV6RSxFQUF1QixFQUFRLE9BRXpDOEUsRUFBUTlFLEVBQXVCLEVBQVEsTUFFdkNpRixFQUFPakYsRUFBdUIsRUFBUSxPQUV0Q29GLEVBQVVwRixFQUF1QixFQUFRLE9BRXpDdUYsRUFBUXZGLEVBQXVCLEVBQVEsT0FFdkMwRixFQUFTMUYsRUFBdUIsRUFBUSxPQUV4Q2lHLEVBQW9CLEVBQVEsTUFFNUJ6QixFQUFRLENBRVYwQixLQUFNLENBRUozQixRQUFTLHNCQUVUTSxVQUFXLHNCQUVYb0MsU0FBVSxzQkFFVkMsS0FBTSx1QkFHUkMsUUFBUyxzQkFHVDVKLFdBQVksQ0FDVjZKLE1BQU9OLEVBQVFyTCxRQUFRZ0IsTUFDdkJoQixRQUFTdUwsRUFBTXZMLFFBQVEsS0FHekI0TCxPQUFRLENBRU5DLE9BQVEsc0JBRVJDLE1BQU8sc0JBQ1BDLGFBQWMsSUFFZEMsU0FBVSxzQkFDVkMsZ0JBQWlCLElBRWpCVCxTQUFVLHNCQUVWVSxtQkFBb0Isc0JBQ3BCQyxnQkFBaUIsSUFDakJDLE1BQU8sc0JBQ1BDLGFBQWMsSUFDZEMsaUJBQWtCLE1BR3RCL1IsRUFBUXdPLE1BQVFBLEVBQ2hCLElBQUlHLEVBQU8sQ0FDVHVCLEtBQU0sQ0FDSjNCLFFBQVN1QyxFQUFRckwsUUFBUWdCLE1BQ3pCb0ksVUFBVywyQkFDWG9DLFNBQVUsMkJBQ1ZDLEtBQU0sMkJBQ05jLEtBQU0sNEJBRVJiLFFBQVMsNEJBQ1Q1SixXQUFZLENBQ1Y2SixNQUFPSixFQUFNdkwsUUFBUSxLQUNyQkEsUUFBUyxXQUVYNEwsT0FBUSxDQUNOQyxPQUFRUixFQUFRckwsUUFBUWdCLE1BQ3hCOEssTUFBTyw0QkFDUEMsYUFBYyxJQUNkQyxTQUFVLDRCQUNWQyxnQkFBaUIsSUFDakJULFNBQVUsMkJBQ1ZVLG1CQUFvQiw0QkFDcEJDLGdCQUFpQixJQUNqQkMsTUFBTyw0QkFDUEMsYUFBYyxJQUNkQyxpQkFBa0IsTUFLdEIsU0FBU3JCLEVBQWV1QixFQUFRdkUsRUFBV3dFLEVBQU9uQyxHQUNoRCxJQUFJb0MsRUFBbUJwQyxFQUFZdkIsT0FBU3VCLEVBQ3hDcUMsRUFBa0JyQyxFQUFZcEIsTUFBc0IsSUFBZG9CLEVBRXJDa0MsRUFBT3ZFLEtBQ051RSxFQUFPNVAsZUFBZTZQLEdBQ3hCRCxFQUFPdkUsR0FBYXVFLEVBQU9DLEdBQ0osVUFBZHhFLEVBQ1R1RSxFQUFPekQsT0FBUSxFQUFJeUIsRUFBa0JoSSxTQUFTZ0ssRUFBT3ZELEtBQU15RCxHQUNwQyxTQUFkekUsSUFDVHVFLEVBQU90RCxNQUFPLEVBQUlzQixFQUFrQmpJLFFBQVFpSyxFQUFPdkQsS0FBTTBELEtBWi9EcFMsRUFBUTJPLEtBQU9BLEcsa0NDcEdmdk8sT0FBT0MsZUFBZUwsRUFBUyxhQUFjLENBQzNDRyxPQUFPLElBRVRILEVBQVF5RixRQU1SLFdBQ0UsSUFBSTJILEVBQWVqTCxVQUFVdEIsT0FBUyxRQUFzQnVELElBQWpCakMsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEVBR3ZGLEdBQUlpTCxFQUFhaUYsSUFDZixPQUFPakYsRUFNVCxJQUFJa0YsR0FBWSxFQUFJQyxFQUFRQyxvQkFBb0IsQ0FDOUNoSCxRQUFTNEIsSUFHUDVCLEVBQVUsV0FDWixJQUFLLElBQUl3QyxFQUFPN0wsVUFBVXRCLE9BQVFvTixFQUFPLElBQUlqTixNQUFNZ04sR0FBT0UsRUFBTyxFQUFHQSxFQUFPRixFQUFNRSxJQUMvRUQsRUFBS0MsR0FBUS9MLFVBQVUrTCxHQVN6QixPQUFvQixJQUFoQkQsRUFBS3BOLE9BQ0F5UixFQUFVLEdBR0MsSUFBaEJyRSxFQUFLcE4sT0FDQXlSLEVBQVVyRSxFQUFLLElBR2pCQSxFQUFLakgsS0FBSSxTQUFVcUgsR0FDeEIsR0FBd0IsaUJBQWJBLEVBQ1QsT0FBT0EsRUFHVCxJQUFJb0UsRUFBU0gsRUFBVWpFLEdBQ3ZCLE1BQXlCLGlCQUFYb0UsRUFBc0IsR0FBRzFMLE9BQU8wTCxFQUFRLE1BQVFBLEtBQzdEdkwsS0FBSyxNQWtCVixPQWRBOUcsT0FBT0MsZUFBZW1MLEVBQVMsT0FBUSxDQUNyQ2tILElBQUssV0FTSCxPQUFPdEYsS0FHWDVCLEVBQVE2RyxLQUFNLEVBQ1A3RyxHQS9EVCxJQUFJK0csRUFBVSxFQUFRLE8sa0NDRnRCdlMsRUFBUSxFQU1SLFNBQXNCNkwsR0FTcEIsT0FBTyxFQUFJOEcsRUFBUUMsY0FBYy9HLElBYm5DLElBQUk4RyxFQUFVLEVBQVEsTyxrQ0NMdEIsSUFBSTNJLEVBQXlCLEVBQVEsTUFFckM1SixPQUFPQyxlQUFlTCxFQUFTLGFBQWMsQ0FDM0NHLE9BQU8sSUFFVEgsRUFBUXlGLFFBcUJSLFNBQTBCeUgsRUFBU0ksR0FDakMsSUFBSXVGLEVBQTZCLG1CQUFmdkYsRUFBNEJBLEVBQVdKLEdBQVdJLEVBQ2hFd0YsRUFBa0JELEVBQUtFLFdBQ3ZCQSxPQUFpQyxJQUFwQkQsRUFBNkJFLEVBQW9CRixFQUM5REcsRUFBZ0JKLEVBQUtLLFNBQ3JCQSxPQUE2QixJQUFsQkQsRUFBMkIsR0FBS0EsRUFDM0NFLEVBQXVCTixFQUFLTyxnQkFDNUJBLE9BQTJDLElBQXpCRCxFQUFrQyxJQUFNQSxFQUMxREUsRUFBd0JSLEVBQUtTLGtCQUM3QkEsT0FBOEMsSUFBMUJELEVBQW1DLElBQU1BLEVBQzdERSxFQUF3QlYsRUFBS1csaUJBQzdCQSxPQUE2QyxJQUExQkQsRUFBbUMsSUFBTUEsRUFDNURFLEVBQXNCWixFQUFLYSxlQUMzQkEsT0FBeUMsSUFBeEJELEVBQWlDLElBQU1BLEVBQ3hERSxFQUFvQmQsRUFBS2UsYUFDekJBLE9BQXFDLElBQXRCRCxFQUErQixHQUFLQSxFQUNuREUsRUFBY2hCLEVBQUtnQixZQUNuQkMsRUFBV2pCLEVBQUtrQixRQUNoQm5KLEdBQVEsRUFBSUMsRUFBMEJwRixTQUFTb04sRUFBTSxDQUFDLGFBQWMsV0FBWSxrQkFBbUIsb0JBQXFCLG1CQUFvQixpQkFBa0IsZUFBZ0IsY0FBZSxZQVk3TG1CLEVBQU9kLEVBQVcsR0FFbEJhLEVBQVVELEdBQVksU0FBVUcsR0FDbEMsTUFBTyxHQUFHbE4sT0FBT2tOLEVBQU9MLEVBQWVJLEVBQU0sUUFHM0NFLEVBQWUsU0FBc0JDLEVBQVlGLEVBQU1HLEVBQVlDLEVBQWVDLEdBQ3BGLE9BQU8sRUFBSW5KLEVBQVUxRixTQUFTLENBQzVCc04sV0FBWUEsRUFDWm9CLFdBQVlBLEVBQ1pqQixTQUFVYSxFQUFRRSxHQUVsQkcsV0FBWUEsR0FDWHJCLElBQWVDLEVBQW9CLENBQ3BDcUIsY0FBZSxHQUFHdE4sT0FBTzhCLEVBQU13TCxFQUFnQkosR0FBTyxPQUNwRCxHQUFJSyxFQUFRVCxJQUdkVSxFQUFXLENBQ2JDLEdBQUlOLEVBQWFkLEVBQWlCLEdBQUksT0FBUSxLQUM5Q3FCLEdBQUlQLEVBQWFkLEVBQWlCLEdBQUksS0FBTSxJQUM1Q3NCLEdBQUlSLEVBQWFaLEVBQW1CLEdBQUksTUFBTyxHQUMvQ3FCLEdBQUlULEVBQWFaLEVBQW1CLEdBQUksTUFBTyxLQUMvQ3NCLEdBQUlWLEVBQWFaLEVBQW1CLEdBQUksTUFBTyxHQUMvQ3VCLEdBQUlYLEVBQWFWLEVBQWtCLEdBQUksSUFBSyxLQUM1Q3NCLFVBQVdaLEVBQWFaLEVBQW1CLEdBQUksS0FBTSxLQUNyRHlCLFVBQVdiLEVBQWFWLEVBQWtCLEdBQUksS0FBTSxJQUNwRHdCLE1BQU9kLEVBQWFaLEVBQW1CLEdBQUksSUFBSyxLQUNoRDJCLE1BQU9mLEVBQWFaLEVBQW1CLEdBQUksS0FBTSxLQUNqRDRCLE9BQVFoQixFQUFhVixFQUFrQixHQUFJLEtBQU0sR0FBSzJCLEdBQ3REQyxRQUFTbEIsRUFBYVosRUFBbUIsR0FBSSxLQUFNLElBQ25EK0IsU0FBVW5CLEVBQWFaLEVBQW1CLEdBQUksS0FBTSxFQUFHNkIsSUFFekQsT0FBTyxFQUFJOU0sRUFBT29GLFlBQVcsRUFBSXRDLEVBQVUxRixTQUFTLENBQ2xEbU8sYUFBY0EsRUFDZEcsUUFBU0EsRUFDVGxMLE1BQU9BLEVBRVBrSyxXQUFZQSxFQUNaRyxTQUFVQSxFQUNWRSxnQkFBaUJBLEVBQ2pCRSxrQkFBbUJBLEVBQ25CRSxpQkFBa0JBLEVBQ2xCRSxlQUFnQkEsR0FDZmEsR0FBVzNKLEVBQU8sQ0FDbkIwSyxPQUFPLEtBOUZYLElBQUluSyxFQUFZbkIsRUFBdUIsRUFBUSxPQUUzQ2EsRUFBNEJiLEVBQXVCLEVBQVEsT0FFM0QzQixFQUFTLEVBQVEsTUFFckIsU0FBU1EsRUFBTTFJLEdBQ2IsT0FBT3dILEtBQUtrQixNQUFjLElBQVIxSSxHQUFlLElBR25DLElBQUlnVixFQUFjLENBQ2hCSSxjQUFlLGFBRWJ2QyxFQUFvQiw4QyxrQ0NwQnhCLElBQUloSixFQUF5QixFQUFRLE1BRXJDNUosT0FBT0MsZUFBZUwsRUFBUyxhQUFjLENBQzNDRyxPQUFPLElBRVRILEVBQVF5RixhQUFVLEVBRWxCLElBR0krUCxHQURlLEVBRkd4TCxFQUF1QixFQUFRLE9BRWR2RSxXQUV2Q3pGLEVBQVF5RixRQUFVK1AsRyxzQ0NYZHhMLEVBQXlCLEVBQVEsTUFLckNoSyxFQUFRLE9BQVUsRUFFbEIsSUFBSW1MLEVBQVluQixFQUF1QixFQUFRLE9BRTNDMkksRUFBVSxFQUFRLE1BRWxCOEMsRUFBZ0J6TCxFQUF1QixFQUFRLE9BVW5EaEssRUFBUSxFQVJSLFNBQW9CMFYsR0FDbEIsSUFBSTlJLEVBQVV6SyxVQUFVdEIsT0FBUyxRQUFzQnVELElBQWpCakMsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEdBQ2xGLE9BQU8sRUFBSXdRLEVBQVFnRCxZQUFZRCxHQUFpQixFQUFJdkssRUFBVTFGLFNBQVMsQ0FDckVtUSxhQUFjSCxFQUFjaFEsU0FDM0JtSCxNLCtCQ1RMLFNBQVNpSixJQUNQLE1BQU8sQ0FBQyxHQUFHOU8sT0FBTzVFLFVBQVV0QixRQUFVLE9BQUl1RCxFQUFZakMsVUFBVSxHQUFJLE9BQU80RSxPQUFPNUUsVUFBVXRCLFFBQVUsT0FBSXVELEVBQVlqQyxVQUFVLEdBQUksT0FBTzRFLE9BQU81RSxVQUFVdEIsUUFBVSxPQUFJdUQsRUFBWWpDLFVBQVUsR0FBSSxPQUFPNEUsT0FBTzVFLFVBQVV0QixRQUFVLE9BQUl1RCxFQUFZakMsVUFBVSxHQUFJLGtCQUFrQjRFLE9BTDVQLEdBSzBSLEtBQU0sR0FBR0EsT0FBTzVFLFVBQVV0QixRQUFVLE9BQUl1RCxFQUFZakMsVUFBVSxHQUFJLE9BQU80RSxPQUFPNUUsVUFBVXRCLFFBQVUsT0FBSXVELEVBQVlqQyxVQUFVLEdBQUksT0FBTzRFLE9BQU81RSxVQUFVdEIsUUFBVSxPQUFJdUQsRUFBWWpDLFVBQVUsR0FBSSxPQUFPNEUsT0FBTzVFLFVBQVV0QixRQUFVLE9BQUl1RCxFQUFZakMsVUFBVSxHQUFJLGtCQUFrQjRFLE9BSjNpQixJQUk0a0IsS0FBTSxHQUFHQSxPQUFPNUUsVUFBVXRCLFFBQVUsT0FBSXVELEVBQVlqQyxVQUFVLEdBQUksT0FBTzRFLE9BQU81RSxVQUFVdEIsUUFBVSxPQUFJdUQsRUFBWWpDLFVBQVUsR0FBSSxPQUFPNEUsT0FBTzVFLFVBQVV0QixRQUFVLFFBQUt1RCxFQUFZakMsVUFBVSxJQUFLLE9BQU80RSxPQUFPNUUsVUFBVXRCLFFBQVUsUUFBS3VELEVBQVlqQyxVQUFVLElBQUssa0JBQWtCNEUsT0FIbDJCLElBR3E0QixNQUFNRyxLQUFLLEtBVGo3QjlHLE9BQU9DLGVBQWVMLEVBQVMsYUFBYyxDQUMzQ0csT0FBTyxJQUVUSCxFQUFReUYsYUFBVSxFQVVsQixJQUNJK1AsRUFEVSxDQUFDLE9BQVFLLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdB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RUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUdBLEdBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUdBLEdBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUdBLEdBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUdBLEdBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUdBLEdBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUdBLEdBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUdBLEdBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUdBLEdBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUdBLEdBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUdBLEdBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUdBLEdBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUdBLEdBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUcsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUdBLEdBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUcsR0FBRyxFQUFFLEVB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RyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFH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QUFRL3RGLFVBQVc2eUYsS0FDakUsZ0JBQW9CbHlCLEVBQU8sQ0FBRTl4RCxLQUFNKytFLEdBQVdJLGVBQWdCaHVGLFVBQVcyeUYsS0FDekUsZ0JBQW9CaHlCLEVBQU8sQ0FBRTl4RCxLQUFNKytFLEdBQVdLLGFBQWNqdUYsVUFBVzR5RixLQUN2RSxnQkFBb0JqeUIsRUFBTyxDQUFFOXhELEtBQU0rK0UsR0FBV00sT0FBUWx1RixVQUFXbTJGLEtBQ2pFLGdCQUFvQngxQixFQUFPLENBQUU5eEQsS0FBTSsrRSxHQUFXUSxlQUFnQnB1RixVQUFXKzJGLEtBQ3pFLGdCQUFvQnAyQixFQUFPLENBQUUzZ0UsVUFBV214RixZQUVoQyxNQUFPMzBGLFNBQVN5NkYsZUFBZSxTIiwiZmlsZSI6IkFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZpbmVQcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcnIyW2ldID0gYXJyW2ldO1xuICB9XG5cbiAgcmV0dXJuIGFycjI7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufSIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufSIsImltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59IiwiaW1wb3J0IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIi4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuICB2YXIga2V5LCBpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImltcG9ydCBhcnJheVdpdGhIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhIb2xlcy5qc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheUxpbWl0IGZyb20gXCIuL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzXCI7XG5pbXBvcnQgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCBub25JdGVyYWJsZVJlc3QgZnJvbSBcIi4vbm9uSXRlcmFibGVSZXN0LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIGFycmF5V2l0aEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IG5vbkl0ZXJhYmxlUmVzdCgpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuO1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcbiAgdmFyIF9lID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJpbXBvcnQgYXJyYXlXaXRob3V0SG9sZXMgZnJvbSBcIi4vYXJyYXlXaXRob3V0SG9sZXMuanNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vaXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCBub25JdGVyYWJsZVNwcmVhZCBmcm9tIFwiLi9ub25JdGVyYWJsZVNwcmVhZC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59IiwiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIi4vYXJyYXlMaWtlVG9BcnJheS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShhcnIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufSIsImZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyIsImZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgXCJkZWZhdWx0XCI6IG9ialxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwidmFyIG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgPSByZXF1aXJlKFwiLi9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzXCIpO1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG4gIHZhciBrZXksIGk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyIsImZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIGJsdWUgPSB7XG4gIDUwOiAnI2UzZjJmZCcsXG4gIDEwMDogJyNiYmRlZmInLFxuICAyMDA6ICcjOTBjYWY5JyxcbiAgMzAwOiAnIzY0YjVmNicsXG4gIDQwMDogJyM0MmE1ZjUnLFxuICA1MDA6ICcjMjE5NmYzJyxcbiAgNjAwOiAnIzFlODhlNScsXG4gIDcwMDogJyMxOTc2ZDInLFxuICA4MDA6ICcjMTU2NWMwJyxcbiAgOTAwOiAnIzBkNDdhMScsXG4gIEExMDA6ICcjODJiMWZmJyxcbiAgQTIwMDogJyM0NDhhZmYnLFxuICBBNDAwOiAnIzI5NzlmZicsXG4gIEE3MDA6ICcjMjk2MmZmJ1xufTtcbnZhciBfZGVmYXVsdCA9IGJsdWU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBjb21tb24gPSB7XG4gIGJsYWNrOiAnIzAwMCcsXG4gIHdoaXRlOiAnI2ZmZidcbn07XG52YXIgX2RlZmF1bHQgPSBjb21tb247XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBncmVlbiA9IHtcbiAgNTA6ICcjZThmNWU5JyxcbiAgMTAwOiAnI2M4ZTZjOScsXG4gIDIwMDogJyNhNWQ2YTcnLFxuICAzMDA6ICcjODFjNzg0JyxcbiAgNDAwOiAnIzY2YmI2YScsXG4gIDUwMDogJyM0Y2FmNTAnLFxuICA2MDA6ICcjNDNhMDQ3JyxcbiAgNzAwOiAnIzM4OGUzYycsXG4gIDgwMDogJyMyZTdkMzInLFxuICA5MDA6ICcjMWI1ZTIwJyxcbiAgQTEwMDogJyNiOWY2Y2EnLFxuICBBMjAwOiAnIzY5ZjBhZScsXG4gIEE0MDA6ICcjMDBlNjc2JyxcbiAgQTcwMDogJyMwMGM4NTMnXG59O1xudmFyIF9kZWZhdWx0ID0gZ3JlZW47XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBncmV5ID0ge1xuICA1MDogJyNmYWZhZmEnLFxuICAxMDA6ICcjZjVmNWY1JyxcbiAgMjAwOiAnI2VlZWVlZScsXG4gIDMwMDogJyNlMGUwZTAnLFxuICA0MDA6ICcjYmRiZGJkJyxcbiAgNTAwOiAnIzllOWU5ZScsXG4gIDYwMDogJyM3NTc1NzUnLFxuICA3MDA6ICcjNjE2MTYxJyxcbiAgODAwOiAnIzQyNDI0MicsXG4gIDkwMDogJyMyMTIxMjEnLFxuICBBMTAwOiAnI2Q1ZDVkNScsXG4gIEEyMDA6ICcjYWFhYWFhJyxcbiAgQTQwMDogJyMzMDMwMzAnLFxuICBBNzAwOiAnIzYxNjE2MSdcbn07XG52YXIgX2RlZmF1bHQgPSBncmV5O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgaW5kaWdvID0ge1xuICA1MDogJyNlOGVhZjYnLFxuICAxMDA6ICcjYzVjYWU5JyxcbiAgMjAwOiAnIzlmYThkYScsXG4gIDMwMDogJyM3OTg2Y2InLFxuICA0MDA6ICcjNWM2YmMwJyxcbiAgNTAwOiAnIzNmNTFiNScsXG4gIDYwMDogJyMzOTQ5YWInLFxuICA3MDA6ICcjMzAzZjlmJyxcbiAgODAwOiAnIzI4MzU5MycsXG4gIDkwMDogJyMxYTIzN2UnLFxuICBBMTAwOiAnIzhjOWVmZicsXG4gIEEyMDA6ICcjNTM2ZGZlJyxcbiAgQTQwMDogJyMzZDVhZmUnLFxuICBBNzAwOiAnIzMwNGZmZSdcbn07XG52YXIgX2RlZmF1bHQgPSBpbmRpZ287XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBvcmFuZ2UgPSB7XG4gIDUwOiAnI2ZmZjNlMCcsXG4gIDEwMDogJyNmZmUwYjInLFxuICAyMDA6ICcjZmZjYzgwJyxcbiAgMzAwOiAnI2ZmYjc0ZCcsXG4gIDQwMDogJyNmZmE3MjYnLFxuICA1MDA6ICcjZmY5ODAwJyxcbiAgNjAwOiAnI2ZiOGMwMCcsXG4gIDcwMDogJyNmNTdjMDAnLFxuICA4MDA6ICcjZWY2YzAwJyxcbiAgOTAwOiAnI2U2NTEwMCcsXG4gIEExMDA6ICcjZmZkMTgwJyxcbiAgQTIwMDogJyNmZmFiNDAnLFxuICBBNDAwOiAnI2ZmOTEwMCcsXG4gIEE3MDA6ICcjZmY2ZDAwJ1xufTtcbnZhciBfZGVmYXVsdCA9IG9yYW5nZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIHBpbmsgPSB7XG4gIDUwOiAnI2ZjZTRlYycsXG4gIDEwMDogJyNmOGJiZDAnLFxuICAyMDA6ICcjZjQ4ZmIxJyxcbiAgMzAwOiAnI2YwNjI5MicsXG4gIDQwMDogJyNlYzQwN2EnLFxuICA1MDA6ICcjZTkxZTYzJyxcbiAgNjAwOiAnI2Q4MWI2MCcsXG4gIDcwMDogJyNjMjE4NWInLFxuICA4MDA6ICcjYWQxNDU3JyxcbiAgOTAwOiAnIzg4MGU0ZicsXG4gIEExMDA6ICcjZmY4MGFiJyxcbiAgQTIwMDogJyNmZjQwODEnLFxuICBBNDAwOiAnI2Y1MDA1NycsXG4gIEE3MDA6ICcjYzUxMTYyJ1xufTtcbnZhciBfZGVmYXVsdCA9IHBpbms7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciByZWQgPSB7XG4gIDUwOiAnI2ZmZWJlZScsXG4gIDEwMDogJyNmZmNkZDInLFxuICAyMDA6ICcjZWY5YTlhJyxcbiAgMzAwOiAnI2U1NzM3MycsXG4gIDQwMDogJyNlZjUzNTAnLFxuICA1MDA6ICcjZjQ0MzM2JyxcbiAgNjAwOiAnI2U1MzkzNScsXG4gIDcwMDogJyNkMzJmMmYnLFxuICA4MDA6ICcjYzYyODI4JyxcbiAgOTAwOiAnI2I3MWMxYycsXG4gIEExMDA6ICcjZmY4YTgwJyxcbiAgQTIwMDogJyNmZjUyNTInLFxuICBBNDAwOiAnI2ZmMTc0NCcsXG4gIEE3MDA6ICcjZDUwMDAwJ1xufTtcbnZhciBfZGVmYXVsdCA9IHJlZDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5oZXhUb1JnYiA9IGhleFRvUmdiO1xuZXhwb3J0cy5yZ2JUb0hleCA9IHJnYlRvSGV4O1xuZXhwb3J0cy5oc2xUb1JnYiA9IGhzbFRvUmdiO1xuZXhwb3J0cy5kZWNvbXBvc2VDb2xvciA9IGRlY29tcG9zZUNvbG9yO1xuZXhwb3J0cy5yZWNvbXBvc2VDb2xvciA9IHJlY29tcG9zZUNvbG9yO1xuZXhwb3J0cy5nZXRDb250cmFzdFJhdGlvID0gZ2V0Q29udHJhc3RSYXRpbztcbmV4cG9ydHMuZ2V0THVtaW5hbmNlID0gZ2V0THVtaW5hbmNlO1xuZXhwb3J0cy5lbXBoYXNpemUgPSBlbXBoYXNpemU7XG5leHBvcnRzLmZhZGUgPSBmYWRlO1xuZXhwb3J0cy5kYXJrZW4gPSBkYXJrZW47XG5leHBvcnRzLmxpZ2h0ZW4gPSBsaWdodGVuO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBtYXRlcmlhbC11aS91dGlsc1wiKTtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tdXNlLWJlZm9yZS1kZWZpbmUgKi9cblxuLyoqXG4gKiBSZXR1cm5zIGEgbnVtYmVyIHdob3NlIHZhbHVlIGlzIGxpbWl0ZWQgdG8gdGhlIGdpdmVuIHJhbmdlLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYmUgY2xhbXBlZFxuICogQHBhcmFtIHtudW1iZXJ9IG1pbiBUaGUgbG93ZXIgYm91bmRhcnkgb2YgdGhlIG91dHB1dCByYW5nZVxuICogQHBhcmFtIHtudW1iZXJ9IG1heCBUaGUgdXBwZXIgYm91bmRhcnkgb2YgdGhlIG91dHB1dCByYW5nZVxuICogQHJldHVybnMge251bWJlcn0gQSBudW1iZXIgaW4gdGhlIHJhbmdlIFttaW4sIG1heF1cbiAqL1xuZnVuY3Rpb24gY2xhbXAodmFsdWUpIHtcbiAgdmFyIG1pbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgdmFyIG1heCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh2YWx1ZSA8IG1pbiB8fCB2YWx1ZSA+IG1heCkge1xuICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiBUaGUgdmFsdWUgcHJvdmlkZWQgXCIuY29uY2F0KHZhbHVlLCBcIiBpcyBvdXQgb2YgcmFuZ2UgW1wiKS5jb25jYXQobWluLCBcIiwgXCIpLmNvbmNhdChtYXgsIFwiXS5cIikpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChtaW4sIHZhbHVlKSwgbWF4KTtcbn1cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIENTUyBoZXggZm9ybWF0IHRvIENTUyByZ2IgZm9ybWF0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIEhleCBjb2xvciwgaS5lLiAjbm5uIG9yICNubm5ubm5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIHJnYiBjb2xvciBzdHJpbmdcbiAqL1xuXG5cbmZ1bmN0aW9uIGhleFRvUmdiKGNvbG9yKSB7XG4gIGNvbG9yID0gY29sb3Iuc3Vic3RyKDEpO1xuICB2YXIgcmUgPSBuZXcgUmVnRXhwKFwiLnsxLFwiLmNvbmNhdChjb2xvci5sZW5ndGggPj0gNiA/IDIgOiAxLCBcIn1cIiksICdnJyk7XG4gIHZhciBjb2xvcnMgPSBjb2xvci5tYXRjaChyZSk7XG5cbiAgaWYgKGNvbG9ycyAmJiBjb2xvcnNbMF0ubGVuZ3RoID09PSAxKSB7XG4gICAgY29sb3JzID0gY29sb3JzLm1hcChmdW5jdGlvbiAobikge1xuICAgICAgcmV0dXJuIG4gKyBuO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGNvbG9ycyA/IFwicmdiXCIuY29uY2F0KGNvbG9ycy5sZW5ndGggPT09IDQgPyAnYScgOiAnJywgXCIoXCIpLmNvbmNhdChjb2xvcnMubWFwKGZ1bmN0aW9uIChuLCBpbmRleCkge1xuICAgIHJldHVybiBpbmRleCA8IDMgPyBwYXJzZUludChuLCAxNikgOiBNYXRoLnJvdW5kKHBhcnNlSW50KG4sIDE2KSAvIDI1NSAqIDEwMDApIC8gMTAwMDtcbiAgfSkuam9pbignLCAnKSwgXCIpXCIpIDogJyc7XG59XG5cbmZ1bmN0aW9uIGludFRvSGV4KGludCkge1xuICB2YXIgaGV4ID0gaW50LnRvU3RyaW5nKDE2KTtcbiAgcmV0dXJuIGhleC5sZW5ndGggPT09IDEgPyBcIjBcIi5jb25jYXQoaGV4KSA6IGhleDtcbn1cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIENTUyByZ2IgZm9ybWF0IHRvIENTUyBoZXggZm9ybWF0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIFJHQiBjb2xvciwgaS5lLiByZ2IobiwgbiwgbilcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIHJnYiBjb2xvciBzdHJpbmcsIGkuZS4gI25ubm5ublxuICovXG5cblxuZnVuY3Rpb24gcmdiVG9IZXgoY29sb3IpIHtcbiAgLy8gSWRlbXBvdGVudFxuICBpZiAoY29sb3IuaW5kZXhPZignIycpID09PSAwKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgdmFyIF9kZWNvbXBvc2VDb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKSxcbiAgICAgIHZhbHVlcyA9IF9kZWNvbXBvc2VDb2xvci52YWx1ZXM7XG5cbiAgcmV0dXJuIFwiI1wiLmNvbmNhdCh2YWx1ZXMubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIGludFRvSGV4KG4pO1xuICB9KS5qb2luKCcnKSk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBoc2wgZm9ybWF0IHRvIHJnYiBmb3JtYXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gSFNMIGNvbG9yIHZhbHVlc1xuICogQHJldHVybnMge3N0cmluZ30gcmdiIGNvbG9yIHZhbHVlc1xuICovXG5cblxuZnVuY3Rpb24gaHNsVG9SZ2IoY29sb3IpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHZhciBfY29sb3IgPSBjb2xvcixcbiAgICAgIHZhbHVlcyA9IF9jb2xvci52YWx1ZXM7XG4gIHZhciBoID0gdmFsdWVzWzBdO1xuICB2YXIgcyA9IHZhbHVlc1sxXSAvIDEwMDtcbiAgdmFyIGwgPSB2YWx1ZXNbMl0gLyAxMDA7XG4gIHZhciBhID0gcyAqIE1hdGgubWluKGwsIDEgLSBsKTtcblxuICB2YXIgZiA9IGZ1bmN0aW9uIGYobikge1xuICAgIHZhciBrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAobiArIGggLyAzMCkgJSAxMjtcbiAgICByZXR1cm4gbCAtIGEgKiBNYXRoLm1heChNYXRoLm1pbihrIC0gMywgOSAtIGssIDEpLCAtMSk7XG4gIH07XG5cbiAgdmFyIHR5cGUgPSAncmdiJztcbiAgdmFyIHJnYiA9IFtNYXRoLnJvdW5kKGYoMCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoOCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoNCkgKiAyNTUpXTtcblxuICBpZiAoY29sb3IudHlwZSA9PT0gJ2hzbGEnKSB7XG4gICAgdHlwZSArPSAnYSc7XG4gICAgcmdiLnB1c2godmFsdWVzWzNdKTtcbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcih7XG4gICAgdHlwZTogdHlwZSxcbiAgICB2YWx1ZXM6IHJnYlxuICB9KTtcbn1cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgd2l0aCB0aGUgdHlwZSBhbmQgdmFsdWVzIG9mIGEgY29sb3IuXG4gKlxuICogTm90ZTogRG9lcyBub3Qgc3VwcG9ydCByZ2IgJSB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge29iamVjdH0gLSBBIE1VSSBjb2xvciBvYmplY3Q6IHt0eXBlOiBzdHJpbmcsIHZhbHVlczogbnVtYmVyW119XG4gKi9cblxuXG5mdW5jdGlvbiBkZWNvbXBvc2VDb2xvcihjb2xvcikge1xuICAvLyBJZGVtcG90ZW50XG4gIGlmIChjb2xvci50eXBlKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgaWYgKGNvbG9yLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgcmV0dXJuIGRlY29tcG9zZUNvbG9yKGhleFRvUmdiKGNvbG9yKSk7XG4gIH1cblxuICB2YXIgbWFya2VyID0gY29sb3IuaW5kZXhPZignKCcpO1xuICB2YXIgdHlwZSA9IGNvbG9yLnN1YnN0cmluZygwLCBtYXJrZXIpO1xuXG4gIGlmIChbJ3JnYicsICdyZ2JhJywgJ2hzbCcsICdoc2xhJ10uaW5kZXhPZih0eXBlKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gXCJNYXRlcmlhbC1VSTogVW5zdXBwb3J0ZWQgYFwiLmNvbmNhdChjb2xvciwgXCJgIGNvbG9yLlxcbldlIHN1cHBvcnQgdGhlIGZvbGxvd2luZyBmb3JtYXRzOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLlwiKSA6ICgwLCBfdXRpbHMuZm9ybWF0TXVpRXJyb3JNZXNzYWdlKSgzLCBjb2xvcikpO1xuICB9XG5cbiAgdmFyIHZhbHVlcyA9IGNvbG9yLnN1YnN0cmluZyhtYXJrZXIgKyAxLCBjb2xvci5sZW5ndGggLSAxKS5zcGxpdCgnLCcpO1xuICB2YWx1ZXMgPSB2YWx1ZXMubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdHlwZSxcbiAgICB2YWx1ZXM6IHZhbHVlc1xuICB9O1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIG9iamVjdCB3aXRoIHR5cGUgYW5kIHZhbHVlcyB0byBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29sb3IgLSBEZWNvbXBvc2VkIGNvbG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IudHlwZSAtIE9uZSBvZjogJ3JnYicsICdyZ2JhJywgJ2hzbCcsICdoc2xhJ1xuICogQHBhcmFtIHthcnJheX0gY29sb3IudmFsdWVzIC0gW24sbixuXSBvciBbbixuLG4sbl1cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZ1xuICovXG5cblxuZnVuY3Rpb24gcmVjb21wb3NlQ29sb3IoY29sb3IpIHtcbiAgdmFyIHR5cGUgPSBjb2xvci50eXBlO1xuICB2YXIgdmFsdWVzID0gY29sb3IudmFsdWVzO1xuXG4gIGlmICh0eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSkge1xuICAgIC8vIE9ubHkgY29udmVydCB0aGUgZmlyc3QgMyB2YWx1ZXMgdG8gaW50IChpLmUuIG5vdCBhbHBoYSlcbiAgICB2YWx1ZXMgPSB2YWx1ZXMubWFwKGZ1bmN0aW9uIChuLCBpKSB7XG4gICAgICByZXR1cm4gaSA8IDMgPyBwYXJzZUludChuLCAxMCkgOiBuO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKHR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgdmFsdWVzWzFdID0gXCJcIi5jb25jYXQodmFsdWVzWzFdLCBcIiVcIik7XG4gICAgdmFsdWVzWzJdID0gXCJcIi5jb25jYXQodmFsdWVzWzJdLCBcIiVcIik7XG4gIH1cblxuICByZXR1cm4gXCJcIi5jb25jYXQodHlwZSwgXCIoXCIpLmNvbmNhdCh2YWx1ZXMuam9pbignLCAnKSwgXCIpXCIpO1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBjb250cmFzdCByYXRpbyBiZXR3ZWVuIHR3byBjb2xvcnMuXG4gKlxuICogRm9ybXVsYTogaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC1URUNIUy9HMTcuaHRtbCNHMTctdGVzdHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9yZWdyb3VuZCAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYWNrZ3JvdW5kIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge251bWJlcn0gQSBjb250cmFzdCByYXRpbyB2YWx1ZSBpbiB0aGUgcmFuZ2UgMCAtIDIxLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0Q29udHJhc3RSYXRpbyhmb3JlZ3JvdW5kLCBiYWNrZ3JvdW5kKSB7XG4gIHZhciBsdW1BID0gZ2V0THVtaW5hbmNlKGZvcmVncm91bmQpO1xuICB2YXIgbHVtQiA9IGdldEx1bWluYW5jZShiYWNrZ3JvdW5kKTtcbiAgcmV0dXJuIChNYXRoLm1heChsdW1BLCBsdW1CKSArIDAuMDUpIC8gKE1hdGgubWluKGx1bUEsIGx1bUIpICsgMC4wNSk7XG59XG4vKipcbiAqIFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIGFueSBwb2ludCBpbiBhIGNvbG9yIHNwYWNlLFxuICogbm9ybWFsaXplZCB0byAwIGZvciBkYXJrZXN0IGJsYWNrIGFuZCAxIGZvciBsaWdodGVzdCB3aGl0ZS5cbiAqXG4gKiBGb3JtdWxhOiBodHRwczovL3d3dy53My5vcmcvVFIvV0NBRzIwLVRFQ0hTL0cxNy5odG1sI0cxNy10ZXN0c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIHRoZSBjb2xvciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldEx1bWluYW5jZShjb2xvcikge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgdmFyIHJnYiA9IGNvbG9yLnR5cGUgPT09ICdoc2wnID8gZGVjb21wb3NlQ29sb3IoaHNsVG9SZ2IoY29sb3IpKS52YWx1ZXMgOiBjb2xvci52YWx1ZXM7XG4gIHJnYiA9IHJnYi5tYXAoZnVuY3Rpb24gKHZhbCkge1xuICAgIHZhbCAvPSAyNTU7IC8vIG5vcm1hbGl6ZWRcblxuICAgIHJldHVybiB2YWwgPD0gMC4wMzkyOCA/IHZhbCAvIDEyLjkyIDogTWF0aC5wb3coKHZhbCArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuICB9KTsgLy8gVHJ1bmNhdGUgYXQgMyBkaWdpdHNcblxuICByZXR1cm4gTnVtYmVyKCgwLjIxMjYgKiByZ2JbMF0gKyAwLjcxNTIgKiByZ2JbMV0gKyAwLjA3MjIgKiByZ2JbMl0pLnRvRml4ZWQoMykpO1xufVxuLyoqXG4gKiBEYXJrZW4gb3IgbGlnaHRlbiBhIGNvbG9yLCBkZXBlbmRpbmcgb24gaXRzIGx1bWluYW5jZS5cbiAqIExpZ2h0IGNvbG9ycyBhcmUgZGFya2VuZWQsIGRhcmsgY29sb3JzIGFyZSBsaWdodGVuZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50PTAuMTUgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5cbmZ1bmN0aW9uIGVtcGhhc2l6ZShjb2xvcikge1xuICB2YXIgY29lZmZpY2llbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDAuMTU7XG4gIHJldHVybiBnZXRMdW1pbmFuY2UoY29sb3IpID4gMC41ID8gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCkgOiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCk7XG59XG4vKipcbiAqIFNldCB0aGUgYWJzb2x1dGUgdHJhbnNwYXJlbmN5IG9mIGEgY29sb3IuXG4gKiBBbnkgZXhpc3RpbmcgYWxwaGEgdmFsdWVzIGFyZSBvdmVyd3JpdHRlbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSB2YWx1ZSB0byBzZXQgdGhlIGFscGhhIGNoYW5uZWwgdG8gaW4gdGhlIHJhbmdlIDAgLTFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuXG5mdW5jdGlvbiBmYWRlKGNvbG9yLCB2YWx1ZSkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgdmFsdWUgPSBjbGFtcCh2YWx1ZSk7XG5cbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdyZ2InIHx8IGNvbG9yLnR5cGUgPT09ICdoc2wnKSB7XG4gICAgY29sb3IudHlwZSArPSAnYSc7XG4gIH1cblxuICBjb2xvci52YWx1ZXNbM10gPSB2YWx1ZTtcbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbi8qKlxuICogRGFya2VucyBhIGNvbG9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cblxuZnVuY3Rpb24gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29lZmZpY2llbnQgPSBjbGFtcChjb2VmZmljaWVudCk7XG5cbiAgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgY29sb3IudmFsdWVzWzJdICo9IDEgLSBjb2VmZmljaWVudDtcbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBjb2xvci52YWx1ZXNbaV0gKj0gMSAtIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG4vKipcbiAqIExpZ2h0ZW5zIGEgY29sb3IuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuXG5mdW5jdGlvbiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29lZmZpY2llbnQgPSBjbGFtcChjb2VmZmljaWVudCk7XG5cbiAgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgY29sb3IudmFsdWVzWzJdICs9ICgxMDAgLSBjb2xvci52YWx1ZXNbMl0pICogY29lZmZpY2llbnQ7XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICs9ICgyNTUgLSBjb2xvci52YWx1ZXNbaV0pICogY29lZmZpY2llbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVCcmVha3BvaW50cztcbmV4cG9ydHMua2V5cyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbi8vIFNvcnRlZCBBU0MgYnkgc2l6ZS4gVGhhdCdzIGltcG9ydGFudC5cbi8vIEl0IGNhbid0IGJlIGNvbmZpZ3VyZWQgYXMgaXQncyB1c2VkIHN0YXRpY2FsbHkgZm9yIHByb3BUeXBlcy5cbnZhciBrZXlzID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddOyAvLyBLZWVwIGluIG1pbmQgdGhhdCBAbWVkaWEgaXMgaW5jbHVzaXZlIGJ5IHRoZSBDU1Mgc3BlY2lmaWNhdGlvbi5cblxuZXhwb3J0cy5rZXlzID0ga2V5cztcblxuZnVuY3Rpb24gY3JlYXRlQnJlYWtwb2ludHMoYnJlYWtwb2ludHMpIHtcbiAgdmFyIF9icmVha3BvaW50cyR2YWx1ZXMgPSBicmVha3BvaW50cy52YWx1ZXMsXG4gICAgICB2YWx1ZXMgPSBfYnJlYWtwb2ludHMkdmFsdWVzID09PSB2b2lkIDAgPyB7XG4gICAgeHM6IDAsXG4gICAgc206IDYwMCxcbiAgICBtZDogOTYwLFxuICAgIGxnOiAxMjgwLFxuICAgIHhsOiAxOTIwXG4gIH0gOiBfYnJlYWtwb2ludHMkdmFsdWVzLFxuICAgICAgX2JyZWFrcG9pbnRzJHVuaXQgPSBicmVha3BvaW50cy51bml0LFxuICAgICAgdW5pdCA9IF9icmVha3BvaW50cyR1bml0ID09PSB2b2lkIDAgPyAncHgnIDogX2JyZWFrcG9pbnRzJHVuaXQsXG4gICAgICBfYnJlYWtwb2ludHMkc3RlcCA9IGJyZWFrcG9pbnRzLnN0ZXAsXG4gICAgICBzdGVwID0gX2JyZWFrcG9pbnRzJHN0ZXAgPT09IHZvaWQgMCA/IDUgOiBfYnJlYWtwb2ludHMkc3RlcCxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkoYnJlYWtwb2ludHMsIFtcInZhbHVlc1wiLCBcInVuaXRcIiwgXCJzdGVwXCJdKTtcblxuICBmdW5jdGlvbiB1cChrZXkpIHtcbiAgICB2YXIgdmFsdWUgPSB0eXBlb2YgdmFsdWVzW2tleV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleV0gOiBrZXk7XG4gICAgcmV0dXJuIFwiQG1lZGlhIChtaW4td2lkdGg6XCIuY29uY2F0KHZhbHVlKS5jb25jYXQodW5pdCwgXCIpXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZG93bihrZXkpIHtcbiAgICB2YXIgZW5kSW5kZXggPSBrZXlzLmluZGV4T2Yoa2V5KSArIDE7XG4gICAgdmFyIHVwcGVyYm91bmQgPSB2YWx1ZXNba2V5c1tlbmRJbmRleF1dO1xuXG4gICAgaWYgKGVuZEluZGV4ID09PSBrZXlzLmxlbmd0aCkge1xuICAgICAgLy8geGwgZG93biBhcHBsaWVzIHRvIGFsbCBzaXplc1xuICAgICAgcmV0dXJuIHVwKCd4cycpO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZSA9IHR5cGVvZiB1cHBlcmJvdW5kID09PSAnbnVtYmVyJyAmJiBlbmRJbmRleCA+IDAgPyB1cHBlcmJvdW5kIDoga2V5O1xuICAgIHJldHVybiBcIkBtZWRpYSAobWF4LXdpZHRoOlwiLmNvbmNhdCh2YWx1ZSAtIHN0ZXAgLyAxMDApLmNvbmNhdCh1bml0LCBcIilcIik7XG4gIH1cblxuICBmdW5jdGlvbiBiZXR3ZWVuKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgZW5kSW5kZXggPSBrZXlzLmluZGV4T2YoZW5kKTtcblxuICAgIGlmIChlbmRJbmRleCA9PT0ga2V5cy5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gdXAoc3RhcnQpO1xuICAgIH1cblxuICAgIHJldHVybiBcIkBtZWRpYSAobWluLXdpZHRoOlwiLmNvbmNhdCh0eXBlb2YgdmFsdWVzW3N0YXJ0XSA9PT0gJ251bWJlcicgPyB2YWx1ZXNbc3RhcnRdIDogc3RhcnQpLmNvbmNhdCh1bml0LCBcIikgYW5kIFwiKSArIFwiKG1heC13aWR0aDpcIi5jb25jYXQoKGVuZEluZGV4ICE9PSAtMSAmJiB0eXBlb2YgdmFsdWVzW2tleXNbZW5kSW5kZXggKyAxXV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleXNbZW5kSW5kZXggKyAxXV0gOiBlbmQpIC0gc3RlcCAvIDEwMCkuY29uY2F0KHVuaXQsIFwiKVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9ubHkoa2V5KSB7XG4gICAgcmV0dXJuIGJldHdlZW4oa2V5LCBrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gd2lkdGgoa2V5KSB7XG4gICAgcmV0dXJuIHZhbHVlc1trZXldO1xuICB9XG5cbiAgcmV0dXJuICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGtleXM6IGtleXMsXG4gICAgdmFsdWVzOiB2YWx1ZXMsXG4gICAgdXA6IHVwLFxuICAgIGRvd246IGRvd24sXG4gICAgYmV0d2VlbjogYmV0d2VlbixcbiAgICBvbmx5OiBvbmx5LFxuICAgIHdpZHRoOiB3aWR0aFxuICB9LCBvdGhlcik7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlTWl4aW5zO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxuZnVuY3Rpb24gY3JlYXRlTWl4aW5zKGJyZWFrcG9pbnRzLCBzcGFjaW5nLCBtaXhpbnMpIHtcbiAgdmFyIF90b29sYmFyO1xuXG4gIHJldHVybiAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHtcbiAgICBndXR0ZXJzOiBmdW5jdGlvbiBndXR0ZXJzKCkge1xuICAgICAgdmFyIHN0eWxlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICAvLyBUbyBkZXByZWNhdGUgaW4gdjQuMVxuICAgICAgLy8gICAgICAgd2FybmluZyhcbiAgICAgIC8vICAgICAgICAgZmFsc2UsXG4gICAgICAvLyAgICAgICAgIFtcbiAgICAgIC8vICAgICAgICAgICAnTWF0ZXJpYWwtVUk6IFRoZW1lLm1peGlucy5ndXR0ZXJzKCkgaXMgZGVwcmVjYXRlZC4nLFxuICAgICAgLy8gICAgICAgICAgICdZb3UgY2FuIHVzZSB0aGUgc291cmNlIG9mIHRoZSBtaXhpbiBkaXJlY3RseTonLFxuICAgICAgLy8gICAgICAgICAgIGBcbiAgICAgIC8vIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgLy8gcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgLy8gW3RoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpXToge1xuICAgICAgLy8gICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZygzKSxcbiAgICAgIC8vICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDMpLFxuICAgICAgLy8gfSxcbiAgICAgIC8vIGAsXG4gICAgICAvLyAgICAgICAgIF0uam9pbignXFxuJyksXG4gICAgICAvLyAgICAgICApO1xuICAgICAgcmV0dXJuICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe1xuICAgICAgICBwYWRkaW5nTGVmdDogc3BhY2luZygyKSxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiBzcGFjaW5nKDIpXG4gICAgICB9LCBzdHlsZXMsICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBicmVha3BvaW50cy51cCgnc20nKSwgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7XG4gICAgICAgIHBhZGRpbmdMZWZ0OiBzcGFjaW5nKDMpLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IHNwYWNpbmcoMylcbiAgICAgIH0sIHN0eWxlc1ticmVha3BvaW50cy51cCgnc20nKV0pKSk7XG4gICAgfSxcbiAgICB0b29sYmFyOiAoX3Rvb2xiYXIgPSB7XG4gICAgICBtaW5IZWlnaHQ6IDU2XG4gICAgfSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX3Rvb2xiYXIsIFwiXCIuY29uY2F0KGJyZWFrcG9pbnRzLnVwKCd4cycpLCBcIiBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpXCIpLCB7XG4gICAgICBtaW5IZWlnaHQ6IDQ4XG4gICAgfSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF90b29sYmFyLCBicmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgbWluSGVpZ2h0OiA2NFxuICAgIH0pLCBfdG9vbGJhcilcbiAgfSwgbWl4aW5zKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG1hdGVyaWFsLXVpL3V0aWxzXCIpO1xuXG52YXIgX2NyZWF0ZUJyZWFrcG9pbnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVCcmVha3BvaW50c1wiKSk7XG5cbnZhciBfY3JlYXRlTWl4aW5zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVNaXhpbnNcIikpO1xuXG52YXIgX2NyZWF0ZVBhbGV0dGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZVBhbGV0dGVcIikpO1xuXG52YXIgX2NyZWF0ZVR5cG9ncmFwaHkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZVR5cG9ncmFwaHlcIikpO1xuXG52YXIgX3NoYWRvd3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3NoYWRvd3NcIikpO1xuXG52YXIgX3NoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zaGFwZVwiKSk7XG5cbnZhciBfY3JlYXRlU3BhY2luZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlU3BhY2luZ1wiKSk7XG5cbnZhciBfdHJhbnNpdGlvbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3RyYW5zaXRpb25zXCIpKTtcblxudmFyIF96SW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3pJbmRleFwiKSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZU11aVRoZW1lKCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBfb3B0aW9ucyRicmVha3BvaW50cyA9IG9wdGlvbnMuYnJlYWtwb2ludHMsXG4gICAgICBicmVha3BvaW50c0lucHV0ID0gX29wdGlvbnMkYnJlYWtwb2ludHMgPT09IHZvaWQgMCA/IHt9IDogX29wdGlvbnMkYnJlYWtwb2ludHMsXG4gICAgICBfb3B0aW9ucyRtaXhpbnMgPSBvcHRpb25zLm1peGlucyxcbiAgICAgIG1peGluc0lucHV0ID0gX29wdGlvbnMkbWl4aW5zID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJG1peGlucyxcbiAgICAgIF9vcHRpb25zJHBhbGV0dGUgPSBvcHRpb25zLnBhbGV0dGUsXG4gICAgICBwYWxldHRlSW5wdXQgPSBfb3B0aW9ucyRwYWxldHRlID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJHBhbGV0dGUsXG4gICAgICBzcGFjaW5nSW5wdXQgPSBvcHRpb25zLnNwYWNpbmcsXG4gICAgICBfb3B0aW9ucyR0eXBvZ3JhcGh5ID0gb3B0aW9ucy50eXBvZ3JhcGh5LFxuICAgICAgdHlwb2dyYXBoeUlucHV0ID0gX29wdGlvbnMkdHlwb2dyYXBoeSA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyR0eXBvZ3JhcGh5LFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShvcHRpb25zLCBbXCJicmVha3BvaW50c1wiLCBcIm1peGluc1wiLCBcInBhbGV0dGVcIiwgXCJzcGFjaW5nXCIsIFwidHlwb2dyYXBoeVwiXSk7XG4gIHZhciBwYWxldHRlID0gKDAsIF9jcmVhdGVQYWxldHRlLmRlZmF1bHQpKHBhbGV0dGVJbnB1dCk7XG4gIHZhciBicmVha3BvaW50cyA9ICgwLCBfY3JlYXRlQnJlYWtwb2ludHMuZGVmYXVsdCkoYnJlYWtwb2ludHNJbnB1dCk7XG4gIHZhciBzcGFjaW5nID0gKDAsIF9jcmVhdGVTcGFjaW5nLmRlZmF1bHQpKHNwYWNpbmdJbnB1dCk7XG4gIHZhciBtdWlUaGVtZSA9ICgwLCBfdXRpbHMuZGVlcG1lcmdlKSh7XG4gICAgYnJlYWtwb2ludHM6IGJyZWFrcG9pbnRzLFxuICAgIGRpcmVjdGlvbjogJ2x0cicsXG4gICAgbWl4aW5zOiAoMCwgX2NyZWF0ZU1peGlucy5kZWZhdWx0KShicmVha3BvaW50cywgc3BhY2luZywgbWl4aW5zSW5wdXQpLFxuICAgIG92ZXJyaWRlczoge30sXG4gICAgLy8gSW5qZWN0IGN1c3RvbSBzdHlsZXNcbiAgICBwYWxldHRlOiBwYWxldHRlLFxuICAgIHByb3BzOiB7fSxcbiAgICAvLyBQcm92aWRlIGRlZmF1bHQgcHJvcHNcbiAgICBzaGFkb3dzOiBfc2hhZG93cy5kZWZhdWx0LFxuICAgIHR5cG9ncmFwaHk6ICgwLCBfY3JlYXRlVHlwb2dyYXBoeS5kZWZhdWx0KShwYWxldHRlLCB0eXBvZ3JhcGh5SW5wdXQpLFxuICAgIHNwYWNpbmc6IHNwYWNpbmcsXG4gICAgc2hhcGU6IF9zaGFwZS5kZWZhdWx0LFxuICAgIHRyYW5zaXRpb25zOiBfdHJhbnNpdGlvbnMuZGVmYXVsdCxcbiAgICB6SW5kZXg6IF96SW5kZXguZGVmYXVsdFxuICB9LCBvdGhlcik7XG5cbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgbXVpVGhlbWUgPSBhcmdzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBhcmd1bWVudCkge1xuICAgIHJldHVybiAoMCwgX3V0aWxzLmRlZXBtZXJnZSkoYWNjLCBhcmd1bWVudCk7XG4gIH0sIG11aVRoZW1lKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBwc2V1ZG9DbGFzc2VzID0gWydjaGVja2VkJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2ZvY3VzZWQnLCAnZm9jdXNWaXNpYmxlJywgJ3JlcXVpcmVkJywgJ2V4cGFuZGVkJywgJ3NlbGVjdGVkJ107XG5cbiAgICB2YXIgdHJhdmVyc2UgPSBmdW5jdGlvbiB0cmF2ZXJzZShub2RlLCBwYXJlbnRLZXkpIHtcbiAgICAgIHZhciBkZXB0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTtcbiAgICAgIHZhciBrZXk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW4sIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG5cbiAgICAgIGZvciAoa2V5IGluIG5vZGUpIHtcbiAgICAgICAgdmFyIGNoaWxkID0gbm9kZVtrZXldO1xuXG4gICAgICAgIGlmIChkZXB0aCA9PT0gMSkge1xuICAgICAgICAgIGlmIChrZXkuaW5kZXhPZignTXVpJykgPT09IDAgJiYgY2hpbGQpIHtcbiAgICAgICAgICAgIHRyYXZlcnNlKGNoaWxkLCBrZXksIGRlcHRoICsgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHBzZXVkb0NsYXNzZXMuaW5kZXhPZihrZXkpICE9PSAtMSAmJiBPYmplY3Qua2V5cyhjaGlsZCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgYFwiLmNvbmNhdChwYXJlbnRLZXksIFwiYCBjb21wb25lbnQgaW5jcmVhc2VzIFwiKSArIFwidGhlIENTUyBzcGVjaWZpY2l0eSBvZiB0aGUgYFwiLmNvbmNhdChrZXksIFwiYCBpbnRlcm5hbCBzdGF0ZS5cIiksICdZb3UgY2FuIG5vdCBvdmVycmlkZSBpdCBsaWtlIHRoaXM6ICcsIEpTT04uc3RyaW5naWZ5KG5vZGUsIG51bGwsIDIpLCAnJywgJ0luc3RlYWQsIHlvdSBuZWVkIHRvIHVzZSB0aGUgJHJ1bGVOYW1lIHN5bnRheDonLCBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgIHJvb3Q6ICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBcIiYkXCIuY29uY2F0KGtleSksIGNoaWxkKVxuICAgICAgICAgICAgfSwgbnVsbCwgMiksICcnLCAnaHR0cHM6Ly9tYXRlcmlhbC11aS5jb20vci9wc2V1ZG8tY2xhc3Nlcy1ndWlkZSddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICB9IC8vIFJlbW92ZSB0aGUgc3R5bGUgdG8gcHJldmVudCBnbG9iYWwgY29uZmxpY3RzLlxuXG5cbiAgICAgICAgICBub2RlW2tleV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB0cmF2ZXJzZShtdWlUaGVtZS5vdmVycmlkZXMpO1xuICB9XG5cbiAgcmV0dXJuIG11aVRoZW1lO1xufVxuXG52YXIgX2RlZmF1bHQgPSBjcmVhdGVNdWlUaGVtZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVBhbGV0dGU7XG5leHBvcnRzLmRhcmsgPSBleHBvcnRzLmxpZ2h0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCJAbWF0ZXJpYWwtdWkvdXRpbHNcIik7XG5cbnZhciBfY29tbW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vY29sb3JzL2NvbW1vblwiKSk7XG5cbnZhciBfZ3JleSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NvbG9ycy9ncmV5XCIpKTtcblxudmFyIF9pbmRpZ28gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9jb2xvcnMvaW5kaWdvXCIpKTtcblxudmFyIF9waW5rID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vY29sb3JzL3BpbmtcIikpO1xuXG52YXIgX3JlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NvbG9ycy9yZWRcIikpO1xuXG52YXIgX29yYW5nZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NvbG9ycy9vcmFuZ2VcIikpO1xuXG52YXIgX2JsdWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9jb2xvcnMvYmx1ZVwiKSk7XG5cbnZhciBfZ3JlZW4gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9jb2xvcnMvZ3JlZW5cIikpO1xuXG52YXIgX2NvbG9yTWFuaXB1bGF0b3IgPSByZXF1aXJlKFwiLi9jb2xvck1hbmlwdWxhdG9yXCIpO1xuXG52YXIgbGlnaHQgPSB7XG4gIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgdGV4dC5cbiAgdGV4dDoge1xuICAgIC8vIFRoZSBtb3N0IGltcG9ydGFudCB0ZXh0LlxuICAgIHByaW1hcnk6ICdyZ2JhKDAsIDAsIDAsIDAuODcpJyxcbiAgICAvLyBTZWNvbmRhcnkgdGV4dC5cbiAgICBzZWNvbmRhcnk6ICdyZ2JhKDAsIDAsIDAsIDAuNTQpJyxcbiAgICAvLyBEaXNhYmxlZCB0ZXh0IGhhdmUgZXZlbiBsb3dlciB2aXN1YWwgcHJvbWluZW5jZS5cbiAgICBkaXNhYmxlZDogJ3JnYmEoMCwgMCwgMCwgMC4zOCknLFxuICAgIC8vIFRleHQgaGludHMuXG4gICAgaGludDogJ3JnYmEoMCwgMCwgMCwgMC4zOCknXG4gIH0sXG4gIC8vIFRoZSBjb2xvciB1c2VkIHRvIGRpdmlkZSBkaWZmZXJlbnQgZWxlbWVudHMuXG4gIGRpdmlkZXI6ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyxcbiAgLy8gVGhlIGJhY2tncm91bmQgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIHN1cmZhY2VzLlxuICAvLyBDb25zaXN0ZW5jeSBiZXR3ZWVuIHRoZXNlIHZhbHVlcyBpcyBpbXBvcnRhbnQuXG4gIGJhY2tncm91bmQ6IHtcbiAgICBwYXBlcjogX2NvbW1vbi5kZWZhdWx0LndoaXRlLFxuICAgIGRlZmF1bHQ6IF9ncmV5LmRlZmF1bHRbNTBdXG4gIH0sXG4gIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgYWN0aW9uIGVsZW1lbnRzLlxuICBhY3Rpb246IHtcbiAgICAvLyBUaGUgY29sb3Igb2YgYW4gYWN0aXZlIGFjdGlvbiBsaWtlIGFuIGljb24gYnV0dG9uLlxuICAgIGFjdGl2ZTogJ3JnYmEoMCwgMCwgMCwgMC41NCknLFxuICAgIC8vIFRoZSBjb2xvciBvZiBhbiBob3ZlcmVkIGFjdGlvbi5cbiAgICBob3ZlcjogJ3JnYmEoMCwgMCwgMCwgMC4wNCknLFxuICAgIGhvdmVyT3BhY2l0eTogMC4wNCxcbiAgICAvLyBUaGUgY29sb3Igb2YgYSBzZWxlY3RlZCBhY3Rpb24uXG4gICAgc2VsZWN0ZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMDgpJyxcbiAgICBzZWxlY3RlZE9wYWNpdHk6IDAuMDgsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjI2KScsXG4gICAgLy8gVGhlIGJhY2tncm91bmQgY29sb3Igb2YgYSBkaXNhYmxlZCBhY3Rpb24uXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gICAgZGlzYWJsZWRPcGFjaXR5OiAwLjM4LFxuICAgIGZvY3VzOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gICAgZm9jdXNPcGFjaXR5OiAwLjEyLFxuICAgIGFjdGl2YXRlZE9wYWNpdHk6IDAuMTJcbiAgfVxufTtcbmV4cG9ydHMubGlnaHQgPSBsaWdodDtcbnZhciBkYXJrID0ge1xuICB0ZXh0OiB7XG4gICAgcHJpbWFyeTogX2NvbW1vbi5kZWZhdWx0LndoaXRlLFxuICAgIHNlY29uZGFyeTogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KScsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknLFxuICAgIGhpbnQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknLFxuICAgIGljb246ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknXG4gIH0sXG4gIGRpdmlkZXI6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgYmFja2dyb3VuZDoge1xuICAgIHBhcGVyOiBfZ3JleS5kZWZhdWx0WzgwMF0sXG4gICAgZGVmYXVsdDogJyMzMDMwMzAnXG4gIH0sXG4gIGFjdGlvbjoge1xuICAgIGFjdGl2ZTogX2NvbW1vbi5kZWZhdWx0LndoaXRlLFxuICAgIGhvdmVyOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA4KScsXG4gICAgaG92ZXJPcGFjaXR5OiAwLjA4LFxuICAgIHNlbGVjdGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjE2KScsXG4gICAgc2VsZWN0ZWRPcGFjaXR5OiAwLjE2LFxuICAgIGRpc2FibGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpJyxcbiAgICBkaXNhYmxlZEJhY2tncm91bmQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgICBkaXNhYmxlZE9wYWNpdHk6IDAuMzgsXG4gICAgZm9jdXM6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgICBmb2N1c09wYWNpdHk6IDAuMTIsXG4gICAgYWN0aXZhdGVkT3BhY2l0eTogMC4yNFxuICB9XG59O1xuZXhwb3J0cy5kYXJrID0gZGFyaztcblxuZnVuY3Rpb24gYWRkTGlnaHRPckRhcmsoaW50ZW50LCBkaXJlY3Rpb24sIHNoYWRlLCB0b25hbE9mZnNldCkge1xuICB2YXIgdG9uYWxPZmZzZXRMaWdodCA9IHRvbmFsT2Zmc2V0LmxpZ2h0IHx8IHRvbmFsT2Zmc2V0O1xuICB2YXIgdG9uYWxPZmZzZXREYXJrID0gdG9uYWxPZmZzZXQuZGFyayB8fCB0b25hbE9mZnNldCAqIDEuNTtcblxuICBpZiAoIWludGVudFtkaXJlY3Rpb25dKSB7XG4gICAgaWYgKGludGVudC5oYXNPd25Qcm9wZXJ0eShzaGFkZSkpIHtcbiAgICAgIGludGVudFtkaXJlY3Rpb25dID0gaW50ZW50W3NoYWRlXTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2xpZ2h0Jykge1xuICAgICAgaW50ZW50LmxpZ2h0ID0gKDAsIF9jb2xvck1hbmlwdWxhdG9yLmxpZ2h0ZW4pKGludGVudC5tYWluLCB0b25hbE9mZnNldExpZ2h0KTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2RhcmsnKSB7XG4gICAgICBpbnRlbnQuZGFyayA9ICgwLCBfY29sb3JNYW5pcHVsYXRvci5kYXJrZW4pKGludGVudC5tYWluLCB0b25hbE9mZnNldERhcmspO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVQYWxldHRlKHBhbGV0dGUpIHtcbiAgdmFyIF9wYWxldHRlJHByaW1hcnkgPSBwYWxldHRlLnByaW1hcnksXG4gICAgICBwcmltYXJ5ID0gX3BhbGV0dGUkcHJpbWFyeSA9PT0gdm9pZCAwID8ge1xuICAgIGxpZ2h0OiBfaW5kaWdvLmRlZmF1bHRbMzAwXSxcbiAgICBtYWluOiBfaW5kaWdvLmRlZmF1bHRbNTAwXSxcbiAgICBkYXJrOiBfaW5kaWdvLmRlZmF1bHRbNzAwXVxuICB9IDogX3BhbGV0dGUkcHJpbWFyeSxcbiAgICAgIF9wYWxldHRlJHNlY29uZGFyeSA9IHBhbGV0dGUuc2Vjb25kYXJ5LFxuICAgICAgc2Vjb25kYXJ5ID0gX3BhbGV0dGUkc2Vjb25kYXJ5ID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IF9waW5rLmRlZmF1bHQuQTIwMCxcbiAgICBtYWluOiBfcGluay5kZWZhdWx0LkE0MDAsXG4gICAgZGFyazogX3BpbmsuZGVmYXVsdC5BNzAwXG4gIH0gOiBfcGFsZXR0ZSRzZWNvbmRhcnksXG4gICAgICBfcGFsZXR0ZSRlcnJvciA9IHBhbGV0dGUuZXJyb3IsXG4gICAgICBlcnJvciA9IF9wYWxldHRlJGVycm9yID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IF9yZWQuZGVmYXVsdFszMDBdLFxuICAgIG1haW46IF9yZWQuZGVmYXVsdFs1MDBdLFxuICAgIGRhcms6IF9yZWQuZGVmYXVsdFs3MDBdXG4gIH0gOiBfcGFsZXR0ZSRlcnJvcixcbiAgICAgIF9wYWxldHRlJHdhcm5pbmcgPSBwYWxldHRlLndhcm5pbmcsXG4gICAgICB3YXJuaW5nID0gX3BhbGV0dGUkd2FybmluZyA9PT0gdm9pZCAwID8ge1xuICAgIGxpZ2h0OiBfb3JhbmdlLmRlZmF1bHRbMzAwXSxcbiAgICBtYWluOiBfb3JhbmdlLmRlZmF1bHRbNTAwXSxcbiAgICBkYXJrOiBfb3JhbmdlLmRlZmF1bHRbNzAwXVxuICB9IDogX3BhbGV0dGUkd2FybmluZyxcbiAgICAgIF9wYWxldHRlJGluZm8gPSBwYWxldHRlLmluZm8sXG4gICAgICBpbmZvID0gX3BhbGV0dGUkaW5mbyA9PT0gdm9pZCAwID8ge1xuICAgIGxpZ2h0OiBfYmx1ZS5kZWZhdWx0WzMwMF0sXG4gICAgbWFpbjogX2JsdWUuZGVmYXVsdFs1MDBdLFxuICAgIGRhcms6IF9ibHVlLmRlZmF1bHRbNzAwXVxuICB9IDogX3BhbGV0dGUkaW5mbyxcbiAgICAgIF9wYWxldHRlJHN1Y2Nlc3MgPSBwYWxldHRlLnN1Y2Nlc3MsXG4gICAgICBzdWNjZXNzID0gX3BhbGV0dGUkc3VjY2VzcyA9PT0gdm9pZCAwID8ge1xuICAgIGxpZ2h0OiBfZ3JlZW4uZGVmYXVsdFszMDBdLFxuICAgIG1haW46IF9ncmVlbi5kZWZhdWx0WzUwMF0sXG4gICAgZGFyazogX2dyZWVuLmRlZmF1bHRbNzAwXVxuICB9IDogX3BhbGV0dGUkc3VjY2VzcyxcbiAgICAgIF9wYWxldHRlJHR5cGUgPSBwYWxldHRlLnR5cGUsXG4gICAgICB0eXBlID0gX3BhbGV0dGUkdHlwZSA9PT0gdm9pZCAwID8gJ2xpZ2h0JyA6IF9wYWxldHRlJHR5cGUsXG4gICAgICBfcGFsZXR0ZSRjb250cmFzdFRocmUgPSBwYWxldHRlLmNvbnRyYXN0VGhyZXNob2xkLFxuICAgICAgY29udHJhc3RUaHJlc2hvbGQgPSBfcGFsZXR0ZSRjb250cmFzdFRocmUgPT09IHZvaWQgMCA/IDMgOiBfcGFsZXR0ZSRjb250cmFzdFRocmUsXG4gICAgICBfcGFsZXR0ZSR0b25hbE9mZnNldCA9IHBhbGV0dGUudG9uYWxPZmZzZXQsXG4gICAgICB0b25hbE9mZnNldCA9IF9wYWxldHRlJHRvbmFsT2Zmc2V0ID09PSB2b2lkIDAgPyAwLjIgOiBfcGFsZXR0ZSR0b25hbE9mZnNldCxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocGFsZXR0ZSwgW1wicHJpbWFyeVwiLCBcInNlY29uZGFyeVwiLCBcImVycm9yXCIsIFwid2FybmluZ1wiLCBcImluZm9cIiwgXCJzdWNjZXNzXCIsIFwidHlwZVwiLCBcImNvbnRyYXN0VGhyZXNob2xkXCIsIFwidG9uYWxPZmZzZXRcIl0pOyAvLyBVc2UgdGhlIHNhbWUgbG9naWMgYXNcbiAgLy8gQm9vdHN0cmFwOiBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi8xZDZlMzcxMGRkNDQ3ZGUxYTIwMGYyOWU4ZmE1MjFmOGEwOTA4ZjcwL3Njc3MvX2Z1bmN0aW9ucy5zY3NzI0w1OVxuICAvLyBhbmQgbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIgaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWNvbXBvbmVudHMvbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIvYmxvYi9hYzQ2Yjg4NjNjNGRhYjlmYzIyYzRjNjYyZGM2YmQxYjY1ZGQ2NTJmL3BhY2thZ2VzL21kYy10aGVtZS9fZnVuY3Rpb25zLnNjc3MjTDU0XG5cbiAgZnVuY3Rpb24gZ2V0Q29udHJhc3RUZXh0KGJhY2tncm91bmQpIHtcbiAgICB2YXIgY29udHJhc3RUZXh0ID0gKDAsIF9jb2xvck1hbmlwdWxhdG9yLmdldENvbnRyYXN0UmF0aW8pKGJhY2tncm91bmQsIGRhcmsudGV4dC5wcmltYXJ5KSA+PSBjb250cmFzdFRocmVzaG9sZCA/IGRhcmsudGV4dC5wcmltYXJ5IDogbGlnaHQudGV4dC5wcmltYXJ5O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBjb250cmFzdCA9ICgwLCBfY29sb3JNYW5pcHVsYXRvci5nZXRDb250cmFzdFJhdGlvKShiYWNrZ3JvdW5kLCBjb250cmFzdFRleHQpO1xuXG4gICAgICBpZiAoY29udHJhc3QgPCAzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSBjb250cmFzdCByYXRpbyBvZiBcIi5jb25jYXQoY29udHJhc3QsIFwiOjEgZm9yIFwiKS5jb25jYXQoY29udHJhc3RUZXh0LCBcIiBvbiBcIikuY29uY2F0KGJhY2tncm91bmQpLCAnZmFsbHMgYmVsb3cgdGhlIFdDQUcgcmVjb21tZW5kZWQgYWJzb2x1dGUgbWluaW11bSBjb250cmFzdCByYXRpbyBvZiAzOjEuJywgJ2h0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI3Zpc3VhbC1hdWRpby1jb250cmFzdC1jb250cmFzdCddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29udHJhc3RUZXh0O1xuICB9XG5cbiAgdmFyIGF1Z21lbnRDb2xvciA9IGZ1bmN0aW9uIGF1Z21lbnRDb2xvcihjb2xvcikge1xuICAgIHZhciBtYWluU2hhZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDUwMDtcbiAgICB2YXIgbGlnaHRTaGFkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMzAwO1xuICAgIHZhciBkYXJrU2hhZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDcwMDtcbiAgICBjb2xvciA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGNvbG9yKTtcblxuICAgIGlmICghY29sb3IubWFpbiAmJiBjb2xvclttYWluU2hhZGVdKSB7XG4gICAgICBjb2xvci5tYWluID0gY29sb3JbbWFpblNoYWRlXTtcbiAgICB9XG5cbiAgICBpZiAoIWNvbG9yLm1haW4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBcIk1hdGVyaWFsLVVJOiBUaGUgY29sb3IgcHJvdmlkZWQgdG8gYXVnbWVudENvbG9yKGNvbG9yKSBpcyBpbnZhbGlkLlxcblRoZSBjb2xvciBvYmplY3QgbmVlZHMgdG8gaGF2ZSBhIGBtYWluYCBwcm9wZXJ0eSBvciBhIGBcIi5jb25jYXQobWFpblNoYWRlLCBcImAgcHJvcGVydHkuXCIpIDogKDAsIF91dGlscy5mb3JtYXRNdWlFcnJvck1lc3NhZ2UpKDQsIG1haW5TaGFkZSkpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY29sb3IubWFpbiAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBcIk1hdGVyaWFsLVVJOiBUaGUgY29sb3IgcHJvdmlkZWQgdG8gYXVnbWVudENvbG9yKGNvbG9yKSBpcyBpbnZhbGlkLlxcbmBjb2xvci5tYWluYCBzaG91bGQgYmUgYSBzdHJpbmcsIGJ1dCBgXCIuY29uY2F0KEpTT04uc3RyaW5naWZ5KGNvbG9yLm1haW4pLCBcImAgd2FzIHByb3ZpZGVkIGluc3RlYWQuXFxuXFxuRGlkIHlvdSBpbnRlbmQgdG8gdXNlIG9uZSBvZiB0aGUgZm9sbG93aW5nIGFwcHJvYWNoZXM/XFxuXFxuaW1wb3J0IHtcXHhBMGdyZWVuIH0gZnJvbSBcXFwiQG1hdGVyaWFsLXVpL2NvcmUvY29sb3JzXFxcIjtcXG5cXG5jb25zdCB0aGVtZTEgPSBjcmVhdGVNdWlUaGVtZSh7IHBhbGV0dGU6IHtcXG4gIHByaW1hcnk6IGdyZWVuLFxcbn0gfSk7XFxuXFxuY29uc3QgdGhlbWUyID0gY3JlYXRlTXVpVGhlbWUoeyBwYWxldHRlOiB7XFxuICBwcmltYXJ5OiB7IG1haW46IGdyZWVuWzUwMF0gfSxcXG59IH0pO1wiKSA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoNSwgSlNPTi5zdHJpbmdpZnkoY29sb3IubWFpbikpKTtcbiAgICB9XG5cbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2xpZ2h0JywgbGlnaHRTaGFkZSwgdG9uYWxPZmZzZXQpO1xuICAgIGFkZExpZ2h0T3JEYXJrKGNvbG9yLCAnZGFyaycsIGRhcmtTaGFkZSwgdG9uYWxPZmZzZXQpO1xuXG4gICAgaWYgKCFjb2xvci5jb250cmFzdFRleHQpIHtcbiAgICAgIGNvbG9yLmNvbnRyYXN0VGV4dCA9IGdldENvbnRyYXN0VGV4dChjb2xvci5tYWluKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29sb3I7XG4gIH07XG5cbiAgdmFyIHR5cGVzID0ge1xuICAgIGRhcms6IGRhcmssXG4gICAgbGlnaHQ6IGxpZ2h0XG4gIH07XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIXR5cGVzW3R5cGVdKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IFRoZSBwYWxldHRlIHR5cGUgYFwiLmNvbmNhdCh0eXBlLCBcImAgaXMgbm90IHN1cHBvcnRlZC5cIikpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwYWxldHRlT3V0cHV0ID0gKDAsIF91dGlscy5kZWVwbWVyZ2UpKCgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIC8vIEEgY29sbGVjdGlvbiBvZiBjb21tb24gY29sb3JzLlxuICAgIGNvbW1vbjogX2NvbW1vbi5kZWZhdWx0LFxuICAgIC8vIFRoZSBwYWxldHRlIHR5cGUsIGNhbiBiZSBsaWdodCBvciBkYXJrLlxuICAgIHR5cGU6IHR5cGUsXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBwcmltYXJ5IGludGVyZmFjZSBlbGVtZW50cyBmb3IgYSB1c2VyLlxuICAgIHByaW1hcnk6IGF1Z21lbnRDb2xvcihwcmltYXJ5KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHNlY29uZGFyeSBpbnRlcmZhY2UgZWxlbWVudHMgZm9yIGEgdXNlci5cbiAgICBzZWNvbmRhcnk6IGF1Z21lbnRDb2xvcihzZWNvbmRhcnksICdBNDAwJywgJ0EyMDAnLCAnQTcwMCcpLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgaW50ZXJmYWNlIGVsZW1lbnRzIHRoYXQgdGhlIHVzZXIgc2hvdWxkIGJlIG1hZGUgYXdhcmUgb2YuXG4gICAgZXJyb3I6IGF1Z21lbnRDb2xvcihlcnJvciksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBwb3RlbnRpYWxseSBkYW5nZXJvdXMgYWN0aW9ucyBvciBpbXBvcnRhbnQgbWVzc2FnZXMuXG4gICAgd2FybmluZzogYXVnbWVudENvbG9yKHdhcm5pbmcpLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBwcmVzZW50IGluZm9ybWF0aW9uIHRvIHRoZSB1c2VyIHRoYXQgaXMgbmV1dHJhbCBhbmQgbm90IG5lY2Vzc2FyaWx5IGltcG9ydGFudC5cbiAgICBpbmZvOiBhdWdtZW50Q29sb3IoaW5mbyksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIGluZGljYXRlIHRoZSBzdWNjZXNzZnVsIGNvbXBsZXRpb24gb2YgYW4gYWN0aW9uIHRoYXQgdXNlciB0cmlnZ2VyZWQuXG4gICAgc3VjY2VzczogYXVnbWVudENvbG9yKHN1Y2Nlc3MpLFxuICAgIC8vIFRoZSBncmV5IGNvbG9ycy5cbiAgICBncmV5OiBfZ3JleS5kZWZhdWx0LFxuICAgIC8vIFVzZWQgYnkgYGdldENvbnRyYXN0VGV4dCgpYCB0byBtYXhpbWl6ZSB0aGUgY29udHJhc3QgYmV0d2VlblxuICAgIC8vIHRoZSBiYWNrZ3JvdW5kIGFuZCB0aGUgdGV4dC5cbiAgICBjb250cmFzdFRocmVzaG9sZDogY29udHJhc3RUaHJlc2hvbGQsXG4gICAgLy8gVGFrZXMgYSBiYWNrZ3JvdW5kIGNvbG9yIGFuZCByZXR1cm5zIHRoZSB0ZXh0IGNvbG9yIHRoYXQgbWF4aW1pemVzIHRoZSBjb250cmFzdC5cbiAgICBnZXRDb250cmFzdFRleHQ6IGdldENvbnRyYXN0VGV4dCxcbiAgICAvLyBHZW5lcmF0ZSBhIHJpY2ggY29sb3Igb2JqZWN0LlxuICAgIGF1Z21lbnRDb2xvcjogYXVnbWVudENvbG9yLFxuICAgIC8vIFVzZWQgYnkgdGhlIGZ1bmN0aW9ucyBiZWxvdyB0byBzaGlmdCBhIGNvbG9yJ3MgbHVtaW5hbmNlIGJ5IGFwcHJveGltYXRlbHlcbiAgICAvLyB0d28gaW5kZXhlcyB3aXRoaW4gaXRzIHRvbmFsIHBhbGV0dGUuXG4gICAgLy8gRS5nLiwgc2hpZnQgZnJvbSBSZWQgNTAwIHRvIFJlZCAzMDAgb3IgUmVkIDcwMC5cbiAgICB0b25hbE9mZnNldDogdG9uYWxPZmZzZXRcbiAgfSwgdHlwZXNbdHlwZV0pLCBvdGhlcik7XG4gIHJldHVybiBwYWxldHRlT3V0cHV0O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlU3BhY2luZztcblxudmFyIF9zeXN0ZW0gPSByZXF1aXJlKFwiQG1hdGVyaWFsLXVpL3N5c3RlbVwiKTtcblxudmFyIHdhcm5PbmNlO1xuXG5mdW5jdGlvbiBjcmVhdGVTcGFjaW5nKCkge1xuICB2YXIgc3BhY2luZ0lucHV0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiA4O1xuXG4gIC8vIEFscmVhZHkgdHJhbnNmb3JtZWQuXG4gIGlmIChzcGFjaW5nSW5wdXQubXVpKSB7XG4gICAgcmV0dXJuIHNwYWNpbmdJbnB1dDtcbiAgfSAvLyBNYXRlcmlhbCBEZXNpZ24gbGF5b3V0cyBhcmUgdmlzdWFsbHkgYmFsYW5jZWQuIE1vc3QgbWVhc3VyZW1lbnRzIGFsaWduIHRvIGFuIDhkcCBncmlkIGFwcGxpZWQsIHdoaWNoIGFsaWducyBib3RoIHNwYWNpbmcgYW5kIHRoZSBvdmVyYWxsIGxheW91dC5cbiAgLy8gU21hbGxlciBjb21wb25lbnRzLCBzdWNoIGFzIGljb25zIGFuZCB0eXBlLCBjYW4gYWxpZ24gdG8gYSA0ZHAgZ3JpZC5cbiAgLy8gaHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vbGF5b3V0L3VuZGVyc3RhbmRpbmctbGF5b3V0Lmh0bWwjdXNhZ2VcblxuXG4gIHZhciB0cmFuc2Zvcm0gPSAoMCwgX3N5c3RlbS5jcmVhdGVVbmFyeVNwYWNpbmcpKHtcbiAgICBzcGFjaW5nOiBzcGFjaW5nSW5wdXRcbiAgfSk7XG5cbiAgdmFyIHNwYWNpbmcgPSBmdW5jdGlvbiBzcGFjaW5nKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCEoYXJncy5sZW5ndGggPD0gNCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiBUb28gbWFueSBhcmd1bWVudHMgcHJvdmlkZWQsIGV4cGVjdGVkIGJldHdlZW4gMCBhbmQgNCwgZ290IFwiLmNvbmNhdChhcmdzLmxlbmd0aCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRyYW5zZm9ybSgxKTtcbiAgICB9XG5cbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiB0cmFuc2Zvcm0oYXJnc1swXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFyZ3MubWFwKGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50O1xuICAgICAgfVxuXG4gICAgICB2YXIgb3V0cHV0ID0gdHJhbnNmb3JtKGFyZ3VtZW50KTtcbiAgICAgIHJldHVybiB0eXBlb2Ygb3V0cHV0ID09PSAnbnVtYmVyJyA/IFwiXCIuY29uY2F0KG91dHB1dCwgXCJweFwiKSA6IG91dHB1dDtcbiAgICB9KS5qb2luKCcgJyk7XG4gIH07IC8vIEJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRvIHJlbW92ZSBpbiB2NS5cblxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzcGFjaW5nLCAndW5pdCcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICghd2Fybk9uY2UgfHwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0Jykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogdGhlbWUuc3BhY2luZy51bml0IHVzYWdlIGhhcyBiZWVuIGRlcHJlY2F0ZWQuJywgJ0l0IHdpbGwgYmUgcmVtb3ZlZCBpbiB2NS4nLCAnWW91IGNhbiByZXBsYWNlIGB0aGVtZS5zcGFjaW5nLnVuaXQgKiB5YCB3aXRoIGB0aGVtZS5zcGFjaW5nKHkpYC4nLCAnJywgJ1lvdSBjYW4gdXNlIHRoZSBgaHR0cHM6Ly9naXRodWIuY29tL211aS1vcmcvbWF0ZXJpYWwtdWkvdHJlZS9tYXN0ZXIvcGFja2FnZXMvbWF0ZXJpYWwtdWktY29kZW1vZC9SRUFETUUubWQjdGhlbWUtc3BhY2luZy1hcGlgIG1pZ3JhdGlvbiBoZWxwZXIgdG8gbWFrZSB0aGUgcHJvY2VzcyBzbW9vdGhlci4nXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cblxuICAgICAgICB3YXJuT25jZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzcGFjaW5nSW5wdXQ7XG4gICAgfVxuICB9KTtcbiAgc3BhY2luZy5tdWkgPSB0cnVlO1xuICByZXR1cm4gc3BhY2luZztcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVN0eWxlcztcblxudmFyIF9zdHlsZXMgPSByZXF1aXJlKFwiQG1hdGVyaWFsLXVpL3N0eWxlc1wiKTtcblxuLy8gbGV0IHdhcm5PbmNlID0gZmFsc2U7XG4vLyBUbyByZW1vdmUgaW4gdjVcbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlcyhzdHlsZXMpIHtcbiAgLy8gd2FybmluZyhcbiAgLy8gICB3YXJuT25jZSxcbiAgLy8gICBbXG4gIC8vICAgICAnTWF0ZXJpYWwtVUk6IGNyZWF0ZVN0eWxlcyBmcm9tIEBtYXRlcmlhbC11aS9jb3JlL3N0eWxlcyBpcyBkZXByZWNhdGVkLicsXG4gIC8vICAgICAnUGxlYXNlIHVzZSBAbWF0ZXJpYWwtdWkvc3R5bGVzL2NyZWF0ZVN0eWxlcycsXG4gIC8vICAgXS5qb2luKCdcXG4nKSxcbiAgLy8gKTtcbiAgLy8gd2Fybk9uY2UgPSB0cnVlO1xuICByZXR1cm4gKDAsIF9zdHlsZXMuY3JlYXRlU3R5bGVzKShzdHlsZXMpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVR5cG9ncmFwaHk7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBtYXRlcmlhbC11aS91dGlsc1wiKTtcblxuZnVuY3Rpb24gcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxZTUpIC8gMWU1O1xufVxuXG52YXIgY2FzZUFsbENhcHMgPSB7XG4gIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnXG59O1xudmFyIGRlZmF1bHRGb250RmFtaWx5ID0gJ1wiUm9ib3RvXCIsIFwiSGVsdmV0aWNhXCIsIFwiQXJpYWxcIiwgc2Fucy1zZXJpZic7XG4vKipcbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS90aGUtdHlwZS1zeXN0ZW0uaHRtbH1cbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS91bmRlcnN0YW5kaW5nLXR5cG9ncmFwaHkuaHRtbH1cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHkpIHtcbiAgdmFyIF9yZWYgPSB0eXBlb2YgdHlwb2dyYXBoeSA9PT0gJ2Z1bmN0aW9uJyA/IHR5cG9ncmFwaHkocGFsZXR0ZSkgOiB0eXBvZ3JhcGh5LFxuICAgICAgX3JlZiRmb250RmFtaWx5ID0gX3JlZi5mb250RmFtaWx5LFxuICAgICAgZm9udEZhbWlseSA9IF9yZWYkZm9udEZhbWlseSA9PT0gdm9pZCAwID8gZGVmYXVsdEZvbnRGYW1pbHkgOiBfcmVmJGZvbnRGYW1pbHksXG4gICAgICBfcmVmJGZvbnRTaXplID0gX3JlZi5mb250U2l6ZSxcbiAgICAgIGZvbnRTaXplID0gX3JlZiRmb250U2l6ZSA9PT0gdm9pZCAwID8gMTQgOiBfcmVmJGZvbnRTaXplLFxuICAgICAgX3JlZiRmb250V2VpZ2h0TGlnaHQgPSBfcmVmLmZvbnRXZWlnaHRMaWdodCxcbiAgICAgIGZvbnRXZWlnaHRMaWdodCA9IF9yZWYkZm9udFdlaWdodExpZ2h0ID09PSB2b2lkIDAgPyAzMDAgOiBfcmVmJGZvbnRXZWlnaHRMaWdodCxcbiAgICAgIF9yZWYkZm9udFdlaWdodFJlZ3VsYSA9IF9yZWYuZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgICBmb250V2VpZ2h0UmVndWxhciA9IF9yZWYkZm9udFdlaWdodFJlZ3VsYSA9PT0gdm9pZCAwID8gNDAwIDogX3JlZiRmb250V2VpZ2h0UmVndWxhLFxuICAgICAgX3JlZiRmb250V2VpZ2h0TWVkaXVtID0gX3JlZi5mb250V2VpZ2h0TWVkaXVtLFxuICAgICAgZm9udFdlaWdodE1lZGl1bSA9IF9yZWYkZm9udFdlaWdodE1lZGl1bSA9PT0gdm9pZCAwID8gNTAwIDogX3JlZiRmb250V2VpZ2h0TWVkaXVtLFxuICAgICAgX3JlZiRmb250V2VpZ2h0Qm9sZCA9IF9yZWYuZm9udFdlaWdodEJvbGQsXG4gICAgICBmb250V2VpZ2h0Qm9sZCA9IF9yZWYkZm9udFdlaWdodEJvbGQgPT09IHZvaWQgMCA/IDcwMCA6IF9yZWYkZm9udFdlaWdodEJvbGQsXG4gICAgICBfcmVmJGh0bWxGb250U2l6ZSA9IF9yZWYuaHRtbEZvbnRTaXplLFxuICAgICAgaHRtbEZvbnRTaXplID0gX3JlZiRodG1sRm9udFNpemUgPT09IHZvaWQgMCA/IDE2IDogX3JlZiRodG1sRm9udFNpemUsXG4gICAgICBhbGxWYXJpYW50cyA9IF9yZWYuYWxsVmFyaWFudHMsXG4gICAgICBweFRvUmVtMiA9IF9yZWYucHhUb1JlbSxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkoX3JlZiwgW1wiZm9udEZhbWlseVwiLCBcImZvbnRTaXplXCIsIFwiZm9udFdlaWdodExpZ2h0XCIsIFwiZm9udFdlaWdodFJlZ3VsYXJcIiwgXCJmb250V2VpZ2h0TWVkaXVtXCIsIFwiZm9udFdlaWdodEJvbGRcIiwgXCJodG1sRm9udFNpemVcIiwgXCJhbGxWYXJpYW50c1wiLCBcInB4VG9SZW1cIl0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBmb250U2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBgZm9udFNpemVgIGlzIHJlcXVpcmVkIHRvIGJlIGEgbnVtYmVyLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaHRtbEZvbnRTaXplICE9PSAnbnVtYmVyJykge1xuICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IGBodG1sRm9udFNpemVgIGlzIHJlcXVpcmVkIHRvIGJlIGEgbnVtYmVyLicpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb2VmID0gZm9udFNpemUgLyAxNDtcblxuICB2YXIgcHhUb1JlbSA9IHB4VG9SZW0yIHx8IGZ1bmN0aW9uIChzaXplKSB7XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KHNpemUgLyBodG1sRm9udFNpemUgKiBjb2VmLCBcInJlbVwiKTtcbiAgfTtcblxuICB2YXIgYnVpbGRWYXJpYW50ID0gZnVuY3Rpb24gYnVpbGRWYXJpYW50KGZvbnRXZWlnaHQsIHNpemUsIGxpbmVIZWlnaHQsIGxldHRlclNwYWNpbmcsIGNhc2luZykge1xuICAgIHJldHVybiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0LFxuICAgICAgZm9udFNpemU6IHB4VG9SZW0oc2l6ZSksXG4gICAgICAvLyBVbml0bGVzcyBmb2xsb3dpbmcgaHR0cHM6Ly9tZXllcndlYi5jb20vZXJpYy90aG91Z2h0cy8yMDA2LzAyLzA4L3VuaXRsZXNzLWxpbmUtaGVpZ2h0cy9cbiAgICAgIGxpbmVIZWlnaHQ6IGxpbmVIZWlnaHRcbiAgICB9LCBmb250RmFtaWx5ID09PSBkZWZhdWx0Rm9udEZhbWlseSA/IHtcbiAgICAgIGxldHRlclNwYWNpbmc6IFwiXCIuY29uY2F0KHJvdW5kKGxldHRlclNwYWNpbmcgLyBzaXplKSwgXCJlbVwiKVxuICAgIH0gOiB7fSwgY2FzaW5nLCBhbGxWYXJpYW50cyk7XG4gIH07XG5cbiAgdmFyIHZhcmlhbnRzID0ge1xuICAgIGgxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodExpZ2h0LCA5NiwgMS4xNjcsIC0xLjUpLFxuICAgIGgyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodExpZ2h0LCA2MCwgMS4yLCAtMC41KSxcbiAgICBoMzogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCA0OCwgMS4xNjcsIDApLFxuICAgIGg0OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDM0LCAxLjIzNSwgMC4yNSksXG4gICAgaDU6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMjQsIDEuMzM0LCAwKSxcbiAgICBoNjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDIwLCAxLjYsIDAuMTUpLFxuICAgIHN1YnRpdGxlMTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNiwgMS43NSwgMC4xNSksXG4gICAgc3VidGl0bGUyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMTQsIDEuNTcsIDAuMSksXG4gICAgYm9keTE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTYsIDEuNSwgMC4xNSksXG4gICAgYm9keTI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTQsIDEuNDMsIDAuMTUpLFxuICAgIGJ1dHRvbjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjc1LCAwLjQsIGNhc2VBbGxDYXBzKSxcbiAgICBjYXB0aW9uOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAxLjY2LCAwLjQpLFxuICAgIG92ZXJsaW5lOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAyLjY2LCAxLCBjYXNlQWxsQ2FwcylcbiAgfTtcbiAgcmV0dXJuICgwLCBfdXRpbHMuZGVlcG1lcmdlKSgoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBodG1sRm9udFNpemU6IGh0bWxGb250U2l6ZSxcbiAgICBweFRvUmVtOiBweFRvUmVtLFxuICAgIHJvdW5kOiByb3VuZCxcbiAgICAvLyBUT0RPIHY1OiByZW1vdmVcbiAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgIGZvbnRTaXplOiBmb250U2l6ZSxcbiAgICBmb250V2VpZ2h0TGlnaHQ6IGZvbnRXZWlnaHRMaWdodCxcbiAgICBmb250V2VpZ2h0UmVndWxhcjogZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgZm9udFdlaWdodE1lZGl1bTogZm9udFdlaWdodE1lZGl1bSxcbiAgICBmb250V2VpZ2h0Qm9sZDogZm9udFdlaWdodEJvbGRcbiAgfSwgdmFyaWFudHMpLCBvdGhlciwge1xuICAgIGNsb25lOiBmYWxzZSAvLyBObyBuZWVkIHRvIGNsb25lIGRlZXBcblxuICB9KTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY3JlYXRlTXVpVGhlbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZU11aVRoZW1lXCIpKTtcblxudmFyIGRlZmF1bHRUaGVtZSA9ICgwLCBfY3JlYXRlTXVpVGhlbWUuZGVmYXVsdCkoKTtcbnZhciBfZGVmYXVsdCA9IGRlZmF1bHRUaGVtZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfc3R5bGVzID0gcmVxdWlyZShcIkBtYXRlcmlhbC11aS9zdHlsZXNcIik7XG5cbnZhciBfZGVmYXVsdFRoZW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9kZWZhdWx0VGhlbWVcIikpO1xuXG5mdW5jdGlvbiBtYWtlU3R5bGVzKHN0eWxlc09yQ3JlYXRvcikge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHJldHVybiAoMCwgX3N0eWxlcy5tYWtlU3R5bGVzKShzdHlsZXNPckNyZWF0b3IsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGRlZmF1bHRUaGVtZTogX2RlZmF1bHRUaGVtZS5kZWZhdWx0XG4gIH0sIG9wdGlvbnMpKTtcbn1cblxudmFyIF9kZWZhdWx0ID0gbWFrZVN0eWxlcztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIHNoYWRvd0tleVVtYnJhT3BhY2l0eSA9IDAuMjtcbnZhciBzaGFkb3dLZXlQZW51bWJyYU9wYWNpdHkgPSAwLjE0O1xudmFyIHNoYWRvd0FtYmllbnRTaGFkb3dPcGFjaXR5ID0gMC4xMjtcblxuZnVuY3Rpb24gY3JlYXRlU2hhZG93KCkge1xuICByZXR1cm4gW1wiXCIuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1syXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1szXSwgXCJweCByZ2JhKDAsMCwwLFwiKS5jb25jYXQoc2hhZG93S2V5VW1icmFPcGFjaXR5LCBcIilcIiksIFwiXCIuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s0XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s1XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s2XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s3XSwgXCJweCByZ2JhKDAsMCwwLFwiKS5jb25jYXQoc2hhZG93S2V5UGVudW1icmFPcGFjaXR5LCBcIilcIiksIFwiXCIuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gOCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s4XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gOSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s5XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMTAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMTBdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAxMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxMV0sIFwicHggcmdiYSgwLDAsMCxcIikuY29uY2F0KHNoYWRvd0FtYmllbnRTaGFkb3dPcGFjaXR5LCBcIilcIildLmpvaW4oJywnKTtcbn0gLy8gVmFsdWVzIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWNvbXBvbmVudHMvbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIvYmxvYi9iZTg3NDdmOTQ1NzQ2NjljYjVlN2FkZDFhN2M1NGZhNDFhODljZWM3L3BhY2thZ2VzL21kYy1lbGV2YXRpb24vX3ZhcmlhYmxlcy5zY3NzXG5cblxudmFyIHNoYWRvd3MgPSBbJ25vbmUnLCBjcmVhdGVTaGFkb3coMCwgMiwgMSwgLTEsIDAsIDEsIDEsIDAsIDAsIDEsIDMsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMSwgLTIsIDAsIDIsIDIsIDAsIDAsIDEsIDUsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMywgLTIsIDAsIDMsIDQsIDAsIDAsIDEsIDgsIDApLCBjcmVhdGVTaGFkb3coMCwgMiwgNCwgLTEsIDAsIDQsIDUsIDAsIDAsIDEsIDEwLCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDUsIC0xLCAwLCA1LCA4LCAwLCAwLCAxLCAxNCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNiwgMTAsIDAsIDAsIDEsIDE4LCAwKSwgY3JlYXRlU2hhZG93KDAsIDQsIDUsIC0yLCAwLCA3LCAxMCwgMSwgMCwgMiwgMTYsIDEpLCBjcmVhdGVTaGFkb3coMCwgNSwgNSwgLTMsIDAsIDgsIDEwLCAxLCAwLCAzLCAxNCwgMiksIGNyZWF0ZVNoYWRvdygwLCA1LCA2LCAtMywgMCwgOSwgMTIsIDEsIDAsIDMsIDE2LCAyKSwgY3JlYXRlU2hhZG93KDAsIDYsIDYsIC0zLCAwLCAxMCwgMTQsIDEsIDAsIDQsIDE4LCAzKSwgY3JlYXRlU2hhZG93KDAsIDYsIDcsIC00LCAwLCAxMSwgMTUsIDEsIDAsIDQsIDIwLCAzKSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMiwgMTcsIDIsIDAsIDUsIDIyLCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMywgMTksIDIsIDAsIDUsIDI0LCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDksIC00LCAwLCAxNCwgMjEsIDIsIDAsIDUsIDI2LCA0KSwgY3JlYXRlU2hhZG93KDAsIDgsIDksIC01LCAwLCAxNSwgMjIsIDIsIDAsIDYsIDI4LCA1KSwgY3JlYXRlU2hhZG93KDAsIDgsIDEwLCAtNSwgMCwgMTYsIDI0LCAyLCAwLCA2LCAzMCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMSwgLTUsIDAsIDE3LCAyNiwgMiwgMCwgNiwgMzIsIDUpLCBjcmVhdGVTaGFkb3coMCwgOSwgMTEsIC01LCAwLCAxOCwgMjgsIDIsIDAsIDcsIDM0LCA2KSwgY3JlYXRlU2hhZG93KDAsIDksIDEyLCAtNiwgMCwgMTksIDI5LCAyLCAwLCA3LCAzNiwgNiksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMCwgMzEsIDMsIDAsIDgsIDM4LCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxMywgLTYsIDAsIDIxLCAzMywgMywgMCwgOCwgNDAsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDE0LCAtNiwgMCwgMjIsIDM1LCAzLCAwLCA4LCA0MiwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTQsIC03LCAwLCAyMywgMzYsIDMsIDAsIDksIDQ0LCA4KSwgY3JlYXRlU2hhZG93KDAsIDExLCAxNSwgLTcsIDAsIDI0LCAzOCwgMywgMCwgOSwgNDYsIDgpXTtcbnZhciBfZGVmYXVsdCA9IHNoYWRvd3M7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBzaGFwZSA9IHtcbiAgYm9yZGVyUmFkaXVzOiA0XG59O1xudmFyIF9kZWZhdWx0ID0gc2hhcGU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmR1cmF0aW9uID0gZXhwb3J0cy5lYXNpbmcgPSB2b2lkIDA7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbi8vIEZvbGxvdyBodHRwczovL21hdGVyaWFsLmdvb2dsZS5jb20vbW90aW9uL2R1cmF0aW9uLWVhc2luZy5odG1sI2R1cmF0aW9uLWVhc2luZy1uYXR1cmFsLWVhc2luZy1jdXJ2ZXNcbi8vIHRvIGxlYXJuIHRoZSBjb250ZXh0IGluIHdoaWNoIGVhY2ggZWFzaW5nIHNob3VsZCBiZSB1c2VkLlxudmFyIGVhc2luZyA9IHtcbiAgLy8gVGhpcyBpcyB0aGUgbW9zdCBjb21tb24gZWFzaW5nIGN1cnZlLlxuICBlYXNlSW5PdXQ6ICdjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpJyxcbiAgLy8gT2JqZWN0cyBlbnRlciB0aGUgc2NyZWVuIGF0IGZ1bGwgdmVsb2NpdHkgZnJvbSBvZmYtc2NyZWVuIGFuZFxuICAvLyBzbG93bHkgZGVjZWxlcmF0ZSB0byBhIHJlc3RpbmcgcG9pbnQuXG4gIGVhc2VPdXQ6ICdjdWJpYy1iZXppZXIoMC4wLCAwLCAwLjIsIDEpJyxcbiAgLy8gT2JqZWN0cyBsZWF2ZSB0aGUgc2NyZWVuIGF0IGZ1bGwgdmVsb2NpdHkuIFRoZXkgZG8gbm90IGRlY2VsZXJhdGUgd2hlbiBvZmYtc2NyZWVuLlxuICBlYXNlSW46ICdjdWJpYy1iZXppZXIoMC40LCAwLCAxLCAxKScsXG4gIC8vIFRoZSBzaGFycCBjdXJ2ZSBpcyB1c2VkIGJ5IG9iamVjdHMgdGhhdCBtYXkgcmV0dXJuIHRvIHRoZSBzY3JlZW4gYXQgYW55IHRpbWUuXG4gIHNoYXJwOiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC42LCAxKSdcbn07IC8vIEZvbGxvdyBodHRwczovL21hdGVyaWFsLmlvL2d1aWRlbGluZXMvbW90aW9uL2R1cmF0aW9uLWVhc2luZy5odG1sI2R1cmF0aW9uLWVhc2luZy1jb21tb24tZHVyYXRpb25zXG4vLyB0byBsZWFybiB3aGVuIHVzZSB3aGF0IHRpbWluZ1xuXG5leHBvcnRzLmVhc2luZyA9IGVhc2luZztcbnZhciBkdXJhdGlvbiA9IHtcbiAgc2hvcnRlc3Q6IDE1MCxcbiAgc2hvcnRlcjogMjAwLFxuICBzaG9ydDogMjUwLFxuICAvLyBtb3N0IGJhc2ljIHJlY29tbWVuZGVkIHRpbWluZ1xuICBzdGFuZGFyZDogMzAwLFxuICAvLyB0aGlzIGlzIHRvIGJlIHVzZWQgaW4gY29tcGxleCBhbmltYXRpb25zXG4gIGNvbXBsZXg6IDM3NSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgZW50ZXJpbmcgc2NyZWVuXG4gIGVudGVyaW5nU2NyZWVuOiAyMjUsXG4gIC8vIHJlY29tbWVuZGVkIHdoZW4gc29tZXRoaW5nIGlzIGxlYXZpbmcgc2NyZWVuXG4gIGxlYXZpbmdTY3JlZW46IDE5NVxufTtcbmV4cG9ydHMuZHVyYXRpb24gPSBkdXJhdGlvbjtcblxuZnVuY3Rpb24gZm9ybWF0TXMobWlsbGlzZWNvbmRzKSB7XG4gIHJldHVybiBcIlwiLmNvbmNhdChNYXRoLnJvdW5kKG1pbGxpc2Vjb25kcyksIFwibXNcIik7XG59XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfEFycmF5fSBwcm9wc1xuICogQHBhcmFtIHtvYmplY3R9IHBhcmFtXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyYW0ucHJvcFxuICogQHBhcmFtIHtudW1iZXJ9IHBhcmFtLmR1cmF0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyYW0uZWFzaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gcGFyYW0uZGVsYXlcbiAqL1xuXG5cbnZhciBfZGVmYXVsdCA9IHtcbiAgZWFzaW5nOiBlYXNpbmcsXG4gIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbJ2FsbCddO1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgX29wdGlvbnMkZHVyYXRpb24gPSBvcHRpb25zLmR1cmF0aW9uLFxuICAgICAgICBkdXJhdGlvbk9wdGlvbiA9IF9vcHRpb25zJGR1cmF0aW9uID09PSB2b2lkIDAgPyBkdXJhdGlvbi5zdGFuZGFyZCA6IF9vcHRpb25zJGR1cmF0aW9uLFxuICAgICAgICBfb3B0aW9ucyRlYXNpbmcgPSBvcHRpb25zLmVhc2luZyxcbiAgICAgICAgZWFzaW5nT3B0aW9uID0gX29wdGlvbnMkZWFzaW5nID09PSB2b2lkIDAgPyBlYXNpbmcuZWFzZUluT3V0IDogX29wdGlvbnMkZWFzaW5nLFxuICAgICAgICBfb3B0aW9ucyRkZWxheSA9IG9wdGlvbnMuZGVsYXksXG4gICAgICAgIGRlbGF5ID0gX29wdGlvbnMkZGVsYXkgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyRkZWxheSxcbiAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShvcHRpb25zLCBbXCJkdXJhdGlvblwiLCBcImVhc2luZ1wiLCBcImRlbGF5XCJdKTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaXNTdHJpbmcgPSBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbiAgICAgIH07XG5cbiAgICAgIHZhciBpc051bWJlciA9IGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpO1xuICAgICAgfTtcblxuICAgICAgaWYgKCFpc1N0cmluZyhwcm9wcykgJiYgIUFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBBcmd1bWVudCBcInByb3BzXCIgbXVzdCBiZSBhIHN0cmluZyBvciBBcnJheS4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc051bWJlcihkdXJhdGlvbk9wdGlvbikgJiYgIWlzU3RyaW5nKGR1cmF0aW9uT3B0aW9uKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IEFyZ3VtZW50IFxcXCJkdXJhdGlvblxcXCIgbXVzdCBiZSBhIG51bWJlciBvciBhIHN0cmluZyBidXQgZm91bmQgXCIuY29uY2F0KGR1cmF0aW9uT3B0aW9uLCBcIi5cIikpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzU3RyaW5nKGVhc2luZ09wdGlvbikpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IEFyZ3VtZW50IFwiZWFzaW5nXCIgbXVzdCBiZSBhIHN0cmluZy4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc051bWJlcihkZWxheSkgJiYgIWlzU3RyaW5nKGRlbGF5KSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogQXJndW1lbnQgXCJkZWxheVwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChPYmplY3Qua2V5cyhvdGhlcikubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXRlcmlhbC1VSTogVW5yZWNvZ25pemVkIGFyZ3VtZW50KHMpIFtcIi5jb25jYXQoT2JqZWN0LmtleXMob3RoZXIpLmpvaW4oJywnKSwgXCJdLlwiKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChBcnJheS5pc0FycmF5KHByb3BzKSA/IHByb3BzIDogW3Byb3BzXSkubWFwKGZ1bmN0aW9uIChhbmltYXRlZFByb3ApIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChhbmltYXRlZFByb3AsIFwiIFwiKS5jb25jYXQodHlwZW9mIGR1cmF0aW9uT3B0aW9uID09PSAnc3RyaW5nJyA/IGR1cmF0aW9uT3B0aW9uIDogZm9ybWF0TXMoZHVyYXRpb25PcHRpb24pLCBcIiBcIikuY29uY2F0KGVhc2luZ09wdGlvbiwgXCIgXCIpLmNvbmNhdCh0eXBlb2YgZGVsYXkgPT09ICdzdHJpbmcnID8gZGVsYXkgOiBmb3JtYXRNcyhkZWxheSkpO1xuICAgIH0pLmpvaW4oJywnKTtcbiAgfSxcbiAgZ2V0QXV0b0hlaWdodER1cmF0aW9uOiBmdW5jdGlvbiBnZXRBdXRvSGVpZ2h0RHVyYXRpb24oaGVpZ2h0KSB7XG4gICAgaWYgKCFoZWlnaHQpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHZhciBjb25zdGFudCA9IGhlaWdodCAvIDM2OyAvLyBodHRwczovL3d3dy53b2xmcmFtYWxwaGEuY29tL2lucHV0Lz9pPSg0KyUyQisxNSsqKyh4KyUyRiszNispKyoqKzAuMjUrJTJCKyh4KyUyRiszNikrJTJGKzUpKyorMTBcblxuICAgIHJldHVybiBNYXRoLnJvdW5kKCg0ICsgMTUgKiBNYXRoLnBvdyhjb25zdGFudCwgMC4yNSkgKyBjb25zdGFudCAvIDUpICogMTApO1xuICB9XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdXNlVGhlbWU7XG5cbnZhciBfc3R5bGVzID0gcmVxdWlyZShcIkBtYXRlcmlhbC11aS9zdHlsZXNcIik7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfZGVmYXVsdFRoZW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9kZWZhdWx0VGhlbWVcIikpO1xuXG5mdW5jdGlvbiB1c2VUaGVtZSgpIHtcbiAgdmFyIHRoZW1lID0gKDAsIF9zdHlsZXMudXNlVGhlbWUpKCkgfHwgX2RlZmF1bHRUaGVtZS5kZWZhdWx0O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgX3JlYWN0LmRlZmF1bHQudXNlRGVidWdWYWx1ZSh0aGVtZSk7XG4gIH1cblxuICByZXR1cm4gdGhlbWU7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG4vLyBXZSBuZWVkIHRvIGNlbnRyYWxpemUgdGhlIHpJbmRleCBkZWZpbml0aW9ucyBhcyB0aGV5IHdvcmtcbi8vIGxpa2UgZ2xvYmFsIHZhbHVlcyBpbiB0aGUgYnJvd3Nlci5cbnZhciB6SW5kZXggPSB7XG4gIG1vYmlsZVN0ZXBwZXI6IDEwMDAsXG4gIHNwZWVkRGlhbDogMTA1MCxcbiAgYXBwQmFyOiAxMTAwLFxuICBkcmF3ZXI6IDEyMDAsXG4gIG1vZGFsOiAxMzAwLFxuICBzbmFja2JhcjogMTQwMCxcbiAgdG9vbHRpcDogMTUwMFxufTtcbnZhciBfZGVmYXVsdCA9IHpJbmRleDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZXhhY3RQcm9wIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSBmcm9tICcuLi9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSc7XG5pbXBvcnQgeyBjcmVhdGUgfSBmcm9tICdqc3MnO1xuaW1wb3J0IGpzc1ByZXNldCBmcm9tICcuLi9qc3NQcmVzZXQnOyAvLyBEZWZhdWx0IEpTUyBpbnN0YW5jZS5cblxudmFyIGpzcyA9IGNyZWF0ZShqc3NQcmVzZXQoKSk7IC8vIFVzZSBhIHNpbmdsZXRvbiBvciB0aGUgcHJvdmlkZWQgb25lIGJ5IHRoZSBjb250ZXh0LlxuLy9cbi8vIFRoZSBjb3VudGVyLWJhc2VkIGFwcHJvYWNoIGRvZXNuJ3QgdG9sZXJhdGUgYW55IG1pc3Rha2UuXG4vLyBJdCdzIG11Y2ggc2FmZXIgdG8gdXNlIHRoZSBzYW1lIGNvdW50ZXIgZXZlcnl3aGVyZS5cblxudmFyIGdlbmVyYXRlQ2xhc3NOYW1lID0gY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUoKTsgLy8gRXhwb3J0ZWQgZm9yIHRlc3QgcHVycG9zZXNcblxuZXhwb3J0IHZhciBzaGVldHNNYW5hZ2VyID0gbmV3IE1hcCgpO1xudmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICBkaXNhYmxlR2VuZXJhdGlvbjogZmFsc2UsXG4gIGdlbmVyYXRlQ2xhc3NOYW1lOiBnZW5lcmF0ZUNsYXNzTmFtZSxcbiAganNzOiBqc3MsXG4gIHNoZWV0c0NhY2hlOiBudWxsLFxuICBzaGVldHNNYW5hZ2VyOiBzaGVldHNNYW5hZ2VyLFxuICBzaGVldHNSZWdpc3RyeTogbnVsbFxufTtcbmV4cG9ydCB2YXIgU3R5bGVzQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoZGVmYXVsdE9wdGlvbnMpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBTdHlsZXNDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1N0eWxlc0NvbnRleHQnO1xufVxuXG52YXIgaW5qZWN0Rmlyc3ROb2RlO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU3R5bGVzUHJvdmlkZXIocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBfcHJvcHMkaW5qZWN0Rmlyc3QgPSBwcm9wcy5pbmplY3RGaXJzdCxcbiAgICAgIGluamVjdEZpcnN0ID0gX3Byb3BzJGluamVjdEZpcnN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRpbmplY3RGaXJzdCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlR2VuZXJhdCA9IHByb3BzLmRpc2FibGVHZW5lcmF0aW9uLFxuICAgICAgZGlzYWJsZUdlbmVyYXRpb24gPSBfcHJvcHMkZGlzYWJsZUdlbmVyYXQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVHZW5lcmF0LFxuICAgICAgbG9jYWxPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImluamVjdEZpcnN0XCIsIFwiZGlzYWJsZUdlbmVyYXRpb25cIl0pO1xuXG4gIHZhciBvdXRlck9wdGlvbnMgPSBSZWFjdC51c2VDb250ZXh0KFN0eWxlc0NvbnRleHQpO1xuXG4gIHZhciBjb250ZXh0ID0gX2V4dGVuZHMoe30sIG91dGVyT3B0aW9ucywge1xuICAgIGRpc2FibGVHZW5lcmF0aW9uOiBkaXNhYmxlR2VuZXJhdGlvblxuICB9LCBsb2NhbE9wdGlvbnMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnICYmICFjb250ZXh0LnNoZWV0c01hbmFnZXIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBZb3UgbmVlZCB0byB1c2UgdGhlIFNlcnZlclN0eWxlU2hlZXRzIEFQSSB3aGVuIHJlbmRlcmluZyBvbiB0aGUgc2VydmVyLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGNvbnRleHQuanNzLm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgJiYgaW5qZWN0Rmlyc3QpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBZb3UgY2Fubm90IHVzZSBhIGN1c3RvbSBpbnNlcnRpb25Qb2ludCBhbmQgPFN0eWxlc0NvbnRleHQgaW5qZWN0Rmlyc3Q+IGF0IHRoZSBzYW1lIHRpbWUuJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoaW5qZWN0Rmlyc3QgJiYgbG9jYWxPcHRpb25zLmpzcykge1xuICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IFlvdSBjYW5ub3QgdXNlIHRoZSBqc3MgYW5kIGluamVjdEZpcnN0IHByb3BzIGF0IHRoZSBzYW1lIHRpbWUuJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb250ZXh0Lmpzcy5vcHRpb25zLmluc2VydGlvblBvaW50ICYmIGluamVjdEZpcnN0ICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKCFpbmplY3RGaXJzdE5vZGUpIHtcbiAgICAgIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZDtcbiAgICAgIGluamVjdEZpcnN0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJ211aS1pbmplY3QtZmlyc3QnKTtcbiAgICAgIGhlYWQuaW5zZXJ0QmVmb3JlKGluamVjdEZpcnN0Tm9kZSwgaGVhZC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBjb250ZXh0LmpzcyA9IGNyZWF0ZSh7XG4gICAgICBwbHVnaW5zOiBqc3NQcmVzZXQoKS5wbHVnaW5zLFxuICAgICAgaW5zZXJ0aW9uUG9pbnQ6IGluamVjdEZpcnN0Tm9kZVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFN0eWxlc0NvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dFxuICB9LCBjaGlsZHJlbik7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdHlsZXNQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBZb3VyIGNvbXBvbmVudCB0cmVlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFlvdSBjYW4gZGlzYWJsZSB0aGUgZ2VuZXJhdGlvbiBvZiB0aGUgc3R5bGVzIHdpdGggdGhpcyBvcHRpb24uXG4gICAqIEl0IGNhbiBiZSB1c2VmdWwgd2hlbiB0cmF2ZXJzaW5nIHRoZSBSZWFjdCB0cmVlIG91dHNpZGUgb2YgdGhlIEhUTUxcbiAgICogcmVuZGVyaW5nIHN0ZXAgb24gdGhlIHNlcnZlci5cbiAgICogTGV0J3Mgc2F5IHlvdSBhcmUgdXNpbmcgcmVhY3QtYXBvbGxvIHRvIGV4dHJhY3QgYWxsXG4gICAqIHRoZSBxdWVyaWVzIG1hZGUgYnkgdGhlIGludGVyZmFjZSBzZXJ2ZXItc2lkZSAtIHlvdSBjYW4gc2lnbmlmaWNhbnRseSBzcGVlZCB1cCB0aGUgdHJhdmVyc2FsIHdpdGggdGhpcyBwcm9wLlxuICAgKi9cbiAgZGlzYWJsZUdlbmVyYXRpb246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBKU1MncyBjbGFzcyBuYW1lIGdlbmVyYXRvci5cbiAgICovXG4gIGdlbmVyYXRlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCwgdGhlIHN0eWxlcyBhcmUgaW5qZWN0ZWQgbGFzdCBpbiB0aGUgPGhlYWQ+IGVsZW1lbnQgb2YgdGhlIHBhZ2UuXG4gICAqIEFzIGEgcmVzdWx0LCB0aGV5IGdhaW4gbW9yZSBzcGVjaWZpY2l0eSB0aGFuIGFueSBvdGhlciBzdHlsZSBzaGVldC5cbiAgICogSWYgeW91IHdhbnQgdG8gb3ZlcnJpZGUgTWF0ZXJpYWwtVUkncyBzdHlsZXMsIHNldCB0aGlzIHByb3AuXG4gICAqL1xuICBpbmplY3RGaXJzdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEpTUydzIGluc3RhbmNlLlxuICAgKi9cbiAganNzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzZXJ2ZXJHZW5lcmF0ZUNsYXNzTmFtZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICpcbiAgICogQmV0YSBmZWF0dXJlLlxuICAgKlxuICAgKiBDYWNoZSBmb3IgdGhlIHNoZWV0cy5cbiAgICovXG4gIHNoZWV0c0NhY2hlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqXG4gICAqIFRoZSBzaGVldHNNYW5hZ2VyIGlzIHVzZWQgdG8gZGVkdXBsaWNhdGUgc3R5bGUgc2hlZXQgaW5qZWN0aW9uIGluIHRoZSBwYWdlLlxuICAgKiBJdCdzIGRlZHVwbGljYXRpbmcgdXNpbmcgdGhlICh0aGVtZSwgc3R5bGVzKSBjb3VwbGUuXG4gICAqIE9uIHRoZSBzZXJ2ZXIsIHlvdSBzaG91bGQgcHJvdmlkZSBhIG5ldyBpbnN0YW5jZSBmb3IgZWFjaCByZXF1ZXN0LlxuICAgKi9cbiAgc2hlZXRzTWFuYWdlcjogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKlxuICAgKiBDb2xsZWN0IHRoZSBzaGVldHMuXG4gICAqL1xuICBzaGVldHNSZWdpc3RyeTogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3R5bGVzUHJvdmlkZXIucHJvcFR5cGVzID0gZXhhY3RQcm9wKFN0eWxlc1Byb3ZpZGVyLnByb3BUeXBlcykgOiB2b2lkIDA7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGV4YWN0UHJvcCB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgVGhlbWVDb250ZXh0IGZyb20gJy4uL3VzZVRoZW1lL1RoZW1lQ29udGV4dCc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vdXNlVGhlbWUnO1xuaW1wb3J0IG5lc3RlZCBmcm9tICcuL25lc3RlZCc7IC8vIFRvIHN1cHBvcnQgY29tcG9zaXRpb24gb2YgdGhlbWUuXG5cbmZ1bmN0aW9uIG1lcmdlT3V0ZXJMb2NhbFRoZW1lKG91dGVyVGhlbWUsIGxvY2FsVGhlbWUpIHtcbiAgaWYgKHR5cGVvZiBsb2NhbFRoZW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIG1lcmdlZFRoZW1lID0gbG9jYWxUaGVtZShvdXRlclRoZW1lKTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIW1lcmdlZFRoZW1lKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogWW91IHNob3VsZCByZXR1cm4gYW4gb2JqZWN0IGZyb20geW91ciB0aGVtZSBmdW5jdGlvbiwgaS5lLicsICc8VGhlbWVQcm92aWRlciB0aGVtZT17KCkgPT4gKHt9KX0gLz4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlZFRoZW1lO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvdXRlclRoZW1lLCBsb2NhbFRoZW1lKTtcbn1cbi8qKlxuICogVGhpcyBjb21wb25lbnQgdGFrZXMgYSBgdGhlbWVgIHByb3AuXG4gKiBJdCBtYWtlcyB0aGUgYHRoZW1lYCBhdmFpbGFibGUgZG93biB0aGUgUmVhY3QgdHJlZSB0aGFua3MgdG8gUmVhY3QgY29udGV4dC5cbiAqIFRoaXMgY29tcG9uZW50IHNob3VsZCBwcmVmZXJhYmx5IGJlIHVzZWQgYXQgKip0aGUgcm9vdCBvZiB5b3VyIGNvbXBvbmVudCB0cmVlKiouXG4gKi9cblxuXG5mdW5jdGlvbiBUaGVtZVByb3ZpZGVyKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgbG9jYWxUaGVtZSA9IHByb3BzLnRoZW1lO1xuICB2YXIgb3V0ZXJUaGVtZSA9IHVzZVRoZW1lKCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAob3V0ZXJUaGVtZSA9PT0gbnVsbCAmJiB0eXBlb2YgbG9jYWxUaGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBZb3UgYXJlIHByb3ZpZGluZyBhIHRoZW1lIGZ1bmN0aW9uIHByb3AgdG8gdGhlIFRoZW1lUHJvdmlkZXIgY29tcG9uZW50OicsICc8VGhlbWVQcm92aWRlciB0aGVtZT17b3V0ZXJUaGVtZSA9PiBvdXRlclRoZW1lfSAvPicsICcnLCAnSG93ZXZlciwgbm8gb3V0ZXIgdGhlbWUgaXMgcHJlc2VudC4nLCAnTWFrZSBzdXJlIGEgdGhlbWUgaXMgYWxyZWFkeSBpbmplY3RlZCBoaWdoZXIgaW4gdGhlIFJlYWN0IHRyZWUgJyArICdvciBwcm92aWRlIGEgdGhlbWUgb2JqZWN0LiddLmpvaW4oJ1xcbicpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgdGhlbWUgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3V0cHV0ID0gb3V0ZXJUaGVtZSA9PT0gbnVsbCA/IGxvY2FsVGhlbWUgOiBtZXJnZU91dGVyTG9jYWxUaGVtZShvdXRlclRoZW1lLCBsb2NhbFRoZW1lKTtcblxuICAgIGlmIChvdXRwdXQgIT0gbnVsbCkge1xuICAgICAgb3V0cHV0W25lc3RlZF0gPSBvdXRlclRoZW1lICE9PSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH0sIFtsb2NhbFRoZW1lLCBvdXRlclRoZW1lXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUaGVtZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogdGhlbWVcbiAgfSwgY2hpbGRyZW4pO1xufVxuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUaGVtZVByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFlvdXIgY29tcG9uZW50IHRyZWUuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQSB0aGVtZSBvYmplY3QuIFlvdSBjYW4gcHJvdmlkZSBhIGZ1bmN0aW9uIHRvIGV4dGVuZCB0aGUgb3V0ZXIgdGhlbWUuXG4gICAqL1xuICB0aGVtZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmZ1bmNdKS5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUaGVtZVByb3ZpZGVyLnByb3BUeXBlcyA9IGV4YWN0UHJvcChUaGVtZVByb3ZpZGVyLnByb3BUeXBlcykgOiB2b2lkIDA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRoZW1lUHJvdmlkZXI7IiwidmFyIGhhc1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvcjtcbmV4cG9ydCBkZWZhdWx0IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ211aS5uZXN0ZWQnKSA6ICdfX1RIRU1FX05FU1RFRF9fJzsiLCJpbXBvcnQgbmVzdGVkIGZyb20gJy4uL1RoZW1lUHJvdmlkZXIvbmVzdGVkJztcbi8qKlxuICogVGhpcyBpcyB0aGUgbGlzdCBvZiB0aGUgc3R5bGUgcnVsZSBuYW1lIHdlIHVzZSBhcyBkcm9wIGluIHJlcGxhY2VtZW50IGZvciB0aGUgYnVpbHQtaW5cbiAqIHBzZXVkbyBjbGFzc2VzICg6Y2hlY2tlZCwgOmRpc2FibGVkLCA6Zm9jdXNlZCwgZXRjLikuXG4gKlxuICogV2h5IGRvIHRoZXkgZXhpc3QgaW4gdGhlIGZpcnN0IHBsYWNlP1xuICogVGhlc2UgY2xhc3NlcyBhcmUgdXNlZCBhdCBhIHNwZWNpZmljaXR5IG9mIDIuXG4gKiBJdCBhbGxvd3MgdGhlbSB0byBvdmVycmlkZSBwcmV2aW91c2x5IGRlZmluaWVkIHN0eWxlcyBhcyB3ZWxsIGFzXG4gKiBiZWluZyB1bnRvdWNoZWQgYnkgc2ltcGxlIHVzZXIgb3ZlcnJpZGVzLlxuICovXG5cbnZhciBwc2V1ZG9DbGFzc2VzID0gWydjaGVja2VkJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2ZvY3VzZWQnLCAnZm9jdXNWaXNpYmxlJywgJ3JlcXVpcmVkJywgJ2V4cGFuZGVkJywgJ3NlbGVjdGVkJ107IC8vIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCBnZW5lcmF0ZXMgdW5pcXVlIGNsYXNzIG5hbWVzIGJhc2VkIG9uIGNvdW50ZXJzLlxuLy8gV2hlbiBuZXcgZ2VuZXJhdG9yIGZ1bmN0aW9uIGlzIGNyZWF0ZWQsIHJ1bGUgY291bnRlciBpcyByZXNldC5cbi8vIFdlIG5lZWQgdG8gcmVzZXQgdGhlIHJ1bGUgY291bnRlciBmb3IgU1NSIGZvciBlYWNoIHJlcXVlc3QuXG4vL1xuLy8gSXQncyBpbnNwaXJlZCBieVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2Jsb2IvNGU2YTA1ZGQzZjdiNjU3MmZkZDNhYjIxNjg2MWQ5ZTQ0NmMyMDMzMS9zcmMvdXRpbHMvY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUuanNcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUoKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIF9vcHRpb25zJGRpc2FibGVHbG9iYSA9IG9wdGlvbnMuZGlzYWJsZUdsb2JhbCxcbiAgICAgIGRpc2FibGVHbG9iYWwgPSBfb3B0aW9ucyRkaXNhYmxlR2xvYmEgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZGlzYWJsZUdsb2JhLFxuICAgICAgX29wdGlvbnMkcHJvZHVjdGlvblByID0gb3B0aW9ucy5wcm9kdWN0aW9uUHJlZml4LFxuICAgICAgcHJvZHVjdGlvblByZWZpeCA9IF9vcHRpb25zJHByb2R1Y3Rpb25QciA9PT0gdm9pZCAwID8gJ2pzcycgOiBfb3B0aW9ucyRwcm9kdWN0aW9uUHIsXG4gICAgICBfb3B0aW9ucyRzZWVkID0gb3B0aW9ucy5zZWVkLFxuICAgICAgc2VlZCA9IF9vcHRpb25zJHNlZWQgPT09IHZvaWQgMCA/ICcnIDogX29wdGlvbnMkc2VlZDtcbiAgdmFyIHNlZWRQcmVmaXggPSBzZWVkID09PSAnJyA/ICcnIDogXCJcIi5jb25jYXQoc2VlZCwgXCItXCIpO1xuICB2YXIgcnVsZUNvdW50ZXIgPSAwO1xuXG4gIHZhciBnZXROZXh0Q291bnRlcklkID0gZnVuY3Rpb24gZ2V0TmV4dENvdW50ZXJJZCgpIHtcbiAgICBydWxlQ291bnRlciArPSAxO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChydWxlQ291bnRlciA+PSAxZTEwKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihbJ01hdGVyaWFsLVVJOiBZb3UgbWlnaHQgaGF2ZSBhIG1lbW9yeSBsZWFrLicsICdUaGUgcnVsZUNvdW50ZXIgaXMgbm90IHN1cHBvc2VkIHRvIGdyb3cgdGhhdCBtdWNoLiddLmpvaW4oJycpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcnVsZUNvdW50ZXI7XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChydWxlLCBzdHlsZVNoZWV0KSB7XG4gICAgdmFyIG5hbWUgPSBzdHlsZVNoZWV0Lm9wdGlvbnMubmFtZTsgLy8gSXMgYSBnbG9iYWwgc3RhdGljIE1VSSBzdHlsZT9cblxuICAgIGlmIChuYW1lICYmIG5hbWUuaW5kZXhPZignTXVpJykgPT09IDAgJiYgIXN0eWxlU2hlZXQub3B0aW9ucy5saW5rICYmICFkaXNhYmxlR2xvYmFsKSB7XG4gICAgICAvLyBXZSBjYW4gdXNlIGEgc2hvcnRoYW5kIGNsYXNzIG5hbWUsIHdlIG5ldmVyIHVzZSB0aGUga2V5cyB0byBzdHlsZSB0aGUgY29tcG9uZW50cy5cbiAgICAgIGlmIChwc2V1ZG9DbGFzc2VzLmluZGV4T2YocnVsZS5rZXkpICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gXCJNdWktXCIuY29uY2F0KHJ1bGUua2V5KTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZWZpeCA9IFwiXCIuY29uY2F0KHNlZWRQcmVmaXgpLmNvbmNhdChuYW1lLCBcIi1cIikuY29uY2F0KHJ1bGUua2V5KTtcblxuICAgICAgaWYgKCFzdHlsZVNoZWV0Lm9wdGlvbnMudGhlbWVbbmVzdGVkXSB8fCBzZWVkICE9PSAnJykge1xuICAgICAgICByZXR1cm4gcHJlZml4O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQocHJlZml4LCBcIi1cIikuY29uY2F0KGdldE5leHRDb3VudGVySWQoKSk7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChzZWVkUHJlZml4KS5jb25jYXQocHJvZHVjdGlvblByZWZpeCkuY29uY2F0KGdldE5leHRDb3VudGVySWQoKSk7XG4gICAgfVxuXG4gICAgdmFyIHN1ZmZpeCA9IFwiXCIuY29uY2F0KHJ1bGUua2V5LCBcIi1cIikuY29uY2F0KGdldE5leHRDb3VudGVySWQoKSk7IC8vIEhlbHAgd2l0aCBkZWJ1Z2dhYmlsaXR5LlxuXG4gICAgaWYgKHN0eWxlU2hlZXQub3B0aW9ucy5jbGFzc05hbWVQcmVmaXgpIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChzZWVkUHJlZml4KS5jb25jYXQoc3R5bGVTaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeCwgXCItXCIpLmNvbmNhdChzdWZmaXgpO1xuICAgIH1cblxuICAgIHJldHVybiBcIlwiLmNvbmNhdChzZWVkUHJlZml4KS5jb25jYXQoc3VmZml4KTtcbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdHlsZXMoc3R5bGVzKSB7XG4gIHJldHVybiBzdHlsZXM7XG59IiwiLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1zeW50YXggKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRoZW1lUHJvcHMocGFyYW1zKSB7XG4gIHZhciB0aGVtZSA9IHBhcmFtcy50aGVtZSxcbiAgICAgIG5hbWUgPSBwYXJhbXMubmFtZSxcbiAgICAgIHByb3BzID0gcGFyYW1zLnByb3BzO1xuXG4gIGlmICghdGhlbWUgfHwgIXRoZW1lLnByb3BzIHx8ICF0aGVtZS5wcm9wc1tuYW1lXSkge1xuICAgIHJldHVybiBwcm9wcztcbiAgfSAvLyBSZXNvbHZlIGRlZmF1bHQgcHJvcHMsIGNvZGUgYm9ycm93IGZyb20gUmVhY3Qgc291cmNlLlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi8xNWE4ZjAzMTgzOGE1NTNlNDFjMGI2NmViMWJjZjFkYTg0NDgxMDRkL3BhY2thZ2VzL3JlYWN0L3NyYy9SZWFjdEVsZW1lbnQuanMjTDIyMVxuXG5cbiAgdmFyIGRlZmF1bHRQcm9wcyA9IHRoZW1lLnByb3BzW25hbWVdO1xuICB2YXIgcHJvcE5hbWU7XG5cbiAgZm9yIChwcm9wTmFtZSBpbiBkZWZhdWx0UHJvcHMpIHtcbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHByb3BzO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU2hlZXRzUmVnaXN0cnkgfSBmcm9tICdqc3MnO1xuaW1wb3J0IFN0eWxlc1Byb3ZpZGVyIGZyb20gJy4uL1N0eWxlc1Byb3ZpZGVyJztcbmltcG9ydCBjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSBmcm9tICcuLi9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSc7XG5cbnZhciBTZXJ2ZXJTdHlsZVNoZWV0cyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNlcnZlclN0eWxlU2hlZXRzKCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTZXJ2ZXJTdHlsZVNoZWV0cyk7XG5cbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNlcnZlclN0eWxlU2hlZXRzLCBbe1xuICAgIGtleTogXCJjb2xsZWN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbGxlY3QoY2hpbGRyZW4pIHtcbiAgICAgIC8vIFRoaXMgaXMgbmVlZGVkIGluIG9yZGVyIHRvIGRlZHVwbGljYXRlIHRoZSBpbmplY3Rpb24gb2YgQ1NTIGluIHRoZSBwYWdlLlxuICAgICAgdmFyIHNoZWV0c01hbmFnZXIgPSBuZXcgTWFwKCk7IC8vIFRoaXMgaXMgbmVlZGVkIGluIG9yZGVyIHRvIGluamVjdCB0aGUgY3JpdGljYWwgQ1NTLlxuXG4gICAgICB0aGlzLnNoZWV0c1JlZ2lzdHJ5ID0gbmV3IFNoZWV0c1JlZ2lzdHJ5KCk7IC8vIEEgbmV3IGNsYXNzIG5hbWUgZ2VuZXJhdG9yXG5cbiAgICAgIHZhciBnZW5lcmF0ZUNsYXNzTmFtZSA9IGNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lKCk7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoU3R5bGVzUHJvdmlkZXIsIF9leHRlbmRzKHtcbiAgICAgICAgc2hlZXRzTWFuYWdlcjogc2hlZXRzTWFuYWdlcixcbiAgICAgICAgc2VydmVyR2VuZXJhdGVDbGFzc05hbWU6IGdlbmVyYXRlQ2xhc3NOYW1lLFxuICAgICAgICBzaGVldHNSZWdpc3RyeTogdGhpcy5zaGVldHNSZWdpc3RyeVxuICAgICAgfSwgdGhpcy5vcHRpb25zKSwgY2hpbGRyZW4pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0b1N0cmluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiB0aGlzLnNoZWV0c1JlZ2lzdHJ5ID8gdGhpcy5zaGVldHNSZWdpc3RyeS50b1N0cmluZygpIDogJyc7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFN0eWxlRWxlbWVudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTdHlsZUVsZW1lbnQocHJvcHMpIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgnc3R5bGUnLCBfZXh0ZW5kcyh7XG4gICAgICAgIGlkOiAnanNzLXNlcnZlci1zaWRlJyxcbiAgICAgICAga2V5OiAnanNzLXNlcnZlci1zaWRlJyxcbiAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHtcbiAgICAgICAgICBfX2h0bWw6IHRoaXMudG9TdHJpbmcoKVxuICAgICAgICB9XG4gICAgICB9LCBwcm9wcykpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTZXJ2ZXJTdHlsZVNoZWV0cztcbn0oKTtcblxuZXhwb3J0IHsgU2VydmVyU3R5bGVTaGVldHMgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcywgZ2V0RGlzcGxheU5hbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IGhvaXN0Tm9uUmVhY3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBtYWtlU3R5bGVzIGZyb20gJy4uL21ha2VTdHlsZXMnO1xuXG5mdW5jdGlvbiBvbWl0KGlucHV0LCBmaWVsZHMpIHtcbiAgdmFyIG91dHB1dCA9IHt9O1xuICBPYmplY3Qua2V5cyhpbnB1dCkuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIGlmIChmaWVsZHMuaW5kZXhPZihwcm9wKSA9PT0gLTEpIHtcbiAgICAgIG91dHB1dFtwcm9wXSA9IGlucHV0W3Byb3BdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59IC8vIHN0eWxlZC1jb21wb25lbnRzJ3MgQVBJIHJlbW92ZXMgdGhlIG1hcHBpbmcgYmV0d2VlbiBjb21wb25lbnRzIGFuZCBzdHlsZXMuXG4vLyBVc2luZyBjb21wb25lbnRzIGFzIGEgbG93LWxldmVsIHN0eWxpbmcgY29uc3RydWN0IGNhbiBiZSBzaW1wbGVyLlxuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0eWxlZChDb21wb25lbnQpIHtcbiAgdmFyIGNvbXBvbmVudENyZWF0b3IgPSBmdW5jdGlvbiBjb21wb25lbnRDcmVhdG9yKHN0eWxlKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUsXG4gICAgICAgIHN0eWxlc09wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgW1wibmFtZVwiXSk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBDb21wb25lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFsnWW91IGFyZSBjYWxsaW5nIHN0eWxlZChDb21wb25lbnQpKHN0eWxlKSB3aXRoIGFuIHVuZGVmaW5lZCBjb21wb25lbnQuJywgJ1lvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gaW1wb3J0IGl0LiddLmpvaW4oJ1xcbicpKTtcbiAgICB9XG5cbiAgICB2YXIgY2xhc3NOYW1lUHJlZml4ID0gbmFtZTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgLy8gUHJvdmlkZSBhIGJldHRlciBEWCBvdXRzaWRlIHByb2R1Y3Rpb24uXG4gICAgICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKENvbXBvbmVudCk7XG5cbiAgICAgICAgaWYgKGRpc3BsYXlOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjbGFzc05hbWVQcmVmaXggPSBkaXNwbGF5TmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzdHlsZXNPckNyZWF0b3IgPSB0eXBlb2Ygc3R5bGUgPT09ICdmdW5jdGlvbicgPyBmdW5jdGlvbiAodGhlbWUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJvb3Q6IGZ1bmN0aW9uIHJvb3QocHJvcHMpIHtcbiAgICAgICAgICByZXR1cm4gc3R5bGUoX2V4dGVuZHMoe1xuICAgICAgICAgICAgdGhlbWU6IHRoZW1lXG4gICAgICAgICAgfSwgcHJvcHMpKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IDoge1xuICAgICAgcm9vdDogc3R5bGVcbiAgICB9O1xuICAgIHZhciB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKHN0eWxlc09yQ3JlYXRvciwgX2V4dGVuZHMoe1xuICAgICAgQ29tcG9uZW50OiBDb21wb25lbnQsXG4gICAgICBuYW1lOiBuYW1lIHx8IENvbXBvbmVudC5kaXNwbGF5TmFtZSxcbiAgICAgIGNsYXNzTmFtZVByZWZpeDogY2xhc3NOYW1lUHJlZml4XG4gICAgfSwgc3R5bGVzT3B0aW9ucykpO1xuICAgIHZhciBmaWx0ZXJQcm9wcztcbiAgICB2YXIgcHJvcFR5cGVzID0ge307XG5cbiAgICBpZiAoc3R5bGUuZmlsdGVyUHJvcHMpIHtcbiAgICAgIGZpbHRlclByb3BzID0gc3R5bGUuZmlsdGVyUHJvcHM7XG4gICAgICBkZWxldGUgc3R5bGUuZmlsdGVyUHJvcHM7XG4gICAgfVxuICAgIC8qIGVzbGludC1kaXNhYmxlIHJlYWN0L2ZvcmJpZC1mb3JlaWduLXByb3AtdHlwZXMgKi9cblxuXG4gICAgaWYgKHN0eWxlLnByb3BUeXBlcykge1xuICAgICAgcHJvcFR5cGVzID0gc3R5bGUucHJvcFR5cGVzO1xuICAgICAgZGVsZXRlIHN0eWxlLnByb3BUeXBlcztcbiAgICB9XG4gICAgLyogZXNsaW50LWVuYWJsZSByZWFjdC9mb3JiaWQtZm9yZWlnbi1wcm9wLXR5cGVzICovXG5cblxuICAgIHZhciBTdHlsZWRDb21wb25lbnQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTdHlsZWRDb21wb25lbnQocHJvcHMsIHJlZikge1xuICAgICAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBjbG9uZSA9IHByb3BzLmNsb25lLFxuICAgICAgICAgIENvbXBvbmVudFByb3AgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2xvbmVcIiwgXCJjb21wb25lbnRcIl0pO1xuXG4gICAgICB2YXIgY2xhc3NlcyA9IHVzZVN0eWxlcyhwcm9wcyk7XG4gICAgICB2YXIgY2xhc3NOYW1lID0gY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZVByb3ApO1xuICAgICAgdmFyIHNwcmVhZCA9IG90aGVyO1xuXG4gICAgICBpZiAoZmlsdGVyUHJvcHMpIHtcbiAgICAgICAgc3ByZWFkID0gb21pdChzcHJlYWQsIGZpbHRlclByb3BzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNsb25lKSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBfZXh0ZW5kcyh7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbHN4KGNoaWxkcmVuLnByb3BzLmNsYXNzTmFtZSwgY2xhc3NOYW1lKVxuICAgICAgICB9LCBzcHJlYWQpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gY2hpbGRyZW4oX2V4dGVuZHMoe1xuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgICAgIH0sIHNwcmVhZCkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgRmluYWxDb21wb25lbnQgPSBDb21wb25lbnRQcm9wIHx8IENvbXBvbmVudDtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGaW5hbENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgICByZWY6IHJlZixcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgICAgIH0sIHNwcmVhZCksIGNoaWxkcmVuKTtcbiAgICB9KTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdHlsZWRDb21wb25lbnQucHJvcFR5cGVzID0gX2V4dGVuZHMoe1xuICAgICAgLyoqXG4gICAgICAgKiBBIHJlbmRlciBmdW5jdGlvbiBvciBub2RlLlxuICAgICAgICovXG4gICAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm5vZGUsIFByb3BUeXBlcy5mdW5jXSksXG5cbiAgICAgIC8qKlxuICAgICAgICogQGlnbm9yZVxuICAgICAgICovXG4gICAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAgIC8qKlxuICAgICAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgcmVjeWNsZSBpdCdzIGNoaWxkcmVuIEhUTUwgZWxlbWVudC5cbiAgICAgICAqIEl0J3MgdXNpbmcgYFJlYWN0LmNsb25lRWxlbWVudGAgaW50ZXJuYWxseS5cbiAgICAgICAqXG4gICAgICAgKiBUaGlzIHByb3Agd2lsbCBiZSBkZXByZWNhdGVkIGFuZCByZW1vdmVkIGluIHY1XG4gICAgICAgKi9cbiAgICAgIGNsb25lOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMuYm9vbCwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIGlmIChwcm9wcy5jbG9uZSAmJiBwcm9wcy5jb21wb25lbnQpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdZb3UgY2FuIG5vdCB1c2UgdGhlIGNsb25lIGFuZCBjb21wb25lbnQgcHJvcCBhdCB0aGUgc2FtZSB0aW1lLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9KSxcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAgICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgICAgICovXG4gICAgICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAgICAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAgICAgLmVsZW1lbnRUeXBlXG4gICAgfSwgcHJvcFR5cGVzKSA6IHZvaWQgMDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBTdHlsZWRDb21wb25lbnQuZGlzcGxheU5hbWUgPSBcIlN0eWxlZChcIi5jb25jYXQoY2xhc3NOYW1lUHJlZml4LCBcIilcIik7XG4gICAgfVxuXG4gICAgaG9pc3ROb25SZWFjdFN0YXRpY3MoU3R5bGVkQ29tcG9uZW50LCBDb21wb25lbnQpO1xuICAgIHJldHVybiBTdHlsZWRDb21wb25lbnQ7XG4gIH07XG5cbiAgcmV0dXJuIGNvbXBvbmVudENyZWF0b3I7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgaG9pc3ROb25SZWFjdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMsIGdldERpc3BsYXlOYW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91c2VUaGVtZSc7XG5leHBvcnQgZnVuY3Rpb24gd2l0aFRoZW1lQ3JlYXRvcigpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgZGVmYXVsdFRoZW1lID0gb3B0aW9ucy5kZWZhdWx0VGhlbWU7XG5cbiAgdmFyIHdpdGhUaGVtZSA9IGZ1bmN0aW9uIHdpdGhUaGVtZShDb21wb25lbnQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKENvbXBvbmVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihbJ1lvdSBhcmUgY2FsbGluZyB3aXRoVGhlbWUoQ29tcG9uZW50KSB3aXRoIGFuIHVuZGVmaW5lZCBjb21wb25lbnQuJywgJ1lvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gaW1wb3J0IGl0LiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgV2l0aFRoZW1lID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gV2l0aFRoZW1lKHByb3BzLCByZWYpIHtcbiAgICAgIHZhciBpbm5lclJlZiA9IHByb3BzLmlubmVyUmVmLFxuICAgICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJpbm5lclJlZlwiXSk7XG5cbiAgICAgIHZhciB0aGVtZSA9IHVzZVRoZW1lKCkgfHwgZGVmYXVsdFRoZW1lO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgICB0aGVtZTogdGhlbWUsXG4gICAgICAgIHJlZjogaW5uZXJSZWYgfHwgcmVmXG4gICAgICB9LCBvdGhlcikpO1xuICAgIH0pO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFdpdGhUaGVtZS5wcm9wVHlwZXMgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFVzZSB0aGF0IHByb3AgdG8gcGFzcyBhIHJlZiB0byB0aGUgZGVjb3JhdGVkIGNvbXBvbmVudC5cbiAgICAgICAqIEBkZXByZWNhdGVkXG4gICAgICAgKi9cbiAgICAgIGlubmVyUmVmOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLCBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgaWYgKHByb3BzLmlubmVyUmVmID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hdGVyaWFsLVVJOiBUaGUgYGlubmVyUmVmYCBwcm9wIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2NS4gJyArICdSZWZzIGFyZSBub3cgYXV0b21hdGljYWxseSBmb3J3YXJkZWQgdG8gdGhlIGlubmVyIGNvbXBvbmVudC4nKTtcbiAgICAgIH0pXG4gICAgfSA6IHZvaWQgMDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBXaXRoVGhlbWUuZGlzcGxheU5hbWUgPSBcIldpdGhUaGVtZShcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIpXCIpO1xuICAgIH1cblxuICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFdpdGhUaGVtZSwgQ29tcG9uZW50KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBFeHBvc2VkIGZvciB0ZXN0IHB1cnBvc2VzLlxuICAgICAgV2l0aFRoZW1lLk5ha2VkID0gQ29tcG9uZW50O1xuICAgIH1cblxuICAgIHJldHVybiBXaXRoVGhlbWU7XG4gIH07XG5cbiAgcmV0dXJuIHdpdGhUaGVtZTtcbn0gLy8gUHJvdmlkZSB0aGUgdGhlbWUgb2JqZWN0IGFzIGEgcHJvcCB0byB0aGUgaW5wdXQgY29tcG9uZW50LlxuLy8gSXQncyBhbiBhbHRlcm5hdGl2ZSBBUEkgdG8gdXNlVGhlbWUoKS5cbi8vIFdlIGVuY291cmFnZSB0aGUgdXNhZ2Ugb2YgdXNlVGhlbWUoKSB3aGVyZSBwb3NzaWJsZS5cblxudmFyIHdpdGhUaGVtZSA9IHdpdGhUaGVtZUNyZWF0b3IoKTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZTsiLCJpbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IHsgY3JlYXRlUnVsZSB9IGZyb20gJ2pzcyc7XG5cbnZhciBub3cgPSBEYXRlLm5vdygpO1xudmFyIGZuVmFsdWVzTnMgPSBcImZuVmFsdWVzXCIgKyBub3c7XG52YXIgZm5SdWxlTnMgPSBcImZuU3R5bGVcIiArICsrbm93O1xuXG52YXIgZnVuY3Rpb25QbHVnaW4gPSBmdW5jdGlvbiBmdW5jdGlvblBsdWdpbigpIHtcbiAgcmV0dXJuIHtcbiAgICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gICAgICBpZiAodHlwZW9mIGRlY2wgIT09ICdmdW5jdGlvbicpIHJldHVybiBudWxsO1xuICAgICAgdmFyIHJ1bGUgPSBjcmVhdGVSdWxlKG5hbWUsIHt9LCBvcHRpb25zKTtcbiAgICAgIHJ1bGVbZm5SdWxlTnNdID0gZGVjbDtcbiAgICAgIHJldHVybiBydWxlO1xuICAgIH0sXG4gICAgb25Qcm9jZXNzU3R5bGU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIGV4dHJhY3QgZnVuY3Rpb24gdmFsdWVzIGZyb20gdGhlIGRlY2xhcmF0aW9uLCBzbyB0aGF0IHdlIGNhbiBrZWVwIGNvcmUgdW5hd2FyZSBvZiB0aGVtLlxuICAgICAgLy8gV2UgbmVlZCB0byBkbyB0aGF0IG9ubHkgb25jZS5cbiAgICAgIC8vIFdlIGRvbid0IG5lZWQgdG8gZXh0cmFjdCBmdW5jdGlvbnMgb24gZWFjaCBzdHlsZSB1cGRhdGUsIHNpbmNlIHRoaXMgY2FuIGhhcHBlbiBvbmx5IG9uY2UuXG4gICAgICAvLyBXZSBkb24ndCBzdXBwb3J0IGZ1bmN0aW9uIHZhbHVlcyBpbnNpZGUgb2YgZnVuY3Rpb24gcnVsZXMuXG4gICAgICBpZiAoZm5WYWx1ZXNOcyBpbiBydWxlIHx8IGZuUnVsZU5zIGluIHJ1bGUpIHJldHVybiBzdHlsZTtcbiAgICAgIHZhciBmblZhbHVlcyA9IHt9O1xuXG4gICAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHN0eWxlW3Byb3BdO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nKSBjb250aW51ZTtcbiAgICAgICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgICAgICBmblZhbHVlc1twcm9wXSA9IHZhbHVlO1xuICAgICAgfSAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuXG4gICAgICBydWxlW2ZuVmFsdWVzTnNdID0gZm5WYWx1ZXM7XG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfSxcbiAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoZGF0YSwgcnVsZSwgc2hlZXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBzdHlsZVJ1bGUgPSBydWxlOyAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuICAgICAgdmFyIGZuUnVsZSA9IHN0eWxlUnVsZVtmblJ1bGVOc107IC8vIElmIHdlIGhhdmUgYSBzdHlsZSBmdW5jdGlvbiwgdGhlIGVudGlyZSBydWxlIGlzIGR5bmFtaWMgYW5kIHN0eWxlIG9iamVjdFxuICAgICAgLy8gd2lsbCBiZSByZXR1cm5lZCBmcm9tIHRoYXQgZnVuY3Rpb24uXG5cbiAgICAgIGlmIChmblJ1bGUpIHtcbiAgICAgICAgLy8gRW1wdHkgb2JqZWN0IHdpbGwgcmVtb3ZlIGFsbCBjdXJyZW50bHkgZGVmaW5lZCBwcm9wc1xuICAgICAgICAvLyBpbiBjYXNlIGZ1bmN0aW9uIHJ1bGUgcmV0dXJucyBhIGZhbHN5IHZhbHVlLlxuICAgICAgICBzdHlsZVJ1bGUuc3R5bGUgPSBmblJ1bGUoZGF0YSkgfHwge307XG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZVJ1bGUuc3R5bGUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3R5bGVSdWxlLnN0eWxlW3Byb3BdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdbSlNTXSBGdW5jdGlvbiB2YWx1ZXMgaW5zaWRlIGZ1bmN0aW9uIHJ1bGVzIGFyZSBub3Qgc3VwcG9ydGVkLicpIDogdm9pZCAwO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG5cblxuICAgICAgdmFyIGZuVmFsdWVzID0gc3R5bGVSdWxlW2ZuVmFsdWVzTnNdOyAvLyBJZiB3ZSBoYXZlIGEgZm4gdmFsdWVzIG1hcCwgaXQgaXMgYSBydWxlIHdpdGggZnVuY3Rpb24gdmFsdWVzLlxuXG4gICAgICBpZiAoZm5WYWx1ZXMpIHtcbiAgICAgICAgZm9yICh2YXIgX3Byb3AgaW4gZm5WYWx1ZXMpIHtcbiAgICAgICAgICBzdHlsZVJ1bGUucHJvcChfcHJvcCwgZm5WYWx1ZXNbX3Byb3BdKGRhdGEpLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uUGx1Z2luO1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHsgUnVsZUxpc3QgfSBmcm9tICdqc3MnO1xuXG52YXIgYXQgPSAnQGdsb2JhbCc7XG52YXIgYXRQcmVmaXggPSAnQGdsb2JhbCAnO1xuXG52YXIgR2xvYmFsQ29udGFpbmVyUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdsb2JhbENvbnRhaW5lclJ1bGUoa2V5LCBzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnZ2xvYmFsJztcbiAgICB0aGlzLmF0ID0gYXQ7XG4gICAgdGhpcy5ydWxlcyA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBSdWxlTGlzdChfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuXG4gICAgZm9yICh2YXIgc2VsZWN0b3IgaW4gc3R5bGVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChzZWxlY3Rvciwgc3R5bGVzW3NlbGVjdG9yXSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHJ1bGUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEdsb2JhbENvbnRhaW5lclJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRSdWxlID0gZnVuY3Rpb24gZ2V0UnVsZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIHJlZ2lzdGVyIHJ1bGUsIHJ1biBwbHVnaW5zLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRSdWxlID0gZnVuY3Rpb24gYWRkUnVsZShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHZhciBydWxlID0gdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICAgIGlmIChydWxlKSB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnMub25Qcm9jZXNzUnVsZShydWxlKTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICAvKipcbiAgICogR2V0IGluZGV4IG9mIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YocnVsZSkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLmluZGV4T2YocnVsZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMudG9TdHJpbmcoKTtcbiAgfTtcblxuICByZXR1cm4gR2xvYmFsQ29udGFpbmVyUnVsZTtcbn0oKTtcblxudmFyIEdsb2JhbFByZWZpeGVkUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdsb2JhbFByZWZpeGVkUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2dsb2JhbCc7XG4gICAgdGhpcy5hdCA9IGF0O1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLnJ1bGUgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdmFyIHNlbGVjdG9yID0ga2V5LnN1YnN0cihhdFByZWZpeC5sZW5ndGgpO1xuICAgIHRoaXMucnVsZSA9IG9wdGlvbnMuanNzLmNyZWF0ZVJ1bGUoc2VsZWN0b3IsIHN0eWxlLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuICB9XG5cbiAgdmFyIF9wcm90bzIgPSBHbG9iYWxQcmVmaXhlZFJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90bzIudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZSA/IHRoaXMucnVsZS50b1N0cmluZyhvcHRpb25zKSA6ICcnO1xuICB9O1xuXG4gIHJldHVybiBHbG9iYWxQcmVmaXhlZFJ1bGU7XG59KCk7XG5cbnZhciBzZXBhcmF0b3JSZWdFeHAgPSAvXFxzKixcXHMqL2c7XG5cbmZ1bmN0aW9uIGFkZFNjb3BlKHNlbGVjdG9yLCBzY29wZSkge1xuICB2YXIgcGFydHMgPSBzZWxlY3Rvci5zcGxpdChzZXBhcmF0b3JSZWdFeHApO1xuICB2YXIgc2NvcGVkID0gJyc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIHNjb3BlZCArPSBzY29wZSArIFwiIFwiICsgcGFydHNbaV0udHJpbSgpO1xuICAgIGlmIChwYXJ0c1tpICsgMV0pIHNjb3BlZCArPSAnLCAnO1xuICB9XG5cbiAgcmV0dXJuIHNjb3BlZDtcbn1cblxuZnVuY3Rpb24gaGFuZGxlTmVzdGVkR2xvYmFsQ29udGFpbmVyUnVsZShydWxlLCBzaGVldCkge1xuICB2YXIgb3B0aW9ucyA9IHJ1bGUub3B0aW9ucyxcbiAgICAgIHN0eWxlID0gcnVsZS5zdHlsZTtcbiAgdmFyIHJ1bGVzID0gc3R5bGUgPyBzdHlsZVthdF0gOiBudWxsO1xuICBpZiAoIXJ1bGVzKSByZXR1cm47XG5cbiAgZm9yICh2YXIgbmFtZSBpbiBydWxlcykge1xuICAgIHNoZWV0LmFkZFJ1bGUobmFtZSwgcnVsZXNbbmFtZV0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBzZWxlY3RvcjogYWRkU2NvcGUobmFtZSwgcnVsZS5zZWxlY3RvcilcbiAgICB9KSk7XG4gIH1cblxuICBkZWxldGUgc3R5bGVbYXRdO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVQcmVmaXhlZEdsb2JhbFJ1bGUocnVsZSwgc2hlZXQpIHtcbiAgdmFyIG9wdGlvbnMgPSBydWxlLm9wdGlvbnMsXG4gICAgICBzdHlsZSA9IHJ1bGUuc3R5bGU7XG5cbiAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgIGlmIChwcm9wWzBdICE9PSAnQCcgfHwgcHJvcC5zdWJzdHIoMCwgYXQubGVuZ3RoKSAhPT0gYXQpIGNvbnRpbnVlO1xuICAgIHZhciBzZWxlY3RvciA9IGFkZFNjb3BlKHByb3Auc3Vic3RyKGF0Lmxlbmd0aCksIHJ1bGUuc2VsZWN0b3IpO1xuICAgIHNoZWV0LmFkZFJ1bGUoc2VsZWN0b3IsIHN0eWxlW3Byb3BdLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yXG4gICAgfSkpO1xuICAgIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgfVxufVxuLyoqXG4gKiBDb252ZXJ0IG5lc3RlZCBydWxlcyB0byBzZXBhcmF0ZSwgcmVtb3ZlIHRoZW0gZnJvbSBvcmlnaW5hbCBzdHlsZXMuXG4gKlxuICogQHBhcmFtIHtSdWxlfSBydWxlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblxuZnVuY3Rpb24ganNzR2xvYmFsKCkge1xuICBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgaWYgKCFuYW1lKSByZXR1cm4gbnVsbDtcblxuICAgIGlmIChuYW1lID09PSBhdCkge1xuICAgICAgcmV0dXJuIG5ldyBHbG9iYWxDb250YWluZXJSdWxlKG5hbWUsIHN0eWxlcywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKG5hbWVbMF0gPT09ICdAJyAmJiBuYW1lLnN1YnN0cigwLCBhdFByZWZpeC5sZW5ndGgpID09PSBhdFByZWZpeCkge1xuICAgICAgcmV0dXJuIG5ldyBHbG9iYWxQcmVmaXhlZFJ1bGUobmFtZSwgc3R5bGVzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LnR5cGUgPT09ICdnbG9iYWwnIHx8IHBhcmVudC5vcHRpb25zLnBhcmVudCAmJiBwYXJlbnQub3B0aW9ucy5wYXJlbnQudHlwZSA9PT0gJ2dsb2JhbCcpIHtcbiAgICAgICAgb3B0aW9ucy5zY29wZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zY29wZWQgPT09IGZhbHNlKSB7XG4gICAgICBvcHRpb25zLnNlbGVjdG9yID0gbmFtZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1J1bGUocnVsZSwgc2hlZXQpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnIHx8ICFzaGVldCkgcmV0dXJuO1xuICAgIGhhbmRsZU5lc3RlZEdsb2JhbENvbnRhaW5lclJ1bGUocnVsZSwgc2hlZXQpO1xuICAgIGhhbmRsZVByZWZpeGVkR2xvYmFsUnVsZShydWxlLCBzaGVldCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9uQ3JlYXRlUnVsZTogb25DcmVhdGVSdWxlLFxuICAgIG9uUHJvY2Vzc1J1bGU6IG9uUHJvY2Vzc1J1bGVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQganNzR2xvYmFsO1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcblxudmFyIHNlcGFyYXRvclJlZ0V4cCA9IC9cXHMqLFxccyovZztcbnZhciBwYXJlbnRSZWdFeHAgPSAvJi9nO1xudmFyIHJlZlJlZ0V4cCA9IC9cXCQoW1xcdy1dKykvZztcbi8qKlxuICogQ29udmVydCBuZXN0ZWQgcnVsZXMgdG8gc2VwYXJhdGUsIHJlbW92ZSB0aGVtIGZyb20gb3JpZ2luYWwgc3R5bGVzLlxuICpcbiAqIEBwYXJhbSB7UnVsZX0gcnVsZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBqc3NOZXN0ZWQoKSB7XG4gIC8vIEdldCBhIGZ1bmN0aW9uIHRvIGJlIHVzZWQgZm9yICRyZWYgcmVwbGFjZW1lbnQuXG4gIGZ1bmN0aW9uIGdldFJlcGxhY2VSZWYoY29udGFpbmVyLCBzaGVldCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobWF0Y2gsIGtleSkge1xuICAgICAgdmFyIHJ1bGUgPSBjb250YWluZXIuZ2V0UnVsZShrZXkpIHx8IHNoZWV0ICYmIHNoZWV0LmdldFJ1bGUoa2V5KTtcblxuICAgICAgaWYgKHJ1bGUpIHtcbiAgICAgICAgcnVsZSA9IHJ1bGU7XG4gICAgICAgIHJldHVybiBydWxlLnNlbGVjdG9yO1xuICAgICAgfVxuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIENvdWxkIG5vdCBmaW5kIHRoZSByZWZlcmVuY2VkIHJ1bGUgXFxcIlwiICsga2V5ICsgXCJcXFwiIGluIFxcXCJcIiArIChjb250YWluZXIub3B0aW9ucy5tZXRhIHx8IGNvbnRhaW5lci50b1N0cmluZygpKSArIFwiXFxcIi5cIikgOiB2b2lkIDA7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlUGFyZW50UmVmcyhuZXN0ZWRQcm9wLCBwYXJlbnRQcm9wKSB7XG4gICAgdmFyIHBhcmVudFNlbGVjdG9ycyA9IHBhcmVudFByb3Auc3BsaXQoc2VwYXJhdG9yUmVnRXhwKTtcbiAgICB2YXIgbmVzdGVkU2VsZWN0b3JzID0gbmVzdGVkUHJvcC5zcGxpdChzZXBhcmF0b3JSZWdFeHApO1xuICAgIHZhciByZXN1bHQgPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyZW50U2VsZWN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcGFyZW50ID0gcGFyZW50U2VsZWN0b3JzW2ldO1xuXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG5lc3RlZFNlbGVjdG9ycy5sZW5ndGg7IGorKykge1xuICAgICAgICB2YXIgbmVzdGVkID0gbmVzdGVkU2VsZWN0b3JzW2pdO1xuICAgICAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gJywgJzsgLy8gUmVwbGFjZSBhbGwgJiBieSB0aGUgcGFyZW50IG9yIHByZWZpeCAmIHdpdGggdGhlIHBhcmVudC5cblxuICAgICAgICByZXN1bHQgKz0gbmVzdGVkLmluZGV4T2YoJyYnKSAhPT0gLTEgPyBuZXN0ZWQucmVwbGFjZShwYXJlbnRSZWdFeHAsIHBhcmVudCkgOiBwYXJlbnQgKyBcIiBcIiArIG5lc3RlZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0T3B0aW9ucyhydWxlLCBjb250YWluZXIsIHByZXZPcHRpb25zKSB7XG4gICAgLy8gT3B0aW9ucyBoYXMgYmVlbiBhbHJlYWR5IGNyZWF0ZWQsIG5vdyB3ZSBvbmx5IGluY3JlYXNlIGluZGV4LlxuICAgIGlmIChwcmV2T3B0aW9ucykgcmV0dXJuIF9leHRlbmRzKHt9LCBwcmV2T3B0aW9ucywge1xuICAgICAgaW5kZXg6IHByZXZPcHRpb25zLmluZGV4ICsgMSAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuICAgIH0pO1xuICAgIHZhciBuZXN0aW5nTGV2ZWwgPSBydWxlLm9wdGlvbnMubmVzdGluZ0xldmVsO1xuICAgIG5lc3RpbmdMZXZlbCA9IG5lc3RpbmdMZXZlbCA9PT0gdW5kZWZpbmVkID8gMSA6IG5lc3RpbmdMZXZlbCArIDE7XG5cbiAgICB2YXIgb3B0aW9ucyA9IF9leHRlbmRzKHt9LCBydWxlLm9wdGlvbnMsIHtcbiAgICAgIG5lc3RpbmdMZXZlbDogbmVzdGluZ0xldmVsLFxuICAgICAgaW5kZXg6IGNvbnRhaW5lci5pbmRleE9mKHJ1bGUpICsgMSAvLyBXZSBkb24ndCBuZWVkIHRoZSBwYXJlbnQgbmFtZSB0byBiZSBzZXQgb3B0aW9ucyBmb3IgY2hsaWQuXG5cbiAgICB9KTtcblxuICAgIGRlbGV0ZSBvcHRpb25zLm5hbWU7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH1cblxuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSwgc2hlZXQpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG4gICAgdmFyIHN0eWxlUnVsZSA9IHJ1bGU7XG4gICAgdmFyIGNvbnRhaW5lciA9IHN0eWxlUnVsZS5vcHRpb25zLnBhcmVudDtcbiAgICB2YXIgb3B0aW9ucztcbiAgICB2YXIgcmVwbGFjZVJlZjtcblxuICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgIHZhciBpc05lc3RlZCA9IHByb3AuaW5kZXhPZignJicpICE9PSAtMTtcbiAgICAgIHZhciBpc05lc3RlZENvbmRpdGlvbmFsID0gcHJvcFswXSA9PT0gJ0AnO1xuICAgICAgaWYgKCFpc05lc3RlZCAmJiAhaXNOZXN0ZWRDb25kaXRpb25hbCkgY29udGludWU7XG4gICAgICBvcHRpb25zID0gZ2V0T3B0aW9ucyhzdHlsZVJ1bGUsIGNvbnRhaW5lciwgb3B0aW9ucyk7XG5cbiAgICAgIGlmIChpc05lc3RlZCkge1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSByZXBsYWNlUGFyZW50UmVmcyhwcm9wLCBzdHlsZVJ1bGUuc2VsZWN0b3IpOyAvLyBMYXppbHkgY3JlYXRlIHRoZSByZWYgcmVwbGFjZXIgZnVuY3Rpb24ganVzdCBvbmNlIGZvclxuICAgICAgICAvLyBhbGwgbmVzdGVkIHJ1bGVzIHdpdGhpbiB0aGUgc2hlZXQuXG5cbiAgICAgICAgaWYgKCFyZXBsYWNlUmVmKSByZXBsYWNlUmVmID0gZ2V0UmVwbGFjZVJlZihjb250YWluZXIsIHNoZWV0KTsgLy8gUmVwbGFjZSBhbGwgJHJlZnMuXG5cbiAgICAgICAgc2VsZWN0b3IgPSBzZWxlY3Rvci5yZXBsYWNlKHJlZlJlZ0V4cCwgcmVwbGFjZVJlZik7XG4gICAgICAgIGNvbnRhaW5lci5hZGRSdWxlKHNlbGVjdG9yLCBzdHlsZVtwcm9wXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgICAgICBzZWxlY3Rvcjogc2VsZWN0b3JcbiAgICAgICAgfSkpO1xuICAgICAgfSBlbHNlIGlmIChpc05lc3RlZENvbmRpdGlvbmFsKSB7XG4gICAgICAgIC8vIFBsYWNlIGNvbmRpdGlvbmFsIHJpZ2h0IGFmdGVyIHRoZSBwYXJlbnQgcnVsZSB0byBlbnN1cmUgcmlnaHQgb3JkZXJpbmcuXG4gICAgICAgIGNvbnRhaW5lci5hZGRSdWxlKHByb3AsIHt9LCBvcHRpb25zKSAvLyBGbG93IGV4cGVjdHMgbW9yZSBvcHRpb25zIGJ1dCB0aGV5IGFyZW4ndCByZXF1aXJlZFxuICAgICAgICAvLyBBbmQgZmxvdyBkb2Vzbid0IGtub3cgdGhpcyB3aWxsIGFsd2F5cyBiZSBhIFN0eWxlUnVsZSB3aGljaCBoYXMgdGhlIGFkZFJ1bGUgbWV0aG9kXG4gICAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXVzZV1cbiAgICAgICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICAgIC5hZGRSdWxlKHN0eWxlUnVsZS5rZXksIHN0eWxlW3Byb3BdLCB7XG4gICAgICAgICAgc2VsZWN0b3I6IHN0eWxlUnVsZS5zZWxlY3RvclxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc05lc3RlZDtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXZhciwgcHJlZmVyLXRlbXBsYXRlICovXG52YXIgdXBwZXJjYXNlUGF0dGVybiA9IC9bQS1aXS9nXG52YXIgbXNQYXR0ZXJuID0gL15tcy0vXG52YXIgY2FjaGUgPSB7fVxuXG5mdW5jdGlvbiB0b0h5cGhlbkxvd2VyKG1hdGNoKSB7XG4gIHJldHVybiAnLScgKyBtYXRjaC50b0xvd2VyQ2FzZSgpXG59XG5cbmZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlTmFtZShuYW1lKSB7XG4gIGlmIChjYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgIHJldHVybiBjYWNoZVtuYW1lXVxuICB9XG5cbiAgdmFyIGhOYW1lID0gbmFtZS5yZXBsYWNlKHVwcGVyY2FzZVBhdHRlcm4sIHRvSHlwaGVuTG93ZXIpXG4gIHJldHVybiAoY2FjaGVbbmFtZV0gPSBtc1BhdHRlcm4udGVzdChoTmFtZSkgPyAnLScgKyBoTmFtZSA6IGhOYW1lKVxufVxuXG5leHBvcnQgZGVmYXVsdCBoeXBoZW5hdGVTdHlsZU5hbWVcbiIsImltcG9ydCBoeXBoZW5hdGUgZnJvbSAnaHlwaGVuYXRlLXN0eWxlLW5hbWUnO1xuXG4vKipcbiAqIENvbnZlcnQgY2FtZWwgY2FzZWQgcHJvcGVydHkgbmFtZXMgdG8gZGFzaCBzZXBhcmF0ZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHN0eWxlXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gY29udmVydENhc2Uoc3R5bGUpIHtcbiAgdmFyIGNvbnZlcnRlZCA9IHt9O1xuXG4gIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICB2YXIga2V5ID0gcHJvcC5pbmRleE9mKCctLScpID09PSAwID8gcHJvcCA6IGh5cGhlbmF0ZShwcm9wKTtcbiAgICBjb252ZXJ0ZWRba2V5XSA9IHN0eWxlW3Byb3BdO1xuICB9XG5cbiAgaWYgKHN0eWxlLmZhbGxiYWNrcykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlLmZhbGxiYWNrcykpIGNvbnZlcnRlZC5mYWxsYmFja3MgPSBzdHlsZS5mYWxsYmFja3MubWFwKGNvbnZlcnRDYXNlKTtlbHNlIGNvbnZlcnRlZC5mYWxsYmFja3MgPSBjb252ZXJ0Q2FzZShzdHlsZS5mYWxsYmFja3MpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnZlcnRlZDtcbn1cbi8qKlxuICogQWxsb3cgY2FtZWwgY2FzZWQgcHJvcGVydHkgbmFtZXMgYnkgY29udmVydGluZyB0aGVtIGJhY2sgdG8gZGFzaGVyaXplZC5cbiAqXG4gKiBAcGFyYW0ge1J1bGV9IHJ1bGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGNhbWVsQ2FzZSgpIHtcbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZSkpIHtcbiAgICAgIC8vIEhhbmRsZSBydWxlcyBsaWtlIEBmb250LWZhY2UsIHdoaWNoIGNhbiBoYXZlIG11bHRpcGxlIHN0eWxlcyBpbiBhbiBhcnJheVxuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHN0eWxlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzdHlsZVtpbmRleF0gPSBjb252ZXJ0Q2FzZShzdHlsZVtpbmRleF0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnZlcnRDYXNlKHN0eWxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3AsIHJ1bGUpIHtcbiAgICBpZiAocHJvcC5pbmRleE9mKCctLScpID09PSAwKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgdmFyIGh5cGhlbmF0ZWRQcm9wID0gaHlwaGVuYXRlKHByb3ApOyAvLyBUaGVyZSB3YXMgbm8gY2FtZWwgY2FzZSBpbiBwbGFjZVxuXG4gICAgaWYgKHByb3AgPT09IGh5cGhlbmF0ZWRQcm9wKSByZXR1cm4gdmFsdWU7XG4gICAgcnVsZS5wcm9wKGh5cGhlbmF0ZWRQcm9wLCB2YWx1ZSk7IC8vIENvcmUgd2lsbCBpZ25vcmUgdGhhdCBwcm9wZXJ0eSB2YWx1ZSB3ZSBzZXQgdGhlIHByb3BlciBvbmUgYWJvdmUuXG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlLFxuICAgIG9uQ2hhbmdlVmFsdWU6IG9uQ2hhbmdlVmFsdWVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2FtZWxDYXNlO1xuIiwiaW1wb3J0IHsgaGFzQ1NTVE9NU3VwcG9ydCB9IGZyb20gJ2pzcyc7XG5cbnZhciBweCA9IGhhc0NTU1RPTVN1cHBvcnQgJiYgQ1NTID8gQ1NTLnB4IDogJ3B4JztcbnZhciBtcyA9IGhhc0NTU1RPTVN1cHBvcnQgJiYgQ1NTID8gQ1NTLm1zIDogJ21zJztcbnZhciBwZXJjZW50ID0gaGFzQ1NTVE9NU3VwcG9ydCAmJiBDU1MgPyBDU1MucGVyY2VudCA6ICclJztcbi8qKlxuICogR2VuZXJhdGVkIGpzcy1wbHVnaW4tZGVmYXVsdC11bml0IENTUyBwcm9wZXJ0eSB1bml0c1xuICpcbiAqIEB0eXBlIG9iamVjdFxuICovXG5cbnZhciBkZWZhdWx0VW5pdHMgPSB7XG4gIC8vIEFuaW1hdGlvbiBwcm9wZXJ0aWVzXG4gICdhbmltYXRpb24tZGVsYXknOiBtcyxcbiAgJ2FuaW1hdGlvbi1kdXJhdGlvbic6IG1zLFxuICAvLyBCYWNrZ3JvdW5kIHByb3BlcnRpZXNcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24nOiBweCxcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24teCc6IHB4LFxuICAnYmFja2dyb3VuZC1wb3NpdGlvbi15JzogcHgsXG4gICdiYWNrZ3JvdW5kLXNpemUnOiBweCxcbiAgLy8gQm9yZGVyIFByb3BlcnRpZXNcbiAgYm9yZGVyOiBweCxcbiAgJ2JvcmRlci1ib3R0b20nOiBweCxcbiAgJ2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItYm90dG9tLXdpZHRoJzogcHgsXG4gICdib3JkZXItbGVmdCc6IHB4LFxuICAnYm9yZGVyLWxlZnQtd2lkdGgnOiBweCxcbiAgJ2JvcmRlci1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1yaWdodCc6IHB4LFxuICAnYm9yZGVyLXJpZ2h0LXdpZHRoJzogcHgsXG4gICdib3JkZXItdG9wJzogcHgsXG4gICdib3JkZXItdG9wLWxlZnQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItdG9wLXJpZ2h0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLXRvcC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLXdpZHRoJzogcHgsXG4gICdib3JkZXItYmxvY2snOiBweCxcbiAgJ2JvcmRlci1ibG9jay1lbmQnOiBweCxcbiAgJ2JvcmRlci1ibG9jay1lbmQtd2lkdGgnOiBweCxcbiAgJ2JvcmRlci1ibG9jay1zdGFydCc6IHB4LFxuICAnYm9yZGVyLWJsb2NrLXN0YXJ0LXdpZHRoJzogcHgsXG4gICdib3JkZXItYmxvY2std2lkdGgnOiBweCxcbiAgJ2JvcmRlci1pbmxpbmUnOiBweCxcbiAgJ2JvcmRlci1pbmxpbmUtZW5kJzogcHgsXG4gICdib3JkZXItaW5saW5lLWVuZC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLWlubGluZS1zdGFydCc6IHB4LFxuICAnYm9yZGVyLWlubGluZS1zdGFydC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLWlubGluZS13aWR0aCc6IHB4LFxuICAnYm9yZGVyLXN0YXJ0LXN0YXJ0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLXN0YXJ0LWVuZC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1lbmQtc3RhcnQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItZW5kLWVuZC1yYWRpdXMnOiBweCxcbiAgLy8gTWFyZ2luIHByb3BlcnRpZXNcbiAgbWFyZ2luOiBweCxcbiAgJ21hcmdpbi1ib3R0b20nOiBweCxcbiAgJ21hcmdpbi1sZWZ0JzogcHgsXG4gICdtYXJnaW4tcmlnaHQnOiBweCxcbiAgJ21hcmdpbi10b3AnOiBweCxcbiAgJ21hcmdpbi1ibG9jayc6IHB4LFxuICAnbWFyZ2luLWJsb2NrLWVuZCc6IHB4LFxuICAnbWFyZ2luLWJsb2NrLXN0YXJ0JzogcHgsXG4gICdtYXJnaW4taW5saW5lJzogcHgsXG4gICdtYXJnaW4taW5saW5lLWVuZCc6IHB4LFxuICAnbWFyZ2luLWlubGluZS1zdGFydCc6IHB4LFxuICAvLyBQYWRkaW5nIHByb3BlcnRpZXNcbiAgcGFkZGluZzogcHgsXG4gICdwYWRkaW5nLWJvdHRvbSc6IHB4LFxuICAncGFkZGluZy1sZWZ0JzogcHgsXG4gICdwYWRkaW5nLXJpZ2h0JzogcHgsXG4gICdwYWRkaW5nLXRvcCc6IHB4LFxuICAncGFkZGluZy1ibG9jayc6IHB4LFxuICAncGFkZGluZy1ibG9jay1lbmQnOiBweCxcbiAgJ3BhZGRpbmctYmxvY2stc3RhcnQnOiBweCxcbiAgJ3BhZGRpbmctaW5saW5lJzogcHgsXG4gICdwYWRkaW5nLWlubGluZS1lbmQnOiBweCxcbiAgJ3BhZGRpbmctaW5saW5lLXN0YXJ0JzogcHgsXG4gIC8vIE1hc2sgcHJvcGVydGllc1xuICAnbWFzay1wb3NpdGlvbi14JzogcHgsXG4gICdtYXNrLXBvc2l0aW9uLXknOiBweCxcbiAgJ21hc2stc2l6ZSc6IHB4LFxuICAvLyBXaWR0aCBhbmQgaGVpZ2h0IHByb3BlcnRpZXNcbiAgaGVpZ2h0OiBweCxcbiAgd2lkdGg6IHB4LFxuICAnbWluLWhlaWdodCc6IHB4LFxuICAnbWF4LWhlaWdodCc6IHB4LFxuICAnbWluLXdpZHRoJzogcHgsXG4gICdtYXgtd2lkdGgnOiBweCxcbiAgLy8gUG9zaXRpb24gcHJvcGVydGllc1xuICBib3R0b206IHB4LFxuICBsZWZ0OiBweCxcbiAgdG9wOiBweCxcbiAgcmlnaHQ6IHB4LFxuICBpbnNldDogcHgsXG4gICdpbnNldC1ibG9jayc6IHB4LFxuICAnaW5zZXQtYmxvY2stZW5kJzogcHgsXG4gICdpbnNldC1ibG9jay1zdGFydCc6IHB4LFxuICAnaW5zZXQtaW5saW5lJzogcHgsXG4gICdpbnNldC1pbmxpbmUtZW5kJzogcHgsXG4gICdpbnNldC1pbmxpbmUtc3RhcnQnOiBweCxcbiAgLy8gU2hhZG93IHByb3BlcnRpZXNcbiAgJ2JveC1zaGFkb3cnOiBweCxcbiAgJ3RleHQtc2hhZG93JzogcHgsXG4gIC8vIENvbHVtbiBwcm9wZXJ0aWVzXG4gICdjb2x1bW4tZ2FwJzogcHgsXG4gICdjb2x1bW4tcnVsZSc6IHB4LFxuICAnY29sdW1uLXJ1bGUtd2lkdGgnOiBweCxcbiAgJ2NvbHVtbi13aWR0aCc6IHB4LFxuICAvLyBGb250IGFuZCB0ZXh0IHByb3BlcnRpZXNcbiAgJ2ZvbnQtc2l6ZSc6IHB4LFxuICAnZm9udC1zaXplLWRlbHRhJzogcHgsXG4gICdsZXR0ZXItc3BhY2luZyc6IHB4LFxuICAndGV4dC1kZWNvcmF0aW9uLXRoaWNrbmVzcyc6IHB4LFxuICAndGV4dC1pbmRlbnQnOiBweCxcbiAgJ3RleHQtc3Ryb2tlJzogcHgsXG4gICd0ZXh0LXN0cm9rZS13aWR0aCc6IHB4LFxuICAnd29yZC1zcGFjaW5nJzogcHgsXG4gIC8vIE1vdGlvbiBwcm9wZXJ0aWVzXG4gIG1vdGlvbjogcHgsXG4gICdtb3Rpb24tb2Zmc2V0JzogcHgsXG4gIC8vIE91dGxpbmUgcHJvcGVydGllc1xuICBvdXRsaW5lOiBweCxcbiAgJ291dGxpbmUtb2Zmc2V0JzogcHgsXG4gICdvdXRsaW5lLXdpZHRoJzogcHgsXG4gIC8vIFBlcnNwZWN0aXZlIHByb3BlcnRpZXNcbiAgcGVyc3BlY3RpdmU6IHB4LFxuICAncGVyc3BlY3RpdmUtb3JpZ2luLXgnOiBwZXJjZW50LFxuICAncGVyc3BlY3RpdmUtb3JpZ2luLXknOiBwZXJjZW50LFxuICAvLyBUcmFuc2Zvcm0gcHJvcGVydGllc1xuICAndHJhbnNmb3JtLW9yaWdpbic6IHBlcmNlbnQsXG4gICd0cmFuc2Zvcm0tb3JpZ2luLXgnOiBwZXJjZW50LFxuICAndHJhbnNmb3JtLW9yaWdpbi15JzogcGVyY2VudCxcbiAgJ3RyYW5zZm9ybS1vcmlnaW4teic6IHBlcmNlbnQsXG4gIC8vIFRyYW5zaXRpb24gcHJvcGVydGllc1xuICAndHJhbnNpdGlvbi1kZWxheSc6IG1zLFxuICAndHJhbnNpdGlvbi1kdXJhdGlvbic6IG1zLFxuICAvLyBBbGlnbm1lbnQgcHJvcGVydGllc1xuICAndmVydGljYWwtYWxpZ24nOiBweCxcbiAgJ2ZsZXgtYmFzaXMnOiBweCxcbiAgLy8gU29tZSByYW5kb20gcHJvcGVydGllc1xuICAnc2hhcGUtbWFyZ2luJzogcHgsXG4gIHNpemU6IHB4LFxuICBnYXA6IHB4LFxuICAvLyBHcmlkIHByb3BlcnRpZXNcbiAgZ3JpZDogcHgsXG4gICdncmlkLWdhcCc6IHB4LFxuICAncm93LWdhcCc6IHB4LFxuICAnZ3JpZC1yb3ctZ2FwJzogcHgsXG4gICdncmlkLWNvbHVtbi1nYXAnOiBweCxcbiAgJ2dyaWQtdGVtcGxhdGUtcm93cyc6IHB4LFxuICAnZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zJzogcHgsXG4gICdncmlkLWF1dG8tcm93cyc6IHB4LFxuICAnZ3JpZC1hdXRvLWNvbHVtbnMnOiBweCxcbiAgLy8gTm90IGV4aXN0aW5nIHByb3BlcnRpZXMuXG4gIC8vIFVzZWQgdG8gYXZvaWQgaXNzdWVzIHdpdGgganNzLXBsdWdpbi1leHBhbmQgaW50ZWdyYXRpb24uXG4gICdib3gtc2hhZG93LXgnOiBweCxcbiAgJ2JveC1zaGFkb3cteSc6IHB4LFxuICAnYm94LXNoYWRvdy1ibHVyJzogcHgsXG4gICdib3gtc2hhZG93LXNwcmVhZCc6IHB4LFxuICAnZm9udC1saW5lLWhlaWdodCc6IHB4LFxuICAndGV4dC1zaGFkb3cteCc6IHB4LFxuICAndGV4dC1zaGFkb3cteSc6IHB4LFxuICAndGV4dC1zaGFkb3ctYmx1cic6IHB4XG59O1xuXG4vKipcbiAqIENsb25lcyB0aGUgb2JqZWN0IGFuZCBhZGRzIGEgY2FtZWwgY2FzZWQgcHJvcGVydHkgdmVyc2lvbi5cbiAqL1xuZnVuY3Rpb24gYWRkQ2FtZWxDYXNlZFZlcnNpb24ob2JqKSB7XG4gIHZhciByZWdFeHAgPSAvKC1bYS16XSkvZztcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2Uoc3RyKSB7XG4gICAgcmV0dXJuIHN0clsxXS50b1VwcGVyQ2FzZSgpO1xuICB9O1xuXG4gIHZhciBuZXdPYmogPSB7fTtcblxuICBmb3IgKHZhciBfa2V5IGluIG9iaikge1xuICAgIG5ld09ialtfa2V5XSA9IG9ialtfa2V5XTtcbiAgICBuZXdPYmpbX2tleS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZSldID0gb2JqW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIG5ld09iajtcbn1cblxudmFyIHVuaXRzID0gYWRkQ2FtZWxDYXNlZFZlcnNpb24oZGVmYXVsdFVuaXRzKTtcbi8qKlxuICogUmVjdXJzaXZlIGRlZXAgc3R5bGUgcGFzc2luZyBmdW5jdGlvblxuICovXG5cbmZ1bmN0aW9uIGl0ZXJhdGUocHJvcCwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB2YWx1ZTtcblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZVtpXSA9IGl0ZXJhdGUocHJvcCwgdmFsdWVbaV0sIG9wdGlvbnMpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKHByb3AgPT09ICdmYWxsYmFja3MnKSB7XG4gICAgICBmb3IgKHZhciBpbm5lclByb3AgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFsdWVbaW5uZXJQcm9wXSA9IGl0ZXJhdGUoaW5uZXJQcm9wLCB2YWx1ZVtpbm5lclByb3BdLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgX2lubmVyUHJvcCBpbiB2YWx1ZSkge1xuICAgICAgICB2YWx1ZVtfaW5uZXJQcm9wXSA9IGl0ZXJhdGUocHJvcCArIFwiLVwiICsgX2lubmVyUHJvcCwgdmFsdWVbX2lubmVyUHJvcF0sIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWx1ZSkgPT09IGZhbHNlKSB7XG4gICAgdmFyIHVuaXQgPSBvcHRpb25zW3Byb3BdIHx8IHVuaXRzW3Byb3BdOyAvLyBBZGQgdGhlIHVuaXQgaWYgYXZhaWxhYmxlLCBleGNlcHQgZm9yIHRoZSBzcGVjaWFsIGNhc2Ugb2YgMHB4LlxuXG4gICAgaWYgKHVuaXQgJiYgISh2YWx1ZSA9PT0gMCAmJiB1bml0ID09PSBweCkpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdW5pdCA9PT0gJ2Z1bmN0aW9uJyA/IHVuaXQodmFsdWUpLnRvU3RyaW5nKCkgOiBcIlwiICsgdmFsdWUgKyB1bml0O1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBBZGQgdW5pdCB0byBudW1lcmljIHZhbHVlcy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGRlZmF1bHRVbml0KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBjYW1lbENhc2VkT3B0aW9ucyA9IGFkZENhbWVsQ2FzZWRWZXJzaW9uKG9wdGlvbnMpO1xuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuIHN0eWxlO1xuXG4gICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgc3R5bGVbcHJvcF0gPSBpdGVyYXRlKHByb3AsIHN0eWxlW3Byb3BdLCBjYW1lbENhc2VkT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCkge1xuICAgIHJldHVybiBpdGVyYXRlKHByb3AsIHZhbHVlLCBjYW1lbENhc2VkT3B0aW9ucyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZSxcbiAgICBvbkNoYW5nZVZhbHVlOiBvbkNoYW5nZVZhbHVlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRVbml0O1xuIiwiaW1wb3J0IGlzSW5Ccm93c2VyIGZyb20gJ2lzLWluLWJyb3dzZXInO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheSc7XG5cbi8vIEV4cG9ydCBqYXZhc2NyaXB0IHN0eWxlIGFuZCBjc3Mgc3R5bGUgdmVuZG9yIHByZWZpeGVzLlxudmFyIGpzID0gJyc7XG52YXIgY3NzID0gJyc7XG52YXIgdmVuZG9yID0gJyc7XG52YXIgYnJvd3NlciA9ICcnO1xudmFyIGlzVG91Y2ggPSBpc0luQnJvd3NlciAmJiAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7IC8vIFdlIHNob3VsZCBub3QgZG8gYW55dGhpbmcgaWYgcmVxdWlyZWQgc2VydmVyc2lkZS5cblxuaWYgKGlzSW5Ccm93c2VyKSB7XG4gIC8vIE9yZGVyIG1hdHRlcnMuIFdlIG5lZWQgdG8gY2hlY2sgV2Via2l0IHRoZSBsYXN0IG9uZSBiZWNhdXNlXG4gIC8vIG90aGVyIHZlbmRvcnMgdXNlIHRvIGFkZCBXZWJraXQgcHJlZml4ZXMgdG8gc29tZSBwcm9wZXJ0aWVzXG4gIHZhciBqc0Nzc01hcCA9IHtcbiAgICBNb3o6ICctbW96LScsXG4gICAgbXM6ICctbXMtJyxcbiAgICBPOiAnLW8tJyxcbiAgICBXZWJraXQ6ICctd2Via2l0LSdcbiAgfTtcblxuICB2YXIgX2RvY3VtZW50JGNyZWF0ZUVsZW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpLFxuICAgICAgc3R5bGUgPSBfZG9jdW1lbnQkY3JlYXRlRWxlbWUuc3R5bGU7XG5cbiAgdmFyIHRlc3RQcm9wID0gJ1RyYW5zZm9ybSc7XG5cbiAgZm9yICh2YXIga2V5IGluIGpzQ3NzTWFwKSB7XG4gICAgaWYgKGtleSArIHRlc3RQcm9wIGluIHN0eWxlKSB7XG4gICAgICBqcyA9IGtleTtcbiAgICAgIGNzcyA9IGpzQ3NzTWFwW2tleV07XG4gICAgICBicmVhaztcbiAgICB9XG4gIH0gLy8gQ29ycmVjdGx5IGRldGVjdCB0aGUgRWRnZSBicm93c2VyLlxuXG5cbiAgaWYgKGpzID09PSAnV2Via2l0JyAmJiAnbXNIeXBoZW5zJyBpbiBzdHlsZSkge1xuICAgIGpzID0gJ21zJztcbiAgICBjc3MgPSBqc0Nzc01hcC5tcztcbiAgICBicm93c2VyID0gJ2VkZ2UnO1xuICB9IC8vIENvcnJlY3RseSBkZXRlY3QgdGhlIFNhZmFyaSBicm93c2VyLlxuXG5cbiAgaWYgKGpzID09PSAnV2Via2l0JyAmJiAnLWFwcGxlLXRyYWlsaW5nLXdvcmQnIGluIHN0eWxlKSB7XG4gICAgdmVuZG9yID0gJ2FwcGxlJztcbiAgfVxufVxuLyoqXG4gKiBWZW5kb3IgcHJlZml4IHN0cmluZyBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAqXG4gKiBAdHlwZSB7e2pzOiBTdHJpbmcsIGNzczogU3RyaW5nLCB2ZW5kb3I6IFN0cmluZywgYnJvd3NlcjogU3RyaW5nfX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuXG52YXIgcHJlZml4ID0ge1xuICBqczoganMsXG4gIGNzczogY3NzLFxuICB2ZW5kb3I6IHZlbmRvcixcbiAgYnJvd3NlcjogYnJvd3NlcixcbiAgaXNUb3VjaDogaXNUb3VjaFxufTtcblxuLyoqXG4gKiBUZXN0IGlmIGEga2V5ZnJhbWUgYXQtcnVsZSBzaG91bGQgYmUgcHJlZml4ZWQgb3Igbm90XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHZlbmRvciBwcmVmaXggc3RyaW5nIGZvciB0aGUgY3VycmVudCBicm93c2VyLlxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0ZWRLZXlmcmFtZXMoa2V5KSB7XG4gIC8vIEtleWZyYW1lcyBpcyBhbHJlYWR5IHByZWZpeGVkLiBlLmcuIGtleSA9ICdALXdlYmtpdC1rZXlmcmFtZXMgYSdcbiAgaWYgKGtleVsxXSA9PT0gJy0nKSByZXR1cm4ga2V5OyAvLyBObyBuZWVkIHRvIHByZWZpeCBJRS9FZGdlLiBPbGRlciBicm93c2VycyB3aWxsIGlnbm9yZSB1bnN1cHBvcnRlZCBydWxlcy5cbiAgLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPWtleWZyYW1lc1xuXG4gIGlmIChwcmVmaXguanMgPT09ICdtcycpIHJldHVybiBrZXk7XG4gIHJldHVybiBcIkBcIiArIHByZWZpeC5jc3MgKyBcImtleWZyYW1lc1wiICsga2V5LnN1YnN0cigxMCk7XG59XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1hcHBlYXJhbmNlXG5cbnZhciBhcHBlYXJlbmNlID0ge1xuICBub1ByZWZpbGw6IFsnYXBwZWFyYW5jZSddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAnYXBwZWFyYW5jZScpIHJldHVybiBmYWxzZTtcbiAgICBpZiAocHJlZml4LmpzID09PSAnbXMnKSByZXR1cm4gXCItd2Via2l0LVwiICsgcHJvcDtcbiAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1jb2xvci1hZGp1c3RcblxudmFyIGNvbG9yQWRqdXN0ID0ge1xuICBub1ByZWZpbGw6IFsnY29sb3ItYWRqdXN0J10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICdjb2xvci1hZGp1c3QnKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ1dlYmtpdCcpIHJldHVybiBwcmVmaXguY3NzICsgXCJwcmludC1cIiArIHByb3A7XG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbnZhciByZWdFeHAgPSAvWy1cXHNdKyguKT8vZztcbi8qKlxuICogUmVwbGFjZXMgdGhlIGxldHRlciB3aXRoIHRoZSBjYXBpdGFsIGxldHRlclxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtYXRjaFxuICogQHBhcmFtIHtTdHJpbmd9IGNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHRvVXBwZXIobWF0Y2gsIGMpIHtcbiAgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJztcbn1cbi8qKlxuICogQ29udmVydCBkYXNoIHNlcGFyYXRlZCBzdHJpbmdzIHRvIGNhbWVsLWNhc2VkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gY2FtZWxpemUoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShyZWdFeHAsIHRvVXBwZXIpO1xufVxuXG4vKipcbiAqIENvbnZlcnQgZGFzaCBzZXBhcmF0ZWQgc3RyaW5ncyB0byBwYXNjYWwgY2FzZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFzY2FsaXplKHN0cikge1xuICByZXR1cm4gY2FtZWxpemUoXCItXCIgKyBzdHIpO1xufVxuXG4vLyBidXQgd2UgY2FuIHVzZSBhIGxvbmdoYW5kIHByb3BlcnR5IGluc3RlYWQuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9bWFza1xuXG52YXIgbWFzayA9IHtcbiAgbm9QcmVmaWxsOiBbJ21hc2snXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgaWYgKCEvXm1hc2svLnRlc3QocHJvcCkpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdXZWJraXQnKSB7XG4gICAgICB2YXIgbG9uZ2hhbmQgPSAnbWFzay1pbWFnZSc7XG5cbiAgICAgIGlmIChjYW1lbGl6ZShsb25naGFuZCkgaW4gc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIHByb3A7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmVmaXguanMgKyBwYXNjYWxpemUobG9uZ2hhbmQpIGluIHN0eWxlKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXRleHQtb3JpZW50YXRpb25cblxudmFyIHRleHRPcmllbnRhdGlvbiA9IHtcbiAgbm9QcmVmaWxsOiBbJ3RleHQtb3JpZW50YXRpb24nXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ3RleHQtb3JpZW50YXRpb24nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LnZlbmRvciA9PT0gJ2FwcGxlJyAmJiAhcHJlZml4LmlzVG91Y2gpIHtcbiAgICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXRyYW5zZm9ybVxuXG52YXIgdHJhbnNmb3JtID0ge1xuICBub1ByZWZpbGw6IFsndHJhbnNmb3JtJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChwcm9wICE9PSAndHJhbnNmb3JtJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKG9wdGlvbnMudHJhbnNmb3JtKSB7XG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD10cmFuc2l0aW9uXG5cbnZhciB0cmFuc2l0aW9uID0ge1xuICBub1ByZWZpbGw6IFsndHJhbnNpdGlvbiddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAocHJvcCAhPT0gJ3RyYW5zaXRpb24nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAob3B0aW9ucy50cmFuc2l0aW9uKSB7XG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD13cml0aW5nLW1vZGVcblxudmFyIHdyaXRpbmdNb2RlID0ge1xuICBub1ByZWZpbGw6IFsnd3JpdGluZy1tb2RlJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICd3cml0aW5nLW1vZGUnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnV2Via2l0JyB8fCBwcmVmaXguanMgPT09ICdtcycgJiYgcHJlZml4LmJyb3dzZXIgIT09ICdlZGdlJykge1xuICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9dXNlci1zZWxlY3RcblxudmFyIHVzZXJTZWxlY3QgPSB7XG4gIG5vUHJlZmlsbDogWyd1c2VyLXNlbGVjdCddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAndXNlci1zZWxlY3QnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnTW96JyB8fCBwcmVmaXguanMgPT09ICdtcycgfHwgcHJlZml4LnZlbmRvciA9PT0gJ2FwcGxlJykge1xuICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9bXVsdGljb2x1bW5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3N0Y3NzL2F1dG9wcmVmaXhlci9pc3N1ZXMvNDkxXG4vLyBodHRwczovL2dpdGh1Yi5jb20vcG9zdGNzcy9hdXRvcHJlZml4ZXIvaXNzdWVzLzE3N1xuXG52YXIgYnJlYWtQcm9wc09sZCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgaWYgKCEvXmJyZWFrLS8udGVzdChwcm9wKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ1dlYmtpdCcpIHtcbiAgICAgIHZhciBqc1Byb3AgPSBcIldlYmtpdENvbHVtblwiICsgcGFzY2FsaXplKHByb3ApO1xuICAgICAgcmV0dXJuIGpzUHJvcCBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBcImNvbHVtbi1cIiArIHByb3AgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnTW96Jykge1xuICAgICAgdmFyIF9qc1Byb3AgPSBcInBhZ2VcIiArIHBhc2NhbGl6ZShwcm9wKTtcblxuICAgICAgcmV0dXJuIF9qc1Byb3AgaW4gc3R5bGUgPyBcInBhZ2UtXCIgKyBwcm9wIDogZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3Bvc3Rjc3MvYXV0b3ByZWZpeGVyL2lzc3Vlcy8zMjQuXG5cbnZhciBpbmxpbmVMb2dpY2FsT2xkID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICBpZiAoIS9eKGJvcmRlcnxtYXJnaW58cGFkZGluZyktaW5saW5lLy50ZXN0KHByb3ApKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ01veicpIHJldHVybiBwcm9wO1xuICAgIHZhciBuZXdQcm9wID0gcHJvcC5yZXBsYWNlKCctaW5saW5lJywgJycpO1xuICAgIHJldHVybiBwcmVmaXguanMgKyBwYXNjYWxpemUobmV3UHJvcCkgaW4gc3R5bGUgPyBwcmVmaXguY3NzICsgbmV3UHJvcCA6IGZhbHNlO1xuICB9XG59O1xuXG4vLyBDYW1lbGl6YXRpb24gaXMgcmVxdWlyZWQgYmVjYXVzZSB3ZSBjYW4ndCB0ZXN0IHVzaW5nLlxuLy8gQ1NTIHN5bnRheCBmb3IgZS5nLiBpbiBGRi5cblxudmFyIHVucHJlZml4ZWQgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIHJldHVybiBjYW1lbGl6ZShwcm9wKSBpbiBzdHlsZSA/IHByb3AgOiBmYWxzZTtcbiAgfVxufTtcblxudmFyIHByZWZpeGVkID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICB2YXIgcGFzY2FsaXplZCA9IHBhc2NhbGl6ZShwcm9wKTsgLy8gUmV0dXJuIGN1c3RvbSBDU1MgdmFyaWFibGUgd2l0aG91dCBwcmVmaXhpbmcuXG5cbiAgICBpZiAocHJvcFswXSA9PT0gJy0nKSByZXR1cm4gcHJvcDsgLy8gUmV0dXJuIGFscmVhZHkgcHJlZml4ZWQgdmFsdWUgd2l0aG91dCBwcmVmaXhpbmcuXG5cbiAgICBpZiAocHJvcFswXSA9PT0gJy0nICYmIHByb3BbMV0gPT09ICctJykgcmV0dXJuIHByb3A7XG4gICAgaWYgKHByZWZpeC5qcyArIHBhc2NhbGl6ZWQgaW4gc3R5bGUpIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDsgLy8gVHJ5IHdlYmtpdCBmYWxsYmFjay5cblxuICAgIGlmIChwcmVmaXguanMgIT09ICdXZWJraXQnICYmIFwiV2Via2l0XCIgKyBwYXNjYWxpemVkIGluIHN0eWxlKSByZXR1cm4gXCItd2Via2l0LVwiICsgcHJvcDtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1zY3JvbGwtc25hcFxuXG52YXIgc2Nyb2xsU25hcCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcC5zdWJzdHJpbmcoMCwgMTEpICE9PSAnc2Nyb2xsLXNuYXAnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnbXMnKSB7XG4gICAgICByZXR1cm4gXCJcIiArIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9b3ZlcnNjcm9sbC1iZWhhdmlvclxuXG52YXIgb3ZlcnNjcm9sbEJlaGF2aW9yID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAnb3ZlcnNjcm9sbC1iZWhhdmlvcicpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdtcycpIHtcbiAgICAgIHJldHVybiBwcmVmaXguY3NzICsgXCJzY3JvbGwtY2hhaW5pbmdcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxudmFyIHByb3BNYXAgPSB7XG4gICdmbGV4LWdyb3cnOiAnZmxleC1wb3NpdGl2ZScsXG4gICdmbGV4LXNocmluayc6ICdmbGV4LW5lZ2F0aXZlJyxcbiAgJ2ZsZXgtYmFzaXMnOiAnZmxleC1wcmVmZXJyZWQtc2l6ZScsXG4gICdqdXN0aWZ5LWNvbnRlbnQnOiAnZmxleC1wYWNrJyxcbiAgb3JkZXI6ICdmbGV4LW9yZGVyJyxcbiAgJ2FsaWduLWl0ZW1zJzogJ2ZsZXgtYWxpZ24nLFxuICAnYWxpZ24tY29udGVudCc6ICdmbGV4LWxpbmUtcGFjaycgLy8gJ2FsaWduLXNlbGYnIGlzIGhhbmRsZWQgYnkgJ2FsaWduLXNlbGYnIHBsdWdpbi5cblxufTsgLy8gU3VwcG9ydCBvbGQgZmxleCBzcGVjIGZyb20gMjAxMi5cblxudmFyIGZsZXgyMDEyID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICB2YXIgbmV3UHJvcCA9IHByb3BNYXBbcHJvcF07XG4gICAgaWYgKCFuZXdQcm9wKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wKSBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBuZXdQcm9wIDogZmFsc2U7XG4gIH1cbn07XG5cbnZhciBwcm9wTWFwJDEgPSB7XG4gIGZsZXg6ICdib3gtZmxleCcsXG4gICdmbGV4LWdyb3cnOiAnYm94LWZsZXgnLFxuICAnZmxleC1kaXJlY3Rpb24nOiBbJ2JveC1vcmllbnQnLCAnYm94LWRpcmVjdGlvbiddLFxuICBvcmRlcjogJ2JveC1vcmRpbmFsLWdyb3VwJyxcbiAgJ2FsaWduLWl0ZW1zJzogJ2JveC1hbGlnbicsXG4gICdmbGV4LWZsb3cnOiBbJ2JveC1vcmllbnQnLCAnYm94LWRpcmVjdGlvbiddLFxuICAnanVzdGlmeS1jb250ZW50JzogJ2JveC1wYWNrJ1xufTtcbnZhciBwcm9wS2V5cyA9IE9iamVjdC5rZXlzKHByb3BNYXAkMSk7XG5cbnZhciBwcmVmaXhDc3MgPSBmdW5jdGlvbiBwcmVmaXhDc3MocCkge1xuICByZXR1cm4gcHJlZml4LmNzcyArIHA7XG59OyAvLyBTdXBwb3J0IG9sZCBmbGV4IHNwZWMgZnJvbSAyMDA5LlxuXG5cbnZhciBmbGV4MjAwOSA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlLCBfcmVmKSB7XG4gICAgdmFyIG11bHRpcGxlID0gX3JlZi5tdWx0aXBsZTtcblxuICAgIGlmIChwcm9wS2V5cy5pbmRleE9mKHByb3ApID4gLTEpIHtcbiAgICAgIHZhciBuZXdQcm9wID0gcHJvcE1hcCQxW3Byb3BdO1xuXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkobmV3UHJvcCkpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wKSBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBuZXdQcm9wIDogZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICghbXVsdGlwbGUpIHJldHVybiBmYWxzZTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdQcm9wLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghKHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wWzBdKSBpbiBzdHlsZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld1Byb3AubWFwKHByZWZpeENzcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyBwbHVnaW5zID0gW1xuLy8gICAuLi5wbHVnaW5zLFxuLy8gICAgYnJlYWtQcm9wc09sZCxcbi8vICAgIGlubGluZUxvZ2ljYWxPbGQsXG4vLyAgICB1bnByZWZpeGVkLFxuLy8gICAgcHJlZml4ZWQsXG4vLyAgICBzY3JvbGxTbmFwLFxuLy8gICAgZmxleDIwMTIsXG4vLyAgICBmbGV4MjAwOVxuLy8gXVxuLy8gUGx1Z2lucyB3aXRob3V0ICdub1ByZWZpbGwnIHZhbHVlLCBnb2luZyBsYXN0LlxuLy8gJ2ZsZXgtKicgcGx1Z2lucyBzaG91bGQgYmUgYXQgdGhlIGJvdHRvbS5cbi8vICdmbGV4MjAwOScgZ29pbmcgYWZ0ZXIgJ2ZsZXgyMDEyJy5cbi8vICdwcmVmaXhlZCcgZ29pbmcgYWZ0ZXIgJ3VucHJlZml4ZWQnXG5cbnZhciBwbHVnaW5zID0gW2FwcGVhcmVuY2UsIGNvbG9yQWRqdXN0LCBtYXNrLCB0ZXh0T3JpZW50YXRpb24sIHRyYW5zZm9ybSwgdHJhbnNpdGlvbiwgd3JpdGluZ01vZGUsIHVzZXJTZWxlY3QsIGJyZWFrUHJvcHNPbGQsIGlubGluZUxvZ2ljYWxPbGQsIHVucHJlZml4ZWQsIHByZWZpeGVkLCBzY3JvbGxTbmFwLCBvdmVyc2Nyb2xsQmVoYXZpb3IsIGZsZXgyMDEyLCBmbGV4MjAwOV07XG52YXIgcHJvcGVydHlEZXRlY3RvcnMgPSBwbHVnaW5zLmZpbHRlcihmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcC5zdXBwb3J0ZWRQcm9wZXJ0eTtcbn0pLm1hcChmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcC5zdXBwb3J0ZWRQcm9wZXJ0eTtcbn0pO1xudmFyIG5vUHJlZmlsbCA9IHBsdWdpbnMuZmlsdGVyKGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwLm5vUHJlZmlsbDtcbn0pLnJlZHVjZShmdW5jdGlvbiAoYSwgcCkge1xuICBhLnB1c2guYXBwbHkoYSwgX3RvQ29uc3VtYWJsZUFycmF5KHAubm9QcmVmaWxsKSk7XG4gIHJldHVybiBhO1xufSwgW10pO1xuXG52YXIgZWw7XG52YXIgY2FjaGUgPSB7fTtcblxuaWYgKGlzSW5Ccm93c2VyKSB7XG4gIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpOyAvLyBXZSB0ZXN0IGV2ZXJ5IHByb3BlcnR5IG9uIHZlbmRvciBwcmVmaXggcmVxdWlyZW1lbnQuXG4gIC8vIE9uY2UgdGVzdGVkLCByZXN1bHQgaXMgY2FjaGVkLiBJdCBnaXZlcyB1cyB1cCB0byA3MCUgcGVyZiBib29zdC5cbiAgLy8gaHR0cDovL2pzcGVyZi5jb20vZWxlbWVudC1zdHlsZS1vYmplY3QtYWNjZXNzLXZzLXBsYWluLW9iamVjdFxuICAvL1xuICAvLyBQcmVmaWxsIGNhY2hlIHdpdGgga25vd24gY3NzIHByb3BlcnRpZXMgdG8gcmVkdWNlIGFtb3VudCBvZlxuICAvLyBwcm9wZXJ0aWVzIHdlIG5lZWQgdG8gZmVhdHVyZSB0ZXN0IGF0IHJ1bnRpbWUuXG4gIC8vIGh0dHA6Ly9kYXZpZHdhbHNoLm5hbWUvdmVuZG9yLXByZWZpeFxuXG4gIHZhciBjb21wdXRlZCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgJycpO1xuXG4gIGZvciAodmFyIGtleSQxIGluIGNvbXB1dGVkKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICAgIGlmICghaXNOYU4oa2V5JDEpKSBjYWNoZVtjb21wdXRlZFtrZXkkMV1dID0gY29tcHV0ZWRba2V5JDFdO1xuICB9IC8vIFByb3BlcnRpZXMgdGhhdCBjYW5ub3QgYmUgY29ycmVjdGx5IGRldGVjdGVkIHVzaW5nIHRoZVxuICAvLyBjYWNoZSBwcmVmaWxsIG1ldGhvZC5cblxuXG4gIG5vUHJlZmlsbC5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIGRlbGV0ZSBjYWNoZVt4XTtcbiAgfSk7XG59XG4vKipcbiAqIFRlc3QgaWYgYSBwcm9wZXJ0eSBpcyBzdXBwb3J0ZWQsIHJldHVybnMgc3VwcG9ydGVkIHByb3BlcnR5IHdpdGggdmVuZG9yXG4gKiBwcmVmaXggaWYgcmVxdWlyZWQuIFJldHVybnMgYGZhbHNlYCBpZiBub3Qgc3VwcG9ydGVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wIGRhc2ggc2VwYXJhdGVkXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcmV0dXJuIHtTdHJpbmd8Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuXG5mdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICAvLyBGb3Igc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICBpZiAoIWVsKSByZXR1cm4gcHJvcDsgLy8gUmVtb3ZlIGNhY2hlIGZvciBiZW5jaG1hcmsgdGVzdHMgb3IgcmV0dXJuIHByb3BlcnR5IGZyb20gdGhlIGNhY2hlLlxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ2JlbmNobWFyaycgJiYgY2FjaGVbcHJvcF0gIT0gbnVsbCkge1xuICAgIHJldHVybiBjYWNoZVtwcm9wXTtcbiAgfSAvLyBDaGVjayBpZiAndHJhbnNpdGlvbicgb3IgJ3RyYW5zZm9ybScgbmF0aXZlbHkgc3VwcG9ydGVkIGluIGJyb3dzZXIuXG5cblxuICBpZiAocHJvcCA9PT0gJ3RyYW5zaXRpb24nIHx8IHByb3AgPT09ICd0cmFuc2Zvcm0nKSB7XG4gICAgb3B0aW9uc1twcm9wXSA9IHByb3AgaW4gZWwuc3R5bGU7XG4gIH0gLy8gRmluZCBhIHBsdWdpbiBmb3IgY3VycmVudCBwcmVmaXggcHJvcGVydHkuXG5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BlcnR5RGV0ZWN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2FjaGVbcHJvcF0gPSBwcm9wZXJ0eURldGVjdG9yc1tpXShwcm9wLCBlbC5zdHlsZSwgb3B0aW9ucyk7IC8vIEJyZWFrIGxvb3AsIGlmIHZhbHVlIGZvdW5kLlxuXG4gICAgaWYgKGNhY2hlW3Byb3BdKSBicmVhaztcbiAgfSAvLyBSZXNldCBzdHlsZXMgZm9yIGN1cnJlbnQgcHJvcGVydHkuXG4gIC8vIEZpcmVmb3ggY2FuIGV2ZW4gdGhyb3cgYW4gZXJyb3IgZm9yIGludmFsaWQgcHJvcGVydGllcywgZS5nLiwgXCIwXCIuXG5cblxuICB0cnkge1xuICAgIGVsLnN0eWxlW3Byb3BdID0gJyc7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBjYWNoZVtwcm9wXTtcbn1cblxudmFyIGNhY2hlJDEgPSB7fTtcbnZhciB0cmFuc2l0aW9uUHJvcGVydGllcyA9IHtcbiAgdHJhbnNpdGlvbjogMSxcbiAgJ3RyYW5zaXRpb24tcHJvcGVydHknOiAxLFxuICAnLXdlYmtpdC10cmFuc2l0aW9uJzogMSxcbiAgJy13ZWJraXQtdHJhbnNpdGlvbi1wcm9wZXJ0eSc6IDFcbn07XG52YXIgdHJhbnNQcm9wc1JlZ0V4cCA9IC8oXlxccypbXFx3LV0rKXwsIChcXHMqW1xcdy1dKykoPyFbXigpXSpcXCkpL2c7XG52YXIgZWwkMTtcbi8qKlxuICogUmV0dXJucyBwcmVmaXhlZCB2YWx1ZSB0cmFuc2l0aW9uL3RyYW5zZm9ybSBpZiBuZWVkZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1hdGNoXG4gKiBAcGFyYW0ge1N0cmluZ30gcDFcbiAqIEBwYXJhbSB7U3RyaW5nfSBwMlxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcHJlZml4VHJhbnNpdGlvbkNhbGxiYWNrKG1hdGNoLCBwMSwgcDIpIHtcbiAgaWYgKHAxID09PSAndmFyJykgcmV0dXJuICd2YXInO1xuICBpZiAocDEgPT09ICdhbGwnKSByZXR1cm4gJ2FsbCc7XG4gIGlmIChwMiA9PT0gJ2FsbCcpIHJldHVybiAnLCBhbGwnO1xuICB2YXIgcHJlZml4ZWRWYWx1ZSA9IHAxID8gc3VwcG9ydGVkUHJvcGVydHkocDEpIDogXCIsIFwiICsgc3VwcG9ydGVkUHJvcGVydHkocDIpO1xuICBpZiAoIXByZWZpeGVkVmFsdWUpIHJldHVybiBwMSB8fCBwMjtcbiAgcmV0dXJuIHByZWZpeGVkVmFsdWU7XG59XG5cbmlmIChpc0luQnJvd3NlcikgZWwkMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbi8qKlxuICogUmV0dXJucyBwcmVmaXhlZCB2YWx1ZSBpZiBuZWVkZWQuIFJldHVybnMgYGZhbHNlYCBpZiB2YWx1ZSBpcyBub3Qgc3VwcG9ydGVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtTdHJpbmd8Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydGVkVmFsdWUocHJvcGVydHksIHZhbHVlKSB7XG4gIC8vIEZvciBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gIHZhciBwcmVmaXhlZFZhbHVlID0gdmFsdWU7XG4gIGlmICghZWwkMSB8fCBwcm9wZXJ0eSA9PT0gJ2NvbnRlbnQnKSByZXR1cm4gdmFsdWU7IC8vIEl0IGlzIGEgc3RyaW5nIG9yIGEgbnVtYmVyIGFzIGEgc3RyaW5nIGxpa2UgJzEnLlxuICAvLyBXZSB3YW50IG9ubHkgcHJlZml4YWJsZSB2YWx1ZXMgaGVyZS5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuXG4gIGlmICh0eXBlb2YgcHJlZml4ZWRWYWx1ZSAhPT0gJ3N0cmluZycgfHwgIWlzTmFOKHBhcnNlSW50KHByZWZpeGVkVmFsdWUsIDEwKSkpIHtcbiAgICByZXR1cm4gcHJlZml4ZWRWYWx1ZTtcbiAgfSAvLyBDcmVhdGUgY2FjaGUga2V5IGZvciBjdXJyZW50IHZhbHVlLlxuXG5cbiAgdmFyIGNhY2hlS2V5ID0gcHJvcGVydHkgKyBwcmVmaXhlZFZhbHVlOyAvLyBSZW1vdmUgY2FjaGUgZm9yIGJlbmNobWFyayB0ZXN0cyBvciByZXR1cm4gdmFsdWUgZnJvbSBjYWNoZS5cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdiZW5jaG1hcmsnICYmIGNhY2hlJDFbY2FjaGVLZXldICE9IG51bGwpIHtcbiAgICByZXR1cm4gY2FjaGUkMVtjYWNoZUtleV07XG4gIH0gLy8gSUUgY2FuIGV2ZW4gdGhyb3cgYW4gZXJyb3IgaW4gc29tZSBjYXNlcywgZm9yIGUuZy4gc3R5bGUuY29udGVudCA9ICdiYXInLlxuXG5cbiAgdHJ5IHtcbiAgICAvLyBUZXN0IHZhbHVlIGFzIGl0IGlzLlxuICAgIGVsJDEuc3R5bGVbcHJvcGVydHldID0gcHJlZml4ZWRWYWx1ZTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gUmV0dXJuIGZhbHNlIGlmIHZhbHVlIG5vdCBzdXBwb3J0ZWQuXG4gICAgY2FjaGUkMVtjYWNoZUtleV0gPSBmYWxzZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gSWYgJ3RyYW5zaXRpb24nIG9yICd0cmFuc2l0aW9uLXByb3BlcnR5JyBwcm9wZXJ0eS5cblxuXG4gIGlmICh0cmFuc2l0aW9uUHJvcGVydGllc1twcm9wZXJ0eV0pIHtcbiAgICBwcmVmaXhlZFZhbHVlID0gcHJlZml4ZWRWYWx1ZS5yZXBsYWNlKHRyYW5zUHJvcHNSZWdFeHAsIHByZWZpeFRyYW5zaXRpb25DYWxsYmFjayk7XG4gIH0gZWxzZSBpZiAoZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPT09ICcnKSB7XG4gICAgLy8gVmFsdWUgd2l0aCBhIHZlbmRvciBwcmVmaXguXG4gICAgcHJlZml4ZWRWYWx1ZSA9IHByZWZpeC5jc3MgKyBwcmVmaXhlZFZhbHVlOyAvLyBIYXJkY29kZSB0ZXN0IHRvIGNvbnZlcnQgXCJmbGV4XCIgdG8gXCItbXMtZmxleGJveFwiIGZvciBJRTEwLlxuXG4gICAgaWYgKHByZWZpeGVkVmFsdWUgPT09ICctbXMtZmxleCcpIGVsJDEuc3R5bGVbcHJvcGVydHldID0gJy1tcy1mbGV4Ym94JzsgLy8gVGVzdCBwcmVmaXhlZCB2YWx1ZS5cblxuICAgIGVsJDEuc3R5bGVbcHJvcGVydHldID0gcHJlZml4ZWRWYWx1ZTsgLy8gUmV0dXJuIGZhbHNlIGlmIHZhbHVlIG5vdCBzdXBwb3J0ZWQuXG5cbiAgICBpZiAoZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPT09ICcnKSB7XG4gICAgICBjYWNoZSQxW2NhY2hlS2V5XSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSAvLyBSZXNldCBzdHlsZXMgZm9yIGN1cnJlbnQgcHJvcGVydHkuXG5cblxuICBlbCQxLnN0eWxlW3Byb3BlcnR5XSA9ICcnOyAvLyBXcml0ZSBjdXJyZW50IHZhbHVlIHRvIGNhY2hlLlxuXG4gIGNhY2hlJDFbY2FjaGVLZXldID0gcHJlZml4ZWRWYWx1ZTtcbiAgcmV0dXJuIGNhY2hlJDFbY2FjaGVLZXldO1xufVxuXG5leHBvcnQgeyBwcmVmaXgsIHN1cHBvcnRlZEtleWZyYW1lcywgc3VwcG9ydGVkUHJvcGVydHksIHN1cHBvcnRlZFZhbHVlIH07XG4iLCJpbXBvcnQgeyBzdXBwb3J0ZWRLZXlmcmFtZXMsIHN1cHBvcnRlZFZhbHVlLCBzdXBwb3J0ZWRQcm9wZXJ0eSB9IGZyb20gJ2Nzcy12ZW5kb3InO1xuaW1wb3J0IHsgdG9Dc3NWYWx1ZSB9IGZyb20gJ2pzcyc7XG5cbi8qKlxuICogQWRkIHZlbmRvciBwcmVmaXggdG8gYSBwcm9wZXJ0eSBuYW1lIHdoZW4gbmVlZGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24ganNzVmVuZG9yUHJlZml4ZXIoKSB7XG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1J1bGUocnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgPT09ICdrZXlmcmFtZXMnKSB7XG4gICAgICB2YXIgYXRSdWxlID0gcnVsZTtcbiAgICAgIGF0UnVsZS5hdCA9IHN1cHBvcnRlZEtleWZyYW1lcyhhdFJ1bGUuYXQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHByZWZpeFN0eWxlKHN0eWxlKSB7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcF07XG5cbiAgICAgIGlmIChwcm9wID09PSAnZmFsbGJhY2tzJyAmJiBBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBzdHlsZVtwcm9wXSA9IHZhbHVlLm1hcChwcmVmaXhTdHlsZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hhbmdlUHJvcCA9IGZhbHNlO1xuICAgICAgdmFyIHN1cHBvcnRlZFByb3AgPSBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKTtcbiAgICAgIGlmIChzdXBwb3J0ZWRQcm9wICYmIHN1cHBvcnRlZFByb3AgIT09IHByb3ApIGNoYW5nZVByb3AgPSB0cnVlO1xuICAgICAgdmFyIGNoYW5nZVZhbHVlID0gZmFsc2U7XG4gICAgICB2YXIgc3VwcG9ydGVkVmFsdWUkMSA9IHN1cHBvcnRlZFZhbHVlKHN1cHBvcnRlZFByb3AsIHRvQ3NzVmFsdWUodmFsdWUpKTtcbiAgICAgIGlmIChzdXBwb3J0ZWRWYWx1ZSQxICYmIHN1cHBvcnRlZFZhbHVlJDEgIT09IHZhbHVlKSBjaGFuZ2VWYWx1ZSA9IHRydWU7XG5cbiAgICAgIGlmIChjaGFuZ2VQcm9wIHx8IGNoYW5nZVZhbHVlKSB7XG4gICAgICAgIGlmIChjaGFuZ2VQcm9wKSBkZWxldGUgc3R5bGVbcHJvcF07XG4gICAgICAgIHN0eWxlW3N1cHBvcnRlZFByb3AgfHwgcHJvcF0gPSBzdXBwb3J0ZWRWYWx1ZSQxIHx8IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuIHN0eWxlO1xuICAgIHJldHVybiBwcmVmaXhTdHlsZShzdHlsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wKSB7XG4gICAgcmV0dXJuIHN1cHBvcnRlZFZhbHVlKHByb3AsIHRvQ3NzVmFsdWUodmFsdWUpKSB8fCB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzUnVsZTogb25Qcm9jZXNzUnVsZSxcbiAgICBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGUsXG4gICAgb25DaGFuZ2VWYWx1ZTogb25DaGFuZ2VWYWx1ZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBqc3NWZW5kb3JQcmVmaXhlcjtcbiIsImltcG9ydCBmdW5jdGlvbnMgZnJvbSAnanNzLXBsdWdpbi1ydWxlLXZhbHVlLWZ1bmN0aW9uJztcbmltcG9ydCBnbG9iYWwgZnJvbSAnanNzLXBsdWdpbi1nbG9iYWwnO1xuaW1wb3J0IG5lc3RlZCBmcm9tICdqc3MtcGx1Z2luLW5lc3RlZCc7XG5pbXBvcnQgY2FtZWxDYXNlIGZyb20gJ2pzcy1wbHVnaW4tY2FtZWwtY2FzZSc7XG5pbXBvcnQgZGVmYXVsdFVuaXQgZnJvbSAnanNzLXBsdWdpbi1kZWZhdWx0LXVuaXQnO1xuaW1wb3J0IHZlbmRvclByZWZpeGVyIGZyb20gJ2pzcy1wbHVnaW4tdmVuZG9yLXByZWZpeGVyJztcbmltcG9ydCBwcm9wc1NvcnQgZnJvbSAnanNzLXBsdWdpbi1wcm9wcy1zb3J0JzsgLy8gU3Vic2V0IG9mIGpzcy1wcmVzZXQtZGVmYXVsdCB3aXRoIG9ubHkgdGhlIHBsdWdpbnMgdGhlIE1hdGVyaWFsLVVJIGNvbXBvbmVudHMgYXJlIHVzaW5nLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBqc3NQcmVzZXQoKSB7XG4gIHJldHVybiB7XG4gICAgcGx1Z2luczogW2Z1bmN0aW9ucygpLCBnbG9iYWwoKSwgbmVzdGVkKCksIGNhbWVsQ2FzZSgpLCBkZWZhdWx0VW5pdCgpLCAvLyBEaXNhYmxlIHRoZSB2ZW5kb3IgcHJlZml4ZXIgc2VydmVyLXNpZGUsIGl0IGRvZXMgbm90aGluZy5cbiAgICAvLyBUaGlzIHdheSwgd2UgY2FuIGdldCBhIHBlcmZvcm1hbmNlIGJvb3N0LlxuICAgIC8vIEluIHRoZSBkb2N1bWVudGF0aW9uLCB3ZSBhcmUgdXNpbmcgYGF1dG9wcmVmaXhlcmAgdG8gc29sdmUgdGhpcyBwcm9ibGVtLlxuICAgIHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHZlbmRvclByZWZpeGVyKCksIHByb3BzU29ydCgpXVxuICB9O1xufSIsIi8qKlxuICogU29ydCBwcm9wcyBieSBsZW5ndGguXG4gKi9cbmZ1bmN0aW9uIGpzc1Byb3BzU29ydCgpIHtcbiAgdmFyIHNvcnQgPSBmdW5jdGlvbiBzb3J0KHByb3AwLCBwcm9wMSkge1xuICAgIGlmIChwcm9wMC5sZW5ndGggPT09IHByb3AxLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHByb3AwID4gcHJvcDEgPyAxIDogLTE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3AwLmxlbmd0aCAtIHByb3AxLmxlbmd0aDtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1N0eWxlOiBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuIHN0eWxlO1xuICAgICAgdmFyIG5ld1N0eWxlID0ge307XG4gICAgICB2YXIgcHJvcHMgPSBPYmplY3Qua2V5cyhzdHlsZSkuc29ydChzb3J0KTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBuZXdTdHlsZVtwcm9wc1tpXV0gPSBzdHlsZVtwcm9wc1tpXV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXdTdHlsZTtcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc1Byb3BzU29ydDtcbiIsIi8vIFVzZWQgaHR0cHM6Ly9naXRodWIuY29tL3RoaW5rbG9vcC9tdWx0aS1rZXktY2FjaGUgYXMgaW5zcGlyYXRpb25cbnZhciBtdWx0aUtleVN0b3JlID0ge1xuICBzZXQ6IGZ1bmN0aW9uIHNldChjYWNoZSwga2V5MSwga2V5MiwgdmFsdWUpIHtcbiAgICB2YXIgc3ViQ2FjaGUgPSBjYWNoZS5nZXQoa2V5MSk7XG5cbiAgICBpZiAoIXN1YkNhY2hlKSB7XG4gICAgICBzdWJDYWNoZSA9IG5ldyBNYXAoKTtcbiAgICAgIGNhY2hlLnNldChrZXkxLCBzdWJDYWNoZSk7XG4gICAgfVxuXG4gICAgc3ViQ2FjaGUuc2V0KGtleTIsIHZhbHVlKTtcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoY2FjaGUsIGtleTEsIGtleTIpIHtcbiAgICB2YXIgc3ViQ2FjaGUgPSBjYWNoZS5nZXQoa2V5MSk7XG4gICAgcmV0dXJuIHN1YkNhY2hlID8gc3ViQ2FjaGUuZ2V0KGtleTIpIDogdW5kZWZpbmVkO1xuICB9LFxuICBkZWxldGU6IGZ1bmN0aW9uIF9kZWxldGUoY2FjaGUsIGtleTEsIGtleTIpIHtcbiAgICB2YXIgc3ViQ2FjaGUgPSBjYWNoZS5nZXQoa2V5MSk7XG4gICAgc3ViQ2FjaGUuZGVsZXRlKGtleTIpO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbXVsdGlLZXlTdG9yZTsiLCIvKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvcHJlZmVyLWRlZmF1bHQtZXhwb3J0ICovXG4vLyBHbG9iYWwgaW5kZXggY291bnRlciB0byBwcmVzZXJ2ZSBzb3VyY2Ugb3JkZXIuXG4vLyBXZSBjcmVhdGUgdGhlIHN0eWxlIHNoZWV0IGR1cmluZyB0aGUgY3JlYXRpb24gb2YgdGhlIGNvbXBvbmVudCxcbi8vIGNoaWxkcmVuIGFyZSBoYW5kbGVkIGFmdGVyIHRoZSBwYXJlbnRzLCBzbyB0aGUgb3JkZXIgb2Ygc3R5bGUgZWxlbWVudHMgd291bGQgYmUgcGFyZW50LT5jaGlsZC5cbi8vIEl0IGlzIGEgcHJvYmxlbSB0aG91Z2ggd2hlbiBhIHBhcmVudCBwYXNzZXMgYSBjbGFzc05hbWVcbi8vIHdoaWNoIG5lZWRzIHRvIG92ZXJyaWRlIGFueSBjaGlsZCdzIHN0eWxlcy5cbi8vIFN0eWxlU2hlZXQgb2YgdGhlIGNoaWxkIGhhcyBhIGhpZ2hlciBzcGVjaWZpY2l0eSwgYmVjYXVzZSBvZiB0aGUgc291cmNlIG9yZGVyLlxuLy8gU28gb3VyIHNvbHV0aW9uIGlzIHRvIHJlbmRlciBzaGVldHMgdGhlbSBpbiB0aGUgcmV2ZXJzZSBvcmRlciBjaGlsZC0+c2hlZXQsIHNvXG4vLyB0aGF0IHBhcmVudCBoYXMgYSBoaWdoZXIgc3BlY2lmaWNpdHkuXG52YXIgaW5kZXhDb3VudGVyID0gLTFlOTtcbmV4cG9ydCBmdW5jdGlvbiBpbmNyZW1lbnQoKSB7XG4gIGluZGV4Q291bnRlciArPSAxO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGluZGV4Q291bnRlciA+PSAwKSB7XG4gICAgICBjb25zb2xlLndhcm4oWydNYXRlcmlhbC1VSTogWW91IG1pZ2h0IGhhdmUgYSBtZW1vcnkgbGVhay4nLCAnVGhlIGluZGV4Q291bnRlciBpcyBub3Qgc3VwcG9zZWQgdG8gZ3JvdyB0aGF0IG11Y2guJ10uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpbmRleENvdW50ZXI7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IG5vb3BUaGVtZSBmcm9tICcuL25vb3BUaGVtZSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTdHlsZXNDcmVhdG9yKHN0eWxlc09yQ3JlYXRvcikge1xuICB2YXIgdGhlbWluZ0VuYWJsZWQgPSB0eXBlb2Ygc3R5bGVzT3JDcmVhdG9yID09PSAnZnVuY3Rpb24nO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKF90eXBlb2Yoc3R5bGVzT3JDcmVhdG9yKSAhPT0gJ29iamVjdCcgJiYgIXRoZW1pbmdFbmFibGVkKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IFRoZSBgc3R5bGVzYCBhcmd1bWVudCBwcm92aWRlZCBpcyBpbnZhbGlkLicsICdZb3UgbmVlZCB0byBwcm92aWRlIGEgZnVuY3Rpb24gZ2VuZXJhdGluZyB0aGUgc3R5bGVzIG9yIGEgc3R5bGVzIG9iamVjdC4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSh0aGVtZSwgbmFtZSkge1xuICAgICAgdmFyIHN0eWxlcztcblxuICAgICAgdHJ5IHtcbiAgICAgICAgc3R5bGVzID0gdGhlbWluZ0VuYWJsZWQgPyBzdHlsZXNPckNyZWF0b3IodGhlbWUpIDogc3R5bGVzT3JDcmVhdG9yO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHRoZW1pbmdFbmFibGVkID09PSB0cnVlICYmIHRoZW1lID09PSBub29wVGhlbWUpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IHByZXBlbmQgZXJyb3IgbWVzc2FnZS9uYW1lIGluc3RlYWRcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogVGhlIGBzdHlsZXNgIGFyZ3VtZW50IHByb3ZpZGVkIGlzIGludmFsaWQuJywgJ1lvdSBhcmUgcHJvdmlkaW5nIGEgZnVuY3Rpb24gd2l0aG91dCBhIHRoZW1lIGluIHRoZSBjb250ZXh0LicsICdPbmUgb2YgdGhlIHBhcmVudCBlbGVtZW50cyBuZWVkcyB0byB1c2UgYSBUaGVtZVByb3ZpZGVyLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG5cbiAgICAgIGlmICghbmFtZSB8fCAhdGhlbWUub3ZlcnJpZGVzIHx8ICF0aGVtZS5vdmVycmlkZXNbbmFtZV0pIHtcbiAgICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICAgIH1cblxuICAgICAgdmFyIG92ZXJyaWRlcyA9IHRoZW1lLm92ZXJyaWRlc1tuYW1lXTtcblxuICAgICAgdmFyIHN0eWxlc1dpdGhPdmVycmlkZXMgPSBfZXh0ZW5kcyh7fSwgc3R5bGVzKTtcblxuICAgICAgT2JqZWN0LmtleXMob3ZlcnJpZGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAoIXN0eWxlc1dpdGhPdmVycmlkZXNba2V5XSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFsnTWF0ZXJpYWwtVUk6IFlvdSBhcmUgdHJ5aW5nIHRvIG92ZXJyaWRlIGEgc3R5bGUgdGhhdCBkb2VzIG5vdCBleGlzdC4nLCBcIkZpeCB0aGUgYFwiLmNvbmNhdChrZXksIFwiYCBrZXkgb2YgYHRoZW1lLm92ZXJyaWRlcy5cIikuY29uY2F0KG5hbWUsIFwiYC5cIildLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZXNXaXRoT3ZlcnJpZGVzW2tleV0gPSBkZWVwbWVyZ2Uoc3R5bGVzV2l0aE92ZXJyaWRlc1trZXldLCBvdmVycmlkZXNba2V5XSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzdHlsZXNXaXRoT3ZlcnJpZGVzO1xuICAgIH0sXG4gICAgb3B0aW9uczoge31cbiAgfTtcbn0iLCIvLyBXZSB1c2UgdGhlIHNhbWUgZW1wdHkgb2JqZWN0IHRvIHJlZiBjb3VudCB0aGUgc3R5bGVzIHRoYXQgZG9uJ3QgbmVlZCBhIHRoZW1lIG9iamVjdC5cbnZhciBub29wVGhlbWUgPSB7fTtcbmV4cG9ydCBkZWZhdWx0IG5vb3BUaGVtZTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZ2V0RHluYW1pY1N0eWxlcyB9IGZyb20gJ2pzcyc7XG5pbXBvcnQgbWVyZ2VDbGFzc2VzIGZyb20gJy4uL21lcmdlQ2xhc3Nlcyc7XG5pbXBvcnQgbXVsdGlLZXlTdG9yZSBmcm9tICcuL211bHRpS2V5U3RvcmUnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJztcbmltcG9ydCB7IFN0eWxlc0NvbnRleHQgfSBmcm9tICcuLi9TdHlsZXNQcm92aWRlcic7XG5pbXBvcnQgeyBpbmNyZW1lbnQgfSBmcm9tICcuL2luZGV4Q291bnRlcic7XG5pbXBvcnQgZ2V0U3R5bGVzQ3JlYXRvciBmcm9tICcuLi9nZXRTdHlsZXNDcmVhdG9yJztcbmltcG9ydCBub29wVGhlbWUgZnJvbSAnLi4vZ2V0U3R5bGVzQ3JlYXRvci9ub29wVGhlbWUnO1xuXG5mdW5jdGlvbiBnZXRDbGFzc2VzKF9yZWYsIGNsYXNzZXMsIENvbXBvbmVudCkge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgc3R5bGVzT3B0aW9ucyA9IF9yZWYuc3R5bGVzT3B0aW9ucztcblxuICBpZiAoc3R5bGVzT3B0aW9ucy5kaXNhYmxlR2VuZXJhdGlvbikge1xuICAgIHJldHVybiBjbGFzc2VzIHx8IHt9O1xuICB9XG5cbiAgaWYgKCFzdGF0ZS5jYWNoZUNsYXNzZXMpIHtcbiAgICBzdGF0ZS5jYWNoZUNsYXNzZXMgPSB7XG4gICAgICAvLyBDYWNoZSBmb3IgdGhlIGZpbmFsaXplZCBjbGFzc2VzIHZhbHVlLlxuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAvLyBDYWNoZSBmb3IgdGhlIGxhc3QgdXNlZCBjbGFzc2VzIHByb3AgcG9pbnRlci5cbiAgICAgIGxhc3RQcm9wOiBudWxsLFxuICAgICAgLy8gQ2FjaGUgZm9yIHRoZSBsYXN0IHVzZWQgcmVuZGVyZWQgY2xhc3NlcyBwb2ludGVyLlxuICAgICAgbGFzdEpTUzoge31cbiAgICB9O1xuICB9IC8vIFRyYWNrcyBpZiBlaXRoZXIgdGhlIHJlbmRlcmVkIGNsYXNzZXMgb3IgY2xhc3NlcyBwcm9wIGhhcyBjaGFuZ2VkLFxuICAvLyByZXF1aXJpbmcgdGhlIGdlbmVyYXRpb24gb2YgYSBuZXcgZmluYWxpemVkIGNsYXNzZXMgb2JqZWN0LlxuXG5cbiAgdmFyIGdlbmVyYXRlID0gZmFsc2U7XG5cbiAgaWYgKHN0YXRlLmNsYXNzZXMgIT09IHN0YXRlLmNhY2hlQ2xhc3Nlcy5sYXN0SlNTKSB7XG4gICAgc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RKU1MgPSBzdGF0ZS5jbGFzc2VzO1xuICAgIGdlbmVyYXRlID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChjbGFzc2VzICE9PSBzdGF0ZS5jYWNoZUNsYXNzZXMubGFzdFByb3ApIHtcbiAgICBzdGF0ZS5jYWNoZUNsYXNzZXMubGFzdFByb3AgPSBjbGFzc2VzO1xuICAgIGdlbmVyYXRlID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChnZW5lcmF0ZSkge1xuICAgIHN0YXRlLmNhY2hlQ2xhc3Nlcy52YWx1ZSA9IG1lcmdlQ2xhc3Nlcyh7XG4gICAgICBiYXNlQ2xhc3Nlczogc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RKU1MsXG4gICAgICBuZXdDbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgQ29tcG9uZW50OiBDb21wb25lbnRcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZS5jYWNoZUNsYXNzZXMudmFsdWU7XG59XG5cbmZ1bmN0aW9uIGF0dGFjaChfcmVmMiwgcHJvcHMpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICB0aGVtZSA9IF9yZWYyLnRoZW1lLFxuICAgICAgc3R5bGVzT3B0aW9ucyA9IF9yZWYyLnN0eWxlc09wdGlvbnMsXG4gICAgICBzdHlsZXNDcmVhdG9yID0gX3JlZjIuc3R5bGVzQ3JlYXRvcixcbiAgICAgIG5hbWUgPSBfcmVmMi5uYW1lO1xuXG4gIGlmIChzdHlsZXNPcHRpb25zLmRpc2FibGVHZW5lcmF0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNoZWV0TWFuYWdlciA9IG11bHRpS2V5U3RvcmUuZ2V0KHN0eWxlc09wdGlvbnMuc2hlZXRzTWFuYWdlciwgc3R5bGVzQ3JlYXRvciwgdGhlbWUpO1xuXG4gIGlmICghc2hlZXRNYW5hZ2VyKSB7XG4gICAgc2hlZXRNYW5hZ2VyID0ge1xuICAgICAgcmVmczogMCxcbiAgICAgIHN0YXRpY1NoZWV0OiBudWxsLFxuICAgICAgZHluYW1pY1N0eWxlczogbnVsbFxuICAgIH07XG4gICAgbXVsdGlLZXlTdG9yZS5zZXQoc3R5bGVzT3B0aW9ucy5zaGVldHNNYW5hZ2VyLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSwgc2hlZXRNYW5hZ2VyKTtcbiAgfVxuXG4gIHZhciBvcHRpb25zID0gX2V4dGVuZHMoe30sIHN0eWxlc0NyZWF0b3Iub3B0aW9ucywgc3R5bGVzT3B0aW9ucywge1xuICAgIHRoZW1lOiB0aGVtZSxcbiAgICBmbGlwOiB0eXBlb2Ygc3R5bGVzT3B0aW9ucy5mbGlwID09PSAnYm9vbGVhbicgPyBzdHlsZXNPcHRpb25zLmZsaXAgOiB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnXG4gIH0pO1xuXG4gIG9wdGlvbnMuZ2VuZXJhdGVJZCA9IG9wdGlvbnMuc2VydmVyR2VuZXJhdGVDbGFzc05hbWUgfHwgb3B0aW9ucy5nZW5lcmF0ZUNsYXNzTmFtZTtcbiAgdmFyIHNoZWV0c1JlZ2lzdHJ5ID0gc3R5bGVzT3B0aW9ucy5zaGVldHNSZWdpc3RyeTtcblxuICBpZiAoc2hlZXRNYW5hZ2VyLnJlZnMgPT09IDApIHtcbiAgICB2YXIgc3RhdGljU2hlZXQ7XG5cbiAgICBpZiAoc3R5bGVzT3B0aW9ucy5zaGVldHNDYWNoZSkge1xuICAgICAgc3RhdGljU2hlZXQgPSBtdWx0aUtleVN0b3JlLmdldChzdHlsZXNPcHRpb25zLnNoZWV0c0NhY2hlLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSk7XG4gICAgfVxuXG4gICAgdmFyIHN0eWxlcyA9IHN0eWxlc0NyZWF0b3IuY3JlYXRlKHRoZW1lLCBuYW1lKTtcblxuICAgIGlmICghc3RhdGljU2hlZXQpIHtcbiAgICAgIHN0YXRpY1NoZWV0ID0gc3R5bGVzT3B0aW9ucy5qc3MuY3JlYXRlU3R5bGVTaGVldChzdHlsZXMsIF9leHRlbmRzKHtcbiAgICAgICAgbGluazogZmFsc2VcbiAgICAgIH0sIG9wdGlvbnMpKTtcbiAgICAgIHN0YXRpY1NoZWV0LmF0dGFjaCgpO1xuXG4gICAgICBpZiAoc3R5bGVzT3B0aW9ucy5zaGVldHNDYWNoZSkge1xuICAgICAgICBtdWx0aUtleVN0b3JlLnNldChzdHlsZXNPcHRpb25zLnNoZWV0c0NhY2hlLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSwgc3RhdGljU2hlZXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzaGVldHNSZWdpc3RyeSkge1xuICAgICAgc2hlZXRzUmVnaXN0cnkuYWRkKHN0YXRpY1NoZWV0KTtcbiAgICB9XG5cbiAgICBzaGVldE1hbmFnZXIuc3RhdGljU2hlZXQgPSBzdGF0aWNTaGVldDtcbiAgICBzaGVldE1hbmFnZXIuZHluYW1pY1N0eWxlcyA9IGdldER5bmFtaWNTdHlsZXMoc3R5bGVzKTtcbiAgfVxuXG4gIGlmIChzaGVldE1hbmFnZXIuZHluYW1pY1N0eWxlcykge1xuICAgIHZhciBkeW5hbWljU2hlZXQgPSBzdHlsZXNPcHRpb25zLmpzcy5jcmVhdGVTdHlsZVNoZWV0KHNoZWV0TWFuYWdlci5keW5hbWljU3R5bGVzLCBfZXh0ZW5kcyh7XG4gICAgICBsaW5rOiB0cnVlXG4gICAgfSwgb3B0aW9ucykpO1xuICAgIGR5bmFtaWNTaGVldC51cGRhdGUocHJvcHMpO1xuICAgIGR5bmFtaWNTaGVldC5hdHRhY2goKTtcbiAgICBzdGF0ZS5keW5hbWljU2hlZXQgPSBkeW5hbWljU2hlZXQ7XG4gICAgc3RhdGUuY2xhc3NlcyA9IG1lcmdlQ2xhc3Nlcyh7XG4gICAgICBiYXNlQ2xhc3Nlczogc2hlZXRNYW5hZ2VyLnN0YXRpY1NoZWV0LmNsYXNzZXMsXG4gICAgICBuZXdDbGFzc2VzOiBkeW5hbWljU2hlZXQuY2xhc3Nlc1xuICAgIH0pO1xuXG4gICAgaWYgKHNoZWV0c1JlZ2lzdHJ5KSB7XG4gICAgICBzaGVldHNSZWdpc3RyeS5hZGQoZHluYW1pY1NoZWV0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUuY2xhc3NlcyA9IHNoZWV0TWFuYWdlci5zdGF0aWNTaGVldC5jbGFzc2VzO1xuICB9XG5cbiAgc2hlZXRNYW5hZ2VyLnJlZnMgKz0gMTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlKF9yZWYzLCBwcm9wcykge1xuICB2YXIgc3RhdGUgPSBfcmVmMy5zdGF0ZTtcblxuICBpZiAoc3RhdGUuZHluYW1pY1NoZWV0KSB7XG4gICAgc3RhdGUuZHluYW1pY1NoZWV0LnVwZGF0ZShwcm9wcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGV0YWNoKF9yZWY0KSB7XG4gIHZhciBzdGF0ZSA9IF9yZWY0LnN0YXRlLFxuICAgICAgdGhlbWUgPSBfcmVmNC50aGVtZSxcbiAgICAgIHN0eWxlc09wdGlvbnMgPSBfcmVmNC5zdHlsZXNPcHRpb25zLFxuICAgICAgc3R5bGVzQ3JlYXRvciA9IF9yZWY0LnN0eWxlc0NyZWF0b3I7XG5cbiAgaWYgKHN0eWxlc09wdGlvbnMuZGlzYWJsZUdlbmVyYXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2hlZXRNYW5hZ2VyID0gbXVsdGlLZXlTdG9yZS5nZXQoc3R5bGVzT3B0aW9ucy5zaGVldHNNYW5hZ2VyLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSk7XG4gIHNoZWV0TWFuYWdlci5yZWZzIC09IDE7XG4gIHZhciBzaGVldHNSZWdpc3RyeSA9IHN0eWxlc09wdGlvbnMuc2hlZXRzUmVnaXN0cnk7XG5cbiAgaWYgKHNoZWV0TWFuYWdlci5yZWZzID09PSAwKSB7XG4gICAgbXVsdGlLZXlTdG9yZS5kZWxldGUoc3R5bGVzT3B0aW9ucy5zaGVldHNNYW5hZ2VyLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSk7XG4gICAgc3R5bGVzT3B0aW9ucy5qc3MucmVtb3ZlU3R5bGVTaGVldChzaGVldE1hbmFnZXIuc3RhdGljU2hlZXQpO1xuXG4gICAgaWYgKHNoZWV0c1JlZ2lzdHJ5KSB7XG4gICAgICBzaGVldHNSZWdpc3RyeS5yZW1vdmUoc2hlZXRNYW5hZ2VyLnN0YXRpY1NoZWV0KTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3RhdGUuZHluYW1pY1NoZWV0KSB7XG4gICAgc3R5bGVzT3B0aW9ucy5qc3MucmVtb3ZlU3R5bGVTaGVldChzdGF0ZS5keW5hbWljU2hlZXQpO1xuXG4gICAgaWYgKHNoZWV0c1JlZ2lzdHJ5KSB7XG4gICAgICBzaGVldHNSZWdpc3RyeS5yZW1vdmUoc3RhdGUuZHluYW1pY1NoZWV0KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXNlU3luY2hyb25vdXNFZmZlY3QoZnVuYywgdmFsdWVzKSB7XG4gIHZhciBrZXkgPSBSZWFjdC51c2VSZWYoW10pO1xuICB2YXIgb3V0cHV0OyAvLyBTdG9yZSBcImdlbmVyYXRpb25cIiBrZXkuIEp1c3QgcmV0dXJucyBhIG5ldyBvYmplY3QgZXZlcnkgdGltZVxuXG4gIHZhciBjdXJyZW50S2V5ID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9LCB2YWx1ZXMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAvLyBcInRoZSBmaXJzdCByZW5kZXJcIiwgb3IgXCJtZW1vIGRyb3BwZWQgdGhlIHZhbHVlXCJcblxuICBpZiAoa2V5LmN1cnJlbnQgIT09IGN1cnJlbnRLZXkpIHtcbiAgICBrZXkuY3VycmVudCA9IGN1cnJlbnRLZXk7XG4gICAgb3V0cHV0ID0gZnVuYygpO1xuICB9XG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKG91dHB1dCkge1xuICAgICAgICBvdXRwdXQoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbY3VycmVudEtleV0gLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWFrZVN0eWxlcyhzdHlsZXNPckNyZWF0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lLFxuICAgICAgY2xhc3NOYW1lUHJlZml4T3B0aW9uID0gb3B0aW9ucy5jbGFzc05hbWVQcmVmaXgsXG4gICAgICBDb21wb25lbnQgPSBvcHRpb25zLkNvbXBvbmVudCxcbiAgICAgIF9vcHRpb25zJGRlZmF1bHRUaGVtZSA9IG9wdGlvbnMuZGVmYXVsdFRoZW1lLFxuICAgICAgZGVmYXVsdFRoZW1lID0gX29wdGlvbnMkZGVmYXVsdFRoZW1lID09PSB2b2lkIDAgPyBub29wVGhlbWUgOiBfb3B0aW9ucyRkZWZhdWx0VGhlbWUsXG4gICAgICBzdHlsZXNPcHRpb25zMiA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRpb25zLCBbXCJuYW1lXCIsIFwiY2xhc3NOYW1lUHJlZml4XCIsIFwiQ29tcG9uZW50XCIsIFwiZGVmYXVsdFRoZW1lXCJdKTtcblxuICB2YXIgc3R5bGVzQ3JlYXRvciA9IGdldFN0eWxlc0NyZWF0b3Ioc3R5bGVzT3JDcmVhdG9yKTtcbiAgdmFyIGNsYXNzTmFtZVByZWZpeCA9IG5hbWUgfHwgY2xhc3NOYW1lUHJlZml4T3B0aW9uIHx8ICdtYWtlU3R5bGVzJztcbiAgc3R5bGVzQ3JlYXRvci5vcHRpb25zID0ge1xuICAgIGluZGV4OiBpbmNyZW1lbnQoKSxcbiAgICBuYW1lOiBuYW1lLFxuICAgIG1ldGE6IGNsYXNzTmFtZVByZWZpeCxcbiAgICBjbGFzc05hbWVQcmVmaXg6IGNsYXNzTmFtZVByZWZpeFxuICB9O1xuXG4gIHZhciB1c2VTdHlsZXMgPSBmdW5jdGlvbiB1c2VTdHlsZXMoKSB7XG4gICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgdGhlbWUgPSB1c2VUaGVtZSgpIHx8IGRlZmF1bHRUaGVtZTtcblxuICAgIHZhciBzdHlsZXNPcHRpb25zID0gX2V4dGVuZHMoe30sIFJlYWN0LnVzZUNvbnRleHQoU3R5bGVzQ29udGV4dCksIHN0eWxlc09wdGlvbnMyKTtcblxuICAgIHZhciBpbnN0YW5jZSA9IFJlYWN0LnVzZVJlZigpO1xuICAgIHZhciBzaG91bGRVcGRhdGUgPSBSZWFjdC51c2VSZWYoKTtcbiAgICB1c2VTeW5jaHJvbm91c0VmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IHtcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgc3RhdGU6IHt9LFxuICAgICAgICBzdHlsZXNDcmVhdG9yOiBzdHlsZXNDcmVhdG9yLFxuICAgICAgICBzdHlsZXNPcHRpb25zOiBzdHlsZXNPcHRpb25zLFxuICAgICAgICB0aGVtZTogdGhlbWVcbiAgICAgIH07XG4gICAgICBhdHRhY2goY3VycmVudCwgcHJvcHMpO1xuICAgICAgc2hvdWxkVXBkYXRlLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIGluc3RhbmNlLmN1cnJlbnQgPSBjdXJyZW50O1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGV0YWNoKGN1cnJlbnQpO1xuICAgICAgfTtcbiAgICB9LCBbdGhlbWUsIHN0eWxlc0NyZWF0b3JdKTtcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZS5jdXJyZW50KSB7XG4gICAgICAgIHVwZGF0ZShpbnN0YW5jZS5jdXJyZW50LCBwcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIHNob3VsZFVwZGF0ZS5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9KTtcbiAgICB2YXIgY2xhc3NlcyA9IGdldENsYXNzZXMoaW5zdGFuY2UuY3VycmVudCwgcHJvcHMuY2xhc3NlcywgQ29tcG9uZW50KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICAgIFJlYWN0LnVzZURlYnVnVmFsdWUoY2xhc3Nlcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsYXNzZXM7XG4gIH07XG5cbiAgcmV0dXJuIHVzZVN0eWxlcztcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IGdldERpc3BsYXlOYW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQ2xhc3NlcygpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgYmFzZUNsYXNzZXMgPSBvcHRpb25zLmJhc2VDbGFzc2VzLFxuICAgICAgbmV3Q2xhc3NlcyA9IG9wdGlvbnMubmV3Q2xhc3NlcyxcbiAgICAgIENvbXBvbmVudCA9IG9wdGlvbnMuQ29tcG9uZW50O1xuXG4gIGlmICghbmV3Q2xhc3Nlcykge1xuICAgIHJldHVybiBiYXNlQ2xhc3NlcztcbiAgfVxuXG4gIHZhciBuZXh0Q2xhc3NlcyA9IF9leHRlbmRzKHt9LCBiYXNlQ2xhc3Nlcyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIG5ld0NsYXNzZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgdmFsdWUgYFwiLmNvbmNhdChuZXdDbGFzc2VzLCBcImAgXCIpICsgXCJwcm92aWRlZCB0byB0aGUgY2xhc3NlcyBwcm9wIG9mIFwiLmNvbmNhdChnZXREaXNwbGF5TmFtZShDb21wb25lbnQpLCBcIiBpcyBpbmNvcnJlY3QuXCIpLCAnWW91IG1pZ2h0IHdhbnQgdG8gdXNlIHRoZSBjbGFzc05hbWUgcHJvcCBpbnN0ZWFkLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIHJldHVybiBiYXNlQ2xhc3NlcztcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhuZXdDbGFzc2VzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFiYXNlQ2xhc3Nlc1trZXldICYmIG5ld0NsYXNzZXNba2V5XSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUga2V5IGBcIi5jb25jYXQoa2V5LCBcImAgXCIpICsgXCJwcm92aWRlZCB0byB0aGUgY2xhc3NlcyBwcm9wIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiBcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIuXCIpLCBcIllvdSBjYW4gb25seSBvdmVycmlkZSBvbmUgb2YgdGhlIGZvbGxvd2luZzogXCIuY29uY2F0KE9iamVjdC5rZXlzKGJhc2VDbGFzc2VzKS5qb2luKCcsJyksIFwiLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmV3Q2xhc3Nlc1trZXldICYmIHR5cGVvZiBuZXdDbGFzc2VzW2tleV0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSBrZXkgYFwiLmNvbmNhdChrZXksIFwiYCBcIikgKyBcInByb3ZpZGVkIHRvIHRoZSBjbGFzc2VzIHByb3AgaXMgbm90IHZhbGlkIGZvciBcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIuXCIpLCBcIllvdSBuZWVkIHRvIHByb3ZpZGUgYSBub24gZW1wdHkgc3RyaW5nIGluc3RlYWQgb2Y6IFwiLmNvbmNhdChuZXdDbGFzc2VzW2tleV0sIFwiLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuZXdDbGFzc2VzW2tleV0pIHtcbiAgICAgIG5leHRDbGFzc2VzW2tleV0gPSBcIlwiLmNvbmNhdChiYXNlQ2xhc3Nlc1trZXldLCBcIiBcIikuY29uY2F0KG5ld0NsYXNzZXNba2V5XSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG5leHRDbGFzc2VzO1xufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG52YXIgVGhlbWVDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgVGhlbWVDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1RoZW1lQ29udGV4dCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRoZW1lQ29udGV4dDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRoZW1lQ29udGV4dCBmcm9tICcuL1RoZW1lQ29udGV4dCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUaGVtZSgpIHtcbiAgdmFyIHRoZW1lID0gUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRGVidWdWYWx1ZSh0aGVtZSk7XG4gIH1cblxuICByZXR1cm4gdGhlbWU7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgaG9pc3ROb25SZWFjdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMsIGdldERpc3BsYXlOYW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBtYWtlU3R5bGVzIGZyb20gJy4uL21ha2VTdHlsZXMnO1xuaW1wb3J0IGdldFRoZW1lUHJvcHMgZnJvbSAnLi4vZ2V0VGhlbWVQcm9wcyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vdXNlVGhlbWUnOyAvLyBMaW5rIGEgc3R5bGUgc2hlZXQgd2l0aCBhIGNvbXBvbmVudC5cbi8vIEl0IGRvZXMgbm90IG1vZGlmeSB0aGUgY29tcG9uZW50IHBhc3NlZCB0byBpdDtcbi8vIGluc3RlYWQsIGl0IHJldHVybnMgYSBuZXcgY29tcG9uZW50LCB3aXRoIGEgYGNsYXNzZXNgIHByb3BlcnR5LlxuXG52YXIgd2l0aFN0eWxlcyA9IGZ1bmN0aW9uIHdpdGhTdHlsZXMoc3R5bGVzT3JDcmVhdG9yKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChDb21wb25lbnQpIHtcbiAgICB2YXIgZGVmYXVsdFRoZW1lID0gb3B0aW9ucy5kZWZhdWx0VGhlbWUsXG4gICAgICAgIF9vcHRpb25zJHdpdGhUaGVtZSA9IG9wdGlvbnMud2l0aFRoZW1lLFxuICAgICAgICB3aXRoVGhlbWUgPSBfb3B0aW9ucyR3aXRoVGhlbWUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkd2l0aFRoZW1lLFxuICAgICAgICBuYW1lID0gb3B0aW9ucy5uYW1lLFxuICAgICAgICBzdHlsZXNPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIFtcImRlZmF1bHRUaGVtZVwiLCBcIndpdGhUaGVtZVwiLCBcIm5hbWVcIl0pO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChDb21wb25lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoWydZb3UgYXJlIGNhbGxpbmcgd2l0aFN0eWxlcyhzdHlsZXMpKENvbXBvbmVudCkgd2l0aCBhbiB1bmRlZmluZWQgY29tcG9uZW50LicsICdZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIGltcG9ydCBpdC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNsYXNzTmFtZVByZWZpeCA9IG5hbWU7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFuYW1lKSB7XG4gICAgICAgIC8vIFByb3ZpZGUgYSBiZXR0ZXIgRFggb3V0c2lkZSBwcm9kdWN0aW9uLlxuICAgICAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZShDb21wb25lbnQpO1xuXG4gICAgICAgIGlmIChkaXNwbGF5TmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2xhc3NOYW1lUHJlZml4ID0gZGlzcGxheU5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdXNlU3R5bGVzID0gbWFrZVN0eWxlcyhzdHlsZXNPckNyZWF0b3IsIF9leHRlbmRzKHtcbiAgICAgIGRlZmF1bHRUaGVtZTogZGVmYXVsdFRoZW1lLFxuICAgICAgQ29tcG9uZW50OiBDb21wb25lbnQsXG4gICAgICBuYW1lOiBuYW1lIHx8IENvbXBvbmVudC5kaXNwbGF5TmFtZSxcbiAgICAgIGNsYXNzTmFtZVByZWZpeDogY2xhc3NOYW1lUHJlZml4XG4gICAgfSwgc3R5bGVzT3B0aW9ucykpO1xuICAgIHZhciBXaXRoU3R5bGVzID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gV2l0aFN0eWxlcyhwcm9wcywgcmVmKSB7XG4gICAgICB2YXIgY2xhc3Nlc1Byb3AgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgICAgIGlubmVyUmVmID0gcHJvcHMuaW5uZXJSZWYsXG4gICAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJpbm5lclJlZlwiXSk7IC8vIFRoZSB3cmFwcGVyIHJlY2VpdmVzIG9ubHkgdXNlciBzdXBwbGllZCBwcm9wcywgd2hpY2ggY291bGQgYmUgYSBzdWJzZXQgb2ZcbiAgICAgIC8vIHRoZSBhY3R1YWwgcHJvcHMgQ29tcG9uZW50IG1pZ2h0IHJlY2VpdmUgZHVlIHRvIG1lcmdpbmcgd2l0aCBkZWZhdWx0UHJvcHMuXG4gICAgICAvLyBTbyBjb3B5aW5nIGl0IGhlcmUgd291bGQgZ2l2ZSB1cyB0aGUgc2FtZSByZXN1bHQgaW4gdGhlIHdyYXBwZXIgYXMgd2VsbC5cblxuXG4gICAgICB2YXIgY2xhc3NlcyA9IHVzZVN0eWxlcyhfZXh0ZW5kcyh7fSwgQ29tcG9uZW50LmRlZmF1bHRQcm9wcywgcHJvcHMpKTtcbiAgICAgIHZhciB0aGVtZTtcbiAgICAgIHZhciBtb3JlID0gb3RoZXI7XG5cbiAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgfHwgd2l0aFRoZW1lKSB7XG4gICAgICAgIC8vIG5hbWUgYW5kIHdpdGhUaGVtZSBhcmUgaW52YXJpYW50IGluIHRoZSBvdXRlciBzY29wZVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICAgICAgdGhlbWUgPSB1c2VUaGVtZSgpIHx8IGRlZmF1bHRUaGVtZTtcblxuICAgICAgICBpZiAobmFtZSkge1xuICAgICAgICAgIG1vcmUgPSBnZXRUaGVtZVByb3BzKHtcbiAgICAgICAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBwcm9wczogb3RoZXJcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSAvLyBQcm92aWRlIHRoZSB0aGVtZSB0byB0aGUgd3JhcHBlZCBjb21wb25lbnQuXG4gICAgICAgIC8vIFNvIHdlIGRvbid0IGhhdmUgdG8gdXNlIHRoZSBgd2l0aFRoZW1lKClgIEhpZ2hlci1vcmRlciBDb21wb25lbnQuXG5cblxuICAgICAgICBpZiAod2l0aFRoZW1lICYmICFtb3JlLnRoZW1lKSB7XG4gICAgICAgICAgbW9yZS50aGVtZSA9IHRoZW1lO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgICAgcmVmOiBpbm5lclJlZiB8fCByZWYsXG4gICAgICAgIGNsYXNzZXM6IGNsYXNzZXNcbiAgICAgIH0sIG1vcmUpKTtcbiAgICB9KTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBXaXRoU3R5bGVzLnByb3BUeXBlcyA9IHtcbiAgICAgIC8qKlxuICAgICAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgICAgICovXG4gICAgICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZSB0aGF0IHByb3AgdG8gcGFzcyBhIHJlZiB0byB0aGUgZGVjb3JhdGVkIGNvbXBvbmVudC5cbiAgICAgICAqIEBkZXByZWNhdGVkXG4gICAgICAgKi9cbiAgICAgIGlubmVyUmVmOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLCBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgaWYgKHByb3BzLmlubmVyUmVmID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsOyAvLyByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAvLyAgICdNYXRlcmlhbC1VSTogVGhlIGBpbm5lclJlZmAgcHJvcCBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdjUuICcgK1xuICAgICAgICAvLyAgICAgJ1JlZnMgYXJlIG5vdyBhdXRvbWF0aWNhbGx5IGZvcndhcmRlZCB0byB0aGUgaW5uZXIgY29tcG9uZW50LicsXG4gICAgICAgIC8vICk7XG4gICAgICB9KVxuICAgIH0gOiB2b2lkIDA7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgV2l0aFN0eWxlcy5kaXNwbGF5TmFtZSA9IFwiV2l0aFN0eWxlcyhcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIpXCIpO1xuICAgIH1cblxuICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFdpdGhTdHlsZXMsIENvbXBvbmVudCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gRXhwb3NlZCBmb3IgdGVzdCBwdXJwb3Nlcy5cbiAgICAgIFdpdGhTdHlsZXMuTmFrZWQgPSBDb21wb25lbnQ7XG4gICAgICBXaXRoU3R5bGVzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgV2l0aFN0eWxlcy51c2VTdHlsZXMgPSB1c2VTdHlsZXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIFdpdGhTdHlsZXM7XG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzOyIsImltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7IC8vIFRoZSBicmVha3BvaW50ICoqc3RhcnQqKiBhdCB0aGlzIHZhbHVlLlxuLy8gRm9yIGluc3RhbmNlIHdpdGggdGhlIGZpcnN0IGJyZWFrcG9pbnQgeHM6IFt4cywgc21bLlxuXG52YXIgdmFsdWVzID0ge1xuICB4czogMCxcbiAgc206IDYwMCxcbiAgbWQ6IDk2MCxcbiAgbGc6IDEyODAsXG4gIHhsOiAxOTIwXG59O1xudmFyIGRlZmF1bHRCcmVha3BvaW50cyA9IHtcbiAgLy8gU29ydGVkIEFTQyBieSBzaXplLiBUaGF0J3MgaW1wb3J0YW50LlxuICAvLyBJdCBjYW4ndCBiZSBjb25maWd1cmVkIGFzIGl0J3MgdXNlZCBzdGF0aWNhbGx5IGZvciBwcm9wVHlwZXMuXG4gIGtleXM6IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXSxcbiAgdXA6IGZ1bmN0aW9uIHVwKGtleSkge1xuICAgIHJldHVybiBcIkBtZWRpYSAobWluLXdpZHRoOlwiLmNvbmNhdCh2YWx1ZXNba2V5XSwgXCJweClcIik7XG4gIH1cbn07XG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKCFwcm9wcy50aGVtZSkge1xuICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IFlvdSBhcmUgY2FsbGluZyBhIHN0eWxlIGZ1bmN0aW9uIHdpdGhvdXQgYSB0aGVtZSB2YWx1ZS4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgdmFyIHRoZW1lQnJlYWtwb2ludHMgPSBwcm9wcy50aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG4gICAgcmV0dXJuIHByb3BWYWx1ZS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgaXRlbSwgaW5kZXgpIHtcbiAgICAgIGFjY1t0aGVtZUJyZWFrcG9pbnRzLnVwKHRoZW1lQnJlYWtwb2ludHMua2V5c1tpbmRleF0pXSA9IHN0eWxlRnJvbVByb3BWYWx1ZShwcm9wVmFsdWVbaW5kZXhdKTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9XG5cbiAgaWYgKF90eXBlb2YocHJvcFZhbHVlKSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgX3RoZW1lQnJlYWtwb2ludHMgPSBwcm9wcy50aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMocHJvcFZhbHVlKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgYnJlYWtwb2ludCkge1xuICAgICAgYWNjW190aGVtZUJyZWFrcG9pbnRzLnVwKGJyZWFrcG9pbnQpXSA9IHN0eWxlRnJvbVByb3BWYWx1ZShwcm9wVmFsdWVbYnJlYWtwb2ludF0pO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH1cblxuICB2YXIgb3V0cHV0ID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGJyZWFrcG9pbnRzKHN0eWxlRnVuY3Rpb24pIHtcbiAgdmFyIG5ld1N0eWxlRnVuY3Rpb24gPSBmdW5jdGlvbiBuZXdTdHlsZUZ1bmN0aW9uKHByb3BzKSB7XG4gICAgdmFyIGJhc2UgPSBzdHlsZUZ1bmN0aW9uKHByb3BzKTtcbiAgICB2YXIgdGhlbWVCcmVha3BvaW50cyA9IHByb3BzLnRoZW1lLmJyZWFrcG9pbnRzIHx8IGRlZmF1bHRCcmVha3BvaW50cztcbiAgICB2YXIgZXh0ZW5kZWQgPSB0aGVtZUJyZWFrcG9pbnRzLmtleXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgICAgaWYgKHByb3BzW2tleV0pIHtcbiAgICAgICAgYWNjID0gYWNjIHx8IHt9O1xuICAgICAgICBhY2NbdGhlbWVCcmVha3BvaW50cy51cChrZXkpXSA9IHN0eWxlRnVuY3Rpb24oX2V4dGVuZHMoe1xuICAgICAgICAgIHRoZW1lOiBwcm9wcy50aGVtZVxuICAgICAgICB9LCBwcm9wc1trZXldKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgbnVsbCk7XG4gICAgcmV0dXJuIG1lcmdlKGJhc2UsIGV4dGVuZGVkKTtcbiAgfTtcblxuICBuZXdTdHlsZUZ1bmN0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfZXh0ZW5kcyh7fSwgc3R5bGVGdW5jdGlvbi5wcm9wVHlwZXMsIHtcbiAgICB4czogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzbTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBtZDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsZzogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB4bDogUHJvcFR5cGVzLm9iamVjdFxuICB9KSA6IHt9O1xuICBuZXdTdHlsZUZ1bmN0aW9uLmZpbHRlclByb3BzID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoc3R5bGVGdW5jdGlvbi5maWx0ZXJQcm9wcykpO1xuICByZXR1cm4gbmV3U3R5bGVGdW5jdGlvbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYnJlYWtwb2ludHM7IiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcblxuZnVuY3Rpb24gZ2V0UGF0aChvYmosIHBhdGgpIHtcbiAgaWYgKCFwYXRoIHx8IHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHBhdGguc3BsaXQoJy4nKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgaXRlbSkge1xuICAgIHJldHVybiBhY2MgJiYgYWNjW2l0ZW1dID8gYWNjW2l0ZW1dIDogbnVsbDtcbiAgfSwgb2JqKTtcbn1cblxuZnVuY3Rpb24gc3R5bGUob3B0aW9ucykge1xuICB2YXIgcHJvcCA9IG9wdGlvbnMucHJvcCxcbiAgICAgIF9vcHRpb25zJGNzc1Byb3BlcnR5ID0gb3B0aW9ucy5jc3NQcm9wZXJ0eSxcbiAgICAgIGNzc1Byb3BlcnR5ID0gX29wdGlvbnMkY3NzUHJvcGVydHkgPT09IHZvaWQgMCA/IG9wdGlvbnMucHJvcCA6IF9vcHRpb25zJGNzc1Byb3BlcnR5LFxuICAgICAgdGhlbWVLZXkgPSBvcHRpb25zLnRoZW1lS2V5LFxuICAgICAgdHJhbnNmb3JtID0gb3B0aW9ucy50cmFuc2Zvcm07XG5cbiAgdmFyIGZuID0gZnVuY3Rpb24gZm4ocHJvcHMpIHtcbiAgICBpZiAocHJvcHNbcHJvcF0gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BdO1xuICAgIHZhciB0aGVtZSA9IHByb3BzLnRoZW1lO1xuICAgIHZhciB0aGVtZU1hcHBpbmcgPSBnZXRQYXRoKHRoZW1lLCB0aGVtZUtleSkgfHwge307XG5cbiAgICB2YXIgc3R5bGVGcm9tUHJvcFZhbHVlID0gZnVuY3Rpb24gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZUZpbmFsKSB7XG4gICAgICB2YXIgdmFsdWU7XG5cbiAgICAgIGlmICh0eXBlb2YgdGhlbWVNYXBwaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gdGhlbWVNYXBwaW5nKHByb3BWYWx1ZUZpbmFsKTtcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh0aGVtZU1hcHBpbmcpKSB7XG4gICAgICAgIHZhbHVlID0gdGhlbWVNYXBwaW5nW3Byb3BWYWx1ZUZpbmFsXSB8fCBwcm9wVmFsdWVGaW5hbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gZ2V0UGF0aCh0aGVtZU1hcHBpbmcsIHByb3BWYWx1ZUZpbmFsKSB8fCBwcm9wVmFsdWVGaW5hbDtcblxuICAgICAgICBpZiAodHJhbnNmb3JtKSB7XG4gICAgICAgICAgdmFsdWUgPSB0cmFuc2Zvcm0odmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjc3NQcm9wZXJ0eSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX2RlZmluZVByb3BlcnR5KHt9LCBjc3NQcm9wZXJ0eSwgdmFsdWUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfTtcblxuICBmbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX2RlZmluZVByb3BlcnR5KHt9LCBwcm9wLCByZXNwb25zaXZlUHJvcFR5cGUpIDoge307XG4gIGZuLmZpbHRlclByb3BzID0gW3Byb3BdO1xuICByZXR1cm4gZm47XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UnO1xuXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgc3R5bGVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHN0eWxlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBmbiA9IGZ1bmN0aW9uIGZuKHByb3BzKSB7XG4gICAgcmV0dXJuIHN0eWxlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgc3R5bGUpIHtcbiAgICAgIHZhciBvdXRwdXQgPSBzdHlsZShwcm9wcyk7XG5cbiAgICAgIGlmIChvdXRwdXQpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlKGFjYywgb3V0cHV0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH07IC8vIEFsdGVybmF0aXZlIGFwcHJvYWNoIHRoYXQgZG9lc24ndCB5aWVsZCBhbnkgcGVyZm9ybWFuY2UgZ2Fpbi5cbiAgLy8gY29uc3QgaGFuZGxlcnMgPSBzdHlsZXMucmVkdWNlKChhY2MsIHN0eWxlKSA9PiB7XG4gIC8vICAgc3R5bGUuZmlsdGVyUHJvcHMuZm9yRWFjaChwcm9wID0+IHtcbiAgLy8gICAgIGFjY1twcm9wXSA9IHN0eWxlO1xuICAvLyAgIH0pO1xuICAvLyAgIHJldHVybiBhY2M7XG4gIC8vIH0sIHt9KTtcbiAgLy8gY29uc3QgZm4gPSBwcm9wcyA9PiB7XG4gIC8vICAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BzKS5yZWR1Y2UoKGFjYywgcHJvcCkgPT4ge1xuICAvLyAgICAgaWYgKGhhbmRsZXJzW3Byb3BdKSB7XG4gIC8vICAgICAgIHJldHVybiBtZXJnZShhY2MsIGhhbmRsZXJzW3Byb3BdKHByb3BzKSk7XG4gIC8vICAgICB9XG4gIC8vICAgICByZXR1cm4gYWNjO1xuICAvLyAgIH0sIHt9KTtcbiAgLy8gfTtcblxuXG4gIGZuLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBzdHlsZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHN0eWxlKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKGFjYywgc3R5bGUucHJvcFR5cGVzKTtcbiAgfSwge30pIDoge307XG4gIGZuLmZpbHRlclByb3BzID0gc3R5bGVzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBzdHlsZSkge1xuICAgIHJldHVybiBhY2MuY29uY2F0KHN0eWxlLmZpbHRlclByb3BzKTtcbiAgfSwgW10pO1xuICByZXR1cm4gZm47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvc2U7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcblxuZnVuY3Rpb24gZ2V0Qm9yZGVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIFwiXCIuY29uY2F0KHZhbHVlLCBcInB4IHNvbGlkXCIpO1xufVxuXG5leHBvcnQgdmFyIGJvcmRlciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlcicsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogZ2V0Qm9yZGVyXG59KTtcbmV4cG9ydCB2YXIgYm9yZGVyVG9wID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyVG9wJyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBnZXRCb3JkZXJcbn0pO1xuZXhwb3J0IHZhciBib3JkZXJSaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlclJpZ2h0JyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBnZXRCb3JkZXJcbn0pO1xuZXhwb3J0IHZhciBib3JkZXJCb3R0b20gPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJCb3R0b20nLFxuICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICB0cmFuc2Zvcm06IGdldEJvcmRlclxufSk7XG5leHBvcnQgdmFyIGJvcmRlckxlZnQgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJMZWZ0JyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBnZXRCb3JkZXJcbn0pO1xuZXhwb3J0IHZhciBib3JkZXJDb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlckNvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5leHBvcnQgdmFyIGJvcmRlclJhZGl1cyA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlclJhZGl1cycsXG4gIHRoZW1lS2V5OiAnc2hhcGUnXG59KTtcbnZhciBib3JkZXJzID0gY29tcG9zZShib3JkZXIsIGJvcmRlclRvcCwgYm9yZGVyUmlnaHQsIGJvcmRlckJvdHRvbSwgYm9yZGVyTGVmdCwgYm9yZGVyQ29sb3IsIGJvcmRlclJhZGl1cyk7XG5leHBvcnQgZGVmYXVsdCBib3JkZXJzOyIsImltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7XG5cbmZ1bmN0aW9uIG9taXQoaW5wdXQsIGZpZWxkcykge1xuICB2YXIgb3V0cHV0ID0ge307XG4gIE9iamVjdC5rZXlzKGlucHV0KS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgaWYgKGZpZWxkcy5pbmRleE9mKHByb3ApID09PSAtMSkge1xuICAgICAgb3V0cHV0W3Byb3BdID0gaW5wdXRbcHJvcF07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuZnVuY3Rpb24gY3NzKHN0eWxlRnVuY3Rpb24pIHtcbiAgdmFyIG5ld1N0eWxlRnVuY3Rpb24gPSBmdW5jdGlvbiBuZXdTdHlsZUZ1bmN0aW9uKHByb3BzKSB7XG4gICAgdmFyIG91dHB1dCA9IHN0eWxlRnVuY3Rpb24ocHJvcHMpO1xuXG4gICAgaWYgKHByb3BzLmNzcykge1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBtZXJnZShvdXRwdXQsIHN0eWxlRnVuY3Rpb24oX2V4dGVuZHMoe1xuICAgICAgICB0aGVtZTogcHJvcHMudGhlbWVcbiAgICAgIH0sIHByb3BzLmNzcykpKSwgb21pdChwcm9wcy5jc3MsIFtzdHlsZUZ1bmN0aW9uLmZpbHRlclByb3BzXSkpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH07XG5cbiAgbmV3U3R5bGVGdW5jdGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX2V4dGVuZHMoe30sIHN0eWxlRnVuY3Rpb24ucHJvcFR5cGVzLCB7XG4gICAgY3NzOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pIDoge307XG4gIG5ld1N0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHMgPSBbJ2NzcyddLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoc3R5bGVGdW5jdGlvbi5maWx0ZXJQcm9wcykpO1xuICByZXR1cm4gbmV3U3R5bGVGdW5jdGlvbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3NzOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5leHBvcnQgdmFyIGRpc3BsYXlQcmludCA9IHN0eWxlKHtcbiAgcHJvcDogJ2Rpc3BsYXlQcmludCcsXG4gIGNzc1Byb3BlcnR5OiBmYWxzZSxcbiAgdHJhbnNmb3JtOiBmdW5jdGlvbiB0cmFuc2Zvcm0odmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICAgICAgZGlzcGxheTogdmFsdWVcbiAgICAgIH1cbiAgICB9O1xuICB9XG59KTtcbmV4cG9ydCB2YXIgZGlzcGxheVJhdyA9IHN0eWxlKHtcbiAgcHJvcDogJ2Rpc3BsYXknXG59KTtcbmV4cG9ydCB2YXIgb3ZlcmZsb3cgPSBzdHlsZSh7XG4gIHByb3A6ICdvdmVyZmxvdydcbn0pO1xuZXhwb3J0IHZhciB0ZXh0T3ZlcmZsb3cgPSBzdHlsZSh7XG4gIHByb3A6ICd0ZXh0T3ZlcmZsb3cnXG59KTtcbmV4cG9ydCB2YXIgdmlzaWJpbGl0eSA9IHN0eWxlKHtcbiAgcHJvcDogJ3Zpc2liaWxpdHknXG59KTtcbmV4cG9ydCB2YXIgd2hpdGVTcGFjZSA9IHN0eWxlKHtcbiAgcHJvcDogJ3doaXRlU3BhY2UnXG59KTtcbmV4cG9ydCBkZWZhdWx0IGNvbXBvc2UoZGlzcGxheVByaW50LCBkaXNwbGF5UmF3LCBvdmVyZmxvdywgdGV4dE92ZXJmbG93LCB2aXNpYmlsaXR5LCB3aGl0ZVNwYWNlKTsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuZXhwb3J0IHZhciBmbGV4QmFzaXMgPSBzdHlsZSh7XG4gIHByb3A6ICdmbGV4QmFzaXMnXG59KTtcbmV4cG9ydCB2YXIgZmxleERpcmVjdGlvbiA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZsZXhEaXJlY3Rpb24nXG59KTtcbmV4cG9ydCB2YXIgZmxleFdyYXAgPSBzdHlsZSh7XG4gIHByb3A6ICdmbGV4V3JhcCdcbn0pO1xuZXhwb3J0IHZhciBqdXN0aWZ5Q29udGVudCA9IHN0eWxlKHtcbiAgcHJvcDogJ2p1c3RpZnlDb250ZW50J1xufSk7XG5leHBvcnQgdmFyIGFsaWduSXRlbXMgPSBzdHlsZSh7XG4gIHByb3A6ICdhbGlnbkl0ZW1zJ1xufSk7XG5leHBvcnQgdmFyIGFsaWduQ29udGVudCA9IHN0eWxlKHtcbiAgcHJvcDogJ2FsaWduQ29udGVudCdcbn0pO1xuZXhwb3J0IHZhciBvcmRlciA9IHN0eWxlKHtcbiAgcHJvcDogJ29yZGVyJ1xufSk7XG5leHBvcnQgdmFyIGZsZXggPSBzdHlsZSh7XG4gIHByb3A6ICdmbGV4J1xufSk7XG5leHBvcnQgdmFyIGZsZXhHcm93ID0gc3R5bGUoe1xuICBwcm9wOiAnZmxleEdyb3cnXG59KTtcbmV4cG9ydCB2YXIgZmxleFNocmluayA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZsZXhTaHJpbmsnXG59KTtcbmV4cG9ydCB2YXIgYWxpZ25TZWxmID0gc3R5bGUoe1xuICBwcm9wOiAnYWxpZ25TZWxmJ1xufSk7XG5leHBvcnQgdmFyIGp1c3RpZnlJdGVtcyA9IHN0eWxlKHtcbiAgcHJvcDogJ2p1c3RpZnlJdGVtcydcbn0pO1xuZXhwb3J0IHZhciBqdXN0aWZ5U2VsZiA9IHN0eWxlKHtcbiAgcHJvcDogJ2p1c3RpZnlTZWxmJ1xufSk7XG52YXIgZmxleGJveCA9IGNvbXBvc2UoZmxleEJhc2lzLCBmbGV4RGlyZWN0aW9uLCBmbGV4V3JhcCwganVzdGlmeUNvbnRlbnQsIGFsaWduSXRlbXMsIGFsaWduQ29udGVudCwgb3JkZXIsIGZsZXgsIGZsZXhHcm93LCBmbGV4U2hyaW5rLCBhbGlnblNlbGYsIGp1c3RpZnlJdGVtcywganVzdGlmeVNlbGYpO1xuZXhwb3J0IGRlZmF1bHQgZmxleGJveDsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuZXhwb3J0IHZhciBncmlkR2FwID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZEdhcCdcbn0pO1xuZXhwb3J0IHZhciBncmlkQ29sdW1uR2FwID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZENvbHVtbkdhcCdcbn0pO1xuZXhwb3J0IHZhciBncmlkUm93R2FwID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZFJvd0dhcCdcbn0pO1xuZXhwb3J0IHZhciBncmlkQ29sdW1uID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZENvbHVtbidcbn0pO1xuZXhwb3J0IHZhciBncmlkUm93ID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZFJvdydcbn0pO1xuZXhwb3J0IHZhciBncmlkQXV0b0Zsb3cgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXV0b0Zsb3cnXG59KTtcbmV4cG9ydCB2YXIgZ3JpZEF1dG9Db2x1bW5zID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZEF1dG9Db2x1bW5zJ1xufSk7XG5leHBvcnQgdmFyIGdyaWRBdXRvUm93cyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRBdXRvUm93cydcbn0pO1xuZXhwb3J0IHZhciBncmlkVGVtcGxhdGVDb2x1bW5zID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZFRlbXBsYXRlQ29sdW1ucydcbn0pO1xuZXhwb3J0IHZhciBncmlkVGVtcGxhdGVSb3dzID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZFRlbXBsYXRlUm93cydcbn0pO1xuZXhwb3J0IHZhciBncmlkVGVtcGxhdGVBcmVhcyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRUZW1wbGF0ZUFyZWFzJ1xufSk7XG5leHBvcnQgdmFyIGdyaWRBcmVhID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZEFyZWEnXG59KTtcbnZhciBncmlkID0gY29tcG9zZShncmlkR2FwLCBncmlkQ29sdW1uR2FwLCBncmlkUm93R2FwLCBncmlkQ29sdW1uLCBncmlkUm93LCBncmlkQXV0b0Zsb3csIGdyaWRBdXRvQ29sdW1ucywgZ3JpZEF1dG9Sb3dzLCBncmlkVGVtcGxhdGVDb2x1bW5zLCBncmlkVGVtcGxhdGVSb3dzLCBncmlkVGVtcGxhdGVBcmVhcywgZ3JpZEFyZWEpO1xuZXhwb3J0IGRlZmF1bHQgZ3JpZDsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuZXhwb3J0IHZhciBjb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2NvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5leHBvcnQgdmFyIGJnY29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdiZ2NvbG9yJyxcbiAgY3NzUHJvcGVydHk6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnXG59KTtcbnZhciBwYWxldHRlID0gY29tcG9zZShjb2xvciwgYmdjb2xvcik7XG5leHBvcnQgZGVmYXVsdCBwYWxldHRlOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5leHBvcnQgdmFyIHBvc2l0aW9uID0gc3R5bGUoe1xuICBwcm9wOiAncG9zaXRpb24nXG59KTtcbmV4cG9ydCB2YXIgekluZGV4ID0gc3R5bGUoe1xuICBwcm9wOiAnekluZGV4JyxcbiAgdGhlbWVLZXk6ICd6SW5kZXgnXG59KTtcbmV4cG9ydCB2YXIgdG9wID0gc3R5bGUoe1xuICBwcm9wOiAndG9wJ1xufSk7XG5leHBvcnQgdmFyIHJpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAncmlnaHQnXG59KTtcbmV4cG9ydCB2YXIgYm90dG9tID0gc3R5bGUoe1xuICBwcm9wOiAnYm90dG9tJ1xufSk7XG5leHBvcnQgdmFyIGxlZnQgPSBzdHlsZSh7XG4gIHByb3A6ICdsZWZ0J1xufSk7XG5leHBvcnQgZGVmYXVsdCBjb21wb3NlKHBvc2l0aW9uLCB6SW5kZXgsIHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCk7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xudmFyIGJveFNoYWRvdyA9IHN0eWxlKHtcbiAgcHJvcDogJ2JveFNoYWRvdycsXG4gIHRoZW1lS2V5OiAnc2hhZG93cydcbn0pO1xuZXhwb3J0IGRlZmF1bHQgYm94U2hhZG93OyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPD0gMSA/IFwiXCIuY29uY2F0KHZhbHVlICogMTAwLCBcIiVcIikgOiB2YWx1ZTtcbn1cblxuZXhwb3J0IHZhciB3aWR0aCA9IHN0eWxlKHtcbiAgcHJvcDogJ3dpZHRoJyxcbiAgdHJhbnNmb3JtOiB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IHZhciBtYXhXaWR0aCA9IHN0eWxlKHtcbiAgcHJvcDogJ21heFdpZHRoJyxcbiAgdHJhbnNmb3JtOiB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IHZhciBtaW5XaWR0aCA9IHN0eWxlKHtcbiAgcHJvcDogJ21pbldpZHRoJyxcbiAgdHJhbnNmb3JtOiB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IHZhciBoZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdoZWlnaHQnLFxuICB0cmFuc2Zvcm06IHRyYW5zZm9ybVxufSk7XG5leHBvcnQgdmFyIG1heEhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ21heEhlaWdodCcsXG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtXG59KTtcbmV4cG9ydCB2YXIgbWluSGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnbWluSGVpZ2h0JyxcbiAgdHJhbnNmb3JtOiB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IHZhciBzaXplV2lkdGggPSBzdHlsZSh7XG4gIHByb3A6ICdzaXplJyxcbiAgY3NzUHJvcGVydHk6ICd3aWR0aCcsXG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtXG59KTtcbmV4cG9ydCB2YXIgc2l6ZUhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ3NpemUnLFxuICBjc3NQcm9wZXJ0eTogJ2hlaWdodCcsXG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtXG59KTtcbmV4cG9ydCB2YXIgYm94U2l6aW5nID0gc3R5bGUoe1xuICBwcm9wOiAnYm94U2l6aW5nJ1xufSk7XG52YXIgc2l6aW5nID0gY29tcG9zZSh3aWR0aCwgbWF4V2lkdGgsIG1pbldpZHRoLCBoZWlnaHQsIG1heEhlaWdodCwgbWluSGVpZ2h0LCBib3hTaXppbmcpO1xuZXhwb3J0IGRlZmF1bHQgc2l6aW5nOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5leHBvcnQgdmFyIGZvbnRGYW1pbHkgPSBzdHlsZSh7XG4gIHByb3A6ICdmb250RmFtaWx5JyxcbiAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xufSk7XG5leHBvcnQgdmFyIGZvbnRTaXplID0gc3R5bGUoe1xuICBwcm9wOiAnZm9udFNpemUnLFxuICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG59KTtcbmV4cG9ydCB2YXIgZm9udFN0eWxlID0gc3R5bGUoe1xuICBwcm9wOiAnZm9udFN0eWxlJyxcbiAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xufSk7XG5leHBvcnQgdmFyIGZvbnRXZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdmb250V2VpZ2h0JyxcbiAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xufSk7XG5leHBvcnQgdmFyIGxldHRlclNwYWNpbmcgPSBzdHlsZSh7XG4gIHByb3A6ICdsZXR0ZXJTcGFjaW5nJ1xufSk7XG5leHBvcnQgdmFyIGxpbmVIZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdsaW5lSGVpZ2h0J1xufSk7XG5leHBvcnQgdmFyIHRleHRBbGlnbiA9IHN0eWxlKHtcbiAgcHJvcDogJ3RleHRBbGlnbidcbn0pO1xudmFyIHR5cG9ncmFwaHkgPSBjb21wb3NlKGZvbnRGYW1pbHksIGZvbnRTaXplLCBmb250U3R5bGUsIGZvbnRXZWlnaHQsIGxldHRlclNwYWNpbmcsIGxpbmVIZWlnaHQsIHRleHRBbGlnbik7XG5leHBvcnQgZGVmYXVsdCB0eXBvZ3JhcGh5OyIsImltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5cbmZ1bmN0aW9uIG1lcmdlKGFjYywgaXRlbSkge1xuICBpZiAoIWl0ZW0pIHtcbiAgICByZXR1cm4gYWNjO1xuICB9XG5cbiAgcmV0dXJuIGRlZXBtZXJnZShhY2MsIGl0ZW0sIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwLCBpdCdzIHdheSBmYXN0ZXIuXG5cbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lcmdlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIGNhY2hlID0ge307XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59IiwiaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgcmVzcG9uc2l2ZVByb3BUeXBlIGZyb20gJy4vcmVzcG9uc2l2ZVByb3BUeXBlJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICcuL21lbW9pemUnO1xudmFyIHByb3BlcnRpZXMgPSB7XG4gIG06ICdtYXJnaW4nLFxuICBwOiAncGFkZGluZydcbn07XG52YXIgZGlyZWN0aW9ucyA9IHtcbiAgdDogJ1RvcCcsXG4gIHI6ICdSaWdodCcsXG4gIGI6ICdCb3R0b20nLFxuICBsOiAnTGVmdCcsXG4gIHg6IFsnTGVmdCcsICdSaWdodCddLFxuICB5OiBbJ1RvcCcsICdCb3R0b20nXVxufTtcbnZhciBhbGlhc2VzID0ge1xuICBtYXJnaW5YOiAnbXgnLFxuICBtYXJnaW5ZOiAnbXknLFxuICBwYWRkaW5nWDogJ3B4JyxcbiAgcGFkZGluZ1k6ICdweSdcbn07IC8vIG1lbW9pemUoKSBpbXBhY3Q6XG4vLyBGcm9tIDMwMCwwMDAgb3BzL3NlY1xuLy8gVG8gMzUwLDAwMCBvcHMvc2VjXG5cbnZhciBnZXRDc3NQcm9wZXJ0aWVzID0gbWVtb2l6ZShmdW5jdGlvbiAocHJvcCkge1xuICAvLyBJdCdzIG5vdCBhIHNob3J0aGFuZCBub3RhdGlvbi5cbiAgaWYgKHByb3AubGVuZ3RoID4gMikge1xuICAgIGlmIChhbGlhc2VzW3Byb3BdKSB7XG4gICAgICBwcm9wID0gYWxpYXNlc1twcm9wXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtwcm9wXTtcbiAgICB9XG4gIH1cblxuICB2YXIgX3Byb3Akc3BsaXQgPSBwcm9wLnNwbGl0KCcnKSxcbiAgICAgIF9wcm9wJHNwbGl0MiA9IF9zbGljZWRUb0FycmF5KF9wcm9wJHNwbGl0LCAyKSxcbiAgICAgIGEgPSBfcHJvcCRzcGxpdDJbMF0sXG4gICAgICBiID0gX3Byb3Akc3BsaXQyWzFdO1xuXG4gIHZhciBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbYV07XG4gIHZhciBkaXJlY3Rpb24gPSBkaXJlY3Rpb25zW2JdIHx8ICcnO1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShkaXJlY3Rpb24pID8gZGlyZWN0aW9uLm1hcChmdW5jdGlvbiAoZGlyKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5ICsgZGlyO1xuICB9KSA6IFtwcm9wZXJ0eSArIGRpcmVjdGlvbl07XG59KTtcbnZhciBzcGFjaW5nS2V5cyA9IFsnbScsICdtdCcsICdtcicsICdtYicsICdtbCcsICdteCcsICdteScsICdwJywgJ3B0JywgJ3ByJywgJ3BiJywgJ3BsJywgJ3B4JywgJ3B5JywgJ21hcmdpbicsICdtYXJnaW5Ub3AnLCAnbWFyZ2luUmlnaHQnLCAnbWFyZ2luQm90dG9tJywgJ21hcmdpbkxlZnQnLCAnbWFyZ2luWCcsICdtYXJnaW5ZJywgJ3BhZGRpbmcnLCAncGFkZGluZ1RvcCcsICdwYWRkaW5nUmlnaHQnLCAncGFkZGluZ0JvdHRvbScsICdwYWRkaW5nTGVmdCcsICdwYWRkaW5nWCcsICdwYWRkaW5nWSddO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVVuYXJ5U3BhY2luZyh0aGVtZSkge1xuICB2YXIgdGhlbWVTcGFjaW5nID0gdGhlbWUuc3BhY2luZyB8fCA4O1xuXG4gIGlmICh0eXBlb2YgdGhlbWVTcGFjaW5nID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYWJzKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAodHlwZW9mIGFicyAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IEV4cGVjdGVkIHNwYWNpbmcgYXJndW1lbnQgdG8gYmUgYSBudW1iZXIsIGdvdCBcIi5jb25jYXQoYWJzLCBcIi5cIikpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGVtZVNwYWNpbmcgKiBhYnM7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHRoZW1lU3BhY2luZykpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFicykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGFicyA+IHRoZW1lU3BhY2luZy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogVGhlIHZhbHVlIHByb3ZpZGVkIChcIi5jb25jYXQoYWJzLCBcIikgb3ZlcmZsb3dzLlwiKSwgXCJUaGUgc3VwcG9ydGVkIHZhbHVlcyBhcmU6IFwiLmNvbmNhdChKU09OLnN0cmluZ2lmeSh0aGVtZVNwYWNpbmcpLCBcIi5cIiksIFwiXCIuY29uY2F0KGFicywgXCIgPiBcIikuY29uY2F0KHRoZW1lU3BhY2luZy5sZW5ndGggLSAxLCBcIiwgeW91IG5lZWQgdG8gYWRkIHRoZSBtaXNzaW5nIHZhbHVlcy5cIildLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhlbWVTcGFjaW5nW2Fic107XG4gICAgfTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdGhlbWVTcGFjaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHRoZW1lU3BhY2luZztcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogVGhlIGB0aGVtZS5zcGFjaW5nYCB2YWx1ZSAoXCIuY29uY2F0KHRoZW1lU3BhY2luZywgXCIpIGlzIGludmFsaWQuXCIpLCAnSXQgc2hvdWxkIGJlIGEgbnVtYmVyLCBhbiBhcnJheSBvciBhIGZ1bmN0aW9uLiddLmpvaW4oJ1xcbicpKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSkge1xuICBpZiAodHlwZW9mIHByb3BWYWx1ZSA9PT0gJ3N0cmluZycgfHwgcHJvcFZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gcHJvcFZhbHVlO1xuICB9XG5cbiAgdmFyIGFicyA9IE1hdGguYWJzKHByb3BWYWx1ZSk7XG4gIHZhciB0cmFuc2Zvcm1lZCA9IHRyYW5zZm9ybWVyKGFicyk7XG5cbiAgaWYgKHByb3BWYWx1ZSA+PSAwKSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybWVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0cmFuc2Zvcm1lZCA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gLXRyYW5zZm9ybWVkO1xuICB9XG5cbiAgcmV0dXJuIFwiLVwiLmNvbmNhdCh0cmFuc2Zvcm1lZCk7XG59XG5cbmZ1bmN0aW9uIGdldFN0eWxlRnJvbVByb3BWYWx1ZShjc3NQcm9wZXJ0aWVzLCB0cmFuc2Zvcm1lcikge1xuICByZXR1cm4gZnVuY3Rpb24gKHByb3BWYWx1ZSkge1xuICAgIHJldHVybiBjc3NQcm9wZXJ0aWVzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBjc3NQcm9wZXJ0eSkge1xuICAgICAgYWNjW2Nzc1Byb3BlcnR5XSA9IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNwYWNpbmcocHJvcHMpIHtcbiAgdmFyIHRoZW1lID0gcHJvcHMudGhlbWU7XG4gIHZhciB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5U3BhY2luZyh0aGVtZSk7XG4gIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcykubWFwKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgLy8gVXNpbmcgYSBoYXNoIGNvbXB1dGF0aW9uIG92ZXIgYW4gYXJyYXkgaXRlcmF0aW9uIGNvdWxkIGJlIGZhc3RlciwgYnV0IHdpdGggb25seSAyOCBpdGVtcyxcbiAgICAvLyBpdCdzIGRvZXNuJ3Qgd29ydGggdGhlIGJ1bmRsZSBzaXplLlxuICAgIGlmIChzcGFjaW5nS2V5cy5pbmRleE9mKHByb3ApID09PSAtMSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGNzc1Byb3BlcnRpZXMgPSBnZXRDc3NQcm9wZXJ0aWVzKHByb3ApO1xuICAgIHZhciBzdHlsZUZyb21Qcm9wVmFsdWUgPSBnZXRTdHlsZUZyb21Qcm9wVmFsdWUoY3NzUHJvcGVydGllcywgdHJhbnNmb3JtZXIpO1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wXTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfSkucmVkdWNlKG1lcmdlLCB7fSk7XG59XG5cbnNwYWNpbmcucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHNwYWNpbmdLZXlzLnJlZHVjZShmdW5jdGlvbiAob2JqLCBrZXkpIHtcbiAgb2JqW2tleV0gPSByZXNwb25zaXZlUHJvcFR5cGU7XG4gIHJldHVybiBvYmo7XG59LCB7fSkgOiB7fTtcbnNwYWNpbmcuZmlsdGVyUHJvcHMgPSBzcGFjaW5nS2V5cztcbmV4cG9ydCBkZWZhdWx0IHNwYWNpbmc7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNQbGFpbk9iamVjdChpdGVtKSB7XG4gIHJldHVybiBpdGVtICYmIF90eXBlb2YoaXRlbSkgPT09ICdvYmplY3QnICYmIGl0ZW0uY29uc3RydWN0b3IgPT09IE9iamVjdDtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZXBtZXJnZSh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge1xuICAgIGNsb25lOiB0cnVlXG4gIH07XG4gIHZhciBvdXRwdXQgPSBvcHRpb25zLmNsb25lID8gX2V4dGVuZHMoe30sIHRhcmdldCkgOiB0YXJnZXQ7XG5cbiAgaWYgKGlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiBpc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgLy8gQXZvaWQgcHJvdG90eXBlIHBvbGx1dGlvblxuICAgICAgaWYgKGtleSA9PT0gJ19fcHJvdG9fXycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNQbGFpbk9iamVjdChzb3VyY2Vba2V5XSkgJiYga2V5IGluIHRhcmdldCkge1xuICAgICAgICBvdXRwdXRba2V5XSA9IGRlZXBtZXJnZSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIG9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBvdXRwdXQ7XG59IiwiLyoqXG4gKiBXQVJOSU5HOiBEb24ndCBpbXBvcnQgdGhpcyBkaXJlY3RseS5cbiAqIFVzZSBgTXVpRXJyb3JgIGZyb20gYEBtYXRlcmlhbC11aS91dGlscy9tYWNyb3MvTXVpRXJyb3IubWFjcm9gIGluc3RlYWQuXG4gKiBAcGFyYW0ge251bWJlcn0gY29kZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRNdWlFcnJvck1lc3NhZ2UoY29kZSkge1xuICAvLyBBcHBseSBiYWJlbC1wbHVnaW4tdHJhbnNmb3JtLXRlbXBsYXRlLWxpdGVyYWxzIGluIGxvb3NlIG1vZGVcbiAgLy8gbG9vc2UgbW9kZSBpcyBzYWZlIGlmZiB3ZSdyZSBjb25jYXRlbmF0aW5nIHByaW1pdGl2ZXNcbiAgLy8gc2VlIGh0dHBzOi8vYmFiZWxqcy5pby9kb2NzL2VuL2JhYmVsLXBsdWdpbi10cmFuc2Zvcm0tdGVtcGxhdGUtbGl0ZXJhbHMjbG9vc2VcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItdGVtcGxhdGUgKi9cbiAgdmFyIHVybCA9ICdodHRwczovL21hdGVyaWFsLXVpLmNvbS9wcm9kdWN0aW9uLWVycm9yLz9jb2RlPScgKyBjb2RlO1xuXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgLy8gcmVzdCBwYXJhbXMgb3Zlci10cmFuc3BpbGUgZm9yIHRoaXMgY2FzZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICB1cmwgKz0gJyZhcmdzW109JyArIGVuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbaV0pO1xuICB9XG5cbiAgcmV0dXJuICdNaW5pZmllZCBNYXRlcmlhbC1VSSBlcnJvciAjJyArIGNvZGUgKyAnOyB2aXNpdCAnICsgdXJsICsgJyBmb3IgdGhlIGZ1bGwgbWVzc2FnZS4nO1xuICAvKiBlc2xpbnQtZW5hYmxlIHByZWZlci10ZW1wbGF0ZSAqL1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNoYWluUHJvcFR5cGVzKHByb3BUeXBlMSwgcHJvcFR5cGUyKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gdmFsaWRhdGUoKSB7XG4gICAgcmV0dXJuIHByb3BUeXBlMS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykgfHwgcHJvcFR5cGUyLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgfTtcbn0iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNoYWluUHJvcFR5cGVzIGZyb20gJy4vY2hhaW5Qcm9wVHlwZXMnO1xuXG5mdW5jdGlvbiBpc0NsYXNzQ29tcG9uZW50KGVsZW1lbnRUeXBlKSB7XG4gIC8vIGVsZW1lbnRUeXBlLnByb3RvdHlwZT8uaXNSZWFjdENvbXBvbmVudFxuICB2YXIgX2VsZW1lbnRUeXBlJHByb3RvdHlwID0gZWxlbWVudFR5cGUucHJvdG90eXBlLFxuICAgICAgcHJvdG90eXBlID0gX2VsZW1lbnRUeXBlJHByb3RvdHlwID09PSB2b2lkIDAgPyB7fSA6IF9lbGVtZW50VHlwZSRwcm90b3R5cDtcbiAgcmV0dXJuIEJvb2xlYW4ocHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpO1xufVxuXG5mdW5jdGlvbiBhY2NlcHRpbmdSZWYocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gIHZhciBlbGVtZW50ID0gcHJvcHNbcHJvcE5hbWVdO1xuICB2YXIgc2FmZVByb3BOYW1lID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lO1xuXG4gIGlmIChlbGVtZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciB3YXJuaW5nSGludDtcbiAgdmFyIGVsZW1lbnRUeXBlID0gZWxlbWVudC50eXBlO1xuICAvKipcbiAgICogQmxhY2tsaXN0aW5nIGluc3RlYWQgb2Ygd2hpdGVsaXN0aW5nXG4gICAqXG4gICAqIEJsYWNrbGlzdGluZyB3aWxsIG1pc3Mgc29tZSBjb21wb25lbnRzLCBzdWNoIGFzIFJlYWN0LkZyYWdtZW50LiBUaG9zZSB3aWxsIGF0IGxlYXN0XG4gICAqIHRyaWdnZXIgYSB3YXJuaW5nIGluIFJlYWN0LlxuICAgKiBXZSBjYW4ndCB3aGl0ZWxpc3QgYmVjYXVzZSB0aGVyZSBpcyBubyBzYWZlIHdheSB0byBkZXRlY3QgUmVhY3QuZm9yd2FyZFJlZlxuICAgKiBvciBjbGFzcyBjb21wb25lbnRzLiBcIlNhZmVcIiBtZWFucyB0aGVyZSdzIG5vIHB1YmxpYyBBUEkuXG4gICAqXG4gICAqL1xuXG4gIGlmICh0eXBlb2YgZWxlbWVudFR5cGUgPT09ICdmdW5jdGlvbicgJiYgIWlzQ2xhc3NDb21wb25lbnQoZWxlbWVudFR5cGUpKSB7XG4gICAgd2FybmluZ0hpbnQgPSAnRGlkIHlvdSBhY2NpZGVudGFsbHkgdXNlIGEgcGxhaW4gZnVuY3Rpb24gY29tcG9uZW50IGZvciBhbiBlbGVtZW50IGluc3RlYWQ/JztcbiAgfVxuXG4gIGlmICh3YXJuaW5nSGludCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgXCIuY29uY2F0KGxvY2F0aW9uLCBcIiBgXCIpLmNvbmNhdChzYWZlUHJvcE5hbWUsIFwiYCBzdXBwbGllZCB0byBgXCIpLmNvbmNhdChjb21wb25lbnROYW1lLCBcImAuIFwiKSArIFwiRXhwZWN0ZWQgYW4gZWxlbWVudCB0aGF0IGNhbiBob2xkIGEgcmVmLiBcIi5jb25jYXQod2FybmluZ0hpbnQsIFwiIFwiKSArICdGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWUgaHR0cHM6Ly9tYXRlcmlhbC11aS5jb20vci9jYXZlYXQtd2l0aC1yZWZzLWd1aWRlJyk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxudmFyIGVsZW1lbnRBY2NlcHRpbmdSZWYgPSBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMuZWxlbWVudCwgYWNjZXB0aW5nUmVmKTtcbmVsZW1lbnRBY2NlcHRpbmdSZWYuaXNSZXF1aXJlZCA9IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWQsIGFjY2VwdGluZ1JlZik7XG5leHBvcnQgZGVmYXVsdCBlbGVtZW50QWNjZXB0aW5nUmVmOyIsImltcG9ydCAqIGFzIFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjaGFpblByb3BUeXBlcyBmcm9tICcuL2NoYWluUHJvcFR5cGVzJztcblxuZnVuY3Rpb24gaXNDbGFzc0NvbXBvbmVudChlbGVtZW50VHlwZSkge1xuICAvLyBlbGVtZW50VHlwZS5wcm90b3R5cGU/LmlzUmVhY3RDb21wb25lbnRcbiAgdmFyIF9lbGVtZW50VHlwZSRwcm90b3R5cCA9IGVsZW1lbnRUeXBlLnByb3RvdHlwZSxcbiAgICAgIHByb3RvdHlwZSA9IF9lbGVtZW50VHlwZSRwcm90b3R5cCA9PT0gdm9pZCAwID8ge30gOiBfZWxlbWVudFR5cGUkcHJvdG90eXA7XG4gIHJldHVybiBCb29sZWFuKHByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gIHZhciBzYWZlUHJvcE5hbWUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG5cbiAgaWYgKHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgd2FybmluZ0hpbnQ7XG4gIC8qKlxuICAgKiBCbGFja2xpc3RpbmcgaW5zdGVhZCBvZiB3aGl0ZWxpc3RpbmdcbiAgICpcbiAgICogQmxhY2tsaXN0aW5nIHdpbGwgbWlzcyBzb21lIGNvbXBvbmVudHMsIHN1Y2ggYXMgUmVhY3QuRnJhZ21lbnQuIFRob3NlIHdpbGwgYXQgbGVhc3RcbiAgICogdHJpZ2dlciBhIHdhcm5pbmcgaW4gUmVhY3QuXG4gICAqIFdlIGNhbid0IHdoaXRlbGlzdCBiZWNhdXNlIHRoZXJlIGlzIG5vIHNhZmUgd2F5IHRvIGRldGVjdCBSZWFjdC5mb3J3YXJkUmVmXG4gICAqIG9yIGNsYXNzIGNvbXBvbmVudHMuIFwiU2FmZVwiIG1lYW5zIHRoZXJlJ3Mgbm8gcHVibGljIEFQSS5cbiAgICpcbiAgICovXG5cbiAgaWYgKHR5cGVvZiBwcm9wVmFsdWUgPT09ICdmdW5jdGlvbicgJiYgIWlzQ2xhc3NDb21wb25lbnQocHJvcFZhbHVlKSkge1xuICAgIHdhcm5pbmdIaW50ID0gJ0RpZCB5b3UgYWNjaWRlbnRhbGx5IHByb3ZpZGUgYSBwbGFpbiBmdW5jdGlvbiBjb21wb25lbnQgaW5zdGVhZD8nO1xuICB9XG5cbiAgaWYgKHdhcm5pbmdIaW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKFwiSW52YWxpZCBcIi5jb25jYXQobG9jYXRpb24sIFwiIGBcIikuY29uY2F0KHNhZmVQcm9wTmFtZSwgXCJgIHN1cHBsaWVkIHRvIGBcIikuY29uY2F0KGNvbXBvbmVudE5hbWUsIFwiYC4gXCIpICsgXCJFeHBlY3RlZCBhbiBlbGVtZW50IHR5cGUgdGhhdCBjYW4gaG9sZCBhIHJlZi4gXCIuY29uY2F0KHdhcm5pbmdIaW50LCBcIiBcIikgKyAnRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlIGh0dHBzOi8vbWF0ZXJpYWwtdWkuY29tL3IvY2F2ZWF0LXdpdGgtcmVmcy1ndWlkZScpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5lbGVtZW50VHlwZSwgZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYpOyIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbi8vIFRoaXMgbW9kdWxlIGlzIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9haXJibmIvcHJvcC10eXBlcy1leGFjdCByZXBvc2l0b3J5LlxuLy8gSG93ZXZlciwgaW4gb3JkZXIgdG8gcmVkdWNlIHRoZSBudW1iZXIgb2YgZGVwZW5kZW5jaWVzIGFuZCB0byByZW1vdmUgc29tZSBleHRyYSBzYWZlIGNoZWNrc1xuLy8gdGhlIG1vZHVsZSB3YXMgZm9ya2VkLlxuLy8gT25seSBleHBvcnRlZCBmb3IgdGVzdCBwdXJwb3Nlcy5cbmV4cG9ydCB2YXIgc3BlY2lhbFByb3BlcnR5ID0gXCJleGFjdC1wcm9wOiBcXHUyMDBCXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleGFjdFByb3AocHJvcFR5cGVzKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuIHByb3BUeXBlcztcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgcHJvcFR5cGVzLCBfZGVmaW5lUHJvcGVydHkoe30sIHNwZWNpYWxQcm9wZXJ0eSwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIHVuc3VwcG9ydGVkUHJvcHMgPSBPYmplY3Qua2V5cyhwcm9wcykuZmlsdGVyKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICByZXR1cm4gIXByb3BUeXBlcy5oYXNPd25Qcm9wZXJ0eShwcm9wKTtcbiAgICB9KTtcblxuICAgIGlmICh1bnN1cHBvcnRlZFByb3BzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJUaGUgZm9sbG93aW5nIHByb3BzIGFyZSBub3Qgc3VwcG9ydGVkOiBcIi5jb25jYXQodW5zdXBwb3J0ZWRQcm9wcy5tYXAoZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIFwiYFwiLmNvbmNhdChwcm9wLCBcImBcIik7XG4gICAgICB9KS5qb2luKCcsICcpLCBcIi4gUGxlYXNlIHJlbW92ZSB0aGVtLlwiKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0pKTtcbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgeyBGb3J3YXJkUmVmLCBNZW1vIH0gZnJvbSAncmVhY3QtaXMnOyAvLyBTaW1wbGlmaWVkIHBvbHlmaWxsIGZvciBJRSAxMSBzdXBwb3J0XG4vLyBodHRwczovL2dpdGh1Yi5jb20vSmFtZXNNR3JlZW5lL0Z1bmN0aW9uLm5hbWUvYmxvYi81OGIzMTRkNGE5ODMxMTBjMzY4MmYxMjI4Zjg0NWQzOWNjY2ExODE3L0Z1bmN0aW9uLm5hbWUuanMjTDNcblxudmFyIGZuTmFtZU1hdGNoUmVnZXggPSAvXlxccypmdW5jdGlvbig/Olxcc3xcXHMqXFwvXFwqLipcXCpcXC9cXHMqKSsoW14oXFxzL10qKVxccyovO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZ1bmN0aW9uTmFtZShmbikge1xuICB2YXIgbWF0Y2ggPSBcIlwiLmNvbmNhdChmbikubWF0Y2goZm5OYW1lTWF0Y2hSZWdleCk7XG4gIHZhciBuYW1lID0gbWF0Y2ggJiYgbWF0Y2hbMV07XG4gIHJldHVybiBuYW1lIHx8ICcnO1xufVxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBDb21wb25lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBmYWxsYmFja1xuICogQHJldHVybnMge3N0cmluZyB8IHVuZGVmaW5lZH1cbiAqL1xuXG5mdW5jdGlvbiBnZXRGdW5jdGlvbkNvbXBvbmVudE5hbWUoQ29tcG9uZW50KSB7XG4gIHZhciBmYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyc7XG4gIHJldHVybiBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgZ2V0RnVuY3Rpb25OYW1lKENvbXBvbmVudCkgfHwgZmFsbGJhY2s7XG59XG5cbmZ1bmN0aW9uIGdldFdyYXBwZWROYW1lKG91dGVyVHlwZSwgaW5uZXJUeXBlLCB3cmFwcGVyTmFtZSkge1xuICB2YXIgZnVuY3Rpb25OYW1lID0gZ2V0RnVuY3Rpb25Db21wb25lbnROYW1lKGlubmVyVHlwZSk7XG4gIHJldHVybiBvdXRlclR5cGUuZGlzcGxheU5hbWUgfHwgKGZ1bmN0aW9uTmFtZSAhPT0gJycgPyBcIlwiLmNvbmNhdCh3cmFwcGVyTmFtZSwgXCIoXCIpLmNvbmNhdChmdW5jdGlvbk5hbWUsIFwiKVwiKSA6IHdyYXBwZXJOYW1lKTtcbn1cbi8qKlxuICogY2hlcnJ5LXBpY2sgZnJvbVxuICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvNzY5YjFmMjcwZTEyNTFkOWRiZGNlMGZjYmQ5ZTkyZTUwMmQwNTliOC9wYWNrYWdlcy9zaGFyZWQvZ2V0Q29tcG9uZW50TmFtZS5qc1xuICogb3JpZ2luYWxseSBmb3JrZWQgZnJvbSByZWNvbXBvc2UvZ2V0RGlzcGxheU5hbWUgd2l0aCBhZGRlZCBJRSAxMSBzdXBwb3J0XG4gKlxuICogQHBhcmFtIHtSZWFjdC5SZWFjdFR5cGV9IENvbXBvbmVudFxuICogQHJldHVybnMge3N0cmluZyB8IHVuZGVmaW5lZH1cbiAqL1xuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKENvbXBvbmVudCkge1xuICBpZiAoQ29tcG9uZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBDb21wb25lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIENvbXBvbmVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGdldEZ1bmN0aW9uQ29tcG9uZW50TmFtZShDb21wb25lbnQsICdDb21wb25lbnQnKTtcbiAgfVxuXG4gIGlmIChfdHlwZW9mKENvbXBvbmVudCkgPT09ICdvYmplY3QnKSB7XG4gICAgc3dpdGNoIChDb21wb25lbnQuJCR0eXBlb2YpIHtcbiAgICAgIGNhc2UgRm9yd2FyZFJlZjpcbiAgICAgICAgcmV0dXJuIGdldFdyYXBwZWROYW1lKENvbXBvbmVudCwgQ29tcG9uZW50LnJlbmRlciwgJ0ZvcndhcmRSZWYnKTtcblxuICAgICAgY2FzZSBNZW1vOlxuICAgICAgICByZXR1cm4gZ2V0V3JhcHBlZE5hbWUoQ29tcG9uZW50LCBDb21wb25lbnQudHlwZSwgJ21lbW8nKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEhUTUxFbGVtZW50VHlwZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gIHZhciBzYWZlUHJvcE5hbWUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG5cbiAgaWYgKHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAocHJvcFZhbHVlICYmIHByb3BWYWx1ZS5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoXCJJbnZhbGlkIFwiLmNvbmNhdChsb2NhdGlvbiwgXCIgYFwiKS5jb25jYXQoc2FmZVByb3BOYW1lLCBcImAgc3VwcGxpZWQgdG8gYFwiKS5jb25jYXQoY29tcG9uZW50TmFtZSwgXCJgLiBcIikgKyBcIkV4cGVjdGVkIGFuIEhUTUxFbGVtZW50LlwiKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufSIsIi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTsiLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xudmFyIHJlZlR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pO1xuZXhwb3J0IGRlZmF1bHQgcmVmVHlwZTsiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMlxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBiPTYwMTAzLGM9NjAxMDYsZD02MDEwNyxlPTYwMTA4LGY9NjAxMTQsZz02MDEwOSxoPTYwMTEwLGs9NjAxMTIsbD02MDExMyxtPTYwMTIwLG49NjAxMTUscD02MDExNixxPTYwMTIxLHI9NjAxMjIsdT02MDExNyx2PTYwMTI5LHc9NjAxMzE7XG5pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgeD1TeW1ib2wuZm9yO2I9eChcInJlYWN0LmVsZW1lbnRcIik7Yz14KFwicmVhY3QucG9ydGFsXCIpO2Q9eChcInJlYWN0LmZyYWdtZW50XCIpO2U9eChcInJlYWN0LnN0cmljdF9tb2RlXCIpO2Y9eChcInJlYWN0LnByb2ZpbGVyXCIpO2c9eChcInJlYWN0LnByb3ZpZGVyXCIpO2g9eChcInJlYWN0LmNvbnRleHRcIik7az14KFwicmVhY3QuZm9yd2FyZF9yZWZcIik7bD14KFwicmVhY3Quc3VzcGVuc2VcIik7bT14KFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTtuPXgoXCJyZWFjdC5tZW1vXCIpO3A9eChcInJlYWN0LmxhenlcIik7cT14KFwicmVhY3QuYmxvY2tcIik7cj14KFwicmVhY3Quc2VydmVyLmJsb2NrXCIpO3U9eChcInJlYWN0LmZ1bmRhbWVudGFsXCIpO3Y9eChcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7dz14KFwicmVhY3QubGVnYWN5X2hpZGRlblwiKX1cbmZ1bmN0aW9uIHkoYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHQ9YS4kJHR5cGVvZjtzd2l0Y2godCl7Y2FzZSBiOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGQ6Y2FzZSBmOmNhc2UgZTpjYXNlIGw6Y2FzZSBtOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGg6Y2FzZSBrOmNhc2UgcDpjYXNlIG46Y2FzZSBnOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHR9fWNhc2UgYzpyZXR1cm4gdH19fXZhciB6PWcsQT1iLEI9ayxDPWQsRD1wLEU9bixGPWMsRz1mLEg9ZSxJPWw7ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aDtleHBvcnRzLkNvbnRleHRQcm92aWRlcj16O2V4cG9ydHMuRWxlbWVudD1BO2V4cG9ydHMuRm9yd2FyZFJlZj1CO2V4cG9ydHMuRnJhZ21lbnQ9QztleHBvcnRzLkxhenk9RDtleHBvcnRzLk1lbW89RTtleHBvcnRzLlBvcnRhbD1GO2V4cG9ydHMuUHJvZmlsZXI9RztleHBvcnRzLlN0cmljdE1vZGU9SDtcbmV4cG9ydHMuU3VzcGVuc2U9STtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1mdW5jdGlvbigpe3JldHVybiExfTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09aH07ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWd9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1ifTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWt9O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWR9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09cH07ZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1ufTtcbmV4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1jfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1mfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWV9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWx9O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1kfHxhPT09Znx8YT09PXZ8fGE9PT1lfHxhPT09bHx8YT09PW18fGE9PT13fHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXB8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09Z3x8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09dXx8YS4kJHR5cGVvZj09PXF8fGFbMF09PT1yKT8hMDohMX07XG5leHBvcnRzLnR5cGVPZj15O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJmdW5jdGlvbiB0b1ZhbChtaXgpIHtcblx0dmFyIGssIHksIHN0cj0nJztcblxuXHRpZiAodHlwZW9mIG1peCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG1peCA9PT0gJ251bWJlcicpIHtcblx0XHRzdHIgKz0gbWl4O1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBtaXggPT09ICdvYmplY3QnKSB7XG5cdFx0aWYgKEFycmF5LmlzQXJyYXkobWl4KSkge1xuXHRcdFx0Zm9yIChrPTA7IGsgPCBtaXgubGVuZ3RoOyBrKyspIHtcblx0XHRcdFx0aWYgKG1peFtrXSkge1xuXHRcdFx0XHRcdGlmICh5ID0gdG9WYWwobWl4W2tdKSkge1xuXHRcdFx0XHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdFx0XHRcdHN0ciArPSB5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKGsgaW4gbWl4KSB7XG5cdFx0XHRcdGlmIChtaXhba10pIHtcblx0XHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRcdHN0ciArPSBrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHN0cjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuXHR2YXIgaT0wLCB0bXAsIHgsIHN0cj0nJztcblx0d2hpbGUgKGkgPCBhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0aWYgKHRtcCA9IGFyZ3VtZW50c1tpKytdKSB7XG5cdFx0XHRpZiAoeCA9IHRvVmFsKHRtcCkpIHtcblx0XHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdFx0c3RyICs9IHhcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIHN0cjtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnQgdmFyIGlzQnJvd3NlciA9ICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yod2luZG93KSkgPT09IFwib2JqZWN0XCIgJiYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGRvY3VtZW50KSkgPT09ICdvYmplY3QnICYmIGRvY3VtZW50Lm5vZGVUeXBlID09PSA5O1xuXG5leHBvcnQgZGVmYXVsdCBpc0Jyb3dzZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgaXNJbkJyb3dzZXIgZnJvbSAnaXMtaW4tYnJvd3Nlcic7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyc7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuXG52YXIgcGxhaW5PYmplY3RDb25zdHJ1cmN0b3IgPSB7fS5jb25zdHJ1Y3RvcjtcbmZ1bmN0aW9uIGNsb25lU3R5bGUoc3R5bGUpIHtcbiAgaWYgKHN0eWxlID09IG51bGwgfHwgdHlwZW9mIHN0eWxlICE9PSAnb2JqZWN0JykgcmV0dXJuIHN0eWxlO1xuICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZSkpIHJldHVybiBzdHlsZS5tYXAoY2xvbmVTdHlsZSk7XG4gIGlmIChzdHlsZS5jb25zdHJ1Y3RvciAhPT0gcGxhaW5PYmplY3RDb25zdHJ1cmN0b3IpIHJldHVybiBzdHlsZTtcbiAgdmFyIG5ld1N0eWxlID0ge307XG5cbiAgZm9yICh2YXIgbmFtZSBpbiBzdHlsZSkge1xuICAgIG5ld1N0eWxlW25hbWVdID0gY2xvbmVTdHlsZShzdHlsZVtuYW1lXSk7XG4gIH1cblxuICByZXR1cm4gbmV3U3R5bGU7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcnVsZSBpbnN0YW5jZS5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgaWYgKG5hbWUgPT09IHZvaWQgMCkge1xuICAgIG5hbWUgPSAndW5uYW1lZCc7XG4gIH1cblxuICB2YXIganNzID0gb3B0aW9ucy5qc3M7XG4gIHZhciBkZWNsQ29weSA9IGNsb25lU3R5bGUoZGVjbCk7XG4gIHZhciBydWxlID0ganNzLnBsdWdpbnMub25DcmVhdGVSdWxlKG5hbWUsIGRlY2xDb3B5LCBvcHRpb25zKTtcbiAgaWYgKHJ1bGUpIHJldHVybiBydWxlOyAvLyBJdCBpcyBhbiBhdC1ydWxlIGFuZCBpdCBoYXMgbm8gaW5zdGFuY2UuXG5cbiAgaWYgKG5hbWVbMF0gPT09ICdAJykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gVW5rbm93biBydWxlIFwiICsgbmFtZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxudmFyIGpvaW4gPSBmdW5jdGlvbiBqb2luKHZhbHVlLCBieSkge1xuICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgIC8vIFJlbW92ZSAhaW1wb3J0YW50IGZyb20gdGhlIHZhbHVlLCBpdCB3aWxsIGJlIHJlYWRkZWQgbGF0ZXIuXG4gICAgaWYgKHZhbHVlW2ldID09PSAnIWltcG9ydGFudCcpIGJyZWFrO1xuICAgIGlmIChyZXN1bHQpIHJlc3VsdCArPSBieTtcbiAgICByZXN1bHQgKz0gdmFsdWVbaV07XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhcnJheSB2YWx1ZXMgdG8gc3RyaW5nLlxuICpcbiAqIGBtYXJnaW46IFtbJzVweCcsICcxMHB4J11dYCA+IGBtYXJnaW46IDVweCAxMHB4O2BcbiAqIGBib3JkZXI6IFsnMXB4JywgJzJweCddYCA+IGBib3JkZXI6IDFweCwgMnB4O2BcbiAqIGBtYXJnaW46IFtbJzVweCcsICcxMHB4J10sICchaW1wb3J0YW50J11gID4gYG1hcmdpbjogNXB4IDEwcHggIWltcG9ydGFudDtgXG4gKiBgY29sb3I6IFsncmVkJywgIWltcG9ydGFudF1gID4gYGNvbG9yOiByZWQgIWltcG9ydGFudDtgXG4gKi9cbnZhciB0b0Nzc1ZhbHVlID0gZnVuY3Rpb24gdG9Dc3NWYWx1ZSh2YWx1ZSwgaWdub3JlSW1wb3J0YW50KSB7XG4gIGlmIChpZ25vcmVJbXBvcnRhbnQgPT09IHZvaWQgMCkge1xuICAgIGlnbm9yZUltcG9ydGFudCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICB2YXIgY3NzVmFsdWUgPSAnJzsgLy8gU3VwcG9ydCBzcGFjZSBzZXBhcmF0ZWQgdmFsdWVzIHZpYSBgW1snNXB4JywgJzEwcHgnXV1gLlxuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlWzBdKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh2YWx1ZVtpXSA9PT0gJyFpbXBvcnRhbnQnKSBicmVhaztcbiAgICAgIGlmIChjc3NWYWx1ZSkgY3NzVmFsdWUgKz0gJywgJztcbiAgICAgIGNzc1ZhbHVlICs9IGpvaW4odmFsdWVbaV0sICcgJyk7XG4gICAgfVxuICB9IGVsc2UgY3NzVmFsdWUgPSBqb2luKHZhbHVlLCAnLCAnKTsgLy8gQWRkICFpbXBvcnRhbnQsIGJlY2F1c2UgaXQgd2FzIGlnbm9yZWQuXG5cblxuICBpZiAoIWlnbm9yZUltcG9ydGFudCAmJiB2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSA9PT0gJyFpbXBvcnRhbnQnKSB7XG4gICAgY3NzVmFsdWUgKz0gJyAhaW1wb3J0YW50JztcbiAgfVxuXG4gIHJldHVybiBjc3NWYWx1ZTtcbn07XG5cbi8qKlxuICogSW5kZW50IGEgc3RyaW5nLlxuICogaHR0cDovL2pzcGVyZi5jb20vYXJyYXktam9pbi12cy1mb3JcbiAqL1xuZnVuY3Rpb24gaW5kZW50U3RyKHN0ciwgaW5kZW50KSB7XG4gIHZhciByZXN1bHQgPSAnJztcblxuICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgaW5kZW50OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ICs9ICcgICc7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0ICsgc3RyO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIFJ1bGUgdG8gQ1NTIHN0cmluZy5cbiAqL1xuXG5cbmZ1bmN0aW9uIHRvQ3NzKHNlbGVjdG9yLCBzdHlsZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAoIXN0eWxlKSByZXR1cm4gcmVzdWx0O1xuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkaW5kZW50ID0gX29wdGlvbnMuaW5kZW50LFxuICAgICAgaW5kZW50ID0gX29wdGlvbnMkaW5kZW50ID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkaW5kZW50O1xuICB2YXIgZmFsbGJhY2tzID0gc3R5bGUuZmFsbGJhY2tzO1xuICBpZiAoc2VsZWN0b3IpIGluZGVudCsrOyAvLyBBcHBseSBmYWxsYmFja3MgZmlyc3QuXG5cbiAgaWYgKGZhbGxiYWNrcykge1xuICAgIC8vIEFycmF5IHN5bnRheCB7ZmFsbGJhY2tzOiBbe3Byb3A6IHZhbHVlfV19XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZmFsbGJhY2tzKSkge1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGZhbGxiYWNrcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgdmFyIGZhbGxiYWNrID0gZmFsbGJhY2tzW2luZGV4XTtcblxuICAgICAgICBmb3IgKHZhciBwcm9wIGluIGZhbGxiYWNrKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gZmFsbGJhY2tbcHJvcF07XG5cbiAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgICAgICAgcmVzdWx0ICs9IFwiXCIgKyBpbmRlbnRTdHIocHJvcCArIFwiOiBcIiArIHRvQ3NzVmFsdWUodmFsdWUpICsgXCI7XCIsIGluZGVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9iamVjdCBzeW50YXgge2ZhbGxiYWNrczoge3Byb3A6IHZhbHVlfX1cbiAgICAgIGZvciAodmFyIF9wcm9wIGluIGZhbGxiYWNrcykge1xuICAgICAgICB2YXIgX3ZhbHVlID0gZmFsbGJhY2tzW19wcm9wXTtcblxuICAgICAgICBpZiAoX3ZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gJ1xcbic7XG4gICAgICAgICAgcmVzdWx0ICs9IFwiXCIgKyBpbmRlbnRTdHIoX3Byb3AgKyBcIjogXCIgKyB0b0Nzc1ZhbHVlKF92YWx1ZSkgKyBcIjtcIiwgaW5kZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIF9wcm9wMiBpbiBzdHlsZSkge1xuICAgIHZhciBfdmFsdWUyID0gc3R5bGVbX3Byb3AyXTtcblxuICAgIGlmIChfdmFsdWUyICE9IG51bGwgJiYgX3Byb3AyICE9PSAnZmFsbGJhY2tzJykge1xuICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgcmVzdWx0ICs9IFwiXCIgKyBpbmRlbnRTdHIoX3Byb3AyICsgXCI6IFwiICsgdG9Dc3NWYWx1ZShfdmFsdWUyKSArIFwiO1wiLCBpbmRlbnQpO1xuICAgIH1cbiAgfSAvLyBBbGxvdyBlbXB0eSBzdHlsZSBpbiB0aGlzIGNhc2UsIGJlY2F1c2UgcHJvcGVydGllcyB3aWxsIGJlIGFkZGVkIGR5bmFtaWNhbGx5LlxuXG5cbiAgaWYgKCFyZXN1bHQgJiYgIW9wdGlvbnMuYWxsb3dFbXB0eSkgcmV0dXJuIHJlc3VsdDsgLy8gV2hlbiBydWxlIGlzIGJlaW5nIHN0cmluZ2lmaWVkIGJlZm9yZSBzZWxlY3RvciB3YXMgZGVmaW5lZC5cblxuICBpZiAoIXNlbGVjdG9yKSByZXR1cm4gcmVzdWx0O1xuICBpbmRlbnQtLTtcbiAgaWYgKHJlc3VsdCkgcmVzdWx0ID0gXCJcXG5cIiArIHJlc3VsdCArIFwiXFxuXCI7XG4gIHJldHVybiBpbmRlbnRTdHIoc2VsZWN0b3IgKyBcIiB7XCIgKyByZXN1bHQsIGluZGVudCkgKyBpbmRlbnRTdHIoJ30nLCBpbmRlbnQpO1xufVxuXG52YXIgZXNjYXBlUmVnZXggPSAvKFtbXFxdLiMqJD48K349fF46KCksXCInYFxcc10pL2c7XG52YXIgbmF0aXZlRXNjYXBlID0gdHlwZW9mIENTUyAhPT0gJ3VuZGVmaW5lZCcgJiYgQ1NTLmVzY2FwZTtcbnZhciBlc2NhcGUgPSAoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gbmF0aXZlRXNjYXBlID8gbmF0aXZlRXNjYXBlKHN0cikgOiBzdHIucmVwbGFjZShlc2NhcGVSZWdleCwgJ1xcXFwkMScpO1xufSk7XG5cbnZhciBCYXNlU3R5bGVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQmFzZVN0eWxlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ3N0eWxlJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5zdHlsZSA9IHZvaWQgMDtcbiAgICB0aGlzLnJlbmRlcmVyID0gdm9pZCAwO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdmFyIHNoZWV0ID0gb3B0aW9ucy5zaGVldCxcbiAgICAgICAgUmVuZGVyZXIgPSBvcHRpb25zLlJlbmRlcmVyO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICAgIGlmIChzaGVldCkgdGhpcy5yZW5kZXJlciA9IHNoZWV0LnJlbmRlcmVyO2Vsc2UgaWYgKFJlbmRlcmVyKSB0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBvciBzZXQgYSBzdHlsZSBwcm9wZXJ0eS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gQmFzZVN0eWxlUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnByb3AgPSBmdW5jdGlvbiBwcm9wKG5hbWUsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgLy8gSXQncyBhIGdldHRlci5cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXMuc3R5bGVbbmFtZV07IC8vIERvbid0IGRvIGFueXRoaW5nIGlmIHRoZSB2YWx1ZSBoYXMgbm90IGNoYW5nZWQuXG5cbiAgICB2YXIgZm9yY2UgPSBvcHRpb25zID8gb3B0aW9ucy5mb3JjZSA6IGZhbHNlO1xuICAgIGlmICghZm9yY2UgJiYgdGhpcy5zdHlsZVtuYW1lXSA9PT0gdmFsdWUpIHJldHVybiB0aGlzO1xuICAgIHZhciBuZXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYgKCFvcHRpb25zIHx8IG9wdGlvbnMucHJvY2VzcyAhPT0gZmFsc2UpIHtcbiAgICAgIG5ld1ZhbHVlID0gdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uQ2hhbmdlVmFsdWUodmFsdWUsIG5hbWUsIHRoaXMpO1xuICAgIH1cblxuICAgIHZhciBpc0VtcHR5ID0gbmV3VmFsdWUgPT0gbnVsbCB8fCBuZXdWYWx1ZSA9PT0gZmFsc2U7XG4gICAgdmFyIGlzRGVmaW5lZCA9IG5hbWUgaW4gdGhpcy5zdHlsZTsgLy8gVmFsdWUgaXMgZW1wdHkgYW5kIHdhc24ndCBkZWZpbmVkIGJlZm9yZS5cblxuICAgIGlmIChpc0VtcHR5ICYmICFpc0RlZmluZWQgJiYgIWZvcmNlKSByZXR1cm4gdGhpczsgLy8gV2UgYXJlIGdvaW5nIHRvIHJlbW92ZSB0aGlzIHZhbHVlLlxuXG4gICAgdmFyIHJlbW92ZSA9IGlzRW1wdHkgJiYgaXNEZWZpbmVkO1xuICAgIGlmIChyZW1vdmUpIGRlbGV0ZSB0aGlzLnN0eWxlW25hbWVdO2Vsc2UgdGhpcy5zdHlsZVtuYW1lXSA9IG5ld1ZhbHVlOyAvLyBSZW5kZXJhYmxlIGlzIGRlZmluZWQgaWYgU3R5bGVTaGVldCBvcHRpb24gYGxpbmtgIGlzIHRydWUuXG5cbiAgICBpZiAodGhpcy5yZW5kZXJhYmxlICYmIHRoaXMucmVuZGVyZXIpIHtcbiAgICAgIGlmIChyZW1vdmUpIHRoaXMucmVuZGVyZXIucmVtb3ZlUHJvcGVydHkodGhpcy5yZW5kZXJhYmxlLCBuYW1lKTtlbHNlIHRoaXMucmVuZGVyZXIuc2V0UHJvcGVydHkodGhpcy5yZW5kZXJhYmxlLCBuYW1lLCBuZXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG5cbiAgICBpZiAoc2hlZXQgJiYgc2hlZXQuYXR0YWNoZWQpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdbSlNTXSBSdWxlIGlzIG5vdCBsaW5rZWQuIE1pc3Npbmcgc2hlZXQgb3B0aW9uIFwibGluazogdHJ1ZVwiLicpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHJldHVybiBCYXNlU3R5bGVSdWxlO1xufSgpO1xudmFyIFN0eWxlUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0Jhc2VTdHlsZVJ1bGUpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3R5bGVSdWxlLCBfQmFzZVN0eWxlUnVsZSk7XG5cbiAgZnVuY3Rpb24gU3R5bGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9CYXNlU3R5bGVSdWxlLmNhbGwodGhpcywga2V5LCBzdHlsZSwgb3B0aW9ucykgfHwgdGhpcztcbiAgICBfdGhpcy5zZWxlY3RvclRleHQgPSB2b2lkIDA7XG4gICAgX3RoaXMuaWQgPSB2b2lkIDA7XG4gICAgX3RoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB2YXIgc2VsZWN0b3IgPSBvcHRpb25zLnNlbGVjdG9yLFxuICAgICAgICBzY29wZWQgPSBvcHRpb25zLnNjb3BlZCxcbiAgICAgICAgc2hlZXQgPSBvcHRpb25zLnNoZWV0LFxuICAgICAgICBnZW5lcmF0ZUlkID0gb3B0aW9ucy5nZW5lcmF0ZUlkO1xuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBfdGhpcy5zZWxlY3RvclRleHQgPSBzZWxlY3RvcjtcbiAgICB9IGVsc2UgaWYgKHNjb3BlZCAhPT0gZmFsc2UpIHtcbiAgICAgIF90aGlzLmlkID0gZ2VuZXJhdGVJZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgc2hlZXQpO1xuICAgICAgX3RoaXMuc2VsZWN0b3JUZXh0ID0gXCIuXCIgKyBlc2NhcGUoX3RoaXMuaWQpO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogU2V0IHNlbGVjdG9yIHN0cmluZy5cbiAgICogQXR0ZW50aW9uOiB1c2UgdGhpcyB3aXRoIGNhdXRpb24uIE1vc3QgYnJvd3NlcnMgZGlkbid0IGltcGxlbWVudFxuICAgKiBzZWxlY3RvclRleHQgc2V0dGVyLCBzbyB0aGlzIG1heSByZXN1bHQgaW4gcmVyZW5kZXJpbmcgb2YgZW50aXJlIFN0eWxlIFNoZWV0LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8yID0gU3R5bGVSdWxlLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogQXBwbHkgcnVsZSB0byBhbiBlbGVtZW50IGlubGluZS5cbiAgICovXG4gIF9wcm90bzIuYXBwbHlUbyA9IGZ1bmN0aW9uIGFwcGx5VG8ocmVuZGVyYWJsZSkge1xuICAgIHZhciByZW5kZXJlciA9IHRoaXMucmVuZGVyZXI7XG5cbiAgICBpZiAocmVuZGVyZXIpIHtcbiAgICAgIHZhciBqc29uID0gdGhpcy50b0pTT04oKTtcblxuICAgICAgZm9yICh2YXIgcHJvcCBpbiBqc29uKSB7XG4gICAgICAgIHJlbmRlcmVyLnNldFByb3BlcnR5KHJlbmRlcmFibGUsIHByb3AsIGpzb25bcHJvcF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIHJ1bGUuXG4gICAqIEZhbGxiYWNrcyBhcmUgbm90IHN1cHBvcnRlZC5cbiAgICogVXNlZnVsIGZvciBpbmxpbmUgc3R5bGVzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90bzIudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHZhciBqc29uID0ge307XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHRoaXMuc3R5bGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuc3R5bGVbcHJvcF07XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykganNvbltwcm9wXSA9IHZhbHVlO2Vsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSBqc29uW3Byb3BdID0gdG9Dc3NWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGpzb247XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvMi50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG4gICAgdmFyIGxpbmsgPSBzaGVldCA/IHNoZWV0Lm9wdGlvbnMubGluayA6IGZhbHNlO1xuICAgIHZhciBvcHRzID0gbGluayA/IF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBhbGxvd0VtcHR5OiB0cnVlXG4gICAgfSkgOiBvcHRpb25zO1xuICAgIHJldHVybiB0b0Nzcyh0aGlzLnNlbGVjdG9yVGV4dCwgdGhpcy5zdHlsZSwgb3B0cyk7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFN0eWxlUnVsZSwgW3tcbiAgICBrZXk6IFwic2VsZWN0b3JcIixcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChzZWxlY3Rvcikge1xuICAgICAgaWYgKHNlbGVjdG9yID09PSB0aGlzLnNlbGVjdG9yVGV4dCkgcmV0dXJuO1xuICAgICAgdGhpcy5zZWxlY3RvclRleHQgPSBzZWxlY3RvcjtcbiAgICAgIHZhciByZW5kZXJlciA9IHRoaXMucmVuZGVyZXIsXG4gICAgICAgICAgcmVuZGVyYWJsZSA9IHRoaXMucmVuZGVyYWJsZTtcbiAgICAgIGlmICghcmVuZGVyYWJsZSB8fCAhcmVuZGVyZXIpIHJldHVybjtcbiAgICAgIHZhciBoYXNDaGFuZ2VkID0gcmVuZGVyZXIuc2V0U2VsZWN0b3IocmVuZGVyYWJsZSwgc2VsZWN0b3IpOyAvLyBJZiBzZWxlY3RvciBzZXR0ZXIgaXMgbm90IGltcGxlbWVudGVkLCByZXJlbmRlciB0aGUgcnVsZS5cblxuICAgICAgaWYgKCFoYXNDaGFuZ2VkKSB7XG4gICAgICAgIHJlbmRlcmVyLnJlcGxhY2VSdWxlKHJlbmRlcmFibGUsIHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgc2VsZWN0b3Igc3RyaW5nLlxuICAgICAqL1xuICAgICxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnNlbGVjdG9yVGV4dDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3R5bGVSdWxlO1xufShCYXNlU3R5bGVSdWxlKTtcbnZhciBwbHVnaW5TdHlsZVJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKG5hbWVbMF0gPT09ICdAJyB8fCBvcHRpb25zLnBhcmVudCAmJiBvcHRpb25zLnBhcmVudC50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBTdHlsZVJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICB9XG59O1xuXG52YXIgZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyA9IHtcbiAgaW5kZW50OiAxLFxuICBjaGlsZHJlbjogdHJ1ZVxufTtcbnZhciBhdFJlZ0V4cCA9IC9AKFtcXHctXSspLztcbi8qKlxuICogQ29uZGl0aW9uYWwgcnVsZSBmb3IgQG1lZGlhLCBAc3VwcG9ydHNcbiAqL1xuXG52YXIgQ29uZGl0aW9uYWxSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29uZGl0aW9uYWxSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2NvbmRpdGlvbmFsJztcbiAgICB0aGlzLmF0ID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMucXVlcnkgPSB2b2lkIDA7XG4gICAgdGhpcy5ydWxlcyA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB2YXIgYXRNYXRjaCA9IGtleS5tYXRjaChhdFJlZ0V4cCk7XG4gICAgdGhpcy5hdCA9IGF0TWF0Y2ggPyBhdE1hdGNoWzFdIDogJ3Vua25vd24nOyAvLyBLZXkgbWlnaHQgY29udGFpbiBhIHVuaXF1ZSBzdWZmaXggaW4gY2FzZSB0aGUgYG5hbWVgIHBhc3NlZCBieSB1c2VyIHdhcyBkdXBsaWNhdGUuXG5cbiAgICB0aGlzLnF1ZXJ5ID0gb3B0aW9ucy5uYW1lIHx8IFwiQFwiICsgdGhpcy5hdDtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QoX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pKTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChuYW1lLCBzdHlsZXNbbmFtZV0pO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBDb25kaXRpb25hbFJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRSdWxlID0gZnVuY3Rpb24gZ2V0UnVsZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuaW5kZXhPZihydWxlKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuZCByZWdpc3RlciBydWxlLCBydW4gcGx1Z2lucy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZSA9IGZ1bmN0aW9uIGFkZFJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuYWRkKG5hbWUsIHN0eWxlLCBvcHRpb25zKTtcbiAgICBpZiAoIXJ1bGUpIHJldHVybiBudWxsO1xuICAgIHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuICAgIHJldHVybiBydWxlO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdFRvU3RyaW5nT3B0aW9ucztcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pbmRlbnQgPT0gbnVsbCkgb3B0aW9ucy5pbmRlbnQgPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zLmluZGVudDtcbiAgICBpZiAob3B0aW9ucy5jaGlsZHJlbiA9PSBudWxsKSBvcHRpb25zLmNoaWxkcmVuID0gZGVmYXVsdFRvU3RyaW5nT3B0aW9ucy5jaGlsZHJlbjtcblxuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHRoaXMucXVlcnkgKyBcIiB7fVwiO1xuICAgIH1cblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgcmV0dXJuIGNoaWxkcmVuID8gdGhpcy5xdWVyeSArIFwiIHtcXG5cIiArIGNoaWxkcmVuICsgXCJcXG59XCIgOiAnJztcbiAgfTtcblxuICByZXR1cm4gQ29uZGl0aW9uYWxSdWxlO1xufSgpO1xudmFyIGtleVJlZ0V4cCA9IC9AbWVkaWF8QHN1cHBvcnRzXFxzKy87XG52YXIgcGx1Z2luQ29uZGl0aW9uYWxSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlcywgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXlSZWdFeHAudGVzdChrZXkpID8gbmV3IENvbmRpdGlvbmFsUnVsZShrZXksIHN0eWxlcywgb3B0aW9ucykgOiBudWxsO1xuICB9XG59O1xuXG52YXIgZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyQxID0ge1xuICBpbmRlbnQ6IDEsXG4gIGNoaWxkcmVuOiB0cnVlXG59O1xudmFyIG5hbWVSZWdFeHAgPSAvQGtleWZyYW1lc1xccysoW1xcdy1dKykvO1xuLyoqXG4gKiBSdWxlIGZvciBAa2V5ZnJhbWVzXG4gKi9cblxudmFyIEtleWZyYW1lc1J1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBLZXlmcmFtZXNSdWxlKGtleSwgZnJhbWVzLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2tleWZyYW1lcyc7XG4gICAgdGhpcy5hdCA9ICdAa2V5ZnJhbWVzJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLm5hbWUgPSB2b2lkIDA7XG4gICAgdGhpcy5pZCA9IHZvaWQgMDtcbiAgICB0aGlzLnJ1bGVzID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHZhciBuYW1lTWF0Y2ggPSBrZXkubWF0Y2gobmFtZVJlZ0V4cCk7XG5cbiAgICBpZiAobmFtZU1hdGNoICYmIG5hbWVNYXRjaFsxXSkge1xuICAgICAgdGhpcy5uYW1lID0gbmFtZU1hdGNoWzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm5hbWUgPSAnbm9uYW1lJztcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gQmFkIGtleWZyYW1lcyBuYW1lIFwiICsga2V5KSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICB0aGlzLmtleSA9IHRoaXMudHlwZSArIFwiLVwiICsgdGhpcy5uYW1lO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdmFyIHNjb3BlZCA9IG9wdGlvbnMuc2NvcGVkLFxuICAgICAgICBzaGVldCA9IG9wdGlvbnMuc2hlZXQsXG4gICAgICAgIGdlbmVyYXRlSWQgPSBvcHRpb25zLmdlbmVyYXRlSWQ7XG4gICAgdGhpcy5pZCA9IHNjb3BlZCA9PT0gZmFsc2UgPyB0aGlzLm5hbWUgOiBlc2NhcGUoZ2VuZXJhdGVJZCh0aGlzLCBzaGVldCkpO1xuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QoX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pKTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gZnJhbWVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChuYW1lLCBmcmFtZXNbbmFtZV0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICAgIHBhcmVudDogdGhpc1xuICAgICAgfSkpO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBLZXlmcmFtZXNSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pbmRlbnQgPT0gbnVsbCkgb3B0aW9ucy5pbmRlbnQgPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEuaW5kZW50O1xuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09IG51bGwpIG9wdGlvbnMuY2hpbGRyZW4gPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEuY2hpbGRyZW47XG5cbiAgICBpZiAob3B0aW9ucy5jaGlsZHJlbiA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0ICsgXCIgXCIgKyB0aGlzLmlkICsgXCIge31cIjtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnJ1bGVzLnRvU3RyaW5nKG9wdGlvbnMpO1xuICAgIGlmIChjaGlsZHJlbikgY2hpbGRyZW4gPSBcIlxcblwiICsgY2hpbGRyZW4gKyBcIlxcblwiO1xuICAgIHJldHVybiB0aGlzLmF0ICsgXCIgXCIgKyB0aGlzLmlkICsgXCIge1wiICsgY2hpbGRyZW4gKyBcIn1cIjtcbiAgfTtcblxuICByZXR1cm4gS2V5ZnJhbWVzUnVsZTtcbn0oKTtcbnZhciBrZXlSZWdFeHAkMSA9IC9Aa2V5ZnJhbWVzXFxzKy87XG52YXIgcmVmUmVnRXhwID0gL1xcJChbXFx3LV0rKS9nO1xuXG52YXIgZmluZFJlZmVyZW5jZWRLZXlmcmFtZSA9IGZ1bmN0aW9uIGZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUodmFsLCBrZXlmcmFtZXMpIHtcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbC5yZXBsYWNlKHJlZlJlZ0V4cCwgZnVuY3Rpb24gKG1hdGNoLCBuYW1lKSB7XG4gICAgICBpZiAobmFtZSBpbiBrZXlmcmFtZXMpIHtcbiAgICAgICAgcmV0dXJuIGtleWZyYW1lc1tuYW1lXTtcbiAgICAgIH1cblxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBSZWZlcmVuY2VkIGtleWZyYW1lcyBydWxlIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIgaXMgbm90IGRlZmluZWQuXCIpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHZhbDtcbn07XG4vKipcbiAqIFJlcGxhY2UgdGhlIHJlZmVyZW5jZSBmb3IgYSBhbmltYXRpb24gbmFtZS5cbiAqL1xuXG5cbnZhciByZXBsYWNlUmVmID0gZnVuY3Rpb24gcmVwbGFjZVJlZihzdHlsZSwgcHJvcCwga2V5ZnJhbWVzKSB7XG4gIHZhciB2YWx1ZSA9IHN0eWxlW3Byb3BdO1xuICB2YXIgcmVmS2V5ZnJhbWUgPSBmaW5kUmVmZXJlbmNlZEtleWZyYW1lKHZhbHVlLCBrZXlmcmFtZXMpO1xuXG4gIGlmIChyZWZLZXlmcmFtZSAhPT0gdmFsdWUpIHtcbiAgICBzdHlsZVtwcm9wXSA9IHJlZktleWZyYW1lO1xuICB9XG59O1xuXG52YXIgcGx1Z2luID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIGZyYW1lcywgb3B0aW9ucykge1xuICAgIHJldHVybiB0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXlSZWdFeHAkMS50ZXN0KGtleSkgPyBuZXcgS2V5ZnJhbWVzUnVsZShrZXksIGZyYW1lcywgb3B0aW9ucykgOiBudWxsO1xuICB9LFxuICAvLyBBbmltYXRpb24gbmFtZSByZWYgcmVwbGFjZXIuXG4gIG9uUHJvY2Vzc1N0eWxlOiBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSwgc2hlZXQpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnIHx8ICFzaGVldCkgcmV0dXJuIHN0eWxlO1xuICAgIGlmICgnYW5pbWF0aW9uLW5hbWUnIGluIHN0eWxlKSByZXBsYWNlUmVmKHN0eWxlLCAnYW5pbWF0aW9uLW5hbWUnLCBzaGVldC5rZXlmcmFtZXMpO1xuICAgIGlmICgnYW5pbWF0aW9uJyBpbiBzdHlsZSkgcmVwbGFjZVJlZihzdHlsZSwgJ2FuaW1hdGlvbicsIHNoZWV0LmtleWZyYW1lcyk7XG4gICAgcmV0dXJuIHN0eWxlO1xuICB9LFxuICBvbkNoYW5nZVZhbHVlOiBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbCwgcHJvcCwgcnVsZSkge1xuICAgIHZhciBzaGVldCA9IHJ1bGUub3B0aW9ucy5zaGVldDtcblxuICAgIGlmICghc2hlZXQpIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuXG4gICAgc3dpdGNoIChwcm9wKSB7XG4gICAgICBjYXNlICdhbmltYXRpb24nOlxuICAgICAgICByZXR1cm4gZmluZFJlZmVyZW5jZWRLZXlmcmFtZSh2YWwsIHNoZWV0LmtleWZyYW1lcyk7XG5cbiAgICAgIGNhc2UgJ2FuaW1hdGlvbi1uYW1lJzpcbiAgICAgICAgcmV0dXJuIGZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUodmFsLCBzaGVldC5rZXlmcmFtZXMpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgfVxufTtcblxudmFyIEtleWZyYW1lUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0Jhc2VTdHlsZVJ1bGUpIHtcbiAgX2luaGVyaXRzTG9vc2UoS2V5ZnJhbWVSdWxlLCBfQmFzZVN0eWxlUnVsZSk7XG5cbiAgZnVuY3Rpb24gS2V5ZnJhbWVSdWxlKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9CYXNlU3R5bGVSdWxlLmNhbGwuYXBwbHkoX0Jhc2VTdHlsZVJ1bGUsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gS2V5ZnJhbWVSdWxlLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG4gICAgdmFyIGxpbmsgPSBzaGVldCA/IHNoZWV0Lm9wdGlvbnMubGluayA6IGZhbHNlO1xuICAgIHZhciBvcHRzID0gbGluayA/IF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBhbGxvd0VtcHR5OiB0cnVlXG4gICAgfSkgOiBvcHRpb25zO1xuICAgIHJldHVybiB0b0Nzcyh0aGlzLmtleSwgdGhpcy5zdHlsZSwgb3B0cyk7XG4gIH07XG5cbiAgcmV0dXJuIEtleWZyYW1lUnVsZTtcbn0oQmFzZVN0eWxlUnVsZSk7XG52YXIgcGx1Z2luS2V5ZnJhbWVSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMucGFyZW50ICYmIG9wdGlvbnMucGFyZW50LnR5cGUgPT09ICdrZXlmcmFtZXMnKSB7XG4gICAgICByZXR1cm4gbmV3IEtleWZyYW1lUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxudmFyIEZvbnRGYWNlUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEZvbnRGYWNlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2ZvbnQtZmFjZSc7XG4gICAgdGhpcy5hdCA9ICdAZm9udC1mYWNlJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLnN0eWxlID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBGb250RmFjZVJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnN0eWxlKSkge1xuICAgICAgdmFyIHN0ciA9ICcnO1xuXG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5zdHlsZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgc3RyICs9IHRvQ3NzKHRoaXMuYXQsIHRoaXMuc3R5bGVbaW5kZXhdKTtcbiAgICAgICAgaWYgKHRoaXMuc3R5bGVbaW5kZXggKyAxXSkgc3RyICs9ICdcXG4nO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cblxuICAgIHJldHVybiB0b0Nzcyh0aGlzLmF0LCB0aGlzLnN0eWxlLCBvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gRm9udEZhY2VSdWxlO1xufSgpO1xudmFyIGtleVJlZ0V4cCQyID0gL0Bmb250LWZhY2UvO1xudmFyIHBsdWdpbkZvbnRGYWNlUnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXlSZWdFeHAkMi50ZXN0KGtleSkgPyBuZXcgRm9udEZhY2VSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIDogbnVsbDtcbiAgfVxufTtcblxudmFyIFZpZXdwb3J0UnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFZpZXdwb3J0UnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ3ZpZXdwb3J0JztcbiAgICB0aGlzLmF0ID0gJ0B2aWV3cG9ydCc7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5zdHlsZSA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnN0eWxlID0gc3R5bGU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gVmlld3BvcnRSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMua2V5LCB0aGlzLnN0eWxlLCBvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gVmlld3BvcnRSdWxlO1xufSgpO1xudmFyIHBsdWdpblZpZXdwb3J0UnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXkgPT09ICdAdmlld3BvcnQnIHx8IGtleSA9PT0gJ0AtbXMtdmlld3BvcnQnID8gbmV3IFZpZXdwb3J0UnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSA6IG51bGw7XG4gIH1cbn07XG5cbnZhciBTaW1wbGVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2ltcGxlUnVsZShrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ3NpbXBsZSc7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy52YWx1ZSA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuXG5cbiAgdmFyIF9wcm90byA9IFNpbXBsZVJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKSkge1xuICAgICAgdmFyIHN0ciA9ICcnO1xuXG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy52YWx1ZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgc3RyICs9IHRoaXMua2V5ICsgXCIgXCIgKyB0aGlzLnZhbHVlW2luZGV4XSArIFwiO1wiO1xuICAgICAgICBpZiAodGhpcy52YWx1ZVtpbmRleCArIDFdKSBzdHIgKz0gJ1xcbic7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMua2V5ICsgXCIgXCIgKyB0aGlzLnZhbHVlICsgXCI7XCI7XG4gIH07XG5cbiAgcmV0dXJuIFNpbXBsZVJ1bGU7XG59KCk7XG52YXIga2V5c01hcCA9IHtcbiAgJ0BjaGFyc2V0JzogdHJ1ZSxcbiAgJ0BpbXBvcnQnOiB0cnVlLFxuICAnQG5hbWVzcGFjZSc6IHRydWVcbn07XG52YXIgcGx1Z2luU2ltcGxlUnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXkgaW4ga2V5c01hcCA/IG5ldyBTaW1wbGVSdWxlKGtleSwgdmFsdWUsIG9wdGlvbnMpIDogbnVsbDtcbiAgfVxufTtcblxudmFyIHBsdWdpbnMgPSBbcGx1Z2luU3R5bGVSdWxlLCBwbHVnaW5Db25kaXRpb25hbFJ1bGUsIHBsdWdpbiwgcGx1Z2luS2V5ZnJhbWVSdWxlLCBwbHVnaW5Gb250RmFjZVJ1bGUsIHBsdWdpblZpZXdwb3J0UnVsZSwgcGx1Z2luU2ltcGxlUnVsZV07XG5cbnZhciBkZWZhdWx0VXBkYXRlT3B0aW9ucyA9IHtcbiAgcHJvY2VzczogdHJ1ZVxufTtcbnZhciBmb3JjZVVwZGF0ZU9wdGlvbnMgPSB7XG4gIGZvcmNlOiB0cnVlLFxuICBwcm9jZXNzOiB0cnVlXG4gIC8qKlxuICAgKiBDb250YWlucyBydWxlcyBvYmplY3RzIGFuZCBhbGxvd3MgYWRkaW5nL3JlbW92aW5nIGV0Yy5cbiAgICogSXMgdXNlZCBmb3IgZS5nLiBieSBgU3R5bGVTaGVldGAgb3IgYENvbmRpdGlvbmFsUnVsZWAuXG4gICAqL1xuXG59O1xuXG52YXIgUnVsZUxpc3QgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAvLyBSdWxlcyByZWdpc3RyeSBmb3IgYWNjZXNzIGJ5IC5nZXQoKSBtZXRob2QuXG4gIC8vIEl0IGNvbnRhaW5zIHRoZSBzYW1lIHJ1bGUgcmVnaXN0ZXJlZCBieSBuYW1lIGFuZCBieSBzZWxlY3Rvci5cbiAgLy8gT3JpZ2luYWwgc3R5bGVzIG9iamVjdC5cbiAgLy8gVXNlZCB0byBlbnN1cmUgY29ycmVjdCBydWxlcyBvcmRlci5cbiAgZnVuY3Rpb24gUnVsZUxpc3Qob3B0aW9ucykge1xuICAgIHRoaXMubWFwID0ge307XG4gICAgdGhpcy5yYXcgPSB7fTtcbiAgICB0aGlzLmluZGV4ID0gW107XG4gICAgdGhpcy5jb3VudGVyID0gMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5jbGFzc2VzID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ZnJhbWVzID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5jbGFzc2VzID0gb3B0aW9ucy5jbGFzc2VzO1xuICAgIHRoaXMua2V5ZnJhbWVzID0gb3B0aW9ucy5rZXlmcmFtZXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgcmVnaXN0ZXIgcnVsZS5cbiAgICpcbiAgICogV2lsbCBub3QgcmVuZGVyIGFmdGVyIFN0eWxlIFNoZWV0IHdhcyByZW5kZXJlZCB0aGUgZmlyc3QgdGltZS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gUnVsZUxpc3QucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQobmFtZSwgZGVjbCwgcnVsZU9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMkb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgcGFyZW50ID0gX3RoaXMkb3B0aW9ucy5wYXJlbnQsXG4gICAgICAgIHNoZWV0ID0gX3RoaXMkb3B0aW9ucy5zaGVldCxcbiAgICAgICAganNzID0gX3RoaXMkb3B0aW9ucy5qc3MsXG4gICAgICAgIFJlbmRlcmVyID0gX3RoaXMkb3B0aW9ucy5SZW5kZXJlcixcbiAgICAgICAgZ2VuZXJhdGVJZCA9IF90aGlzJG9wdGlvbnMuZ2VuZXJhdGVJZCxcbiAgICAgICAgc2NvcGVkID0gX3RoaXMkb3B0aW9ucy5zY29wZWQ7XG5cbiAgICB2YXIgb3B0aW9ucyA9IF9leHRlbmRzKHtcbiAgICAgIGNsYXNzZXM6IHRoaXMuY2xhc3NlcyxcbiAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgc2hlZXQ6IHNoZWV0LFxuICAgICAganNzOiBqc3MsXG4gICAgICBSZW5kZXJlcjogUmVuZGVyZXIsXG4gICAgICBnZW5lcmF0ZUlkOiBnZW5lcmF0ZUlkLFxuICAgICAgc2NvcGVkOiBzY29wZWQsXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAga2V5ZnJhbWVzOiB0aGlzLmtleWZyYW1lcyxcbiAgICAgIHNlbGVjdG9yOiB1bmRlZmluZWRcbiAgICB9LCBydWxlT3B0aW9ucyk7IC8vIFdoZW4gdXNlciB1c2VzIC5jcmVhdGVTdHlsZVNoZWV0KCksIGR1cGxpY2F0ZSBuYW1lcyBhcmUgbm90IHBvc3NpYmxlLCBidXRcbiAgICAvLyBgc2hlZXQuYWRkUnVsZSgpYCBvcGVucyB0aGUgZG9vciBmb3IgYW55IGR1cGxpY2F0ZSBydWxlIG5hbWUuIFdoZW4gdGhpcyBoYXBwZW5zXG4gICAgLy8gd2UgbmVlZCB0byBtYWtlIHRoZSBrZXkgdW5pcXVlIHdpdGhpbiB0aGlzIFJ1bGVMaXN0IGluc3RhbmNlIHNjb3BlLlxuXG5cbiAgICB2YXIga2V5ID0gbmFtZTtcblxuICAgIGlmIChuYW1lIGluIHRoaXMucmF3KSB7XG4gICAgICBrZXkgPSBuYW1lICsgXCItZFwiICsgdGhpcy5jb3VudGVyKys7XG4gICAgfSAvLyBXZSBuZWVkIHRvIHNhdmUgdGhlIG9yaWdpbmFsIGRlY2wgYmVmb3JlIGNyZWF0aW5nIHRoZSBydWxlXG4gICAgLy8gYmVjYXVzZSBjYWNoZSBwbHVnaW4gbmVlZHMgdG8gdXNlIGl0IGFzIGEga2V5IHRvIHJldHVybiBhIGNhY2hlZCBydWxlLlxuXG5cbiAgICB0aGlzLnJhd1trZXldID0gZGVjbDtcblxuICAgIGlmIChrZXkgaW4gdGhpcy5jbGFzc2VzKSB7XG4gICAgICAvLyBFLmcuIHJ1bGVzIGluc2lkZSBvZiBAbWVkaWEgY29udGFpbmVyXG4gICAgICBvcHRpb25zLnNlbGVjdG9yID0gXCIuXCIgKyBlc2NhcGUodGhpcy5jbGFzc2VzW2tleV0pO1xuICAgIH1cblxuICAgIHZhciBydWxlID0gY3JlYXRlUnVsZShrZXksIGRlY2wsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIG51bGw7XG4gICAgdGhpcy5yZWdpc3RlcihydWxlKTtcbiAgICB2YXIgaW5kZXggPSBvcHRpb25zLmluZGV4ID09PSB1bmRlZmluZWQgPyB0aGlzLmluZGV4Lmxlbmd0aCA6IG9wdGlvbnMuaW5kZXg7XG4gICAgdGhpcy5pbmRleC5zcGxpY2UoaW5kZXgsIDAsIHJ1bGUpO1xuICAgIHJldHVybiBydWxlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXQgPSBmdW5jdGlvbiBnZXQobmFtZSkge1xuICAgIHJldHVybiB0aGlzLm1hcFtuYW1lXTtcbiAgfVxuICAvKipcbiAgICogRGVsZXRlIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKHJ1bGUpIHtcbiAgICB0aGlzLnVucmVnaXN0ZXIocnVsZSk7XG4gICAgZGVsZXRlIHRoaXMucmF3W3J1bGUua2V5XTtcbiAgICB0aGlzLmluZGV4LnNwbGljZSh0aGlzLmluZGV4LmluZGV4T2YocnVsZSksIDEpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5kZXguaW5kZXhPZihydWxlKTtcbiAgfVxuICAvKipcbiAgICogUnVuIGBvblByb2Nlc3NSdWxlKClgIHBsdWdpbnMgb24gZXZlcnkgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucHJvY2VzcyA9IGZ1bmN0aW9uIHByb2Nlc3MoKSB7XG4gICAgdmFyIHBsdWdpbnMgPSB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnM7IC8vIFdlIG5lZWQgdG8gY2xvbmUgYXJyYXkgYmVjYXVzZSBpZiB3ZSBtb2RpZnkgdGhlIGluZGV4IHNvbWV3aGVyZSBlbHNlIGR1cmluZyBhIGxvb3BcbiAgICAvLyB3ZSBlbmQgdXAgd2l0aCB2ZXJ5IGhhcmQtdG8tdHJhY2stZG93biBzaWRlIGVmZmVjdHMuXG5cbiAgICB0aGlzLmluZGV4LnNsaWNlKDApLmZvckVhY2gocGx1Z2lucy5vblByb2Nlc3NSdWxlLCBwbHVnaW5zKTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBydWxlIGluIGAubWFwYCwgYC5jbGFzc2VzYCBhbmQgYC5rZXlmcmFtZXNgIG1hcHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIocnVsZSkge1xuICAgIHRoaXMubWFwW3J1bGUua2V5XSA9IHJ1bGU7XG5cbiAgICBpZiAocnVsZSBpbnN0YW5jZW9mIFN0eWxlUnVsZSkge1xuICAgICAgdGhpcy5tYXBbcnVsZS5zZWxlY3Rvcl0gPSBydWxlO1xuICAgICAgaWYgKHJ1bGUuaWQpIHRoaXMuY2xhc3Nlc1tydWxlLmtleV0gPSBydWxlLmlkO1xuICAgIH0gZWxzZSBpZiAocnVsZSBpbnN0YW5jZW9mIEtleWZyYW1lc1J1bGUgJiYgdGhpcy5rZXlmcmFtZXMpIHtcbiAgICAgIHRoaXMua2V5ZnJhbWVzW3J1bGUubmFtZV0gPSBydWxlLmlkO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVW5yZWdpc3RlciBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVucmVnaXN0ZXIgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyKHJ1bGUpIHtcbiAgICBkZWxldGUgdGhpcy5tYXBbcnVsZS5rZXldO1xuXG4gICAgaWYgKHJ1bGUgaW5zdGFuY2VvZiBTdHlsZVJ1bGUpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLm1hcFtydWxlLnNlbGVjdG9yXTtcbiAgICAgIGRlbGV0ZSB0aGlzLmNsYXNzZXNbcnVsZS5rZXldO1xuICAgIH0gZWxzZSBpZiAocnVsZSBpbnN0YW5jZW9mIEtleWZyYW1lc1J1bGUpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmtleWZyYW1lc1tydWxlLm5hbWVdO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVXBkYXRlIHRoZSBmdW5jdGlvbiB2YWx1ZXMgd2l0aCBhIG5ldyBkYXRhLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgdmFyIG5hbWU7XG4gICAgdmFyIGRhdGE7XG4gICAgdmFyIG9wdGlvbnM7XG5cbiAgICBpZiAodHlwZW9mIChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pID09PSAnc3RyaW5nJykge1xuICAgICAgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXTsgLy8gJEZsb3dGaXhNZVtpbnZhbGlkLXR1cGxlLWluZGV4XVxuXG4gICAgICBkYXRhID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdOyAvLyAkRmxvd0ZpeE1lW2ludmFsaWQtdHVwbGUtaW5kZXhdXG5cbiAgICAgIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMl07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF07IC8vICRGbG93Rml4TWVbaW52YWxpZC10dXBsZS1pbmRleF1cblxuICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXTtcbiAgICAgIG5hbWUgPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChuYW1lKSB7XG4gICAgICB0aGlzLnVwZGF0ZU9uZSh0aGlzLm1hcFtuYW1lXSwgZGF0YSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLmluZGV4Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICB0aGlzLnVwZGF0ZU9uZSh0aGlzLmluZGV4W2luZGV4XSwgZGF0YSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBFeGVjdXRlIHBsdWdpbnMsIHVwZGF0ZSBydWxlIHByb3BzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGVPbmUgPSBmdW5jdGlvbiB1cGRhdGVPbmUocnVsZSwgZGF0YSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VXBkYXRlT3B0aW9ucztcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMkb3B0aW9uczIgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgIHBsdWdpbnMgPSBfdGhpcyRvcHRpb25zMi5qc3MucGx1Z2lucyxcbiAgICAgICAgc2hlZXQgPSBfdGhpcyRvcHRpb25zMi5zaGVldDsgLy8gSXQgaXMgYSBydWxlcyBjb250YWluZXIgbGlrZSBmb3IgZS5nLiBDb25kaXRpb25hbFJ1bGUuXG5cbiAgICBpZiAocnVsZS5ydWxlcyBpbnN0YW5jZW9mIFJ1bGVMaXN0KSB7XG4gICAgICBydWxlLnJ1bGVzLnVwZGF0ZShkYXRhLCBvcHRpb25zKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc3R5bGVSdWxlID0gcnVsZTtcbiAgICB2YXIgc3R5bGUgPSBzdHlsZVJ1bGUuc3R5bGU7XG4gICAgcGx1Z2lucy5vblVwZGF0ZShkYXRhLCBydWxlLCBzaGVldCwgb3B0aW9ucyk7IC8vIFdlIHJlbHkgb24gYSBuZXcgYHN0eWxlYCByZWYgaW4gY2FzZSBpdCB3YXMgbXV0YXRlZCBkdXJpbmcgb25VcGRhdGUgaG9vay5cblxuICAgIGlmIChvcHRpb25zLnByb2Nlc3MgJiYgc3R5bGUgJiYgc3R5bGUgIT09IHN0eWxlUnVsZS5zdHlsZSkge1xuICAgICAgLy8gV2UgbmVlZCB0byBydW4gdGhlIHBsdWdpbnMgaW4gY2FzZSBuZXcgYHN0eWxlYCByZWxpZXMgb24gc3ludGF4IHBsdWdpbnMuXG4gICAgICBwbHVnaW5zLm9uUHJvY2Vzc1N0eWxlKHN0eWxlUnVsZS5zdHlsZSwgc3R5bGVSdWxlLCBzaGVldCk7IC8vIFVwZGF0ZSBhbmQgYWRkIHByb3BzLlxuXG4gICAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlUnVsZS5zdHlsZSkge1xuICAgICAgICB2YXIgbmV4dFZhbHVlID0gc3R5bGVSdWxlLnN0eWxlW3Byb3BdO1xuICAgICAgICB2YXIgcHJldlZhbHVlID0gc3R5bGVbcHJvcF07IC8vIFdlIG5lZWQgdG8gdXNlIGBmb3JjZTogdHJ1ZWAgYmVjYXVzZSBgcnVsZS5zdHlsZWAgaGFzIGJlZW4gdXBkYXRlZCBkdXJpbmcgb25VcGRhdGUgaG9vaywgc28gYHJ1bGUucHJvcCgpYCB3aWxsIG5vdCB1cGRhdGUgdGhlIENTU09NIHJ1bGUuXG4gICAgICAgIC8vIFdlIGRvIHRoaXMgY29tcGFyaXNvbiB0byBhdm9pZCB1bm5lZWRlZCBgcnVsZS5wcm9wKClgIGNhbGxzLCBzaW5jZSB3ZSBoYXZlIHRoZSBvbGQgYHN0eWxlYCBvYmplY3QgaGVyZS5cblxuICAgICAgICBpZiAobmV4dFZhbHVlICE9PSBwcmV2VmFsdWUpIHtcbiAgICAgICAgICBzdHlsZVJ1bGUucHJvcChwcm9wLCBuZXh0VmFsdWUsIGZvcmNlVXBkYXRlT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gUmVtb3ZlIHByb3BzLlxuXG5cbiAgICAgIGZvciAodmFyIF9wcm9wIGluIHN0eWxlKSB7XG4gICAgICAgIHZhciBfbmV4dFZhbHVlID0gc3R5bGVSdWxlLnN0eWxlW19wcm9wXTtcbiAgICAgICAgdmFyIF9wcmV2VmFsdWUgPSBzdHlsZVtfcHJvcF07IC8vIFdlIG5lZWQgdG8gdXNlIGBmb3JjZTogdHJ1ZWAgYmVjYXVzZSBgcnVsZS5zdHlsZWAgaGFzIGJlZW4gdXBkYXRlZCBkdXJpbmcgb25VcGRhdGUgaG9vaywgc28gYHJ1bGUucHJvcCgpYCB3aWxsIG5vdCB1cGRhdGUgdGhlIENTU09NIHJ1bGUuXG4gICAgICAgIC8vIFdlIGRvIHRoaXMgY29tcGFyaXNvbiB0byBhdm9pZCB1bm5lZWRlZCBgcnVsZS5wcm9wKClgIGNhbGxzLCBzaW5jZSB3ZSBoYXZlIHRoZSBvbGQgYHN0eWxlYCBvYmplY3QgaGVyZS5cblxuICAgICAgICBpZiAoX25leHRWYWx1ZSA9PSBudWxsICYmIF9uZXh0VmFsdWUgIT09IF9wcmV2VmFsdWUpIHtcbiAgICAgICAgICBzdHlsZVJ1bGUucHJvcChfcHJvcCwgbnVsbCwgZm9yY2VVcGRhdGVPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ29udmVydCBydWxlcyB0byBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHZhciBzdHIgPSAnJztcbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG4gICAgdmFyIGxpbmsgPSBzaGVldCA/IHNoZWV0Lm9wdGlvbnMubGluayA6IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuaW5kZXgubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB2YXIgcnVsZSA9IHRoaXMuaW5kZXhbaW5kZXhdO1xuICAgICAgdmFyIGNzcyA9IHJ1bGUudG9TdHJpbmcob3B0aW9ucyk7IC8vIE5vIG5lZWQgdG8gcmVuZGVyIGFuIGVtcHR5IHJ1bGUuXG5cbiAgICAgIGlmICghY3NzICYmICFsaW5rKSBjb250aW51ZTtcbiAgICAgIGlmIChzdHIpIHN0ciArPSAnXFxuJztcbiAgICAgIHN0ciArPSBjc3M7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cjtcbiAgfTtcblxuICByZXR1cm4gUnVsZUxpc3Q7XG59KCk7XG5cbnZhciBTdHlsZVNoZWV0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3R5bGVTaGVldChzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5kZXBsb3llZCA9IHZvaWQgMDtcbiAgICB0aGlzLmF0dGFjaGVkID0gdm9pZCAwO1xuICAgIHRoaXMucnVsZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5yZW5kZXJlciA9IHZvaWQgMDtcbiAgICB0aGlzLmNsYXNzZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXlmcmFtZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5xdWV1ZSA9IHZvaWQgMDtcbiAgICB0aGlzLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgdGhpcy5kZXBsb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuY2xhc3NlcyA9IHt9O1xuICAgIHRoaXMua2V5ZnJhbWVzID0ge307XG4gICAgdGhpcy5vcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHNoZWV0OiB0aGlzLFxuICAgICAgcGFyZW50OiB0aGlzLFxuICAgICAgY2xhc3NlczogdGhpcy5jbGFzc2VzLFxuICAgICAga2V5ZnJhbWVzOiB0aGlzLmtleWZyYW1lc1xuICAgIH0pO1xuXG4gICAgaWYgKG9wdGlvbnMuUmVuZGVyZXIpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgb3B0aW9ucy5SZW5kZXJlcih0aGlzKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzID0gbmV3IFJ1bGVMaXN0KHRoaXMub3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHN0eWxlcykge1xuICAgICAgdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGVzW25hbWVdKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnByb2Nlc3MoKTtcbiAgfVxuICAvKipcbiAgICogQXR0YWNoIHJlbmRlcmFibGUgdG8gdGhlIHJlbmRlciB0cmVlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBTdHlsZVNoZWV0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uYXR0YWNoID0gZnVuY3Rpb24gYXR0YWNoKCkge1xuICAgIGlmICh0aGlzLmF0dGFjaGVkKSByZXR1cm4gdGhpcztcbiAgICBpZiAodGhpcy5yZW5kZXJlcikgdGhpcy5yZW5kZXJlci5hdHRhY2goKTtcbiAgICB0aGlzLmF0dGFjaGVkID0gdHJ1ZTsgLy8gT3JkZXIgaXMgaW1wb3J0YW50LCBiZWNhdXNlIHdlIGNhbid0IHVzZSBpbnNlcnRSdWxlIEFQSSBpZiBzdHlsZSBlbGVtZW50IGlzIG5vdCBhdHRhY2hlZC5cblxuICAgIGlmICghdGhpcy5kZXBsb3llZCkgdGhpcy5kZXBsb3koKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIHJlbmRlcmFibGUgZnJvbSByZW5kZXIgdHJlZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGV0YWNoID0gZnVuY3Rpb24gZGV0YWNoKCkge1xuICAgIGlmICghdGhpcy5hdHRhY2hlZCkgcmV0dXJuIHRoaXM7XG4gICAgaWYgKHRoaXMucmVuZGVyZXIpIHRoaXMucmVuZGVyZXIuZGV0YWNoKCk7XG4gICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgYSBydWxlIHRvIHRoZSBjdXJyZW50IHN0eWxlc2hlZXQuXG4gICAqIFdpbGwgaW5zZXJ0IGEgcnVsZSBhbHNvIGFmdGVyIHRoZSBzdHlsZXNoZWV0IGhhcyBiZWVuIHJlbmRlcmVkIGZpcnN0IHRpbWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFJ1bGUgPSBmdW5jdGlvbiBhZGRSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICB2YXIgcXVldWUgPSB0aGlzLnF1ZXVlOyAvLyBQbHVnaW5zIGNhbiBjcmVhdGUgcnVsZXMuXG4gICAgLy8gSW4gb3JkZXIgdG8gcHJlc2VydmUgdGhlIHJpZ2h0IG9yZGVyLCB3ZSBuZWVkIHRvIHF1ZXVlIGFsbCBgLmFkZFJ1bGVgIGNhbGxzLFxuICAgIC8vIHdoaWNoIGhhcHBlbiBhZnRlciB0aGUgZmlyc3QgYHJ1bGVzLmFkZCgpYCBjYWxsLlxuXG4gICAgaWYgKHRoaXMuYXR0YWNoZWQgJiYgIXF1ZXVlKSB0aGlzLnF1ZXVlID0gW107XG4gICAgdmFyIHJ1bGUgPSB0aGlzLnJ1bGVzLmFkZChuYW1lLCBkZWNsLCBvcHRpb25zKTtcbiAgICBpZiAoIXJ1bGUpIHJldHVybiBudWxsO1xuICAgIHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuXG4gICAgaWYgKHRoaXMuYXR0YWNoZWQpIHtcbiAgICAgIGlmICghdGhpcy5kZXBsb3llZCkgcmV0dXJuIHJ1bGU7IC8vIERvbid0IGluc2VydCBydWxlIGRpcmVjdGx5IGlmIHRoZXJlIGlzIG5vIHN0cmluZ2lmaWVkIHZlcnNpb24geWV0LlxuICAgICAgLy8gSXQgd2lsbCBiZSBpbnNlcnRlZCBhbGwgdG9nZXRoZXIgd2hlbiAuYXR0YWNoIGlzIGNhbGxlZC5cblxuICAgICAgaWYgKHF1ZXVlKSBxdWV1ZS5wdXNoKHJ1bGUpO2Vsc2Uge1xuICAgICAgICB0aGlzLmluc2VydFJ1bGUocnVsZSk7XG5cbiAgICAgICAgaWYgKHRoaXMucXVldWUpIHtcbiAgICAgICAgICB0aGlzLnF1ZXVlLmZvckVhY2godGhpcy5pbnNlcnRSdWxlLCB0aGlzKTtcbiAgICAgICAgICB0aGlzLnF1ZXVlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcnVsZTtcbiAgICB9IC8vIFdlIGNhbid0IGFkZCBydWxlcyB0byBhIGRldGFjaGVkIHN0eWxlIG5vZGUuXG4gICAgLy8gV2Ugd2lsbCByZWRlcGxveSB0aGUgc2hlZXQgb25jZSB1c2VyIHdpbGwgYXR0YWNoIGl0LlxuXG5cbiAgICB0aGlzLmRlcGxveWVkID0gZmFsc2U7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBydWxlIGludG8gdGhlIFN0eWxlU2hlZXRcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIGluc2VydFJ1bGUocnVsZSkge1xuICAgIGlmICh0aGlzLnJlbmRlcmVyKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmluc2VydFJ1bGUocnVsZSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIGFkZCBydWxlcy5cbiAgICogV2lsbCByZW5kZXIgYWxzbyBhZnRlciBTdHlsZSBTaGVldCB3YXMgcmVuZGVyZWQgdGhlIGZpcnN0IHRpbWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFJ1bGVzID0gZnVuY3Rpb24gYWRkUnVsZXMoc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgdmFyIGFkZGVkID0gW107XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHN0eWxlcykge1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLmFkZFJ1bGUobmFtZSwgc3R5bGVzW25hbWVdLCBvcHRpb25zKTtcbiAgICAgIGlmIChydWxlKSBhZGRlZC5wdXNoKHJ1bGUpO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRlZDtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgcnVsZSBieSBuYW1lLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRSdWxlID0gZnVuY3Rpb24gZ2V0UnVsZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYSBydWxlIGJ5IG5hbWUuXG4gICAqIFJldHVybnMgYHRydWVgOiBpZiBydWxlIGhhcyBiZWVuIGRlbGV0ZWQgZnJvbSB0aGUgRE9NLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZWxldGVSdWxlID0gZnVuY3Rpb24gZGVsZXRlUnVsZShuYW1lKSB7XG4gICAgdmFyIHJ1bGUgPSB0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcgPyBuYW1lIDogdGhpcy5ydWxlcy5nZXQobmFtZSk7XG5cbiAgICBpZiAoIXJ1bGUgfHwgLy8gU3R5bGUgc2hlZXQgd2FzIGNyZWF0ZWQgd2l0aG91dCBsaW5rOiB0cnVlIGFuZCBhdHRhY2hlZCwgaW4gdGhpcyBjYXNlIHdlXG4gICAgLy8gd29uJ3QgYmUgYWJsZSB0byByZW1vdmUgdGhlIENTUyBydWxlIGZyb20gdGhlIERPTS5cbiAgICB0aGlzLmF0dGFjaGVkICYmICFydWxlLnJlbmRlcmFibGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnJlbW92ZShydWxlKTtcblxuICAgIGlmICh0aGlzLmF0dGFjaGVkICYmIHJ1bGUucmVuZGVyYWJsZSAmJiB0aGlzLnJlbmRlcmVyKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5kZWxldGVSdWxlKHJ1bGUucmVuZGVyYWJsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBEZXBsb3kgcHVyZSBDU1Mgc3RyaW5nIHRvIGEgcmVuZGVyYWJsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGVwbG95ID0gZnVuY3Rpb24gZGVwbG95KCkge1xuICAgIGlmICh0aGlzLnJlbmRlcmVyKSB0aGlzLnJlbmRlcmVyLmRlcGxveSgpO1xuICAgIHRoaXMuZGVwbG95ZWQgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGZ1bmN0aW9uIHZhbHVlcyB3aXRoIGEgbmV3IGRhdGEuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICB2YXIgX3RoaXMkcnVsZXM7XG5cbiAgICAoX3RoaXMkcnVsZXMgPSB0aGlzLnJ1bGVzKS51cGRhdGUuYXBwbHkoX3RoaXMkcnVsZXMsIGFyZ3VtZW50cyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogVXBkYXRlcyBhIHNpbmdsZSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGVPbmUgPSBmdW5jdGlvbiB1cGRhdGVPbmUocnVsZSwgZGF0YSwgb3B0aW9ucykge1xuICAgIHRoaXMucnVsZXMudXBkYXRlT25lKHJ1bGUsIGRhdGEsIG9wdGlvbnMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0IHJ1bGVzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KCk7XG5cbnZhciBQbHVnaW5zUmVnaXN0cnkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQbHVnaW5zUmVnaXN0cnkoKSB7XG4gICAgdGhpcy5wbHVnaW5zID0ge1xuICAgICAgaW50ZXJuYWw6IFtdLFxuICAgICAgZXh0ZXJuYWw6IFtdXG4gICAgfTtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gdm9pZCAwO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFBsdWdpbnNSZWdpc3RyeS5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIENhbGwgYG9uQ3JlYXRlUnVsZWAgaG9va3MgYW5kIHJldHVybiBhbiBvYmplY3QgaWYgcmV0dXJuZWQgYnkgYSBob29rLlxuICAgKi9cbiAgX3Byb3RvLm9uQ3JlYXRlUnVsZSA9IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uQ3JlYXRlUnVsZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLnJlZ2lzdHJ5Lm9uQ3JlYXRlUnVsZVtpXShuYW1lLCBkZWNsLCBvcHRpb25zKTtcbiAgICAgIGlmIChydWxlKSByZXR1cm4gcnVsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25Qcm9jZXNzUnVsZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uUHJvY2Vzc1J1bGUgPSBmdW5jdGlvbiBvblByb2Nlc3NSdWxlKHJ1bGUpIHtcbiAgICBpZiAocnVsZS5pc1Byb2Nlc3NlZCkgcmV0dXJuO1xuICAgIHZhciBzaGVldCA9IHJ1bGUub3B0aW9ucy5zaGVldDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NSdWxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1J1bGVbaV0ocnVsZSwgc2hlZXQpO1xuICAgIH1cblxuICAgIGlmIChydWxlLnN0eWxlKSB0aGlzLm9uUHJvY2Vzc1N0eWxlKHJ1bGUuc3R5bGUsIHJ1bGUsIHNoZWV0KTtcbiAgICBydWxlLmlzUHJvY2Vzc2VkID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25Qcm9jZXNzU3R5bGVgIGhvb2tzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vblByb2Nlc3NTdHlsZSA9IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlLCBzaGVldCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTdHlsZS5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICBydWxlLnN0eWxlID0gdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTdHlsZVtpXShydWxlLnN0eWxlLCBydWxlLCBzaGVldCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvblByb2Nlc3NTaGVldGAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uUHJvY2Vzc1NoZWV0ID0gZnVuY3Rpb24gb25Qcm9jZXNzU2hlZXQoc2hlZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25Qcm9jZXNzU2hlZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucmVnaXN0cnkub25Qcm9jZXNzU2hlZXRbaV0oc2hlZXQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25VcGRhdGVgIGhvb2tzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vblVwZGF0ZSA9IGZ1bmN0aW9uIG9uVXBkYXRlKGRhdGEsIHJ1bGUsIHNoZWV0LCBvcHRpb25zKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uVXBkYXRlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnJlZ2lzdHJ5Lm9uVXBkYXRlW2ldKGRhdGEsIHJ1bGUsIHNoZWV0LCBvcHRpb25zKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgYG9uQ2hhbmdlVmFsdWVgIGhvb2tzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vbkNoYW5nZVZhbHVlID0gZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCwgcnVsZSkge1xuICAgIHZhciBwcm9jZXNzZWRWYWx1ZSA9IHZhbHVlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uQ2hhbmdlVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHByb2Nlc3NlZFZhbHVlID0gdGhpcy5yZWdpc3RyeS5vbkNoYW5nZVZhbHVlW2ldKHByb2Nlc3NlZFZhbHVlLCBwcm9wLCBydWxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvY2Vzc2VkVmFsdWU7XG4gIH1cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgcGx1Z2luLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51c2UgPSBmdW5jdGlvbiB1c2UobmV3UGx1Z2luLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgcXVldWU6ICdleHRlcm5hbCdcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIHBsdWdpbnMgPSB0aGlzLnBsdWdpbnNbb3B0aW9ucy5xdWV1ZV07IC8vIEF2b2lkcyBhcHBseWluZyBzYW1lIHBsdWdpbiB0d2ljZSwgYXQgbGVhc3QgYmFzZWQgb24gcmVmLlxuXG4gICAgaWYgKHBsdWdpbnMuaW5kZXhPZihuZXdQbHVnaW4pICE9PSAtMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHBsdWdpbnMucHVzaChuZXdQbHVnaW4pO1xuICAgIHRoaXMucmVnaXN0cnkgPSBbXS5jb25jYXQodGhpcy5wbHVnaW5zLmV4dGVybmFsLCB0aGlzLnBsdWdpbnMuaW50ZXJuYWwpLnJlZHVjZShmdW5jdGlvbiAocmVnaXN0cnksIHBsdWdpbikge1xuICAgICAgZm9yICh2YXIgbmFtZSBpbiBwbHVnaW4pIHtcbiAgICAgICAgaWYgKG5hbWUgaW4gcmVnaXN0cnkpIHtcbiAgICAgICAgICByZWdpc3RyeVtuYW1lXS5wdXNoKHBsdWdpbltuYW1lXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBVbmtub3duIGhvb2sgXFxcIlwiICsgbmFtZSArIFwiXFxcIi5cIikgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlZ2lzdHJ5O1xuICAgIH0sIHtcbiAgICAgIG9uQ3JlYXRlUnVsZTogW10sXG4gICAgICBvblByb2Nlc3NSdWxlOiBbXSxcbiAgICAgIG9uUHJvY2Vzc1N0eWxlOiBbXSxcbiAgICAgIG9uUHJvY2Vzc1NoZWV0OiBbXSxcbiAgICAgIG9uQ2hhbmdlVmFsdWU6IFtdLFxuICAgICAgb25VcGRhdGU6IFtdXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFBsdWdpbnNSZWdpc3RyeTtcbn0oKTtcblxuLyoqXG4gKiBTaGVldHMgcmVnaXN0cnkgdG8gYWNjZXNzIHRoZW0gYWxsIGF0IG9uZSBwbGFjZS5cbiAqL1xudmFyIFNoZWV0c1JlZ2lzdHJ5ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2hlZXRzUmVnaXN0cnkoKSB7XG4gICAgdGhpcy5yZWdpc3RyeSA9IFtdO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNoZWV0c1JlZ2lzdHJ5LnByb3RvdHlwZTtcblxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBTdHlsZSBTaGVldC5cbiAgICovXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQoc2hlZXQpIHtcbiAgICB2YXIgcmVnaXN0cnkgPSB0aGlzLnJlZ2lzdHJ5O1xuICAgIHZhciBpbmRleCA9IHNoZWV0Lm9wdGlvbnMuaW5kZXg7XG4gICAgaWYgKHJlZ2lzdHJ5LmluZGV4T2Yoc2hlZXQpICE9PSAtMSkgcmV0dXJuO1xuXG4gICAgaWYgKHJlZ2lzdHJ5Lmxlbmd0aCA9PT0gMCB8fCBpbmRleCA+PSB0aGlzLmluZGV4KSB7XG4gICAgICByZWdpc3RyeS5wdXNoKHNoZWV0KTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEZpbmQgYSBwb3NpdGlvbi5cblxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWdpc3RyeS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlZ2lzdHJ5W2ldLm9wdGlvbnMuaW5kZXggPiBpbmRleCkge1xuICAgICAgICByZWdpc3RyeS5zcGxpY2UoaSwgMCwgc2hlZXQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXNldCB0aGUgcmVnaXN0cnkuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgdGhpcy5yZWdpc3RyeSA9IFtdO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgYSBTdHlsZSBTaGVldC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKHNoZWV0KSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5yZWdpc3RyeS5pbmRleE9mKHNoZWV0KTtcbiAgICB0aGlzLnJlZ2lzdHJ5LnNwbGljZShpbmRleCwgMSk7XG4gIH1cbiAgLyoqXG4gICAqIENvbnZlcnQgYWxsIGF0dGFjaGVkIHNoZWV0cyB0byBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoX3RlbXApIHtcbiAgICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgICBhdHRhY2hlZCA9IF9yZWYuYXR0YWNoZWQsXG4gICAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJhdHRhY2hlZFwiXSk7XG5cbiAgICB2YXIgY3NzID0gJyc7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzaGVldCA9IHRoaXMucmVnaXN0cnlbaV07XG5cbiAgICAgIGlmIChhdHRhY2hlZCAhPSBudWxsICYmIHNoZWV0LmF0dGFjaGVkICE9PSBhdHRhY2hlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNzcykgY3NzICs9ICdcXG4nO1xuICAgICAgY3NzICs9IHNoZWV0LnRvU3RyaW5nKG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBjc3M7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFNoZWV0c1JlZ2lzdHJ5LCBbe1xuICAgIGtleTogXCJpbmRleFwiLFxuXG4gICAgLyoqXG4gICAgICogQ3VycmVudCBoaWdoZXN0IGluZGV4IG51bWJlci5cbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5Lmxlbmd0aCA9PT0gMCA/IDAgOiB0aGlzLnJlZ2lzdHJ5W3RoaXMucmVnaXN0cnkubGVuZ3RoIC0gMV0ub3B0aW9ucy5pbmRleDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2hlZXRzUmVnaXN0cnk7XG59KCk7XG5cbi8qKlxuICogVGhpcyBpcyBhIGdsb2JhbCBzaGVldHMgcmVnaXN0cnkuIE9ubHkgRG9tUmVuZGVyZXIgd2lsbCBhZGQgc2hlZXRzIHRvIGl0LlxuICogT24gdGhlIHNlcnZlciBvbmUgc2hvdWxkIHVzZSBhbiBvd24gU2hlZXRzUmVnaXN0cnkgaW5zdGFuY2UgYW5kIGFkZCB0aGVcbiAqIHNoZWV0cyB0byBpdCwgYmVjYXVzZSB5b3UgbmVlZCB0byBtYWtlIHN1cmUgdG8gY3JlYXRlIGEgbmV3IHJlZ2lzdHJ5IGZvclxuICogZWFjaCByZXF1ZXN0IGluIG9yZGVyIHRvIG5vdCBsZWFrIHNoZWV0cyBhY3Jvc3MgcmVxdWVzdHMuXG4gKi9cblxudmFyIHJlZ2lzdHJ5ID0gbmV3IFNoZWV0c1JlZ2lzdHJ5KCk7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5cbi8qKlxuICogTm93IHRoYXQgYGdsb2JhbFRoaXNgIGlzIGF2YWlsYWJsZSBvbiBtb3N0IHBsYXRmb3Jtc1xuICogKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL2dsb2JhbFRoaXMjYnJvd3Nlcl9jb21wYXRpYmlsaXR5KVxuICogd2UgY2hlY2sgZm9yIGBnbG9iYWxUaGlzYCBmaXJzdC4gYGdsb2JhbFRoaXNgIGlzIG5lY2Vzc2FyeSBmb3IganNzXG4gKiB0byBydW4gaW4gQWdvcmljJ3Mgc2VjdXJlIHZlcnNpb24gb2YgSmF2YVNjcmlwdCAoU0VTKS4gVW5kZXIgU0VTLFxuICogYGdsb2JhbFRoaXNgIGV4aXN0cywgYnV0IGB3aW5kb3dgLCBgc2VsZmAsIGFuZCBgRnVuY3Rpb24oJ3JldHVyblxuICogdGhpcycpKClgIGFyZSBhbGwgdW5kZWZpbmVkIGZvciBzZWN1cml0eSByZWFzb25zLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG4gKi9cbnZhciBnbG9iYWxUaGlzJDEgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT09IE1hdGggPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09PSBNYXRoID8gc2VsZiA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbnZhciBucyA9ICcyZjFhY2M2YzNhNjA2YjA4MmU1ZWVmNWU1NDQxNGZmYic7XG5pZiAoZ2xvYmFsVGhpcyQxW25zXSA9PSBudWxsKSBnbG9iYWxUaGlzJDFbbnNdID0gMDsgLy8gQnVuZGxlIG1heSBjb250YWluIG11bHRpcGxlIEpTUyB2ZXJzaW9ucyBhdCB0aGUgc2FtZSB0aW1lLiBJbiBvcmRlciB0byBpZGVudGlmeVxuLy8gdGhlIGN1cnJlbnQgdmVyc2lvbiB3aXRoIGp1c3Qgb25lIHNob3J0IG51bWJlciBhbmQgdXNlIGl0IGZvciBjbGFzc2VzIGdlbmVyYXRpb25cbi8vIHdlIHVzZSBhIGNvdW50ZXIuIEFsc28gaXQgaXMgbW9yZSBhY2N1cmF0ZSwgYmVjYXVzZSB1c2VyIGNhbiBtYW51YWxseSByZWV2YWx1YXRlXG4vLyB0aGUgbW9kdWxlLlxuXG52YXIgbW9kdWxlSWQgPSBnbG9iYWxUaGlzJDFbbnNdKys7XG5cbnZhciBtYXhSdWxlcyA9IDFlMTA7XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIGdlbmVyYXRlcyB1bmlxdWUgY2xhc3MgbmFtZXMgYmFzZWQgb24gY291bnRlcnMuXG4gKiBXaGVuIG5ldyBnZW5lcmF0b3IgZnVuY3Rpb24gaXMgY3JlYXRlZCwgcnVsZSBjb3VudGVyIGlzIHJlc2V0ZWQuXG4gKiBXZSBuZWVkIHRvIHJlc2V0IHRoZSBydWxlIGNvdW50ZXIgZm9yIFNTUiBmb3IgZWFjaCByZXF1ZXN0LlxuICovXG52YXIgY3JlYXRlR2VuZXJhdGVJZCA9IGZ1bmN0aW9uIGNyZWF0ZUdlbmVyYXRlSWQob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIHJ1bGVDb3VudGVyID0gMDtcbiAgcmV0dXJuIGZ1bmN0aW9uIChydWxlLCBzaGVldCkge1xuICAgIHJ1bGVDb3VudGVyICs9IDE7XG5cbiAgICBpZiAocnVsZUNvdW50ZXIgPiBtYXhSdWxlcykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBZb3UgbWlnaHQgaGF2ZSBhIG1lbW9yeSBsZWFrLiBSdWxlIGNvdW50ZXIgaXMgYXQgXCIgKyBydWxlQ291bnRlciArIFwiLlwiKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICB2YXIganNzSWQgPSAnJztcbiAgICB2YXIgcHJlZml4ID0gJyc7XG5cbiAgICBpZiAoc2hlZXQpIHtcbiAgICAgIGlmIChzaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeCkge1xuICAgICAgICBwcmVmaXggPSBzaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeDtcbiAgICAgIH1cblxuICAgICAgaWYgKHNoZWV0Lm9wdGlvbnMuanNzLmlkICE9IG51bGwpIHtcbiAgICAgICAganNzSWQgPSBTdHJpbmcoc2hlZXQub3B0aW9ucy5qc3MuaWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLm1pbmlmeSkge1xuICAgICAgLy8gVXNpbmcgXCJjXCIgYmVjYXVzZSBhIG51bWJlciBjYW4ndCBiZSB0aGUgZmlyc3QgY2hhciBpbiBhIGNsYXNzIG5hbWUuXG4gICAgICByZXR1cm4gXCJcIiArIChwcmVmaXggfHwgJ2MnKSArIG1vZHVsZUlkICsganNzSWQgKyBydWxlQ291bnRlcjtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4ICsgcnVsZS5rZXkgKyBcIi1cIiArIG1vZHVsZUlkICsgKGpzc0lkID8gXCItXCIgKyBqc3NJZCA6ICcnKSArIFwiLVwiICsgcnVsZUNvdW50ZXI7XG4gIH07XG59O1xuXG4vKipcbiAqIENhY2hlIHRoZSB2YWx1ZSBmcm9tIHRoZSBmaXJzdCB0aW1lIGEgZnVuY3Rpb24gaXMgY2FsbGVkLlxuICovXG52YXIgbWVtb2l6ZSA9IGZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIHZhbHVlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdmFsdWUpIHZhbHVlID0gZm4oKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59O1xuXG4vKipcbiAqIEdldCBhIHN0eWxlIHByb3BlcnR5IHZhbHVlLlxuICovXG52YXIgZ2V0UHJvcGVydHlWYWx1ZSA9IGZ1bmN0aW9uIGdldFByb3BlcnR5VmFsdWUoY3NzUnVsZSwgcHJvcCkge1xuICB0cnkge1xuICAgIC8vIFN1cHBvcnQgQ1NTVE9NLlxuICAgIGlmIChjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwKSB7XG4gICAgICByZXR1cm4gY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcC5nZXQocHJvcCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNzc1J1bGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gSUUgbWF5IHRocm93IGlmIHByb3BlcnR5IGlzIHVua25vd24uXG4gICAgcmV0dXJuICcnO1xuICB9XG59O1xuXG4vKipcbiAqIFNldCBhIHN0eWxlIHByb3BlcnR5LlxuICovXG52YXIgc2V0UHJvcGVydHkgPSBmdW5jdGlvbiBzZXRQcm9wZXJ0eShjc3NSdWxlLCBwcm9wLCB2YWx1ZSkge1xuICB0cnkge1xuICAgIHZhciBjc3NWYWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBjc3NWYWx1ZSA9IHRvQ3NzVmFsdWUodmFsdWUsIHRydWUpO1xuXG4gICAgICBpZiAodmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0gPT09ICchaW1wb3J0YW50Jykge1xuICAgICAgICBjc3NSdWxlLnN0eWxlLnNldFByb3BlcnR5KHByb3AsIGNzc1ZhbHVlLCAnaW1wb3J0YW50Jyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gLy8gU3VwcG9ydCBDU1NUT00uXG5cblxuICAgIGlmIChjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwKSB7XG4gICAgICBjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwLnNldChwcm9wLCBjc3NWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNzc1J1bGUuc3R5bGUuc2V0UHJvcGVydHkocHJvcCwgY3NzVmFsdWUpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gSUUgbWF5IHRocm93IGlmIHByb3BlcnR5IGlzIHVua25vd24uXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhIHN0eWxlIHByb3BlcnR5LlxuICovXG52YXIgcmVtb3ZlUHJvcGVydHkgPSBmdW5jdGlvbiByZW1vdmVQcm9wZXJ0eShjc3NSdWxlLCBwcm9wKSB7XG4gIHRyeSB7XG4gICAgLy8gU3VwcG9ydCBDU1NUT00uXG4gICAgaWYgKGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXApIHtcbiAgICAgIGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXAuZGVsZXRlKHByb3ApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjc3NSdWxlLnN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3ApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBET01FeGNlcHRpb24gXFxcIlwiICsgZXJyLm1lc3NhZ2UgKyBcIlxcXCIgd2FzIHRocm93bi4gVHJpZWQgdG8gcmVtb3ZlIHByb3BlcnR5IFxcXCJcIiArIHByb3AgKyBcIlxcXCIuXCIpIDogdm9pZCAwO1xuICB9XG59O1xuXG4vKipcbiAqIFNldCB0aGUgc2VsZWN0b3IuXG4gKi9cbnZhciBzZXRTZWxlY3RvciA9IGZ1bmN0aW9uIHNldFNlbGVjdG9yKGNzc1J1bGUsIHNlbGVjdG9yVGV4dCkge1xuICBjc3NSdWxlLnNlbGVjdG9yVGV4dCA9IHNlbGVjdG9yVGV4dDsgLy8gUmV0dXJuIGZhbHNlIGlmIHNldHRlciB3YXMgbm90IHN1Y2Nlc3NmdWwuXG4gIC8vIEN1cnJlbnRseSB3b3JrcyBpbiBjaHJvbWUgb25seS5cblxuICByZXR1cm4gY3NzUnVsZS5zZWxlY3RvclRleHQgPT09IHNlbGVjdG9yVGV4dDtcbn07XG4vKipcbiAqIEdldHMgdGhlIGBoZWFkYCBlbGVtZW50IHVwb24gdGhlIGZpcnN0IGNhbGwgYW5kIGNhY2hlcyBpdC5cbiAqIFdlIGFzc3VtZSBpdCBjYW4ndCBiZSBudWxsLlxuICovXG5cblxudmFyIGdldEhlYWQgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQnKTtcbn0pO1xuLyoqXG4gKiBGaW5kIGF0dGFjaGVkIHNoZWV0IHdpdGggYW4gaW5kZXggaGlnaGVyIHRoYW4gdGhlIHBhc3NlZCBvbmUuXG4gKi9cblxuZnVuY3Rpb24gZmluZEhpZ2hlclNoZWV0KHJlZ2lzdHJ5LCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaXN0cnkubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2hlZXQgPSByZWdpc3RyeVtpXTtcblxuICAgIGlmIChzaGVldC5hdHRhY2hlZCAmJiBzaGVldC5vcHRpb25zLmluZGV4ID4gb3B0aW9ucy5pbmRleCAmJiBzaGVldC5vcHRpb25zLmluc2VydGlvblBvaW50ID09PSBvcHRpb25zLmluc2VydGlvblBvaW50KSB7XG4gICAgICByZXR1cm4gc2hlZXQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIEZpbmQgYXR0YWNoZWQgc2hlZXQgd2l0aCB0aGUgaGlnaGVzdCBpbmRleC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGZpbmRIaWdoZXN0U2hlZXQocmVnaXN0cnksIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIgaSA9IHJlZ2lzdHJ5Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHNoZWV0ID0gcmVnaXN0cnlbaV07XG5cbiAgICBpZiAoc2hlZXQuYXR0YWNoZWQgJiYgc2hlZXQub3B0aW9ucy5pbnNlcnRpb25Qb2ludCA9PT0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludCkge1xuICAgICAgcmV0dXJuIHNoZWV0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBGaW5kIGEgY29tbWVudCB3aXRoIFwianNzXCIgaW5zaWRlLlxuICovXG5cblxuZnVuY3Rpb24gZmluZENvbW1lbnROb2RlKHRleHQpIHtcbiAgdmFyIGhlYWQgPSBnZXRIZWFkKCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBoZWFkLmNoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbm9kZSA9IGhlYWQuY2hpbGROb2Rlc1tpXTtcblxuICAgIGlmIChub2RlLm5vZGVUeXBlID09PSA4ICYmIG5vZGUubm9kZVZhbHVlLnRyaW0oKSA9PT0gdGV4dCkge1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogRmluZCBhIG5vZGUgYmVmb3JlIHdoaWNoIHdlIGNhbiBpbnNlcnQgdGhlIHNoZWV0LlxuICovXG5mdW5jdGlvbiBmaW5kUHJldk5vZGUob3B0aW9ucykge1xuICB2YXIgcmVnaXN0cnkkMSA9IHJlZ2lzdHJ5LnJlZ2lzdHJ5O1xuXG4gIGlmIChyZWdpc3RyeSQxLmxlbmd0aCA+IDApIHtcbiAgICAvLyBUcnkgdG8gaW5zZXJ0IGJlZm9yZSB0aGUgbmV4dCBoaWdoZXIgc2hlZXQuXG4gICAgdmFyIHNoZWV0ID0gZmluZEhpZ2hlclNoZWV0KHJlZ2lzdHJ5JDEsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHNoZWV0ICYmIHNoZWV0LnJlbmRlcmVyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXJlbnQ6IHNoZWV0LnJlbmRlcmVyLmVsZW1lbnQucGFyZW50Tm9kZSxcbiAgICAgICAgbm9kZTogc2hlZXQucmVuZGVyZXIuZWxlbWVudFxuICAgICAgfTtcbiAgICB9IC8vIE90aGVyd2lzZSBpbnNlcnQgYWZ0ZXIgdGhlIGxhc3QgYXR0YWNoZWQuXG5cblxuICAgIHNoZWV0ID0gZmluZEhpZ2hlc3RTaGVldChyZWdpc3RyeSQxLCBvcHRpb25zKTtcblxuICAgIGlmIChzaGVldCAmJiBzaGVldC5yZW5kZXJlcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFyZW50OiBzaGVldC5yZW5kZXJlci5lbGVtZW50LnBhcmVudE5vZGUsXG4gICAgICAgIG5vZGU6IHNoZWV0LnJlbmRlcmVyLmVsZW1lbnQubmV4dFNpYmxpbmdcbiAgICAgIH07XG4gICAgfVxuICB9IC8vIFRyeSB0byBmaW5kIGEgY29tbWVudCBwbGFjZWhvbGRlciBpZiByZWdpc3RyeSBpcyBlbXB0eS5cblxuXG4gIHZhciBpbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG5cbiAgaWYgKGluc2VydGlvblBvaW50ICYmIHR5cGVvZiBpbnNlcnRpb25Qb2ludCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgY29tbWVudCA9IGZpbmRDb21tZW50Tm9kZShpbnNlcnRpb25Qb2ludCk7XG5cbiAgICBpZiAoY29tbWVudCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFyZW50OiBjb21tZW50LnBhcmVudE5vZGUsXG4gICAgICAgIG5vZGU6IGNvbW1lbnQubmV4dFNpYmxpbmdcbiAgICAgIH07XG4gICAgfSAvLyBJZiB1c2VyIHNwZWNpZmllcyBhbiBpbnNlcnRpb24gcG9pbnQgYW5kIGl0IGNhbid0IGJlIGZvdW5kIGluIHRoZSBkb2N1bWVudCAtXG4gICAgLy8gYmFkIHNwZWNpZmljaXR5IGlzc3VlcyBtYXkgYXBwZWFyLlxuXG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIEluc2VydGlvbiBwb2ludCBcXFwiXCIgKyBpbnNlcnRpb25Qb2ludCArIFwiXFxcIiBub3QgZm91bmQuXCIpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBJbnNlcnQgc3R5bGUgZWxlbWVudCBpbnRvIHRoZSBET00uXG4gKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZShzdHlsZSwgb3B0aW9ucykge1xuICB2YXIgaW5zZXJ0aW9uUG9pbnQgPSBvcHRpb25zLmluc2VydGlvblBvaW50O1xuICB2YXIgbmV4dE5vZGUgPSBmaW5kUHJldk5vZGUob3B0aW9ucyk7XG5cbiAgaWYgKG5leHROb2RlICE9PSBmYWxzZSAmJiBuZXh0Tm9kZS5wYXJlbnQpIHtcbiAgICBuZXh0Tm9kZS5wYXJlbnQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0Tm9kZS5ub2RlKTtcbiAgICByZXR1cm47XG4gIH0gLy8gV29ya3Mgd2l0aCBpZnJhbWVzIGFuZCBhbnkgbm9kZSB0eXBlcy5cblxuXG4gIGlmIChpbnNlcnRpb25Qb2ludCAmJiB0eXBlb2YgaW5zZXJ0aW9uUG9pbnQubm9kZVR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDEzMjg3MjgvZm9yY2UtY2FzdGluZy1pbi1mbG93XG4gICAgdmFyIGluc2VydGlvblBvaW50RWxlbWVudCA9IGluc2VydGlvblBvaW50O1xuICAgIHZhciBwYXJlbnROb2RlID0gaW5zZXJ0aW9uUG9pbnRFbGVtZW50LnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudE5vZGUpIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHN0eWxlLCBpbnNlcnRpb25Qb2ludEVsZW1lbnQubmV4dFNpYmxpbmcpO2Vsc2UgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1tKU1NdIEluc2VydGlvbiBwb2ludCBpcyBub3QgaW4gdGhlIERPTS4nKSA6IHZvaWQgMDtcbiAgICByZXR1cm47XG4gIH1cblxuICBnZXRIZWFkKCkuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuLyoqXG4gKiBSZWFkIGpzcyBub25jZSBzZXR0aW5nIGZyb20gdGhlIHBhZ2UgaWYgdGhlIHVzZXIgaGFzIHNldCBpdC5cbiAqL1xuXG5cbnZhciBnZXROb25jZSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuICB2YXIgbm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21ldGFbcHJvcGVydHk9XCJjc3Atbm9uY2VcIl0nKTtcbiAgcmV0dXJuIG5vZGUgPyBub2RlLmdldEF0dHJpYnV0ZSgnY29udGVudCcpIDogbnVsbDtcbn0pO1xuXG52YXIgX2luc2VydFJ1bGUgPSBmdW5jdGlvbiBpbnNlcnRSdWxlKGNvbnRhaW5lciwgcnVsZSwgaW5kZXgpIHtcbiAgdHJ5IHtcbiAgICBpZiAoJ2luc2VydFJ1bGUnIGluIGNvbnRhaW5lcikge1xuICAgICAgdmFyIGMgPSBjb250YWluZXI7XG4gICAgICBjLmluc2VydFJ1bGUocnVsZSwgaW5kZXgpO1xuICAgIH0gLy8gS2V5ZnJhbWVzIHJ1bGUuXG4gICAgZWxzZSBpZiAoJ2FwcGVuZFJ1bGUnIGluIGNvbnRhaW5lcikge1xuICAgICAgICB2YXIgX2MgPSBjb250YWluZXI7XG5cbiAgICAgICAgX2MuYXBwZW5kUnVsZShydWxlKTtcbiAgICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBcIiArIGVyci5tZXNzYWdlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gY29udGFpbmVyLmNzc1J1bGVzW2luZGV4XTtcbn07XG5cbnZhciBnZXRWYWxpZFJ1bGVJbnNlcnRpb25JbmRleCA9IGZ1bmN0aW9uIGdldFZhbGlkUnVsZUluc2VydGlvbkluZGV4KGNvbnRhaW5lciwgaW5kZXgpIHtcbiAgdmFyIG1heEluZGV4ID0gY29udGFpbmVyLmNzc1J1bGVzLmxlbmd0aDsgLy8gSW4gY2FzZSBwcmV2aW91cyBpbnNlcnRpb24gZmFpbHMsIHBhc3NlZCBpbmRleCBtaWdodCBiZSB3cm9uZ1xuXG4gIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkIHx8IGluZGV4ID4gbWF4SW5kZXgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICByZXR1cm4gbWF4SW5kZXg7XG4gIH1cblxuICByZXR1cm4gaW5kZXg7XG59O1xuXG52YXIgY3JlYXRlU3R5bGUgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZSgpIHtcbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsgLy8gV2l0aG91dCBpdCwgSUUgd2lsbCBoYXZlIGEgYnJva2VuIHNvdXJjZSBvcmRlciBzcGVjaWZpY2l0eSBpZiB3ZVxuICAvLyBpbnNlcnQgcnVsZXMgYWZ0ZXIgd2UgaW5zZXJ0IHRoZSBzdHlsZSB0YWcuXG4gIC8vIEl0IHNlZW1zIHRvIGtpY2stb2ZmIHRoZSBzb3VyY2Ugb3JkZXIgc3BlY2lmaWNpdHkgYWxnb3JpdGhtLlxuXG4gIGVsLnRleHRDb250ZW50ID0gJ1xcbic7XG4gIHJldHVybiBlbDtcbn07XG5cbnZhciBEb21SZW5kZXJlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8vIEhUTUxTdHlsZUVsZW1lbnQgbmVlZHMgZml4aW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yNjk2XG4gIC8vIFdpbGwgYmUgZW1wdHkgaWYgbGluazogdHJ1ZSBvcHRpb24gaXMgbm90IHNldCwgYmVjYXVzZVxuICAvLyBpdCBpcyBvbmx5IGZvciB1c2UgdG9nZXRoZXIgd2l0aCBpbnNlcnRSdWxlIEFQSS5cbiAgZnVuY3Rpb24gRG9tUmVuZGVyZXIoc2hlZXQpIHtcbiAgICB0aGlzLmdldFByb3BlcnR5VmFsdWUgPSBnZXRQcm9wZXJ0eVZhbHVlO1xuICAgIHRoaXMuc2V0UHJvcGVydHkgPSBzZXRQcm9wZXJ0eTtcbiAgICB0aGlzLnJlbW92ZVByb3BlcnR5ID0gcmVtb3ZlUHJvcGVydHk7XG4gICAgdGhpcy5zZXRTZWxlY3RvciA9IHNldFNlbGVjdG9yO1xuICAgIHRoaXMuZWxlbWVudCA9IHZvaWQgMDtcbiAgICB0aGlzLnNoZWV0ID0gdm9pZCAwO1xuICAgIHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcyA9IGZhbHNlO1xuICAgIHRoaXMuY3NzUnVsZXMgPSBbXTtcbiAgICAvLyBUaGVyZSBpcyBubyBzaGVldCB3aGVuIHRoZSByZW5kZXJlciBpcyB1c2VkIGZyb20gYSBzdGFuZGFsb25lIFN0eWxlUnVsZS5cbiAgICBpZiAoc2hlZXQpIHJlZ2lzdHJ5LmFkZChzaGVldCk7XG4gICAgdGhpcy5zaGVldCA9IHNoZWV0O1xuXG4gICAgdmFyIF9yZWYgPSB0aGlzLnNoZWV0ID8gdGhpcy5zaGVldC5vcHRpb25zIDoge30sXG4gICAgICAgIG1lZGlhID0gX3JlZi5tZWRpYSxcbiAgICAgICAgbWV0YSA9IF9yZWYubWV0YSxcbiAgICAgICAgZWxlbWVudCA9IF9yZWYuZWxlbWVudDtcblxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQgfHwgY3JlYXRlU3R5bGUoKTtcbiAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWpzcycsICcnKTtcbiAgICBpZiAobWVkaWEpIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICAgIGlmIChtZXRhKSB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLW1ldGEnLCBtZXRhKTtcbiAgICB2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuICAgIGlmIChub25jZSkgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBub25jZSk7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBzdHlsZSBlbGVtZW50IGludG8gcmVuZGVyIHRyZWUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IERvbVJlbmRlcmVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYXR0YWNoID0gZnVuY3Rpb24gYXR0YWNoKCkge1xuICAgIC8vIEluIHRoZSBjYXNlIHRoZSBlbGVtZW50IG5vZGUgaXMgZXh0ZXJuYWwgYW5kIGl0IGlzIGFscmVhZHkgaW4gdGhlIERPTS5cbiAgICBpZiAodGhpcy5lbGVtZW50LnBhcmVudE5vZGUgfHwgIXRoaXMuc2hlZXQpIHJldHVybjtcbiAgICBpbnNlcnRTdHlsZSh0aGlzLmVsZW1lbnQsIHRoaXMuc2hlZXQub3B0aW9ucyk7IC8vIFdoZW4gcnVsZXMgYXJlIGluc2VydGVkIHVzaW5nIGBpbnNlcnRSdWxlYCBBUEksIGFmdGVyIGBzaGVldC5kZXRhY2goKS5hdHRhY2goKWBcbiAgICAvLyBtb3N0IGJyb3dzZXJzIGNyZWF0ZSBhIG5ldyBDU1NTdHlsZVNoZWV0LCBleGNlcHQgb2YgYWxsIElFcy5cblxuICAgIHZhciBkZXBsb3llZCA9IEJvb2xlYW4odGhpcy5zaGVldCAmJiB0aGlzLnNoZWV0LmRlcGxveWVkKTtcblxuICAgIGlmICh0aGlzLmhhc0luc2VydGVkUnVsZXMgJiYgZGVwbG95ZWQpIHtcbiAgICAgIHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcyA9IGZhbHNlO1xuICAgICAgdGhpcy5kZXBsb3koKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBzdHlsZSBlbGVtZW50IGZyb20gcmVuZGVyIHRyZWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRldGFjaCA9IGZ1bmN0aW9uIGRldGFjaCgpIHtcbiAgICBpZiAoIXRoaXMuc2hlZXQpIHJldHVybjtcbiAgICB2YXIgcGFyZW50Tm9kZSA9IHRoaXMuZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnROb2RlKSBwYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7IC8vIEluIHRoZSBtb3N0IGJyb3dzZXJzLCBydWxlcyBpbnNlcnRlZCB1c2luZyBpbnNlcnRSdWxlKCkgQVBJIHdpbGwgYmUgbG9zdCB3aGVuIHN0eWxlIGVsZW1lbnQgaXMgcmVtb3ZlZC5cbiAgICAvLyBUaG91Z2ggSUUgd2lsbCBrZWVwIHRoZW0gYW5kIHdlIG5lZWQgYSBjb25zaXN0ZW50IGJlaGF2aW9yLlxuXG4gICAgaWYgKHRoaXMuc2hlZXQub3B0aW9ucy5saW5rKSB7XG4gICAgICB0aGlzLmNzc1J1bGVzID0gW107XG4gICAgICB0aGlzLmVsZW1lbnQudGV4dENvbnRlbnQgPSAnXFxuJztcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEluamVjdCBDU1Mgc3RyaW5nIGludG8gZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGVwbG95ID0gZnVuY3Rpb24gZGVwbG95KCkge1xuICAgIHZhciBzaGVldCA9IHRoaXMuc2hlZXQ7XG4gICAgaWYgKCFzaGVldCkgcmV0dXJuO1xuXG4gICAgaWYgKHNoZWV0Lm9wdGlvbnMubGluaykge1xuICAgICAgdGhpcy5pbnNlcnRSdWxlcyhzaGVldC5ydWxlcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtZW50LnRleHRDb250ZW50ID0gXCJcXG5cIiArIHNoZWV0LnRvU3RyaW5nKCkgKyBcIlxcblwiO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgUnVsZUxpc3QgaW50byBhbiBlbGVtZW50LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbnNlcnRSdWxlcyA9IGZ1bmN0aW9uIGluc2VydFJ1bGVzKHJ1bGVzLCBuYXRpdmVQYXJlbnQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmluZGV4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmluc2VydFJ1bGUocnVsZXMuaW5kZXhbaV0sIGksIG5hdGl2ZVBhcmVudCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgYSBydWxlIGludG8gZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIGluc2VydFJ1bGUocnVsZSwgaW5kZXgsIG5hdGl2ZVBhcmVudCkge1xuICAgIGlmIChuYXRpdmVQYXJlbnQgPT09IHZvaWQgMCkge1xuICAgICAgbmF0aXZlUGFyZW50ID0gdGhpcy5lbGVtZW50LnNoZWV0O1xuICAgIH1cblxuICAgIGlmIChydWxlLnJ1bGVzKSB7XG4gICAgICB2YXIgcGFyZW50ID0gcnVsZTtcbiAgICAgIHZhciBsYXRlc3ROYXRpdmVQYXJlbnQgPSBuYXRpdmVQYXJlbnQ7XG5cbiAgICAgIGlmIChydWxlLnR5cGUgPT09ICdjb25kaXRpb25hbCcgfHwgcnVsZS50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgICB2YXIgX2luc2VydGlvbkluZGV4ID0gZ2V0VmFsaWRSdWxlSW5zZXJ0aW9uSW5kZXgobmF0aXZlUGFyZW50LCBpbmRleCk7IC8vIFdlIG5lZWQgdG8gcmVuZGVyIHRoZSBjb250YWluZXIgd2l0aG91dCBjaGlsZHJlbiBmaXJzdC5cblxuXG4gICAgICAgIGxhdGVzdE5hdGl2ZVBhcmVudCA9IF9pbnNlcnRSdWxlKG5hdGl2ZVBhcmVudCwgcGFyZW50LnRvU3RyaW5nKHtcbiAgICAgICAgICBjaGlsZHJlbjogZmFsc2VcbiAgICAgICAgfSksIF9pbnNlcnRpb25JbmRleCk7XG5cbiAgICAgICAgaWYgKGxhdGVzdE5hdGl2ZVBhcmVudCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlZkNzc1J1bGUocnVsZSwgX2luc2VydGlvbkluZGV4LCBsYXRlc3ROYXRpdmVQYXJlbnQpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmluc2VydFJ1bGVzKHBhcmVudC5ydWxlcywgbGF0ZXN0TmF0aXZlUGFyZW50KTtcbiAgICAgIHJldHVybiBsYXRlc3ROYXRpdmVQYXJlbnQ7XG4gICAgfVxuXG4gICAgdmFyIHJ1bGVTdHIgPSBydWxlLnRvU3RyaW5nKCk7XG4gICAgaWYgKCFydWxlU3RyKSByZXR1cm4gZmFsc2U7XG4gICAgdmFyIGluc2VydGlvbkluZGV4ID0gZ2V0VmFsaWRSdWxlSW5zZXJ0aW9uSW5kZXgobmF0aXZlUGFyZW50LCBpbmRleCk7XG5cbiAgICB2YXIgbmF0aXZlUnVsZSA9IF9pbnNlcnRSdWxlKG5hdGl2ZVBhcmVudCwgcnVsZVN0ciwgaW5zZXJ0aW9uSW5kZXgpO1xuXG4gICAgaWYgKG5hdGl2ZVJ1bGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5oYXNJbnNlcnRlZFJ1bGVzID0gdHJ1ZTtcbiAgICB0aGlzLnJlZkNzc1J1bGUocnVsZSwgaW5zZXJ0aW9uSW5kZXgsIG5hdGl2ZVJ1bGUpO1xuICAgIHJldHVybiBuYXRpdmVSdWxlO1xuICB9O1xuXG4gIF9wcm90by5yZWZDc3NSdWxlID0gZnVuY3Rpb24gcmVmQ3NzUnVsZShydWxlLCBpbmRleCwgY3NzUnVsZSkge1xuICAgIHJ1bGUucmVuZGVyYWJsZSA9IGNzc1J1bGU7IC8vIFdlIG9ubHkgd2FudCB0byByZWZlcmVuY2UgdGhlIHRvcCBsZXZlbCBydWxlcywgZGVsZXRlUnVsZSBBUEkgZG9lc24ndCBzdXBwb3J0IHJlbW92aW5nIG5lc3RlZCBydWxlc1xuICAgIC8vIGxpa2UgcnVsZXMgaW5zaWRlIG1lZGlhIHF1ZXJpZXMgb3Iga2V5ZnJhbWVzXG5cbiAgICBpZiAocnVsZS5vcHRpb25zLnBhcmVudCBpbnN0YW5jZW9mIFN0eWxlU2hlZXQpIHtcbiAgICAgIHRoaXMuY3NzUnVsZXNbaW5kZXhdID0gY3NzUnVsZTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlbGV0ZVJ1bGUgPSBmdW5jdGlvbiBkZWxldGVSdWxlKGNzc1J1bGUpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLmVsZW1lbnQuc2hlZXQ7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleE9mKGNzc1J1bGUpO1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICBzaGVldC5kZWxldGVSdWxlKGluZGV4KTtcbiAgICB0aGlzLmNzc1J1bGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIENTUyBSdWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihjc3NSdWxlKSB7XG4gICAgcmV0dXJuIHRoaXMuY3NzUnVsZXMuaW5kZXhPZihjc3NSdWxlKTtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGUgYSBuZXcgQ1NTIHJ1bGUgYW5kIHJlcGxhY2UgdGhlIGV4aXN0aW5nIG9uZS5cbiAgICpcbiAgICogT25seSB1c2VkIGZvciBzb21lIG9sZCBicm93c2VycyBiZWNhdXNlIHRoZXkgY2FuJ3Qgc2V0IGEgc2VsZWN0b3IuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlcGxhY2VSdWxlID0gZnVuY3Rpb24gcmVwbGFjZVJ1bGUoY3NzUnVsZSwgcnVsZSkge1xuICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhPZihjc3NSdWxlKTtcbiAgICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgdGhpcy5lbGVtZW50LnNoZWV0LmRlbGV0ZVJ1bGUoaW5kZXgpO1xuICAgIHRoaXMuY3NzUnVsZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRSdWxlKHJ1bGUsIGluZGV4KTtcbiAgfVxuICAvKipcbiAgICogR2V0IGFsbCBydWxlcyBlbGVtZW50cy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0UnVsZXMgPSBmdW5jdGlvbiBnZXRSdWxlcygpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LnNoZWV0LmNzc1J1bGVzO1xuICB9O1xuXG4gIHJldHVybiBEb21SZW5kZXJlcjtcbn0oKTtcblxudmFyIGluc3RhbmNlQ291bnRlciA9IDA7XG5cbnZhciBKc3MgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBKc3Mob3B0aW9ucykge1xuICAgIHRoaXMuaWQgPSBpbnN0YW5jZUNvdW50ZXIrKztcbiAgICB0aGlzLnZlcnNpb24gPSBcIjEwLjYuMFwiO1xuICAgIHRoaXMucGx1Z2lucyA9IG5ldyBQbHVnaW5zUmVnaXN0cnkoKTtcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBpZDoge1xuICAgICAgICBtaW5pZnk6IGZhbHNlXG4gICAgICB9LFxuICAgICAgY3JlYXRlR2VuZXJhdGVJZDogY3JlYXRlR2VuZXJhdGVJZCxcbiAgICAgIFJlbmRlcmVyOiBpc0luQnJvd3NlciA/IERvbVJlbmRlcmVyIDogbnVsbCxcbiAgICAgIHBsdWdpbnM6IFtdXG4gICAgfTtcbiAgICB0aGlzLmdlbmVyYXRlSWQgPSBjcmVhdGVHZW5lcmF0ZUlkKHtcbiAgICAgIG1pbmlmeTogZmFsc2VcbiAgICB9KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5wbHVnaW5zLnVzZShwbHVnaW5zW2ldLCB7XG4gICAgICAgIHF1ZXVlOiAnaW50ZXJuYWwnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnNldHVwKG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiBQcmVwYXJlcyB2YXJpb3VzIG9wdGlvbnMsIGFwcGxpZXMgcGx1Z2lucy5cbiAgICogU2hvdWxkIG5vdCBiZSB1c2VkIHR3aWNlIG9uIHRoZSBzYW1lIGluc3RhbmNlLCBiZWNhdXNlIHRoZXJlIGlzIG5vIHBsdWdpbnNcbiAgICogZGVkdXBsaWNhdGlvbiBsb2dpYy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gSnNzLnByb3RvdHlwZTtcblxuICBfcHJvdG8uc2V0dXAgPSBmdW5jdGlvbiBzZXR1cChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmNyZWF0ZUdlbmVyYXRlSWQpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkID0gb3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmlkKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuaWQgPSBfZXh0ZW5kcyh7fSwgdGhpcy5vcHRpb25zLmlkLCBvcHRpb25zLmlkKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkIHx8IG9wdGlvbnMuaWQpIHtcbiAgICAgIHRoaXMuZ2VuZXJhdGVJZCA9IHRoaXMub3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkKHRoaXMub3B0aW9ucy5pZCk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgIT0gbnVsbCkgdGhpcy5vcHRpb25zLmluc2VydGlvblBvaW50ID0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludDtcblxuICAgIGlmICgnUmVuZGVyZXInIGluIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5SZW5kZXJlciA9IG9wdGlvbnMuUmVuZGVyZXI7XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXNwcmVhZFxuXG5cbiAgICBpZiAob3B0aW9ucy5wbHVnaW5zKSB0aGlzLnVzZS5hcHBseSh0aGlzLCBvcHRpb25zLnBsdWdpbnMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBTdHlsZSBTaGVldC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlU3R5bGVTaGVldCA9IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlU2hlZXQoc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICAgIGluZGV4ID0gX29wdGlvbnMuaW5kZXg7XG5cbiAgICBpZiAodHlwZW9mIGluZGV4ICE9PSAnbnVtYmVyJykge1xuICAgICAgaW5kZXggPSByZWdpc3RyeS5pbmRleCA9PT0gMCA/IDAgOiByZWdpc3RyeS5pbmRleCArIDE7XG4gICAgfVxuXG4gICAgdmFyIHNoZWV0ID0gbmV3IFN0eWxlU2hlZXQoc3R5bGVzLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAganNzOiB0aGlzLFxuICAgICAgZ2VuZXJhdGVJZDogb3B0aW9ucy5nZW5lcmF0ZUlkIHx8IHRoaXMuZ2VuZXJhdGVJZCxcbiAgICAgIGluc2VydGlvblBvaW50OiB0aGlzLm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQsXG4gICAgICBSZW5kZXJlcjogdGhpcy5vcHRpb25zLlJlbmRlcmVyLFxuICAgICAgaW5kZXg6IGluZGV4XG4gICAgfSkpO1xuICAgIHRoaXMucGx1Z2lucy5vblByb2Nlc3NTaGVldChzaGVldCk7XG4gICAgcmV0dXJuIHNoZWV0O1xuICB9XG4gIC8qKlxuICAgKiBEZXRhY2ggdGhlIFN0eWxlIFNoZWV0IGFuZCByZW1vdmUgaXQgZnJvbSB0aGUgcmVnaXN0cnkuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlbW92ZVN0eWxlU2hlZXQgPSBmdW5jdGlvbiByZW1vdmVTdHlsZVNoZWV0KHNoZWV0KSB7XG4gICAgc2hlZXQuZGV0YWNoKCk7XG4gICAgcmVnaXN0cnkucmVtb3ZlKHNoZWV0KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgcnVsZSB3aXRob3V0IGEgU3R5bGUgU2hlZXQuXG4gICAqIFtEZXByZWNhdGVkXSB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlUnVsZSA9IGZ1bmN0aW9uIGNyZWF0ZVJ1bGUkMShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChzdHlsZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdHlsZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICAvLyBFbmFibGUgcnVsZSB3aXRob3V0IG5hbWUgZm9yIGlubGluZSBzdHlsZXMuXG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0Jykge1xuICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF1cbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVJ1bGUodW5kZWZpbmVkLCBuYW1lLCBzdHlsZSk7XG4gICAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXVxuXG5cbiAgICB2YXIgcnVsZU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGpzczogdGhpcyxcbiAgICAgIFJlbmRlcmVyOiB0aGlzLm9wdGlvbnMuUmVuZGVyZXJcbiAgICB9KTtcblxuICAgIGlmICghcnVsZU9wdGlvbnMuZ2VuZXJhdGVJZCkgcnVsZU9wdGlvbnMuZ2VuZXJhdGVJZCA9IHRoaXMuZ2VuZXJhdGVJZDtcbiAgICBpZiAoIXJ1bGVPcHRpb25zLmNsYXNzZXMpIHJ1bGVPcHRpb25zLmNsYXNzZXMgPSB7fTtcbiAgICBpZiAoIXJ1bGVPcHRpb25zLmtleWZyYW1lcykgcnVsZU9wdGlvbnMua2V5ZnJhbWVzID0ge307XG5cbiAgICB2YXIgcnVsZSA9IGNyZWF0ZVJ1bGUobmFtZSwgc3R5bGUsIHJ1bGVPcHRpb25zKTtcblxuICAgIGlmIChydWxlKSB0aGlzLnBsdWdpbnMub25Qcm9jZXNzUnVsZShydWxlKTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgcGx1Z2luLiBQYXNzZWQgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIHdpdGggYSBydWxlIGluc3RhbmNlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51c2UgPSBmdW5jdGlvbiB1c2UoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwbHVnaW5zID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgcGx1Z2luc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgX3RoaXMucGx1Z2lucy51c2UocGx1Z2luKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICByZXR1cm4gSnNzO1xufSgpO1xuXG4vKipcbiAqIEV4dHJhY3RzIGEgc3R5bGVzIG9iamVjdCB3aXRoIG9ubHkgcHJvcHMgdGhhdCBjb250YWluIGZ1bmN0aW9uIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gZ2V0RHluYW1pY1N0eWxlcyhzdHlsZXMpIHtcbiAgdmFyIHRvID0gbnVsbDtcblxuICBmb3IgKHZhciBrZXkgaW4gc3R5bGVzKSB7XG4gICAgdmFyIHZhbHVlID0gc3R5bGVzW2tleV07XG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cbiAgICBpZiAodHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKCF0bykgdG8gPSB7fTtcbiAgICAgIHRvW2tleV0gPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgdmFyIGV4dHJhY3RlZCA9IGdldER5bmFtaWNTdHlsZXModmFsdWUpO1xuXG4gICAgICBpZiAoZXh0cmFjdGVkKSB7XG4gICAgICAgIGlmICghdG8pIHRvID0ge307XG4gICAgICAgIHRvW2tleV0gPSBleHRyYWN0ZWQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRvO1xufVxuXG4vKipcbiAqIFNoZWV0c01hbmFnZXIgaXMgbGlrZSBhIFdlYWtNYXAgd2hpY2ggaXMgZGVzaWduZWQgdG8gY291bnQgU3R5bGVTaGVldFxuICogaW5zdGFuY2VzIGFuZCBhdHRhY2gvZGV0YWNoIGF1dG9tYXRpY2FsbHkuXG4gKi9cbnZhciBTaGVldHNNYW5hZ2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2hlZXRzTWFuYWdlcigpIHtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5zaGVldHMgPSBuZXcgV2Vha01hcCgpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNoZWV0c01hbmFnZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXQgPSBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5zaGVldHMuZ2V0KGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnNoZWV0O1xuICB9O1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQoa2V5LCBzaGVldCkge1xuICAgIGlmICh0aGlzLnNoZWV0cy5oYXMoa2V5KSkgcmV0dXJuO1xuICAgIHRoaXMubGVuZ3RoKys7XG4gICAgdGhpcy5zaGVldHMuc2V0KGtleSwge1xuICAgICAgc2hlZXQ6IHNoZWV0LFxuICAgICAgcmVmczogMFxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5tYW5hZ2UgPSBmdW5jdGlvbiBtYW5hZ2Uoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5zaGVldHMuZ2V0KGtleSk7XG5cbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGlmIChlbnRyeS5yZWZzID09PSAwKSB7XG4gICAgICAgIGVudHJ5LnNoZWV0LmF0dGFjaCgpO1xuICAgICAgfVxuXG4gICAgICBlbnRyeS5yZWZzKys7XG4gICAgICByZXR1cm4gZW50cnkuc2hlZXQ7XG4gICAgfVxuXG4gICAgd2FybmluZyhmYWxzZSwgXCJbSlNTXSBTaGVldHNNYW5hZ2VyOiBjYW4ndCBmaW5kIHNoZWV0IHRvIG1hbmFnZVwiKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG4gIF9wcm90by51bm1hbmFnZSA9IGZ1bmN0aW9uIHVubWFuYWdlKGtleSkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuc2hlZXRzLmdldChrZXkpO1xuXG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBpZiAoZW50cnkucmVmcyA+IDApIHtcbiAgICAgICAgZW50cnkucmVmcy0tO1xuICAgICAgICBpZiAoZW50cnkucmVmcyA9PT0gMCkgZW50cnkuc2hlZXQuZGV0YWNoKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsIFwiU2hlZXRzTWFuYWdlcjogY2FuJ3QgZmluZCBzaGVldCB0byB1bm1hbmFnZVwiKTtcbiAgICB9XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFNoZWV0c01hbmFnZXIsIFt7XG4gICAga2V5OiBcInNpemVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmxlbmd0aDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2hlZXRzTWFuYWdlcjtcbn0oKTtcblxuLyoqXG4gKiBBIGJldHRlciBhYnN0cmFjdGlvbiBvdmVyIENTUy5cbiAqXG4gKiBAY29weXJpZ2h0IE9sZWcgSXNvbmVuIChTbG9ib2Rza29pKSAvIElzb25lbiAyMDE0LXByZXNlbnRcbiAqIEB3ZWJzaXRlIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzc1xuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuLyoqXG4gKiBFeHBvcnQgYSBjb25zdGFudCBpbmRpY2F0aW5nIGlmIHRoaXMgYnJvd3NlciBoYXMgQ1NTVE9NIHN1cHBvcnQuXG4gKiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93ZWIvdXBkYXRlcy8yMDE4LzAzL2Nzc29tXG4gKi9cbnZhciBoYXNDU1NUT01TdXBwb3J0ID0gdHlwZW9mIENTUyA9PT0gJ29iamVjdCcgJiYgQ1NTICE9IG51bGwgJiYgJ251bWJlcicgaW4gQ1NTO1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIEpzcy5cbiAqL1xuXG52YXIgY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBKc3Mob3B0aW9ucyk7XG59O1xuLyoqXG4gKiBBIGdsb2JhbCBKc3MgaW5zdGFuY2UuXG4gKi9cblxudmFyIGpzcyA9IGNyZWF0ZSgpO1xuXG5leHBvcnQgZGVmYXVsdCBqc3M7XG5leHBvcnQgeyBSdWxlTGlzdCwgU2hlZXRzTWFuYWdlciwgU2hlZXRzUmVnaXN0cnksIGNyZWF0ZSwgY3JlYXRlR2VuZXJhdGVJZCwgY3JlYXRlUnVsZSwgZ2V0RHluYW1pY1N0eWxlcywgaGFzQ1NTVE9NU3VwcG9ydCwgcmVnaXN0cnkgYXMgc2hlZXRzLCB0b0Nzc1ZhbHVlIH07XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucywgb3B0aW9ucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnLCBmbGFncyhvcHRpb25zKSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMlxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24geShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IoeSgyMjcpKTt2YXIgYmE9bmV3IFNldCxjYT17fTtmdW5jdGlvbiBkYShhLGIpe2VhKGEsYik7ZWEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGVhKGEsYil7Y2FbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWJhLmFkZChiW2FdKX1cbnZhciBmYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksaGE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGlhPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG5qYT17fSxrYT17fTtmdW5jdGlvbiBsYShhKXtpZihpYS5jYWxsKGthLGEpKXJldHVybiEwO2lmKGlhLmNhbGwoamEsYSkpcmV0dXJuITE7aWYoaGEudGVzdChhKSlyZXR1cm4ga2FbYV09ITA7amFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gbWEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBuYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxtYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEIoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciBEPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0RbYl09bmV3IEIoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgb2E9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBwYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxcbnBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbkQueGxpbmtIcmVmPW5ldyBCKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHFhKGEsYixjLGQpe3ZhciBlPUQuaGFzT3duUHJvcGVydHkoYik/RFtiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KG5hKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9sYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIHJhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHNhPTYwMTAzLHRhPTYwMTA2LHVhPTYwMTA3LHdhPTYwMTA4LHhhPTYwMTE0LHlhPTYwMTA5LHphPTYwMTEwLEFhPTYwMTEyLEJhPTYwMTEzLENhPTYwMTIwLERhPTYwMTE1LEVhPTYwMTE2LEZhPTYwMTIxLEdhPTYwMTI4LEhhPTYwMTI5LElhPTYwMTMwLEphPTYwMTMxO1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIEU9U3ltYm9sLmZvcjtzYT1FKFwicmVhY3QuZWxlbWVudFwiKTt0YT1FKFwicmVhY3QucG9ydGFsXCIpO3VhPUUoXCJyZWFjdC5mcmFnbWVudFwiKTt3YT1FKFwicmVhY3Quc3RyaWN0X21vZGVcIik7eGE9RShcInJlYWN0LnByb2ZpbGVyXCIpO3lhPUUoXCJyZWFjdC5wcm92aWRlclwiKTt6YT1FKFwicmVhY3QuY29udGV4dFwiKTtBYT1FKFwicmVhY3QuZm9yd2FyZF9yZWZcIik7QmE9RShcInJlYWN0LnN1c3BlbnNlXCIpO0NhPUUoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpO0RhPUUoXCJyZWFjdC5tZW1vXCIpO0VhPUUoXCJyZWFjdC5sYXp5XCIpO0ZhPUUoXCJyZWFjdC5ibG9ja1wiKTtFKFwicmVhY3Quc2NvcGVcIik7R2E9RShcInJlYWN0Lm9wYXF1ZS5pZFwiKTtIYT1FKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtJYT1FKFwicmVhY3Qub2Zmc2NyZWVuXCIpO0phPUUoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpfVxudmFyIEthPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBMYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9S2EmJmFbS2FdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIE1hO2Z1bmN0aW9uIE5hKGEpe2lmKHZvaWQgMD09PU1hKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO01hPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitNYSthfXZhciBPYT0hMTtcbmZ1bmN0aW9uIFBhKGEsYil7aWYoIWF8fE9hKXJldHVyblwiXCI7T2E9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGspe3ZhciBkPWt9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChrKXtkPWt9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChrKXtkPWt9YSgpfX1jYXRjaChrKXtpZihrJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGsuc3RhY2spe2Zvcih2YXIgZT1rLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pcmV0dXJuXCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTt3aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7T2E9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9OYShhKTpcIlwifVxuZnVuY3Rpb24gUWEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE5hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTmEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE5hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTmEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPVBhKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPVBhKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAyMjpyZXR1cm4gYT1QYShhLnR5cGUuX3JlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9UGEoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBSYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHVhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHRhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSB4YTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB3YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEJhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIENhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHphOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIHlhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIEFhOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO1xucmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSBEYTpyZXR1cm4gUmEoYS50eXBlKTtjYXNlIEZhOnJldHVybiBSYShhLl9yZW5kZXIpO2Nhc2UgRWE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFJhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiAkYShhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnFhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBhYihhLGIpeyRhKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/YmIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmYmIoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gYmIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gZGIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZWIoYSxiKXthPW0oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1kYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih5KDkxKSk7cmV0dXJuIG0oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IoeSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYykpe2lmKCEoMT49Yy5sZW5ndGgpKXRocm93IEVycm9yKHkoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfXZhciBrYj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBsYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIG1iKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9sYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBuYixvYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1rYi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtuYj1uYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtuYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1uYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBwYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHFiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHJiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhxYikuZm9yRWFjaChmdW5jdGlvbihhKXtyYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3FiW2JdPXFiW2FdfSl9KTtmdW5jdGlvbiBzYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cWIuaGFzT3duUHJvcGVydHkoYSkmJnFiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHRiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXNiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHViPW0oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB2YihhLGIpe2lmKGIpe2lmKHViW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IoeSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IoeSg2MikpO319XG5mdW5jdGlvbiB3YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcih5KDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYihhLGIsYyxkLGUpe3JldHVybiBhKGIsYyxkLGUpfWZ1bmN0aW9uIEliKCl7fXZhciBKYj1HYixLYj0hMSxMYj0hMTtmdW5jdGlvbiBNYigpe2lmKG51bGwhPT16Ynx8bnVsbCE9PUFiKUliKCksRmIoKX1cbmZ1bmN0aW9uIE5iKGEsYixjKXtpZihMYilyZXR1cm4gYShiLGMpO0xiPSEwO3RyeXtyZXR1cm4gSmIoYSxiLGMpfWZpbmFsbHl7TGI9ITEsTWIoKX19XG5mdW5jdGlvbiBPYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPURiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHkoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgUGI9ITE7aWYoZmEpdHJ5e3ZhciBRYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoUWIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe1BiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYil9Y2F0Y2goYSl7UGI9ITF9ZnVuY3Rpb24gUmIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG4pe3RoaXMub25FcnJvcihuKX19dmFyIFNiPSExLFRiPW51bGwsVWI9ITEsVmI9bnVsbCxXYj17b25FcnJvcjpmdW5jdGlvbihhKXtTYj0hMDtUYj1hfX07ZnVuY3Rpb24gWGIoYSxiLGMsZCxlLGYsZyxoLGspe1NiPSExO1RiPW51bGw7UmIuYXBwbHkoV2IsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFliKGEsYixjLGQsZSxmLGcsaCxrKXtYYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoU2Ipe2lmKFNiKXt2YXIgbD1UYjtTYj0hMTtUYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IoeSgxOTgpKTtVYnx8KFViPSEwLFZiPWwpfX1mdW5jdGlvbiBaYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmMTAyNikmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uICRiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gYWMoYSl7aWYoWmIoYSkhPT1hKXRocm93IEVycm9yKHkoMTg4KSk7fVxuZnVuY3Rpb24gYmMoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9WmIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gYWMoZSksYTtpZihmPT09ZClyZXR1cm4gYWMoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcih5KDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHkoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IoeSgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBjYyhhKXthPWJjKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gZGMoYSxiKXtmb3IodmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWI7KXtpZihiPT09YXx8Yj09PWMpcmV0dXJuITA7Yj1iLnJldHVybn1yZXR1cm4hMX12YXIgZWMsZmMsZ2MsaGMsaWM9ITEsamM9W10sa2M9bnVsbCxsYz1udWxsLG1jPW51bGwsbmM9bmV3IE1hcCxvYz1uZXcgTWFwLHBjPVtdLHFjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIHJjKGEsYixjLGQsZSl7cmV0dXJue2Jsb2NrZWRPbjphLGRvbUV2ZW50TmFtZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wxNixuYXRpdmVFdmVudDplLHRhcmdldENvbnRhaW5lcnM6W2RdfX1mdW5jdGlvbiBzYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmtjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpsYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjptYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6bmMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6b2MuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiB0YyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXJjKGIsYyxkLGUsZiksbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZmYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB1YyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBrYz10YyhrYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gbGM9dGMobGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIG1jPXRjKG1jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7bmMuc2V0KGYsdGMobmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLG9jLnNldChmLHRjKG9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIHZjKGEpe3ZhciBiPXdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9WmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9JGIoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7aGMoYS5sYW5lUHJpb3JpdHksZnVuY3Rpb24oKXtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7Z2MoYyl9KX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiB4YyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJmZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIHpjKGEsYixjKXt4YyhhKSYmYy5kZWxldGUoYil9XG5mdW5jdGlvbiBBYygpe2ZvcihpYz0hMTswPGpjLmxlbmd0aDspe3ZhciBhPWpjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1DYihhLmJsb2NrZWRPbik7bnVsbCE9PWEmJmVjKGEpO2JyZWFrfWZvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXthLmJsb2NrZWRPbj1jO2JyZWFrfWIuc2hpZnQoKX1udWxsPT09YS5ibG9ja2VkT24mJmpjLnNoaWZ0KCl9bnVsbCE9PWtjJiZ4YyhrYykmJihrYz1udWxsKTtudWxsIT09bGMmJnhjKGxjKSYmKGxjPW51bGwpO251bGwhPT1tYyYmeGMobWMpJiYobWM9bnVsbCk7bmMuZm9yRWFjaCh6Yyk7b2MuZm9yRWFjaCh6Yyl9XG5mdW5jdGlvbiBCYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsaWN8fChpYz0hMCxyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxBYykpKX1cbmZ1bmN0aW9uIENjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIEJjKGIsYSl9aWYoMDxqYy5sZW5ndGgpe0JjKGpjWzBdLGEpO2Zvcih2YXIgYz0xO2M8amMubGVuZ3RoO2MrKyl7dmFyIGQ9amNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1rYyYmQmMoa2MsYSk7bnVsbCE9PWxjJiZCYyhsYyxhKTtudWxsIT09bWMmJkJjKG1jLGEpO25jLmZvckVhY2goYik7b2MuZm9yRWFjaChiKTtmb3IoYz0wO2M8cGMubGVuZ3RoO2MrKylkPXBjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxwYy5sZW5ndGgmJihjPXBjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KXZjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmcGMuc2hpZnQoKX1cbmZ1bmN0aW9uIERjKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIEVjPXthbmltYXRpb25lbmQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpEYyhcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LEZjPXt9LEdjPXt9O1xuZmEmJihHYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBFYy5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBFYy50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIEhjKGEpe2lmKEZjW2FdKXJldHVybiBGY1thXTtpZighRWNbYV0pcmV0dXJuIGE7dmFyIGI9RWNbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gR2MpcmV0dXJuIEZjW2FdPWJbY107cmV0dXJuIGF9XG52YXIgSWM9SGMoXCJhbmltYXRpb25lbmRcIiksSmM9SGMoXCJhbmltYXRpb25pdGVyYXRpb25cIiksS2M9SGMoXCJhbmltYXRpb25zdGFydFwiKSxMYz1IYyhcInRyYW5zaXRpb25lbmRcIiksTWM9bmV3IE1hcCxOYz1uZXcgTWFwLE9jPVtcImFib3J0XCIsXCJhYm9ydFwiLEljLFwiYW5pbWF0aW9uRW5kXCIsSmMsXCJhbmltYXRpb25JdGVyYXRpb25cIixLYyxcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcblwibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIixcInBsYXlpbmdcIixcInBsYXlpbmdcIixcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiLFwic2Vla2luZ1wiLFwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLExjLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBQYyhhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXTtlPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO05jLnNldChkLGIpO01jLnNldChkLGUpO2RhKGUsW2RdKX19dmFyIFFjPXIudW5zdGFibGVfbm93O1FjKCk7dmFyIEY9ODtcbmZ1bmN0aW9uIFJjKGEpe2lmKDAhPT0oMSZhKSlyZXR1cm4gRj0xNSwxO2lmKDAhPT0oMiZhKSlyZXR1cm4gRj0xNCwyO2lmKDAhPT0oNCZhKSlyZXR1cm4gRj0xMyw0O3ZhciBiPTI0JmE7aWYoMCE9PWIpcmV0dXJuIEY9MTIsYjtpZigwIT09KGEmMzIpKXJldHVybiBGPTExLDMyO2I9MTkyJmE7aWYoMCE9PWIpcmV0dXJuIEY9MTAsYjtpZigwIT09KGEmMjU2KSlyZXR1cm4gRj05LDI1NjtiPTM1ODQmYTtpZigwIT09YilyZXR1cm4gRj04LGI7aWYoMCE9PShhJjQwOTYpKXJldHVybiBGPTcsNDA5NjtiPTQxODYxMTImYTtpZigwIT09YilyZXR1cm4gRj02LGI7Yj02MjkxNDU2MCZhO2lmKDAhPT1iKXJldHVybiBGPTUsYjtpZihhJjY3MTA4ODY0KXJldHVybiBGPTQsNjcxMDg4NjQ7aWYoMCE9PShhJjEzNDIxNzcyOCkpcmV0dXJuIEY9MywxMzQyMTc3Mjg7Yj04MDUzMDYzNjgmYTtpZigwIT09YilyZXR1cm4gRj0yLGI7aWYoMCE9PSgxMDczNzQxODI0JmEpKXJldHVybiBGPTEsMTA3Mzc0MTgyNDtcbkY9ODtyZXR1cm4gYX1mdW5jdGlvbiBTYyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gMTU7Y2FzZSA5ODpyZXR1cm4gMTA7Y2FzZSA5NzpjYXNlIDk2OnJldHVybiA4O2Nhc2UgOTU6cmV0dXJuIDI7ZGVmYXVsdDpyZXR1cm4gMH19ZnVuY3Rpb24gVGMoYSl7c3dpdGNoKGEpe2Nhc2UgMTU6Y2FzZSAxNDpyZXR1cm4gOTk7Y2FzZSAxMzpjYXNlIDEyOmNhc2UgMTE6Y2FzZSAxMDpyZXR1cm4gOTg7Y2FzZSA5OmNhc2UgODpjYXNlIDc6Y2FzZSA2OmNhc2UgNDpjYXNlIDU6cmV0dXJuIDk3O2Nhc2UgMzpjYXNlIDI6Y2FzZSAxOnJldHVybiA5NTtjYXNlIDA6cmV0dXJuIDkwO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzNTgsYSkpO319XG5mdW5jdGlvbiBVYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiBGPTA7dmFyIGQ9MCxlPTAsZj1hLmV4cGlyZWRMYW5lcyxnPWEuc3VzcGVuZGVkTGFuZXMsaD1hLnBpbmdlZExhbmVzO2lmKDAhPT1mKWQ9ZixlPUY9MTU7ZWxzZSBpZihmPWMmMTM0MjE3NzI3LDAhPT1mKXt2YXIgaz1mJn5nOzAhPT1rPyhkPVJjKGspLGU9Rik6KGgmPWYsMCE9PWgmJihkPVJjKGgpLGU9RikpfWVsc2UgZj1jJn5nLDAhPT1mPyhkPVJjKGYpLGU9Rik6MCE9PWgmJihkPVJjKGgpLGU9Rik7aWYoMD09PWQpcmV0dXJuIDA7ZD0zMS1WYyhkKTtkPWMmKCgwPmQ/MDoxPDxkKTw8MSktMTtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZnKSl7UmMoYik7aWYoZTw9RilyZXR1cm4gYjtGPWV9Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1WYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIFdjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiBYYyhhLGIpe3N3aXRjaChhKXtjYXNlIDE1OnJldHVybiAxO2Nhc2UgMTQ6cmV0dXJuIDI7Y2FzZSAxMjpyZXR1cm4gYT1ZYygyNCZ+YiksMD09PWE/WGMoMTAsYik6YTtjYXNlIDEwOnJldHVybiBhPVljKDE5MiZ+YiksMD09PWE/WGMoOCxiKTphO2Nhc2UgODpyZXR1cm4gYT1ZYygzNTg0Jn5iKSwwPT09YSYmKGE9WWMoNDE4NjExMiZ+YiksMD09PWEmJihhPTUxMikpLGE7Y2FzZSAyOnJldHVybiBiPVljKDgwNTMwNjM2OCZ+YiksMD09PWImJihiPTI2ODQzNTQ1NiksYn10aHJvdyBFcnJvcih5KDM1OCxhKSk7fWZ1bmN0aW9uIFljKGEpe3JldHVybiBhJi1hfWZ1bmN0aW9uIFpjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gJGMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iO3ZhciBkPWItMTthLnN1c3BlbmRlZExhbmVzJj1kO2EucGluZ2VkTGFuZXMmPWQ7YT1hLmV2ZW50VGltZXM7Yj0zMS1WYyhiKTthW2JdPWN9dmFyIFZjPU1hdGguY2x6MzI/TWF0aC5jbHozMjphZCxiZD1NYXRoLmxvZyxjZD1NYXRoLkxOMjtmdW5jdGlvbiBhZChhKXtyZXR1cm4gMD09PWE/MzI6MzEtKGJkKGEpL2NkfDApfDB9dmFyIGRkPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWQ9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksZmQ9ITA7ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7S2J8fEliKCk7dmFyIGU9aGQsZj1LYjtLYj0hMDt0cnl7SGIoZSxhLGIsYyxkKX1maW5hbGx5eyhLYj1mKXx8TWIoKX19ZnVuY3Rpb24gaWQoYSxiLGMsZCl7ZWQoZGQsaGQuYmluZChudWxsLGEsYixjLGQpKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQpe2lmKGZkKXt2YXIgZTtpZigoZT0wPT09KGImNCkpJiYwPGpjLmxlbmd0aCYmLTE8cWMuaW5kZXhPZihhKSlhPXJjKG51bGwsYSxiLGMsZCksamMucHVzaChhKTtlbHNle3ZhciBmPXljKGEsYixjLGQpO2lmKG51bGw9PT1mKWUmJnNjKGEsZCk7ZWxzZXtpZihlKXtpZigtMTxxYy5pbmRleE9mKGEpKXthPXJjKGYsYSxiLGMsZCk7amMucHVzaChhKTtyZXR1cm59aWYodWMoZixhLGIsYyxkKSlyZXR1cm47c2MoYSxkKX1qZChhLGIsZCxudWxsLGMpfX19fVxuZnVuY3Rpb24geWMoYSxiLGMsZCl7dmFyIGU9eGIoZCk7ZT13YyhlKTtpZihudWxsIT09ZSl7dmFyIGY9WmIoZSk7aWYobnVsbD09PWYpZT1udWxsO2Vsc2V7dmFyIGc9Zi50YWc7aWYoMTM9PT1nKXtlPSRiKGYpO2lmKG51bGwhPT1lKXJldHVybiBlO2U9bnVsbH1lbHNlIGlmKDM9PT1nKXtpZihmLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09Zi50YWc/Zi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2U9bnVsbH1lbHNlIGYhPT1lJiYoZT1udWxsKX19amQoYSxiLGQsZSxjKTtyZXR1cm4gbnVsbH12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7XG5mdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31tKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1tKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9bSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9bSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9bSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPW0oe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1tKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPW0oe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1tKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPW0oe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPW0oe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1tKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1tKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1mYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtmYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9ZmEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1mYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihmYSl7dmFyIHhlO2lmKGZhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7YT1yZTtpZihLYilhKGIpO2Vsc2V7S2I9ITA7dHJ5e0diKGEsYil9ZmluYWxseXtLYj0hMSxNYigpfX19fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2UsSWU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIEplKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFJZS5jYWxsKGIsY1tkXSl8fCFIZShhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIEtlKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIExlKGEsYil7dmFyIGM9S2UoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9S2UoYyl9fWZ1bmN0aW9uIE1lKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TWUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTmUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gT2UoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBQZT1mYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmT2UoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSmUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuUGMoXCJjYW5jZWwgY2FuY2VsIGNsaWNrIGNsaWNrIGNsb3NlIGNsb3NlIGNvbnRleHRtZW51IGNvbnRleHRNZW51IGNvcHkgY29weSBjdXQgY3V0IGF1eGNsaWNrIGF1eENsaWNrIGRibGNsaWNrIGRvdWJsZUNsaWNrIGRyYWdlbmQgZHJhZ0VuZCBkcmFnc3RhcnQgZHJhZ1N0YXJ0IGRyb3AgZHJvcCBmb2N1c2luIGZvY3VzIGZvY3Vzb3V0IGJsdXIgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSxcbjApO1BjKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO1BjKE9jLDIpO2Zvcih2YXIgVmU9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLFdlPTA7V2U8VmUubGVuZ3RoO1dlKyspTmMuc2V0KFZlW1dlXSwwKTtlYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO1xuZWEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtlYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2VhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZGEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtkYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmRhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgWGU9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLFllPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KFhlKSk7XG5mdW5jdGlvbiBaZShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztZYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9fX1pZihVYil0aHJvdyBhPVZiLFViPSExLFZiPW51bGwsYTt9XG5mdW5jdGlvbiBHKGEsYil7dmFyIGM9JGUoYiksZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KGFmKGIsYSwyLCExKSxjLmFkZChkKSl9dmFyIGJmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gY2YoYSl7YVtiZl18fChhW2JmXT0hMCxiYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1llLmhhcyhiKXx8ZGYoYiwhMSxhLG51bGwpO2RmKGIsITAsYSxudWxsKX0pKX1cbmZ1bmN0aW9uIGRmKGEsYixjLGQpe3ZhciBlPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTowLGY9YztcInNlbGVjdGlvbmNoYW5nZVwiPT09YSYmOSE9PWMubm9kZVR5cGUmJihmPWMub3duZXJEb2N1bWVudCk7aWYobnVsbCE9PWQmJiFiJiZZZS5oYXMoYSkpe2lmKFwic2Nyb2xsXCIhPT1hKXJldHVybjtlfD0yO2Y9ZH12YXIgZz0kZShmKSxoPWErXCJfX1wiKyhiP1wiY2FwdHVyZVwiOlwiYnViYmxlXCIpO2cuaGFzKGgpfHwoYiYmKGV8PTQpLGFmKGYsYSxlLGIpLGcuYWRkKGgpKX1cbmZ1bmN0aW9uIGFmKGEsYixjLGQpe3ZhciBlPU5jLmdldChiKTtzd2l0Y2godm9pZCAwPT09ZT8yOmUpe2Nhc2UgMDplPWdkO2JyZWFrO2Nhc2UgMTplPWlkO2JyZWFrO2RlZmF1bHQ6ZT1oZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshUGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gamQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz13YyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59TmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPU1jLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCx4PWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOng9XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6eD1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgSWM6Y2FzZSBKYzpjYXNlIEtjOms9SGQ7YnJlYWs7Y2FzZSBMYzprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB3PTAhPT0oYiY0KSx6PSF3JiZcInNjcm9sbFwiPT09YSx1PXc/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dz1bXTtmb3IodmFyIHQ9ZCxxO251bGwhPT1cbnQ7KXtxPXQ7dmFyIHY9cS5zdGF0ZU5vZGU7NT09PXEudGFnJiZudWxsIT09diYmKHE9dixudWxsIT09dSYmKHY9T2IodCx1KSxudWxsIT12JiZ3LnB1c2goZWYodCx2LHEpKSkpO2lmKHopYnJlYWs7dD10LnJldHVybn0wPHcubGVuZ3RoJiYoaD1uZXcgayhoLHgsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6d30pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJjA9PT0oYiYxNikmJih4PWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJih3Yyh4KXx8eFtmZl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZih4PWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLHg9eD93Yyh4KTpudWxsLG51bGwhPT1cbngmJih6PVpiKHgpLHghPT16fHw1IT09eC50YWcmJjYhPT14LnRhZykpeD1udWxsfWVsc2Ugaz1udWxsLHg9ZDtpZihrIT09eCl7dz1CZDt2PVwib25Nb3VzZUxlYXZlXCI7dT1cIm9uTW91c2VFbnRlclwiO3Q9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl3PVRkLHY9XCJvblBvaW50ZXJMZWF2ZVwiLHU9XCJvblBvaW50ZXJFbnRlclwiLHQ9XCJwb2ludGVyXCI7ej1udWxsPT1rP2g6dWUoayk7cT1udWxsPT14P2g6dWUoeCk7aD1uZXcgdyh2LHQrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD16O2gucmVsYXRlZFRhcmdldD1xO3Y9bnVsbDt3YyhlKT09PWQmJih3PW5ldyB3KHUsdCtcImVudGVyXCIseCxjLGUpLHcudGFyZ2V0PXEsdy5yZWxhdGVkVGFyZ2V0PXosdj13KTt6PXY7aWYoayYmeCliOnt3PWs7dT14O3Q9MDtmb3IocT13O3E7cT1nZihxKSl0Kys7cT0wO2Zvcih2PXU7djt2PWdmKHYpKXErKztmb3IoOzA8dC1xOyl3PWdmKHcpLHQtLTtmb3IoOzA8cS10Oyl1PVxuZ2YodSkscS0tO2Zvcig7dC0tOyl7aWYodz09PXV8fG51bGwhPT11JiZ3PT09dS5hbHRlcm5hdGUpYnJlYWsgYjt3PWdmKHcpO3U9Z2YodSl9dz1udWxsfWVsc2Ugdz1udWxsO251bGwhPT1rJiZoZihnLGgsayx3LCExKTtudWxsIT09eCYmbnVsbCE9PXomJmhmKGcseix4LHcsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIEo9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSlKPUZlO2Vsc2V7Sj1EZTt2YXIgSz1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKEo9RWUpO2lmKEomJihKPUooYSxkKSkpe25lKGcsSixjLGUpO2JyZWFrIGF9SyYmSyhhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKEs9aC5fd3JhcHBlclN0YXRlKSYmXG5LLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmJiKGgsXCJudW1iZXJcIixoLnZhbHVlKX1LPWQ/dWUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKG1lKEspfHxcInRydWVcIj09PUsuY29udGVudEVkaXRhYmxlKVFlPUssUmU9ZCxTZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlNlPVJlPVFlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlRlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpUZT0hMTtVZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFBlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VWUoZyxjLGUpfXZhciBRO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBMPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpMPVwib25Db21wb3NpdGlvbkVuZFwiO2JyZWFrIGI7XG5jYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpMPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9TD12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoTD1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihMPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO0wmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PUw/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1MJiZpZSYmKFE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSxLPW9lKGQsTCksMDxLLmxlbmd0aCYmKEw9bmV3IExkKEwsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpMLGxpc3RlbmVyczpLfSksUT9MLmRhdGE9UTooUT1oZShjKSxudWxsIT09USYmKEwuZGF0YT1RKSkpKTtpZihRPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLDA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcblwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPVEpfXNlKGcsYil9KX1mdW5jdGlvbiBlZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG9lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9T2IoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQoZWYoYSxmLGUpKSxmPU9iKGEsYiksbnVsbCE9ZiYmZC5wdXNoKGVmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gZ2YoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIGhmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9T2IoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQoZWYoYyxrLGgpKSk6ZXx8KGs9T2IoYyxmKSxudWxsIT1rJiZnLnB1c2goZWYoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX1mdW5jdGlvbiBqZigpe312YXIga2Y9bnVsbCxsZj1udWxsO2Z1bmN0aW9uIG1mKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIG5mKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgb2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAscGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIHFmKGEpezE9PT1hLm5vZGVUeXBlP2EudGV4dENvbnRlbnQ9XCJcIjo5PT09YS5ub2RlVHlwZSYmKGE9YS5ib2R5LG51bGwhPWEmJihhLnRleHRDb250ZW50PVwiXCIpKX1cbmZ1bmN0aW9uIHJmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfWZ1bmN0aW9uIHNmKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciB0Zj0wO2Z1bmN0aW9uIHVmKGEpe3JldHVybnskJHR5cGVvZjpHYSx0b1N0cmluZzphLHZhbHVlT2Y6YX19dmFyIHZmPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLHdmPVwiX19yZWFjdEZpYmVyJFwiK3ZmLHhmPVwiX19yZWFjdFByb3BzJFwiK3ZmLGZmPVwiX19yZWFjdENvbnRhaW5lciRcIit2Zix5Zj1cIl9fcmVhY3RFdmVudHMkXCIrdmY7XG5mdW5jdGlvbiB3YyhhKXt2YXIgYj1hW3dmXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1tmZl18fGNbd2ZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9c2YoYSk7bnVsbCE9PWE7KXtpZihjPWFbd2ZdKXJldHVybiBjO2E9c2YoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENiKGEpe2E9YVt3Zl18fGFbZmZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB1ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IoeSgzMykpO31mdW5jdGlvbiBEYihhKXtyZXR1cm4gYVt4Zl18fG51bGx9XG5mdW5jdGlvbiAkZShhKXt2YXIgYj1hW3lmXTt2b2lkIDA9PT1iJiYoYj1hW3lmXT1uZXcgU2V0KTtyZXR1cm4gYn12YXIgemY9W10sQWY9LTE7ZnVuY3Rpb24gQmYoYSl7cmV0dXJue2N1cnJlbnQ6YX19ZnVuY3Rpb24gSChhKXswPkFmfHwoYS5jdXJyZW50PXpmW0FmXSx6ZltBZl09bnVsbCxBZi0tKX1mdW5jdGlvbiBJKGEsYil7QWYrKzt6ZltBZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBDZj17fSxNPUJmKENmKSxOPUJmKCExKSxEZj1DZjtcbmZ1bmN0aW9uIEVmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQ2Y7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gRmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBHZigpe0goTik7SChNKX1mdW5jdGlvbiBIZihhLGIsYyl7aWYoTS5jdXJyZW50IT09Q2YpdGhyb3cgRXJyb3IoeSgxNjgpKTtJKE0sYik7SShOLGMpfVxuZnVuY3Rpb24gSWYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih5KDEwOCxSYShiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBtKHt9LGMsZCl9ZnVuY3Rpb24gSmYoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fENmO0RmPU0uY3VycmVudDtJKE0sYSk7SShOLE4uY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gS2YoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHkoMTY5KSk7Yz8oYT1JZihhLGIsRGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxIKE4pLEgoTSksSShNLGEpKTpIKE4pO0koTixjKX1cbnZhciBMZj1udWxsLE1mPW51bGwsTmY9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksT2Y9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLFBmPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssUWY9ci51bnN0YWJsZV9zaG91bGRZaWVsZCxSZj1yLnVuc3RhYmxlX3JlcXVlc3RQYWludCxTZj1yLnVuc3RhYmxlX25vdyxUZj1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLFVmPXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksVmY9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxXZj1yLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFhmPXIudW5zdGFibGVfTG93UHJpb3JpdHksWWY9ci51bnN0YWJsZV9JZGxlUHJpb3JpdHksWmY9e30sJGY9dm9pZCAwIT09UmY/UmY6ZnVuY3Rpb24oKXt9LGFnPW51bGwsYmc9bnVsbCxjZz0hMSxkZz1TZigpLE89MUU0PmRnP1NmOmZ1bmN0aW9uKCl7cmV0dXJuIFNmKCktZGd9O1xuZnVuY3Rpb24gZWcoKXtzd2l0Y2goVGYoKSl7Y2FzZSBVZjpyZXR1cm4gOTk7Y2FzZSBWZjpyZXR1cm4gOTg7Y2FzZSBXZjpyZXR1cm4gOTc7Y2FzZSBYZjpyZXR1cm4gOTY7Y2FzZSBZZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZmcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIFVmO2Nhc2UgOTg6cmV0dXJuIFZmO2Nhc2UgOTc6cmV0dXJuIFdmO2Nhc2UgOTY6cmV0dXJuIFhmO2Nhc2UgOTU6cmV0dXJuIFlmO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGdnKGEsYil7YT1mZyhhKTtyZXR1cm4gTmYoYSxiKX1mdW5jdGlvbiBoZyhhLGIsYyl7YT1mZyhhKTtyZXR1cm4gT2YoYSxiLGMpfWZ1bmN0aW9uIGlnKCl7aWYobnVsbCE9PWJnKXt2YXIgYT1iZztiZz1udWxsO1BmKGEpfWpnKCl9XG5mdW5jdGlvbiBqZygpe2lmKCFjZyYmbnVsbCE9PWFnKXtjZz0hMDt2YXIgYT0wO3RyeXt2YXIgYj1hZztnZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7YWc9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09YWcmJihhZz1hZy5zbGljZShhKzEpKSxPZihVZixpZyksYzt9ZmluYWxseXtjZz0hMX19fXZhciBrZz1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBsZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW0oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgbWc9QmYobnVsbCksbmc9bnVsbCxvZz1udWxsLHBnPW51bGw7ZnVuY3Rpb24gcWcoKXtwZz1vZz1uZz1udWxsfVxuZnVuY3Rpb24gcmcoYSl7dmFyIGI9bWcuY3VycmVudDtIKG1nKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHNnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKChhLmNoaWxkTGFuZXMmYik9PT1iKWlmKG51bGw9PT1jfHwoYy5jaGlsZExhbmVzJmIpPT09YilicmVhaztlbHNlIGMuY2hpbGRMYW5lc3w9YjtlbHNlIGEuY2hpbGRMYW5lc3w9YixudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9Yik7YT1hLnJldHVybn19ZnVuY3Rpb24gdGcoYSxiKXtuZz1hO3BnPW9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYodWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gdmcoYSxiKXtpZihwZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpcGc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PW9nKXtpZihudWxsPT09bmcpdGhyb3cgRXJyb3IoeSgzMDgpKTtvZz1iO25nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2Ugb2c9b2cubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHdnPSExO2Z1bmN0aW9uIHhnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHlnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHpnKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fWZ1bmN0aW9uIEFnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hKXthPWEuc2hhcmVkO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9fVxuZnVuY3Rpb24gQmcoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIENnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7d2c9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbj1hLmFsdGVybmF0ZTtpZihudWxsIT09bil7bj1uLnVwZGF0ZVF1ZXVlO3ZhciBBPW4ubGFzdEJhc2VVcGRhdGU7QSE9PWcmJihudWxsPT09QT9uLmZpcnN0QmFzZVVwZGF0ZT1sOkEubmV4dD1sLG4ubGFzdEJhc2VVcGRhdGU9ayl9fWlmKG51bGwhPT1mKXtBPWUuYmFzZVN0YXRlO2c9MDtuPWw9az1udWxsO2Rve2g9Zi5sYW5lO3ZhciBwPWYuZXZlbnRUaW1lO2lmKChkJmgpPT09aCl7bnVsbCE9PW4mJihuPW4ubmV4dD17ZXZlbnRUaW1lOnAsbGFuZTowLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIEM9YSx4PWY7aD1iO3A9Yztzd2l0Y2goeC50YWcpe2Nhc2UgMTpDPXgucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyl7QT1DLmNhbGwocCxBLGgpO2JyZWFrIGF9QT1DO2JyZWFrIGE7Y2FzZSAzOkMuZmxhZ3M9Qy5mbGFncyYtNDA5N3w2NDtjYXNlIDA6Qz14LnBheWxvYWQ7aD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQz9DLmNhbGwocCxBLGgpOkM7aWYobnVsbD09PWh8fHZvaWQgMD09PWgpYnJlYWsgYTtBPW0oe30sQSxoKTticmVhayBhO2Nhc2UgMjp3Zz0hMH19bnVsbCE9PWYuY2FsbGJhY2smJihhLmZsYWdzfD0zMixoPWUuZWZmZWN0cyxudWxsPT09aD9lLmVmZmVjdHM9W2ZdOmgucHVzaChmKSl9ZWxzZSBwPXtldmVudFRpbWU6cCxsYW5lOmgsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bj8obD1uPXAsaz1BKTpuPW4ubmV4dD1wLGd8PWg7Zj1mLm5leHQ7aWYobnVsbD09PVxuZilpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSBmPWgubmV4dCxoLm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPWgsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1uJiYoaz1BKTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1uO0RnfD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9QX19ZnVuY3Rpb24gRWcoYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHkoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgRmc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBHZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgS2c9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/WmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1IZygpLGQ9SWcoYSksZT16ZyhjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPVxuYik7QWcoYSxlKTtKZyhhLGQsYyl9fTtmdW5jdGlvbiBMZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFKZShjLGQpfHwhSmUoZSxmKTohMH1cbmZ1bmN0aW9uIE1nKGEsYixjKXt2YXIgZD0hMSxlPUNmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXZnKGYpOihlPUZmKGIpP0RmOk0uY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0VmKGEsZSk6Q2YpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1LZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE5nKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE9nKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9Rmc7eGcoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD12ZyhmKTooZj1GZihiKT9EZjpNLmN1cnJlbnQsZS5jb250ZXh0PUVmKGEsZikpO0NnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihHZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxDZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00KX12YXIgUGc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFFnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih5KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1GZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih5KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih5KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gUmcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IoeSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIpKTt9XG5mdW5jdGlvbiBTZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmZsYWdzPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVRnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzPTIsXG5jKTpkO2IuZmxhZ3M9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3M9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVVnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPVFnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1WZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1RZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cbldnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBuKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1YZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIEEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVVnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjPVZnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVFnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB0YTpyZXR1cm4gYj1XZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoUGcoYil8fExhKGIpKXJldHVybiBiPVhnKGIsXG5hLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7UmcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBwKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09dWE/bihhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIHRhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKFBnKGMpfHxMYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpuKGEsYixjLGQsbnVsbCk7UmcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fFxubnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PXVhP24oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIHRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKFBnKGQpfHxMYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxuKGIsYSxkLGUsbnVsbCk7UmcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHQ9bnVsbCx1PWcsej1nPTAscT1udWxsO251bGwhPT11JiZ6PGgubGVuZ3RoO3orKyl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgbj1wKGUsdSxoW3pdLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PVxubi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHopO251bGw9PT10P2w9bjp0LnNpYmxpbmc9bjt0PW47dT1xfWlmKHo9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7ejxoLmxlbmd0aDt6KyspdT1BKGUsaFt6XSxrKSxudWxsIT09dSYmKGc9Zih1LGcseiksbnVsbD09PXQ/bD11OnQuc2libGluZz11LHQ9dSk7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpO3o8aC5sZW5ndGg7eisrKXE9Qyh1LGUseixoW3pdLGspLG51bGwhPT1xJiYoYSYmbnVsbCE9PXEuYWx0ZXJuYXRlJiZ1LmRlbGV0ZShudWxsPT09cS5rZXk/ejpxLmtleSksZz1mKHEsZyx6KSxudWxsPT09dD9sPXE6dC5zaWJsaW5nPXEsdD1xKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIHcoZSxnLGgsayl7dmFyIGw9TGEoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IoeSgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1cbmgpdGhyb3cgRXJyb3IoeSgxNTEpKTtmb3IodmFyIHQ9bD1udWxsLHU9Zyx6PWc9MCxxPW51bGwsbj1oLm5leHQoKTtudWxsIT09dSYmIW4uZG9uZTt6Kyssbj1oLm5leHQoKSl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgdz1wKGUsdSxuLnZhbHVlLGspO2lmKG51bGw9PT13KXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKHcsZyx6KTtudWxsPT09dD9sPXc6dC5zaWJsaW5nPXc7dD13O3U9cX1pZihuLmRvbmUpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1BKGUsbi52YWx1ZSxrKSxudWxsIT09biYmKGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1DKHUsZSx6LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJlxudS5kZWxldGUobnVsbD09PW4ua2V5P3o6bi5rZXkpLGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09dWEmJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2Ugc2E6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKXtzd2l0Y2goay50YWcpe2Nhc2UgNzppZihmLnR5cGU9PT11YSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1icmVhaztkZWZhdWx0OmlmKGsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO1xuZD1lKGssZi5wcm9wcyk7ZC5yZWY9UWcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWMoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT11YT8oZD1YZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9VmcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9UWcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHRhOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPVxuV2coZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9VWcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoUGcoZikpcmV0dXJuIHgoYSxkLGYsaCk7aWYoTGEoZikpcmV0dXJuIHcoYSxkLGYsaCk7bCYmUmcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMjI6Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp0aHJvdyBFcnJvcih5KDE1MixSYShhLnR5cGUpfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBZZz1TZyghMCksWmc9U2coITEpLCRnPXt9LGFoPUJmKCRnKSxiaD1CZigkZyksY2g9QmYoJGcpO1xuZnVuY3Rpb24gZGgoYSl7aWYoYT09PSRnKXRocm93IEVycm9yKHkoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gZWgoYSxiKXtJKGNoLGIpO0koYmgsYSk7SShhaCwkZyk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTptYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bWIoYixhKX1IKGFoKTtJKGFoLGIpfWZ1bmN0aW9uIGZoKCl7SChhaCk7SChiaCk7SChjaCl9ZnVuY3Rpb24gZ2goYSl7ZGgoY2guY3VycmVudCk7dmFyIGI9ZGgoYWguY3VycmVudCk7dmFyIGM9bWIoYixhLnR5cGUpO2IhPT1jJiYoSShiaCxhKSxJKGFoLGMpKX1mdW5jdGlvbiBoaChhKXtiaC5jdXJyZW50PT09YSYmKEgoYWgpLEgoYmgpKX12YXIgUD1CZigwKTtcbmZ1bmN0aW9uIGloKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIGpoPW51bGwsa2g9bnVsbCxsaD0hMTtcbmZ1bmN0aW9uIG1oKGEsYil7dmFyIGM9bmgoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZmxhZ3M9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIG9oKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBwaChhKXtpZihsaCl7dmFyIGI9a2g7aWYoYil7dmFyIGM9YjtpZighb2goYSxiKSl7Yj1yZihjLm5leHRTaWJsaW5nKTtpZighYnx8IW9oKGEsYikpe2EuZmxhZ3M9YS5mbGFncyYtMTAyNXwyO2xoPSExO2poPWE7cmV0dXJufW1oKGpoLGMpfWpoPWE7a2g9cmYoYi5maXJzdENoaWxkKX1lbHNlIGEuZmxhZ3M9YS5mbGFncyYtMTAyNXwyLGxoPSExLGpoPWF9fWZ1bmN0aW9uIHFoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtqaD1hfVxuZnVuY3Rpb24gcmgoYSl7aWYoYSE9PWpoKXJldHVybiExO2lmKCFsaClyZXR1cm4gcWgoYSksbGg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFuZihiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9a2g7YjspbWgoYSxiKSxiPXJmKGIubmV4dFNpYmxpbmcpO3FoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IoeSgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7a2g9cmYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ31raD1udWxsfX1lbHNlIGtoPWpoP3JmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gc2goKXtraD1qaD1udWxsO2xoPSExfXZhciB0aD1bXTtmdW5jdGlvbiB1aCgpe2Zvcih2YXIgYT0wO2E8dGgubGVuZ3RoO2ErKyl0aFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO3RoLmxlbmd0aD0wfXZhciB2aD1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHdoPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLHhoPTAsUj1udWxsLFM9bnVsbCxUPW51bGwseWg9ITEsemg9ITE7ZnVuY3Rpb24gQWgoKXt0aHJvdyBFcnJvcih5KDMyMSkpO31mdW5jdGlvbiBCaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gQ2goYSxiLGMsZCxlLGYpe3hoPWY7Uj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7dmguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9EaDpFaDthPWMoZCxlKTtpZih6aCl7Zj0wO2Rve3poPSExO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IoeSgzMDEpKTtmKz0xO1Q9Uz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDt2aC5jdXJyZW50PUZoO2E9YyhkLGUpfXdoaWxlKHpoKX12aC5jdXJyZW50PUdoO2I9bnVsbCE9PVMmJm51bGwhPT1TLm5leHQ7eGg9MDtUPVM9Uj1udWxsO3loPSExO2lmKGIpdGhyb3cgRXJyb3IoeSgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBIaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YTtyZXR1cm4gVH1cbmZ1bmN0aW9uIEloKCl7aWYobnVsbD09PVMpe3ZhciBhPVIuYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPVMubmV4dDt2YXIgYj1udWxsPT09VD9SLm1lbW9pemVkU3RhdGU6VC5uZXh0O2lmKG51bGwhPT1iKVQ9YixTPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih5KDMxMCkpO1M9YTthPXttZW1vaXplZFN0YXRlOlMubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Uy5iYXNlU3RhdGUsYmFzZVF1ZXVlOlMuYmFzZVF1ZXVlLHF1ZXVlOlMucXVldWUsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWF9cmV0dXJuIFR9ZnVuY3Rpb24gSmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBLaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPVMsZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5sYW5lO2lmKCh4aCZsKT09PWwpbnVsbCE9PWgmJihoPWgubmV4dD17bGFuZTowLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7ZWxzZXt2YXIgbj17bGFuZTpsLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsXG5lYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1oPyhnPWg9bixmPWQpOmg9aC5uZXh0PW47Ui5sYW5lc3w9bDtEZ3w9bH1rPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWUpO251bGw9PT1oP2Y9ZDpoLm5leHQ9ZztIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZjtiLmJhc2VRdWV1ZT1oO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gTGgoYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19XG5mdW5jdGlvbiBNaChhLGIsYyl7dmFyIGQ9Yi5fZ2V0VmVyc2lvbjtkPWQoYi5fc291cmNlKTt2YXIgZT1iLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5O2lmKG51bGwhPT1lKWE9ZT09PWQ7ZWxzZSBpZihhPWEubXV0YWJsZVJlYWRMYW5lcyxhPSh4aCZhKT09PWEpYi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1kLHRoLnB1c2goYik7aWYoYSlyZXR1cm4gYyhiLl9zb3VyY2UpO3RoLnB1c2goYik7dGhyb3cgRXJyb3IoeSgzNTApKTt9XG5mdW5jdGlvbiBOaChhLGIsYyxkKXt2YXIgZT1VO2lmKG51bGw9PT1lKXRocm93IEVycm9yKHkoMzQ5KSk7dmFyIGY9Yi5fZ2V0VmVyc2lvbixnPWYoYi5fc291cmNlKSxoPXZoLmN1cnJlbnQsaz1oLnVzZVN0YXRlKGZ1bmN0aW9uKCl7cmV0dXJuIE1oKGUsYixjKX0pLGw9a1sxXSxuPWtbMF07az1UO3ZhciBBPWEubWVtb2l6ZWRTdGF0ZSxwPUEucmVmcyxDPXAuZ2V0U25hcHNob3QseD1BLnNvdXJjZTtBPUEuc3Vic2NyaWJlO3ZhciB3PVI7YS5tZW1vaXplZFN0YXRlPXtyZWZzOnAsc291cmNlOmIsc3Vic2NyaWJlOmR9O2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cC5nZXRTbmFwc2hvdD1jO3Auc2V0U25hcHNob3Q9bDt2YXIgYT1mKGIuX3NvdXJjZSk7aWYoIUhlKGcsYSkpe2E9YyhiLl9zb3VyY2UpO0hlKG4sYSl8fChsKGEpLGE9SWcodyksZS5tdXRhYmxlUmVhZExhbmVzfD1hJmUucGVuZGluZ0xhbmVzKTthPWUubXV0YWJsZVJlYWRMYW5lcztlLmVudGFuZ2xlZExhbmVzfD1hO2Zvcih2YXIgZD1cbmUuZW50YW5nbGVtZW50cyxoPWE7MDxoOyl7dmFyIGs9MzEtVmMoaCksdj0xPDxrO2Rba118PWE7aCY9fnZ9fX0sW2MsYixkXSk7aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtyZXR1cm4gZChiLl9zb3VyY2UsZnVuY3Rpb24oKXt2YXIgYT1wLmdldFNuYXBzaG90LGM9cC5zZXRTbmFwc2hvdDt0cnl7YyhhKGIuX3NvdXJjZSkpO3ZhciBkPUlnKHcpO2UubXV0YWJsZVJlYWRMYW5lc3w9ZCZlLnBlbmRpbmdMYW5lc31jYXRjaChxKXtjKGZ1bmN0aW9uKCl7dGhyb3cgcTt9KX19KX0sW2IsZF0pO0hlKEMsYykmJkhlKHgsYikmJkhlKEEsZCl8fChhPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOm59LGEuZGlzcGF0Y2g9bD1PaC5iaW5kKG51bGwsUixhKSxrLnF1ZXVlPWEsay5iYXNlUXVldWU9bnVsbCxuPU1oKGUsYixjKSxrLm1lbW9pemVkU3RhdGU9ay5iYXNlU3RhdGU9bik7cmV0dXJuIG59XG5mdW5jdGlvbiBQaChhLGIsYyl7dmFyIGQ9SWgoKTtyZXR1cm4gTmgoZCxhLGIsYyl9ZnVuY3Rpb24gUWgoYSl7dmFyIGI9SGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBSaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1SLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGx9LFIudXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gU2goYSl7dmFyIGI9SGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX1mdW5jdGlvbiBUaCgpe3JldHVybiBJaCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gVWgoYSxiLGMsZCl7dmFyIGU9SGgoKTtSLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gVmgoYSxiLGMsZCl7dmFyIGU9SWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Uyl7dmFyIGc9Uy5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZCaChkLGcuZGVwcykpe1JoKGIsYyxmLGQpO3JldHVybn19Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsZixkKX1mdW5jdGlvbiBXaChhLGIpe3JldHVybiBVaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFhoKGEsYil7cmV0dXJuIFZoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWWgoYSxiKXtyZXR1cm4gVmgoNCwyLGEsYil9ZnVuY3Rpb24gWmgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1cbmZ1bmN0aW9uICRoKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVmgoNCwyLFpoLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIGFpKCl7fWZ1bmN0aW9uIGJpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIGNpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gZGkoYSxiKXt2YXIgYz1lZygpO2dnKDk4PmM/OTg6YyxmdW5jdGlvbigpe2EoITApfSk7Z2coOTc8Yz85NzpjLGZ1bmN0aW9uKCl7dmFyIGM9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2EoITEpLGIoKX1maW5hbGx5e3doLnRyYW5zaXRpb249Y319KX1cbmZ1bmN0aW9uIE9oKGEsYixjKXt2YXIgZD1IZygpLGU9SWcoYSksZj17bGFuZTplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LGc9Yi5wZW5kaW5nO251bGw9PT1nP2YubmV4dD1mOihmLm5leHQ9Zy5uZXh0LGcubmV4dD1mKTtiLnBlbmRpbmc9ZjtnPWEuYWx0ZXJuYXRlO2lmKGE9PT1SfHxudWxsIT09ZyYmZz09PVIpemg9eWg9ITA7ZWxzZXtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1nfHwwPT09Zy5sYW5lcykmJihnPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZykpdHJ5e3ZhciBoPWIubGFzdFJlbmRlcmVkU3RhdGUsaz1nKGgsYyk7Zi5lYWdlclJlZHVjZXI9ZztmLmVhZ2VyU3RhdGU9aztpZihIZShrLGgpKXJldHVybn1jYXRjaChsKXt9ZmluYWxseXt9SmcoYSxlLGQpfX1cbnZhciBHaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6QWgsdXNlQ29udGV4dDpBaCx1c2VFZmZlY3Q6QWgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpBaCx1c2VMYXlvdXRFZmZlY3Q6QWgsdXNlTWVtbzpBaCx1c2VSZWR1Y2VyOkFoLHVzZVJlZjpBaCx1c2VTdGF0ZTpBaCx1c2VEZWJ1Z1ZhbHVlOkFoLHVzZURlZmVycmVkVmFsdWU6QWgsdXNlVHJhbnNpdGlvbjpBaCx1c2VNdXRhYmxlU291cmNlOkFoLHVzZU9wYXF1ZUlkZW50aWZpZXI6QWgsdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxEaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtIaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpXaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVWgoNCwyLFpoLmJpbmQobnVsbCxcbmIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBVaCg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPUhoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOlNoLHVzZVN0YXRlOlFoLHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1RaChhKSxjPWJbMF0sZD1iWzFdO1doKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjtcbndoLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1RaCghMSksYj1hWzBdO2E9ZGkuYmluZChudWxsLGFbMV0pO1NoKGEpO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2QubWVtb2l6ZWRTdGF0ZT17cmVmczp7Z2V0U25hcHNob3Q6YixzZXRTbmFwc2hvdDpudWxsfSxzb3VyY2U6YSxzdWJzY3JpYmU6Y307cmV0dXJuIE5oKGQsYSxiLGMpfSx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7aWYobGgpe3ZhciBhPSExLGI9dWYoZnVuY3Rpb24oKXthfHwoYT0hMCxjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKSk7dGhyb3cgRXJyb3IoeSgzNTUpKTt9KSxjPVFoKGIpWzFdOzA9PT0oUi5tb2RlJjIpJiYoUi5mbGFnc3w9NTE2LFJoKDUsZnVuY3Rpb24oKXtjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKX0sXG52b2lkIDAsbnVsbCkpO3JldHVybiBifWI9XCJyOlwiKyh0ZisrKS50b1N0cmluZygzNik7UWgoYik7cmV0dXJuIGJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRWg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpLaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9S2goSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1LaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEZoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6TGgsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUxoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9TGgoSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxlaT1yYS5SZWFjdEN1cnJlbnRPd25lcix1Zz0hMTtmdW5jdGlvbiBmaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1pnKGIsbnVsbCxjLGQpOllnKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIGdpKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjt0ZyhiLGUpO2Q9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFqaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxraShhLGIsZyxkLGUsZik7YT1WZyhjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoMD09PShlJmYpJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOkplLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIGhpKGEsYixmKTtiLmZsYWdzfD0xO2E9VGcoZyxkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBraShhLGIsYyxkLGUsZil7aWYobnVsbCE9PWEmJkplKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZilpZih1Zz0hMSwwIT09KGYmZSkpMCE9PShhLmZsYWdzJjE2Mzg0KSYmKHVnPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsaGkoYSxiLGYpO3JldHVybiBsaShhLGIsYyxkLGYpfVxuZnVuY3Rpb24gbWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGV8fFwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIj09PWQubW9kZSlpZigwPT09KGIubW9kZSY0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLGMpO2Vsc2UgaWYoMCE9PShjJjEwNzM3NDE4MjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsbnVsbCE9PWY/Zi5iYXNlTGFuZXM6Yyk7ZWxzZSByZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphfSxuaShiLGEpLG51bGw7ZWxzZSBudWxsIT09Zj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpkPWMsbmkoYixkKTtmaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIG9pKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTEyOH1mdW5jdGlvbiBsaShhLGIsYyxkLGUpe3ZhciBmPUZmKGMpP0RmOk0uY3VycmVudDtmPUVmKGIsZik7dGcoYixlKTtjPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHBpKGEsYixjLGQsZSl7aWYoRmYoYykpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTt0ZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxNZyhiLGMsZCksT2coYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9dmcobCk6KGw9RmYoYyk/RGY6TS5jdXJyZW50LGw9RWYoYixsKSk7dmFyIG49Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7QXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk5nKGIsZyxkLGwpO3dnPSExO3ZhciBwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHAhPT1rfHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbiYmKEdnKGIsYyxuLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD13Z3x8TGcoYixjLGgsZCxwLGssbCkpPyhBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7eWcoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpsZyhiLnR5cGUsaCk7Zy5wcm9wcz1sO0E9Yi5wZW5kaW5nUHJvcHM7cD1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az12ZyhrKTooaz1GZihjKT9EZjpNLmN1cnJlbnQsaz1FZihiLGspKTt2YXIgQz1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQ3x8XG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PUF8fHAhPT1rKSYmTmcoYixnLGQsayk7d2c9ITE7cD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtoIT09QXx8cCE9PXh8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDJiYoR2coYixjLEMsZCkseD1iLm1lbW9pemVkU3RhdGUpLChsPXdnfHxMZyhiLGMsbCxkLHAseCxrKSk/KG58fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsXG54LGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT14KSxnLnByb3BzPWQsZy5zdGF0ZT14LGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8XG5oPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGQ9ITEpfXJldHVybiBxaShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBxaShhLGIsYyxkLGUsZil7b2koYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmS2YoYixjLCExKSxoaShhLGIsZik7ZD1iLnN0YXRlTm9kZTtlaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVlnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WWcoYixudWxsLGgsZikpOmZpKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJktmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcmkoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9IZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZIZihhLGIuY29udGV4dCwhMSk7ZWgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIHNpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlMYW5lOjB9O1xuZnVuY3Rpb24gdGkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9UC5jdXJyZW50LGY9ITEsZzsoZz0wIT09KGIuZmxhZ3MmNjQpKXx8KGc9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtnPyhmPSEwLGIuZmxhZ3MmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWQuZmFsbGJhY2t8fCEwPT09ZC51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGV8PTEpO0koUCxlJjEpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1kLmZhbGxiYWNrJiZwaChiKTthPWQuY2hpbGRyZW47ZT1kLmZhbGxiYWNrO2lmKGYpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sYi5tZW1vaXplZFN0YXRlPXNpLGE7aWYoXCJudW1iZXJcIj09PXR5cGVvZiBkLnVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sXG5iLm1lbW9pemVkU3RhdGU9c2ksYi5sYW5lcz0zMzU1NDQzMixhO2M9dmkoe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46YX0sYi5tb2RlLGMsbnVsbCk7Yy5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1jfWlmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2lmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306e2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTpcbntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWZ1bmN0aW9uIHVpKGEsYixjLGQpe3ZhciBlPWEubW9kZSxmPWEuY2hpbGQ7Yj17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmJ9OzA9PT0oZSYyKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPWIpOmY9dmkoYixlLDAsbnVsbCk7Yz1YZyhjLGUsZCxudWxsKTtmLnJldHVybj1hO2MucmV0dXJuPWE7Zi5zaWJsaW5nPWM7YS5jaGlsZD1mO3JldHVybiBjfVxuZnVuY3Rpb24geGkoYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDthPWUuc2libGluZztjPVRnKGUse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Y30pOzA9PT0oYi5tb2RlJjIpJiYoYy5sYW5lcz1kKTtjLnJldHVybj1iO2Muc2libGluZz1udWxsO251bGwhPT1hJiYoYS5uZXh0RWZmZWN0PW51bGwsYS5mbGFncz04LGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWEpO3JldHVybiBiLmNoaWxkPWN9XG5mdW5jdGlvbiB3aShhLGIsYyxkLGUpe3ZhciBmPWIubW9kZSxnPWEuY2hpbGQ7YT1nLnNpYmxpbmc7dmFyIGg9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpjfTswPT09KGYmMikmJmIuY2hpbGQhPT1nPyhjPWIuY2hpbGQsYy5jaGlsZExhbmVzPTAsYy5wZW5kaW5nUHJvcHM9aCxnPWMubGFzdEVmZmVjdCxudWxsIT09Zz8oYi5maXJzdEVmZmVjdD1jLmZpcnN0RWZmZWN0LGIubGFzdEVmZmVjdD1nLGcubmV4dEVmZmVjdD1udWxsKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsKTpjPVRnKGcsaCk7bnVsbCE9PWE/ZD1UZyhhLGQpOihkPVhnKGQsZixlLG51bGwpLGQuZmxhZ3N8PTIpO2QucmV0dXJuPWI7Yy5yZXR1cm49YjtjLnNpYmxpbmc9ZDtiLmNoaWxkPWM7cmV0dXJuIGR9ZnVuY3Rpb24geWkoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7c2coYS5yZXR1cm4sYil9XG5mdW5jdGlvbiB6aShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmUsbGFzdEVmZmVjdDpmfTooZy5pc0JhY2t3YXJkcz1iLGcucmVuZGVyaW5nPW51bGwsZy5yZW5kZXJpbmdTdGFydFRpbWU9MCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gQWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtmaShhLGIsZC5jaGlsZHJlbixjKTtkPVAuY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmeWkoYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpeWkoYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShQLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1paChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3ppKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWloKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX16aShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6emkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGhpKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtEZ3w9Yi5sYW5lcztpZigwIT09KGMmYi5jaGlsZExhbmVzKSl7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHkoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVRnKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1UZyhhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXJldHVybiBudWxsfXZhciBCaSxDaSxEaSxFaTtcbkJpPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtDaT1mdW5jdGlvbigpe307XG5EaT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7ZGgoYWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZSk7ZD1lYihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9bSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWdiKGEsZSk7ZD1nYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX12YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PVxubCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHxcbihjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxjKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRyhcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOlwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1HYT9rLnRvU3RyaW5nKCk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLFxuYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0VpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O2Z1bmN0aW9uIEZpKGEsYil7aWYoIWxoKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBHaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClyaChiKT9iLmZsYWdzfD00OmQuaHlkcmF0ZXx8KGIuZmxhZ3N8PTI1Nik7Q2koYik7cmV0dXJuIG51bGw7Y2FzZSA1OmhoKGIpO3ZhciBlPWRoKGNoLmN1cnJlbnQpO2M9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlEaShhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1cbmIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7cmV0dXJuIG51bGx9YT1kaChhaC5jdXJyZW50KTtpZihyaChiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFt3Zl09YjtkW3hmXT1mO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGQpO0coXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoYT0wO2E8WGUubGVuZ3RoO2ErKylHKFhlW2FdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixkKTtHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihkLGYpLEcoXCJpbnZhbGlkXCIsZCl9dmIoYyxmKTthPW51bGw7Zm9yKHZhciBnIGluIGYpZi5oYXNPd25Qcm9wZXJ0eShnKSYmKGU9ZltnXSxcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgZT9kLnRleHRDb250ZW50IT09ZSYmKGE9W1wiY2hpbGRyZW5cIixlXSk6XCJudW1iZXJcIj09PXR5cGVvZiBlJiZkLnRleHRDb250ZW50IT09XCJcIitlJiYoYT1bXCJjaGlsZHJlblwiLFwiXCIrZV0pOmNhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1lJiZcIm9uU2Nyb2xsXCI9PT1nJiZHKFwic2Nyb2xsXCIsZCkpO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShkKTtjYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGQpO2piKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPVxuamYpfWQ9YTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7YT09PWtiLmh0bWwmJihhPWxiKGMpKTthPT09a2IuaHRtbD9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2Fbd2ZdPWI7YVt4Zl09ZDtCaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7Zz13YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGEpO0coXCJjbG9zZVwiLGEpO1xuZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPFhlLmxlbmd0aDtlKyspRyhYZVtlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixhKTtHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPVxuZ2IoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXZiKGMsZSk7dmFyIGg9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj90YihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmb2IoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWN8fFwiXCIhPT1rKSYmcGIoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJnBiKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoY2EuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRyhcInNjcm9sbFwiLGEpOm51bGwhPWsmJnFhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7Y2IoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX1tZihjLGQpJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRWkoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7XG5jPWRoKGNoLmN1cnJlbnQpO2RoKGFoLmN1cnJlbnQpO3JoKGIpPyhkPWIuc3RhdGVOb2RlLGM9Yi5tZW1vaXplZFByb3BzLGRbd2ZdPWIsZC5ub2RlVmFsdWUhPT1jJiYoYi5mbGFnc3w9NCkpOihkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFt3Zl09YixiLnN0YXRlTm9kZT1kKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtjPSExO251bGw9PT1hP3ZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayYmcmgoYik6Yz1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKGQmJiFjJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YSYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oUC5jdXJyZW50JjEpKTA9PT1WJiYoVj0zKTtlbHNle2lmKDA9PT1WfHwzPT09VilWPVxuNDtudWxsPT09VXx8MD09PShEZyYxMzQyMTc3MjcpJiYwPT09KEhpJjEzNDIxNzcyNyl8fElpKFUsVyl9aWYoZHx8YyliLmZsYWdzfD00O3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxDaShiKSxudWxsPT09YSYmY2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksbnVsbDtjYXNlIDEwOnJldHVybiByZyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDE5OkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Zj0wIT09KGIuZmxhZ3MmNjQpO2c9ZC5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZilGaShkLCExKTtlbHNle2lmKDAhPT1WfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1paChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9NjQ7RmkoZCwhMSk7Zj1nLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoYi51cGRhdGVRdWV1ZT1mLGIuZmxhZ3N8PTQpO1xubnVsbD09PWQubGFzdEVmZmVjdCYmKGIuZmlyc3RFZmZlY3Q9bnVsbCk7Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0yLGYubmV4dEVmZmVjdD1udWxsLGYuZmlyc3RFZmZlY3Q9bnVsbCxmLmxhc3RFZmZlY3Q9bnVsbCxnPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsXG5mLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0koUCxQLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPWEuc2libGluZ31udWxsIT09ZC50YWlsJiZPKCk+SmkmJihiLmZsYWdzfD02NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpfWVsc2V7aWYoIWYpaWYoYT1paChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9NjQsZj0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksRmkoZCwhMCksbnVsbD09PWQudGFpbCYmXCJoaWRkZW5cIj09PWQudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIWxoKXJldHVybiBiPWIubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3QsbnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCksbnVsbH1lbHNlIDIqTygpLWQucmVuZGVyaW5nU3RhcnRUaW1lPkppJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PVxuNjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKTtkLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWQubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZC5sYXN0PWcpfXJldHVybiBudWxsIT09ZC50YWlsPyhjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT1PKCksYy5zaWJsaW5nPW51bGwsYj1QLmN1cnJlbnQsSShQLGY/YiYxfDI6YiYxKSxjKTpudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PShudWxsIT09Yi5tZW1vaXplZFN0YXRlKSYmXCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiIT09ZC5tb2RlJiYoYi5mbGFnc3w9NCksbnVsbH10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIExpKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkZmKGEudHlwZSkmJkdmKCk7dmFyIGI9YS5mbGFncztyZXR1cm4gYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtiPWEuZmxhZ3M7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih5KDI4NSkpO2EuZmxhZ3M9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIGhoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gSChQKSxiPWEuZmxhZ3MsYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKFApLG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYSksbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVFhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplfX1mdW5jdGlvbiBOaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgT2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gUGkoYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UWl8fChRaT0hMCxSaT1kKTtOaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFNpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtOaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09VGk/VGk9bmV3IFNldChbdGhpc10pOlRpLmFkZCh0aGlzKSxOaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY312YXIgVWk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7XG5mdW5jdGlvbiBWaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtXaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9ZnVuY3Rpb24gWGkoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpyZXR1cm47Y2FzZSAxOmlmKGIuZmxhZ3MmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzpsZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifXJldHVybjtjYXNlIDM6Yi5mbGFncyYyNTYmJnFmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3JldHVybjtjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIFlpKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpiPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3tpZigzPT09KGEudGFnJjMpKXt2YXIgZD1hLmNyZWF0ZTthLmRlc3Ryb3k9ZCgpfWE9YS5uZXh0fXdoaWxlKGEhPT1iKX1iPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3t2YXIgZT1hO2Q9ZS5uZXh0O2U9ZS50YWc7MCE9PShlJjQpJiYwIT09KGUmMSkmJihaaShjLGEpLCRpKGMsYSkpO2E9ZH13aGlsZShhIT09Yil9cmV0dXJuO2Nhc2UgMTphPWMuc3RhdGVOb2RlO2MuZmxhZ3MmNCYmKG51bGw9PT1iP2EuY29tcG9uZW50RGlkTW91bnQoKTooZD1jLmVsZW1lbnRUeXBlPT09Yy50eXBlP2IubWVtb2l6ZWRQcm9wczpsZyhjLnR5cGUsYi5tZW1vaXplZFByb3BzKSxhLmNvbXBvbmVudERpZFVwZGF0ZShkLFxuYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpKSk7Yj1jLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZFZyhjLGIsYSk7cmV0dXJuO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWMuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTphPWMuY2hpbGQuc3RhdGVOb2RlfUVnKGMsYixhKX1yZXR1cm47Y2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZmxhZ3MmNCYmbWYoYy50eXBlLGMubWVtb2l6ZWRQcm9wcykmJmEuZm9jdXMoKTtyZXR1cm47Y2FzZSA2OnJldHVybjtjYXNlIDQ6cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbD09PWMubWVtb2l6ZWRTdGF0ZSYmKGM9Yy5hbHRlcm5hdGUsbnVsbCE9PWMmJihjPWMubWVtb2l6ZWRTdGF0ZSxudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGwhPT1jJiZDYyhjKSkpKTtcbnJldHVybjtjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpjYXNlIDIxOmNhc2UgMjM6Y2FzZSAyNDpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBhaihhLGIpe2Zvcih2YXIgYz1hOzspe2lmKDU9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoYilkPWQuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuc2V0UHJvcGVydHk/ZC5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpkLmRpc3BsYXk9XCJub25lXCI7ZWxzZXtkPWMuc3RhdGVOb2RlO3ZhciBlPWMubWVtb2l6ZWRQcm9wcy5zdHlsZTtlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbDtkLnN0eWxlLmRpc3BsYXk9c2IoXCJkaXNwbGF5XCIsZSl9fWVsc2UgaWYoNj09PWMudGFnKWMuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iP1wiXCI6Yy5tZW1vaXplZFByb3BzO2Vsc2UgaWYoKDIzIT09Yy50YWcmJjI0IT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fGM9PT1hKSYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1cbmEpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWEpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBiaihhLGIpe2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclVubW91bnQpdHJ5e01mLm9uQ29tbWl0RmliZXJVbm1vdW50KExmLGIpfWNhdGNoKGYpe31zd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGM9YT1hLm5leHQ7ZG97dmFyIGQ9YyxlPWQuZGVzdHJveTtkPWQudGFnO2lmKHZvaWQgMCE9PWUpaWYoMCE9PShkJjQpKVppKGIsYyk7ZWxzZXtkPWI7dHJ5e2UoKX1jYXRjaChmKXtXaShkLGYpfX1jPWMubmV4dH13aGlsZShjIT09YSl9YnJlYWs7Y2FzZSAxOlZpKGIpO2E9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2EucHJvcHM9Yi5tZW1vaXplZFByb3BzLGEuc3RhdGU9Yi5tZW1vaXplZFN0YXRlLGEuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChmKXtXaShiLFxuZil9YnJlYWs7Y2FzZSA1OlZpKGIpO2JyZWFrO2Nhc2UgNDpjaihhLGIpfX1mdW5jdGlvbiBkaihhKXthLmFsdGVybmF0ZT1udWxsO2EuY2hpbGQ9bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EucmV0dXJuPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIGVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gZmooYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoZWooYikpYnJlYWsgYTtiPWIucmV0dXJufXRocm93IEVycm9yKHkoMTYwKSk7fXZhciBjPWI7Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMTYxKSk7fWMuZmxhZ3MmMTYmJihwYihiLFwiXCIpLGMuZmxhZ3MmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxlaihjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmZsYWdzJjIpY29udGludWUgYjtpZihudWxsPT09XG5jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5mbGFncyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP2dqKGEsYyxiKTpoaihhLGMsYil9XG5mdW5jdGlvbiBnaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9amYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoZ2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylnaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBoaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGhqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspaGooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gY2ooYSxiKXtmb3IodmFyIGM9YixkPSExLGUsZjs7KXtpZighZCl7ZD1jLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWQpdGhyb3cgRXJyb3IoeSgxNjApKTtlPWQuc3RhdGVOb2RlO3N3aXRjaChkLnRhZyl7Y2FzZSA1OmY9ITE7YnJlYWsgYTtjYXNlIDM6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhO2Nhc2UgNDplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGF9ZD1kLnJldHVybn1kPSEwfWlmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKXthOmZvcih2YXIgZz1hLGg9YyxrPWg7OylpZihiaihnLGspLG51bGwhPT1rLmNoaWxkJiY0IT09ay50YWcpay5jaGlsZC5yZXR1cm49ayxrPWsuY2hpbGQ7ZWxzZXtpZihrPT09aClicmVhayBhO2Zvcig7bnVsbD09PWsuc2libGluZzspe2lmKG51bGw9PT1rLnJldHVybnx8ay5yZXR1cm49PT1oKWJyZWFrIGE7az1rLnJldHVybn1rLnNpYmxpbmcucmV0dXJuPWsucmV0dXJuO2s9ay5zaWJsaW5nfWY/KGc9ZSxoPWMuc3RhdGVOb2RlLFxuOD09PWcubm9kZVR5cGU/Zy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGgpOmcucmVtb3ZlQ2hpbGQoaCkpOmUucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWMudGFnKXtpZihudWxsIT09Yy5jaGlsZCl7ZT1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Y9ITA7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoYmooYSxjKSxudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm47ND09PWMudGFnJiYoZD0hMSl9Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBpaihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6dmFyIGM9Yi51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkbyAzPT09KGQudGFnJjMpJiYoYT1kLmRlc3Ryb3ksZC5kZXN0cm95PXZvaWQgMCx2b2lkIDAhPT1hJiZhKCkpLGQ9ZC5uZXh0O3doaWxlKGQhPT1jKX1yZXR1cm47Y2FzZSAxOnJldHVybjtjYXNlIDU6Yz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXtkPWIubWVtb2l6ZWRQcm9wczt2YXIgZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1t4Zl09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmJGEoYyxkKTt3YihhLGUpO2I9d2IoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9XG4yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/dGIoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP29iKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9wYihjLGgpOnFhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjphYihjLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGMsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmE9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsZj1kLnZhbHVlLG51bGwhPWY/ZmIoYywhIWQubXVsdGlwbGUsZiwhMSk6YSE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP2ZiKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpmYihjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fXJldHVybjtjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPVxuYi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yz1iLnN0YXRlTm9kZTtjLmh5ZHJhdGUmJihjLmh5ZHJhdGU9ITEsQ2MoYy5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSYmKGpqPU8oKSxhaihiLmNoaWxkLCEwKSk7a2ooYik7cmV0dXJuO2Nhc2UgMTk6a2ooYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJuO2Nhc2UgMjM6Y2FzZSAyNDphaihiLG51bGwhPT1iLm1lbW9pemVkU3RhdGUpO3JldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31mdW5jdGlvbiBraihhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBVaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWxqLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gbWooYSxiKXtyZXR1cm4gbnVsbCE9PWEmJihhPWEubWVtb2l6ZWRTdGF0ZSxudWxsPT09YXx8bnVsbCE9PWEuZGVoeWRyYXRlZCk/KGI9Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1iJiZudWxsPT09Yi5kZWh5ZHJhdGVkKTohMX12YXIgbmo9TWF0aC5jZWlsLG9qPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIscGo9cmEuUmVhY3RDdXJyZW50T3duZXIsWD0wLFU9bnVsbCxZPW51bGwsVz0wLHFqPTAscmo9QmYoMCksVj0wLHNqPW51bGwsdGo9MCxEZz0wLEhpPTAsdWo9MCx2aj1udWxsLGpqPTAsSmk9SW5maW5pdHk7ZnVuY3Rpb24gd2ooKXtKaT1PKCkrNTAwfXZhciBaPW51bGwsUWk9ITEsUmk9bnVsbCxUaT1udWxsLHhqPSExLHlqPW51bGwsemo9OTAsQWo9W10sQmo9W10sQ2o9bnVsbCxEaj0wLEVqPW51bGwsRmo9LTEsR2o9MCxIaj0wLElqPW51bGwsSmo9ITE7ZnVuY3Rpb24gSGcoKXtyZXR1cm4gMCE9PShYJjQ4KT9PKCk6LTEhPT1Gaj9GajpGaj1PKCl9XG5mdW5jdGlvbiBJZyhhKXthPWEubW9kZTtpZigwPT09KGEmMikpcmV0dXJuIDE7aWYoMD09PShhJjQpKXJldHVybiA5OT09PWVnKCk/MToyOzA9PT1HaiYmKEdqPXRqKTtpZigwIT09a2cudHJhbnNpdGlvbil7MCE9PUhqJiYoSGo9bnVsbCE9PXZqP3ZqLnBlbmRpbmdMYW5lczowKTthPUdqO3ZhciBiPTQxODYxMTImfkhqO2ImPS1iOzA9PT1iJiYoYT00MTg2MTEyJn5hLGI9YSYtYSwwPT09YiYmKGI9ODE5MikpO3JldHVybiBifWE9ZWcoKTswIT09KFgmNCkmJjk4PT09YT9hPVhjKDEyLEdqKTooYT1TYyhhKSxhPVhjKGEsR2opKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpnKGEsYixjKXtpZig1MDxEail0aHJvdyBEaj0wLEVqPW51bGwsRXJyb3IoeSgxODUpKTthPUtqKGEsYik7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7JGMoYSxiLGMpO2E9PT1VJiYoSGl8PWIsND09PVYmJklpKGEsVykpO3ZhciBkPWVnKCk7MT09PWI/MCE9PShYJjgpJiYwPT09KFgmNDgpP0xqKGEpOihNaihhLGMpLDA9PT1YJiYod2ooKSxpZygpKSk6KDA9PT0oWCY0KXx8OTghPT1kJiY5OSE9PWR8fChudWxsPT09Q2o/Q2o9bmV3IFNldChbYV0pOkNqLmFkZChhKSksTWooYSxjKSk7dmo9YX1mdW5jdGlvbiBLaihhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9XG5mdW5jdGlvbiBNaihhLGIpe2Zvcih2YXIgYz1hLmNhbGxiYWNrTm9kZSxkPWEuc3VzcGVuZGVkTGFuZXMsZT1hLnBpbmdlZExhbmVzLGY9YS5leHBpcmF0aW9uVGltZXMsZz1hLnBlbmRpbmdMYW5lczswPGc7KXt2YXIgaD0zMS1WYyhnKSxrPTE8PGgsbD1mW2hdO2lmKC0xPT09bCl7aWYoMD09PShrJmQpfHwwIT09KGsmZSkpe2w9YjtSYyhrKTt2YXIgbj1GO2ZbaF09MTA8PW4/bCsyNTA6Njw9bj9sKzVFMzotMX19ZWxzZSBsPD1iJiYoYS5leHBpcmVkTGFuZXN8PWspO2cmPX5rfWQ9VWMoYSxhPT09VT9XOjApO2I9RjtpZigwPT09ZCludWxsIT09YyYmKGMhPT1aZiYmUGYoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MCk7ZWxzZXtpZihudWxsIT09Yyl7aWYoYS5jYWxsYmFja1ByaW9yaXR5PT09YilyZXR1cm47YyE9PVpmJiZQZihjKX0xNT09PWI/KGM9TGouYmluZChudWxsLGEpLG51bGw9PT1hZz8oYWc9W2NdLGJnPU9mKFVmLGpnKSk6YWcucHVzaChjKSxcbmM9WmYpOjE0PT09Yj9jPWhnKDk5LExqLmJpbmQobnVsbCxhKSk6KGM9VGMoYiksYz1oZyhjLE5qLmJpbmQobnVsbCxhKSkpO2EuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gTmooYSl7Rmo9LTE7SGo9R2o9MDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGI9YS5jYWxsYmFja05vZGU7aWYoT2ooKSYmYS5jYWxsYmFja05vZGUhPT1iKXJldHVybiBudWxsO3ZhciBjPVVjKGEsYT09PVU/VzowKTtpZigwPT09YylyZXR1cm4gbnVsbDt2YXIgZD1jO3ZhciBlPVg7WHw9MTY7dmFyIGY9UGooKTtpZihVIT09YXx8VyE9PWQpd2ooKSxRaihhLGQpO2RvIHRyeXtSaigpO2JyZWFrfWNhdGNoKGgpe1NqKGEsaCl9d2hpbGUoMSk7cWcoKTtvai5jdXJyZW50PWY7WD1lO251bGwhPT1ZP2Q9MDooVT1udWxsLFc9MCxkPVYpO2lmKDAhPT0odGomSGkpKVFqKGEsMCk7ZWxzZSBpZigwIT09ZCl7Mj09PWQmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYz1XYyhhKSwwIT09YyYmKGQ9VGooYSxjKSkpO2lmKDE9PT1kKXRocm93IGI9c2osUWooYSwwKSxJaShhLGMpLE1qKGEsTygpKSxiO2EuZmluaXNoZWRXb3JrPVxuYS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9Yztzd2l0Y2goZCl7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcih5KDM0NSkpO2Nhc2UgMjpVaihhKTticmVhaztjYXNlIDM6SWkoYSxjKTtpZigoYyY2MjkxNDU2MCk9PT1jJiYoZD1qais1MDAtTygpLDEwPGQpKXtpZigwIT09VWMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmYykhPT1jKXtIZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGQpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNDpJaShhLGMpO2lmKChjJjQxODYxMTIpPT09YylicmVhaztkPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGM7KXt2YXIgZz0zMS1WYyhjKTtmPTE8PGc7Zz1kW2ddO2c+ZSYmKGU9Zyk7YyY9fmZ9Yz1lO2M9TygpLWM7Yz0oMTIwPmM/MTIwOjQ4MD5jPzQ4MDoxMDgwPmM/MTA4MDoxOTIwPmM/MTkyMDozRTM+Yz8zRTM6NDMyMD5cbmM/NDMyMDoxOTYwKm5qKGMvMTk2MCkpLWM7aWYoMTA8Yyl7YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxjKTticmVha31VaihhKTticmVhaztjYXNlIDU6VWooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMyOSkpO319TWooYSxPKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWI/TmouYmluZChudWxsLGEpOm51bGx9ZnVuY3Rpb24gSWkoYSxiKXtiJj1+dWo7YiY9fkhpO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtVmMoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fVxuZnVuY3Rpb24gTGooYSl7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO09qKCk7aWYoYT09PVUmJjAhPT0oYS5leHBpcmVkTGFuZXMmVykpe3ZhciBiPVc7dmFyIGM9VGooYSxiKTswIT09KHRqJkhpKSYmKGI9VWMoYSxiKSxjPVRqKGEsYikpfWVsc2UgYj1VYyhhLDApLGM9VGooYSxiKTswIT09YS50YWcmJjI9PT1jJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGI9V2MoYSksMCE9PWImJihjPVRqKGEsYikpKTtpZigxPT09Yyl0aHJvdyBjPXNqLFFqKGEsMCksSWkoYSxiKSxNaihhLE8oKSksYzthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1VqKGEpO01qKGEsTygpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFZqKCl7aWYobnVsbCE9PUNqKXt2YXIgYT1DajtDaj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhKXthLmV4cGlyZWRMYW5lc3w9MjQmYS5wZW5kaW5nTGFuZXM7TWooYSxPKCkpfSl9aWcoKX1mdW5jdGlvbiBXaihhLGIpe3ZhciBjPVg7WHw9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBYaihhLGIpe3ZhciBjPVg7WCY9LTI7WHw9ODt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBuaShhLGIpe0kocmoscWopO3FqfD1iO3RqfD1ifWZ1bmN0aW9uIEtpKCl7cWo9cmouY3VycmVudDtIKHJqKX1cbmZ1bmN0aW9uIFFqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLHBmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJkdmKCk7YnJlYWs7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7YnJlYWs7Y2FzZSA1OmhoKGQpO2JyZWFrO2Nhc2UgNDpmaCgpO2JyZWFrO2Nhc2UgMTM6SChQKTticmVhaztjYXNlIDE5OkgoUCk7YnJlYWs7Y2FzZSAxMDpyZyhkKTticmVhaztjYXNlIDIzOmNhc2UgMjQ6S2koKX1jPWMucmV0dXJufVU9YTtZPVRnKGEuY3VycmVudCxudWxsKTtXPXFqPXRqPWI7Vj0wO3NqPW51bGw7dWo9SGk9RGc9MH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG97dmFyIGM9WTt0cnl7cWcoKTt2aC5jdXJyZW50PUdoO2lmKHloKXtmb3IodmFyIGQ9Ui5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH15aD0hMX14aD0wO1Q9Uz1SPW51bGw7emg9ITE7cGouY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Y9MTtzaj1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVc7aC5mbGFnc3w9MjA0ODtoLmZpcnN0RWZmZWN0PWgubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWs7aWYoMD09PShoLm1vZGUmMikpe3ZhciBuPWguYWx0ZXJuYXRlO24/KGgudXBkYXRlUXVldWU9bi51cGRhdGVRdWV1ZSxoLm1lbW9pemVkU3RhdGU9bi5tZW1vaXplZFN0YXRlLGgubGFuZXM9bi5sYW5lcyk6XG4oaC51cGRhdGVRdWV1ZT1udWxsLGgubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgQT0wIT09KFAuY3VycmVudCYxKSxwPWc7ZG97dmFyIEM7aWYoQz0xMz09PXAudGFnKXt2YXIgeD1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXgpQz1udWxsIT09eC5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIHc9cC5tZW1vaXplZFByb3BzO0M9dm9pZCAwPT09dy5mYWxsYmFjaz8hMTohMCE9PXcudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6QT8hMTohMH19aWYoQyl7dmFyIHo9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09eil7dmFyIHU9bmV3IFNldDt1LmFkZChsKTtwLnVwZGF0ZVF1ZXVlPXV9ZWxzZSB6LmFkZChsKTtpZigwPT09KHAubW9kZSYyKSl7cC5mbGFnc3w9NjQ7aC5mbGFnc3w9MTYzODQ7aC5mbGFncyY9LTI5ODE7aWYoMT09PWgudGFnKWlmKG51bGw9PT1oLmFsdGVybmF0ZSloLnRhZz0xNztlbHNle3ZhciB0PXpnKC0xLDEpO3QudGFnPTI7QWcoaCx0KX1oLmxhbmVzfD0xO2JyZWFrIGF9az1cbnZvaWQgMDtoPWI7dmFyIHE9Zi5waW5nQ2FjaGU7bnVsbD09PXE/KHE9Zi5waW5nQ2FjaGU9bmV3IE9pLGs9bmV3IFNldCxxLnNldChsLGspKTooaz1xLmdldChsKSx2b2lkIDA9PT1rJiYoaz1uZXcgU2V0LHEuc2V0KGwsaykpKTtpZighay5oYXMoaCkpe2suYWRkKGgpO3ZhciB2PVlqLmJpbmQobnVsbCxmLGwsaCk7bC50aGVuKHYsdil9cC5mbGFnc3w9NDA5NjtwLmxhbmVzPWI7YnJlYWsgYX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKTtrPUVycm9yKChSYShoLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIpfTUhPT1WJiYoVj0yKTtrPU1pKGssaCk7cD1cbmc7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6Zj1rO3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgSj1QaShwLGYsYik7QmcocCxKKTticmVhayBhO2Nhc2UgMTpmPWs7dmFyIEs9cC50eXBlLFE9cC5zdGF0ZU5vZGU7aWYoMD09PShwLmZsYWdzJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBLLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PVEmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBRLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKFEpKSkpe3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgTD1TaShwLGYsYik7QmcocCxMKTticmVhayBhfX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKX1aaihjKX1jYXRjaCh2YSl7Yj12YTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfVxuZnVuY3Rpb24gUGooKXt2YXIgYT1vai5jdXJyZW50O29qLmN1cnJlbnQ9R2g7cmV0dXJuIG51bGw9PT1hP0doOmF9ZnVuY3Rpb24gVGooYSxiKXt2YXIgYz1YO1h8PTE2O3ZhciBkPVBqKCk7VT09PWEmJlc9PT1ifHxRaihhLGIpO2RvIHRyeXthaygpO2JyZWFrfWNhdGNoKGUpe1NqKGEsZSl9d2hpbGUoMSk7cWcoKTtYPWM7b2ouY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHkoMjYxKSk7VT1udWxsO1c9MDtyZXR1cm4gVn1mdW5jdGlvbiBhaygpe2Zvcig7bnVsbCE9PVk7KWJrKFkpfWZ1bmN0aW9uIFJqKCl7Zm9yKDtudWxsIT09WSYmIVFmKCk7KWJrKFkpfWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWNrKGEuYWx0ZXJuYXRlLGEscWopO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9aaihhKTpZPWI7cGouY3VycmVudD1udWxsfVxuZnVuY3Rpb24gWmooYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYyMDQ4KSl7Yz1HaShjLGIscWopO2lmKG51bGwhPT1jKXtZPWM7cmV0dXJufWM9YjtpZigyNCE9PWMudGFnJiYyMyE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHwwIT09KHFqJjEwNzM3NDE4MjQpfHwwPT09KGMubW9kZSY0KSl7Zm9yKHZhciBkPTAsZT1jLmNoaWxkO251bGwhPT1lOylkfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxlPWUuc2libGluZztjLmNoaWxkTGFuZXM9ZH1udWxsIT09YSYmMD09PShhLmZsYWdzJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLG51bGwhPT1iLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yi5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCksMTxiLmZsYWdzJiYobnVsbCE9PVxuYS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWI6YS5maXJzdEVmZmVjdD1iLGEubGFzdEVmZmVjdD1iKSl9ZWxzZXtjPUxpKGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0yMDQ3O1k9YztyZXR1cm59bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZmxhZ3N8PTIwNDgpfWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09ViYmKFY9NSl9ZnVuY3Rpb24gVWooYSl7dmFyIGI9ZWcoKTtnZyg5OSxkay5iaW5kKG51bGwsYSxiKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkayhhLGIpe2RvIE9qKCk7d2hpbGUobnVsbCE9PXlqKTtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcms7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHkoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDt2YXIgZD1jLmxhbmVzfGMuY2hpbGRMYW5lcyxlPWQsZj1hLnBlbmRpbmdMYW5lcyZ+ZTthLnBlbmRpbmdMYW5lcz1lO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWU7YS5tdXRhYmxlUmVhZExhbmVzJj1lO2EuZW50YW5nbGVkTGFuZXMmPWU7ZT1hLmVudGFuZ2xlbWVudHM7Zm9yKHZhciBnPWEuZXZlbnRUaW1lcyxoPWEuZXhwaXJhdGlvblRpbWVzOzA8Zjspe3ZhciBrPTMxLVZjKGYpLGw9MTw8aztlW2tdPTA7Z1trXT0tMTtoW2tdPS0xO2YmPX5sfW51bGwhPT1cbkNqJiYwPT09KGQmMjQpJiZDai5oYXMoYSkmJkNqLmRlbGV0ZShhKTthPT09VSYmKFk9VT1udWxsLFc9MCk7MTxjLmZsYWdzP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZD1jLmZpcnN0RWZmZWN0KTpkPWM6ZD1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1kKXtlPVg7WHw9MzI7cGouY3VycmVudD1udWxsO2tmPWZkO2c9TmUoKTtpZihPZShnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyloPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOmlmKGg9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93LChsPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpKSYmMCE9PWwucmFuZ2VDb3VudCl7aD1sLmFuY2hvck5vZGU7Zj1sLmFuY2hvck9mZnNldDtrPWwuZm9jdXNOb2RlO2w9bC5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxrLm5vZGVUeXBlfWNhdGNoKHZhKXtoPW51bGw7XG5icmVhayBhfXZhciBuPTAsQT0tMSxwPS0xLEM9MCx4PTAsdz1nLHo9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB1Ozspe3chPT1ofHwwIT09ZiYmMyE9PXcubm9kZVR5cGV8fChBPW4rZik7dyE9PWt8fDAhPT1sJiYzIT09dy5ub2RlVHlwZXx8KHA9bitsKTszPT09dy5ub2RlVHlwZSYmKG4rPXcubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh1PXcuZmlyc3RDaGlsZCkpYnJlYWs7ej13O3c9dX1mb3IoOzspe2lmKHc9PT1nKWJyZWFrIGI7ej09PWgmJisrQz09PWYmJihBPW4pO3o9PT1rJiYrK3g9PT1sJiYocD1uKTtpZihudWxsIT09KHU9dy5uZXh0U2libGluZykpYnJlYWs7dz16O3o9dy5wYXJlbnROb2RlfXc9dX1oPS0xPT09QXx8LTE9PT1wP251bGw6e3N0YXJ0OkEsZW5kOnB9fWVsc2UgaD1udWxsO2g9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1udWxsO2xmPXtmb2N1c2VkRWxlbTpnLHNlbGVjdGlvblJhbmdlOmh9O2ZkPSExO0lqPW51bGw7Smo9ITE7Wj1kO2RvIHRyeXtlaygpfWNhdGNoKHZhKXtpZihudWxsPT09XG5aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO0lqPW51bGw7Wj1kO2RvIHRyeXtmb3IoZz1hO251bGwhPT1aOyl7dmFyIHQ9Wi5mbGFnczt0JjE2JiZwYihaLnN0YXRlTm9kZSxcIlwiKTtpZih0JjEyOCl7dmFyIHE9Wi5hbHRlcm5hdGU7aWYobnVsbCE9PXEpe3ZhciB2PXEucmVmO251bGwhPT12JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHY/dihudWxsKTp2LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaCh0JjEwMzgpe2Nhc2UgMjpmaihaKTtaLmZsYWdzJj0tMzticmVhaztjYXNlIDY6ZmooWik7Wi5mbGFncyY9LTM7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSAxMDI0OlouZmxhZ3MmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpaLmZsYWdzJj0tMTAyNTtpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDQ6aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA4Omg9WjtjaihnLGgpO3ZhciBKPWguYWx0ZXJuYXRlO2RqKGgpO251bGwhPT1cbkomJmRqKEopfVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7dj1sZjtxPU5lKCk7dD12LmZvY3VzZWRFbGVtO2c9di5zZWxlY3Rpb25SYW5nZTtpZihxIT09dCYmdCYmdC5vd25lckRvY3VtZW50JiZNZSh0Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHQpKXtudWxsIT09ZyYmT2UodCkmJihxPWcuc3RhcnQsdj1nLmVuZCx2b2lkIDA9PT12JiYodj1xKSxcInNlbGVjdGlvblN0YXJ0XCJpbiB0Pyh0LnNlbGVjdGlvblN0YXJ0PXEsdC5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odix0LnZhbHVlLmxlbmd0aCkpOih2PShxPXQub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZxLmRlZmF1bHRWaWV3fHx3aW5kb3csdi5nZXRTZWxlY3Rpb24mJih2PXYuZ2V0U2VsZWN0aW9uKCksaD10LnRleHRDb250ZW50Lmxlbmd0aCxKPU1hdGgubWluKGcuc3RhcnQsaCksZz12b2lkIDA9PT1cbmcuZW5kP0o6TWF0aC5taW4oZy5lbmQsaCksIXYuZXh0ZW5kJiZKPmcmJihoPWcsZz1KLEo9aCksaD1MZSh0LEopLGY9TGUodCxnKSxoJiZmJiYoMSE9PXYucmFuZ2VDb3VudHx8di5hbmNob3JOb2RlIT09aC5ub2RlfHx2LmFuY2hvck9mZnNldCE9PWgub2Zmc2V0fHx2LmZvY3VzTm9kZSE9PWYubm9kZXx8di5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSYmKHE9cS5jcmVhdGVSYW5nZSgpLHEuc2V0U3RhcnQoaC5ub2RlLGgub2Zmc2V0KSx2LnJlbW92ZUFsbFJhbmdlcygpLEo+Zz8odi5hZGRSYW5nZShxKSx2LmV4dGVuZChmLm5vZGUsZi5vZmZzZXQpKToocS5zZXRFbmQoZi5ub2RlLGYub2Zmc2V0KSx2LmFkZFJhbmdlKHEpKSkpKSk7cT1bXTtmb3Iodj10O3Y9di5wYXJlbnROb2RlOykxPT09di5ub2RlVHlwZSYmcS5wdXNoKHtlbGVtZW50OnYsbGVmdDp2LnNjcm9sbExlZnQsdG9wOnYuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHQuZm9jdXMmJnQuZm9jdXMoKTtmb3IodD1cbjA7dDxxLmxlbmd0aDt0Kyspdj1xW3RdLHYuZWxlbWVudC5zY3JvbGxMZWZ0PXYubGVmdCx2LmVsZW1lbnQuc2Nyb2xsVG9wPXYudG9wfWZkPSEha2Y7bGY9a2Y9bnVsbDthLmN1cnJlbnQ9YztaPWQ7ZG8gdHJ5e2Zvcih0PWE7bnVsbCE9PVo7KXt2YXIgSz1aLmZsYWdzO0smMzYmJllpKHQsWi5hbHRlcm5hdGUsWik7aWYoSyYxMjgpe3E9dm9pZCAwO3ZhciBRPVoucmVmO2lmKG51bGwhPT1RKXt2YXIgTD1aLnN0YXRlTm9kZTtzd2l0Y2goWi50YWcpe2Nhc2UgNTpxPUw7YnJlYWs7ZGVmYXVsdDpxPUx9XCJmdW5jdGlvblwiPT09dHlwZW9mIFE/UShxKTpRLmN1cnJlbnQ9cX19Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtaPW51bGw7JGYoKTtYPWV9ZWxzZSBhLmN1cnJlbnQ9YztpZih4ail4aj0hMSx5aj1hLHpqPWI7ZWxzZSBmb3IoWj1kO251bGwhPT1aOyliPVxuWi5uZXh0RWZmZWN0LFoubmV4dEVmZmVjdD1udWxsLFouZmxhZ3MmOCYmKEs9WixLLnNpYmxpbmc9bnVsbCxLLnN0YXRlTm9kZT1udWxsKSxaPWI7ZD1hLnBlbmRpbmdMYW5lczswPT09ZCYmKFRpPW51bGwpOzE9PT1kP2E9PT1Faj9EaisrOihEaj0wLEVqPWEpOkRqPTA7Yz1jLnN0YXRlTm9kZTtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJSb290KXRyeXtNZi5vbkNvbW1pdEZpYmVyUm9vdChMZixjLHZvaWQgMCw2ND09PShjLmN1cnJlbnQuZmxhZ3MmNjQpKX1jYXRjaCh2YSl7fU1qKGEsTygpKTtpZihRaSl0aHJvdyBRaT0hMSxhPVJpLFJpPW51bGwsYTtpZigwIT09KFgmOCkpcmV0dXJuIG51bGw7aWcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGVrKCl7Zm9yKDtudWxsIT09Wjspe3ZhciBhPVouYWx0ZXJuYXRlO0pqfHxudWxsPT09SWp8fCgwIT09KFouZmxhZ3MmOCk/ZGMoWixJaikmJihKaj0hMCk6MTM9PT1aLnRhZyYmbWooYSxaKSYmZGMoWixJaikmJihKaj0hMCkpO3ZhciBiPVouZmxhZ3M7MCE9PShiJjI1NikmJlhpKGEsWik7MD09PShiJjUxMil8fHhqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpO1o9Wi5uZXh0RWZmZWN0fX1mdW5jdGlvbiBPaigpe2lmKDkwIT09emope3ZhciBhPTk3PHpqPzk3OnpqO3pqPTkwO3JldHVybiBnZyhhLGZrKX1yZXR1cm4hMX1mdW5jdGlvbiAkaShhLGIpe0FqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1mdW5jdGlvbiBaaShhLGIpe0JqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1cbmZ1bmN0aW9uIGZrKCl7aWYobnVsbD09PXlqKXJldHVybiExO3ZhciBhPXlqO3lqPW51bGw7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMzMSkpO3ZhciBiPVg7WHw9MzI7dmFyIGM9Qmo7Qmo9W107Zm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKz0yKXt2YXIgZT1jW2RdLGY9Y1tkKzFdLGc9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcpdHJ5e2coKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWM9QWo7QWo9W107Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrPTIpe2U9Y1tkXTtmPWNbZCsxXTt0cnl7dmFyIGg9ZS5jcmVhdGU7ZS5kZXN0cm95PWgoKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWZvcihoPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09aDspYT1oLm5leHRFZmZlY3QsaC5uZXh0RWZmZWN0PW51bGwsaC5mbGFncyY4JiYoaC5zaWJsaW5nPVxubnVsbCxoLnN0YXRlTm9kZT1udWxsKSxoPWE7WD1iO2lnKCk7cmV0dXJuITB9ZnVuY3Rpb24gZ2soYSxiLGMpe2I9TWkoYyxiKTtiPVBpKGEsYiwxKTtBZyhhLGIpO2I9SGcoKTthPUtqKGEsMSk7bnVsbCE9PWEmJigkYyhhLDEsYiksTWooYSxiKSl9XG5mdW5jdGlvbiBXaShhLGIpe2lmKDM9PT1hLnRhZylnayhhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe2drKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl7YT1NaShiLGEpO3ZhciBlPVNpKGMsYSwxKTtBZyhjLGUpO2U9SGcoKTtjPUtqKGMsMSk7aWYobnVsbCE9PWMpJGMoYywxLGUpLE1qKGMsZSk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpdHJ5e2QuY29tcG9uZW50RGlkQ2F0Y2goYixhKX1jYXRjaChmKXt9YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gWWooYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUhnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO1U9PT1hJiYoVyZjKT09PWMmJig0PT09Vnx8Mz09PVYmJihXJjYyOTE0NTYwKT09PVcmJjUwMD5PKCktamo/UWooYSwwKTp1anw9Yyk7TWooYSxiKX1mdW5jdGlvbiBsaihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPWEubW9kZSwwPT09KGImMik/Yj0xOjA9PT0oYiY0KT9iPTk5PT09ZWcoKT8xOjI6KDA9PT1HaiYmKEdqPXRqKSxiPVljKDYyOTE0NTYwJn5HaiksMD09PWImJihiPTQxOTQzMDQpKSk7Yz1IZygpO2E9S2ooYSxiKTtudWxsIT09YSYmKCRjKGEsYixjKSxNaihhLGMpKX12YXIgY2s7XG5jaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5sYW5lcztpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8Ti5jdXJyZW50KXVnPSEwO2Vsc2UgaWYoMCE9PShjJmQpKXVnPTAhPT0oYS5mbGFncyYxNjM4NCk/ITA6ITE7ZWxzZXt1Zz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpyaShiKTtzaCgpO2JyZWFrO2Nhc2UgNTpnaChiKTticmVhaztjYXNlIDE6RmYoYi50eXBlKSYmSmYoYik7YnJlYWs7Y2FzZSA0OmVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTt2YXIgZT1iLnR5cGUuX2NvbnRleHQ7SShtZyxlLl9jdXJyZW50VmFsdWUpO2UuX2N1cnJlbnRWYWx1ZT1kO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHRpKGEsYixjKTtJKFAsUC5jdXJyZW50JjEpO2I9aGkoYSxiLGMpO3JldHVybiBudWxsIT09XG5iP2Iuc2libGluZzpudWxsfUkoUCxQLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZiLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyY2NCkpe2lmKGQpcmV0dXJuIEFpKGEsYixjKTtiLmZsYWdzfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0koUCxQLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIGIubGFuZXM9MCxtaShhLGIsYyl9cmV0dXJuIGhpKGEsYixjKX1lbHNlIHVnPSExO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9RWYoYixNLmN1cnJlbnQpO3RnKGIsYyk7ZT1DaChudWxsLGIsZCxhLGUsYyk7Yi5mbGFnc3w9MTtpZihcIm9iamVjdFwiPT09XG50eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoRmYoZCkpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3hnKGIpO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZHZyhiLGQsZyxhKTtlLnVwZGF0ZXI9S2c7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFscz1iO09nKGIsZCxhLGMpO2I9cWkobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsZmkobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO2E6e251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO1xuYT1iLnBlbmRpbmdQcm9wcztmPWUuX2luaXQ7ZT1mKGUuX3BheWxvYWQpO2IudHlwZT1lO2Y9Yi50YWc9aGsoZSk7YT1sZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1saShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9cGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1naShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWlpKG51bGwsYixlLGxnKGUudHlwZSxhKSxkLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxsaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxwaShhLGIsZCxlLGMpO2Nhc2UgMzpyaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHkoMjgyKSk7XG5kPWIucGVuZGluZ1Byb3BzO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7eWcoYSxiKTtDZyhiLGQsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKXNoKCksYj1oaShhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGY9ZS5oeWRyYXRlKWtoPXJmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksamg9YixmPWxoPSEwO2lmKGYpe2E9ZS5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhO2lmKG51bGwhPWEpZm9yKGU9MDtlPGEubGVuZ3RoO2UrPTIpZj1hW2VdLGYuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9YVtlKzFdLHRoLnB1c2goZik7Yz1aZyhiLG51bGwsZCxjKTtmb3IoYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3wxMDI0LGM9Yy5zaWJsaW5nfWVsc2UgZmkoYSxiLGQsYyksc2goKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBnaChiKSxudWxsPT09YSYmXG5waChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLG5mKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZuZihkLGYpJiYoYi5mbGFnc3w9MTYpLG9pKGEsYiksZmkoYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZwaChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHRpKGEsYixjKTtjYXNlIDQ6cmV0dXJuIGVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVlnKGIsbnVsbCxkLGMpOmZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxnaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG5jKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7dmFyIGg9Yi50eXBlLl9jb250ZXh0O0kobWcsaC5fY3VycmVudFZhbHVlKTtoLl9jdXJyZW50VmFsdWU9ZjtpZihudWxsIT09ZylpZihoPWcudmFsdWUsZj1IZShoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDAsMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhTi5jdXJyZW50KXtiPWhpKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPVxuay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPXpnKC0xLGMmLWMpLGwudGFnPTIsQWcoaCxsKSk7aC5sYW5lc3w9YztsPWguYWx0ZXJuYXRlO251bGwhPT1sJiYobC5sYW5lc3w9Yyk7c2coaC5yZXR1cm4sYyk7ay5sYW5lc3w9YzticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1nfWZpKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLHRnKGIsYyksZT12ZyhlLFxuZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmZsYWdzfD0xLGZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1sZyhlLGIucGVuZGluZ1Byb3BzKSxmPWxnKGUudHlwZSxmKSxpaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4ga2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksYi50YWc9MSxGZihkKT8oYT0hMCxKZihiKSk6YT0hMSx0ZyhiLGMpLE1nKGIsZCxlKSxPZyhiLGQsZSxjKSxxaShudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIEFpKGEsYixjKTtjYXNlIDIzOnJldHVybiBtaShhLGIsYyk7Y2FzZSAyNDpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7XG59O2Z1bmN0aW9uIGlrKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5mbGFncz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBuaChhLGIsYyxkKXtyZXR1cm4gbmV3IGlrKGEsYixjLGQpfWZ1bmN0aW9uIGppKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiBoayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gamkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PUFhKXJldHVybiAxMTtpZihhPT09RGEpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gVGcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1uaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBWZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpamkoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuIFhnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgSGE6Zz04O2V8PTE2O2JyZWFrO2Nhc2Ugd2E6Zz04O2V8PTE7YnJlYWs7Y2FzZSB4YTpyZXR1cm4gYT1uaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPXhhLGEudHlwZT14YSxhLmxhbmVzPWYsYTtjYXNlIEJhOnJldHVybiBhPW5oKDEzLGMsYixlKSxhLnR5cGU9QmEsYS5lbGVtZW50VHlwZT1CYSxhLmxhbmVzPWYsYTtjYXNlIENhOnJldHVybiBhPW5oKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUNhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHZpKGMsZSxmLGIpO2Nhc2UgSmE6cmV0dXJuIGE9bmgoMjQsYyxiLGUpLGEuZWxlbWVudFR5cGU9SmEsYS5sYW5lcz1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09XG50eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgeWE6Zz0xMDticmVhayBhO2Nhc2UgemE6Zz05O2JyZWFrIGE7Y2FzZSBBYTpnPTExO2JyZWFrIGE7Y2FzZSBEYTpnPTE0O2JyZWFrIGE7Y2FzZSBFYTpnPTE2O2Q9bnVsbDticmVhayBhO2Nhc2UgRmE6Zz0yMjticmVhayBhfXRocm93IEVycm9yKHkoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9bmgoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBYZyhhLGIsYyxkKXthPW5oKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiB2aShhLGIsYyxkKXthPW5oKDIzLGEsZCxiKTthLmVsZW1lbnRUeXBlPUlhO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBVZyhhLGIsYyl7YT1uaCg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBXZyhhLGIsYyl7Yj1uaCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGprKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPVpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPVpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPVpjKDApO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1udWxsfVxuZnVuY3Rpb24ga2soYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp0YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGxrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUhnKCksZz1JZyhlKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbHM7Yjp7aWYoWmIoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihGZihoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHkoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEZmKGspKXtjPUlmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPUNmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9emcoZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09XG5kJiYoYi5jYWxsYmFjaz1kKTtBZyhlLGIpO0pnKGUsZyxmKTtyZXR1cm4gZ31mdW5jdGlvbiBtayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIG5rKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBvayhhLGIpe25rKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZuayhhLGIpfWZ1bmN0aW9uIHBrKCl7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBxayhhLGIsYyl7dmFyIGQ9bnVsbCE9YyYmbnVsbCE9Yy5oeWRyYXRpb25PcHRpb25zJiZjLmh5ZHJhdGlvbk9wdGlvbnMubXV0YWJsZVNvdXJjZXN8fG51bGw7Yz1uZXcgamsoYSxiLG51bGwhPWMmJiEwPT09Yy5oeWRyYXRlKTtiPW5oKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtjLmN1cnJlbnQ9YjtiLnN0YXRlTm9kZT1jO3hnKGIpO2FbZmZdPWMuY3VycmVudDtjZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKXtiPWRbYV07dmFyIGU9Yi5fZ2V0VmVyc2lvbjtlPWUoYi5fc291cmNlKTtudWxsPT1jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtiLGVdOmMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGIsZSl9dGhpcy5faW50ZXJuYWxSb290PWN9XG5xay5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2xrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsbnVsbCl9O3FrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290LGI9YS5jb250YWluZXJJbmZvO2xrKG51bGwsYSxudWxsLGZ1bmN0aW9uKCl7YltmZl09bnVsbH0pfTtmdW5jdGlvbiByayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9XG5mdW5jdGlvbiBzayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IHFrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gdGsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtoLmNhbGwoYSl9fWxrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9c2soYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7ay5jYWxsKGEpfX1YaihmdW5jdGlvbigpe2xrKGIsZyxhLGUpfSl9cmV0dXJuIG1rKGcpfWVjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw0LGIpO29rKGEsNCl9fTtmYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNjcxMDg4NjQsYik7b2soYSw2NzEwODg2NCl9fTtcbmdjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCksYz1JZyhhKTtKZyhhLGMsYik7b2soYSxjKX19O2hjPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGIoKX07XG55Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmFiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1EYihkKTtpZighZSl0aHJvdyBFcnJvcih5KDkwKSk7V2EoZCk7YWIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0diPVdqO1xuSGI9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1YO1h8PTQ7dHJ5e3JldHVybiBnZyg5OCxhLmJpbmQobnVsbCxiLGMsZCxlKSl9ZmluYWxseXtYPWYsMD09PVgmJih3aigpLGlnKCkpfX07SWI9ZnVuY3Rpb24oKXswPT09KFgmNDkpJiYoVmooKSxPaigpKX07SmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO1h8PTI7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19O2Z1bmN0aW9uIHVrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIGtrKGEsYixudWxsLGMpfXZhciB2az17RXZlbnRzOltDYix1ZSxEYixFYixGYixPaix7Y3VycmVudDohMX1dfSx3az17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNy4wLjJcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHhrPXtidW5kbGVUeXBlOndrLmJ1bmRsZVR5cGUsdmVyc2lvbjp3ay52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6d2sucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp3ay5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpyYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9Y2MoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndrLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbnBrLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgeWs9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF5ay5pc0Rpc2FibGVkJiZ5ay5zdXBwb3J0c0ZpYmVyKXRyeXtMZj15ay5pbmplY3QoeGspLE1mPXlrfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD12aztleHBvcnRzLmNyZWF0ZVBvcnRhbD11aztcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IoeSgxODgpKTt0aHJvdyBFcnJvcih5KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWNjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO2lmKDAhPT0oYyY0OCkpcmV0dXJuIGEoYik7WHw9MTt0cnl7aWYoYSlyZXR1cm4gZ2coOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7WD1jLGlnKCl9fTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIXJrKGEpKXRocm93IEVycm9yKHkoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhYaihmdW5jdGlvbigpe3RrKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtmZl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVdqO2V4cG9ydHMudW5zdGFibGVfY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHVrKGEsYiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCl9O1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighcmsoYykpdGhyb3cgRXJyb3IoeSgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcih5KDM4KSk7cmV0dXJuIHRrKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjJcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsInZhciBuYT1PYmplY3QuY3JlYXRlLFllPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSxhYT1PYmplY3QuZ2V0UHJvdG90eXBlT2Ysb2E9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxpYT1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyx1YT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO3ZhciBwdD1yPT5ZZShyLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBwZT0ocixuKT0+KCk9PihufHxyKChuPXtleHBvcnRzOnt9fSkuZXhwb3J0cyxuKSxuLmV4cG9ydHMpLGZyPShyLG4pPT57Zm9yKHZhciB0IGluIG4pWWUocix0LHtnZXQ6blt0XSxlbnVtZXJhYmxlOiEwfSl9LHNhPShyLG4sdCk9PntpZihuJiZ0eXBlb2Ygbj09XCJvYmplY3RcInx8dHlwZW9mIG49PVwiZnVuY3Rpb25cIilmb3IobGV0IGkgb2YgaWEobikpIW9hLmNhbGwocixpKSYmaSE9PVwiZGVmYXVsdFwiJiZZZShyLGkse2dldDooKT0+bltpXSxlbnVtZXJhYmxlOiEodD11YShuLGkpKXx8dC5lbnVtZXJhYmxlfSk7cmV0dXJuIHJ9LFBlPXI9PnNhKHB0KFllKHIhPW51bGw/bmEoYWEocikpOnt9LFwiZGVmYXVsdFwiLHImJnIuX19lc01vZHVsZSYmXCJkZWZhdWx0XCJpbiByP3tnZXQ6KCk9PnIuZGVmYXVsdCxlbnVtZXJhYmxlOiEwfTp7dmFsdWU6cixlbnVtZXJhYmxlOiEwfSkpLHIpO3ZhciBtdD1wZShOPT57XCJ1c2Ugc3RyaWN0XCI7KGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9dHlwZW9mIFN5bWJvbD09XCJmdW5jdGlvblwiJiZTeW1ib2wuZm9yLG49cj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyx0PXI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixpPXI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHM9cj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsYz1yP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxkPXI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGg9cj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxtPXI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsXz1yP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsTz1yP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixMPXI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLFY9cj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxDPXI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsJD1yP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHo9cj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsWD1yP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyxRPXI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCxNPXI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O2Z1bmN0aW9uIG5lKGcpe3JldHVybiB0eXBlb2YgZz09XCJzdHJpbmdcInx8dHlwZW9mIGc9PVwiZnVuY3Rpb25cInx8Zz09PWl8fGc9PT1ffHxnPT09Y3x8Zz09PXN8fGc9PT1MfHxnPT09Vnx8dHlwZW9mIGc9PVwib2JqZWN0XCImJmchPT1udWxsJiYoZy4kJHR5cGVvZj09PSR8fGcuJCR0eXBlb2Y9PT1DfHxnLiQkdHlwZW9mPT09ZHx8Zy4kJHR5cGVvZj09PWh8fGcuJCR0eXBlb2Y9PT1PfHxnLiQkdHlwZW9mPT09WHx8Zy4kJHR5cGVvZj09PVF8fGcuJCR0eXBlb2Y9PT1NfHxnLiQkdHlwZW9mPT09eil9ZnVuY3Rpb24gWShnKXtpZih0eXBlb2YgZz09XCJvYmplY3RcIiYmZyE9PW51bGwpe3ZhciB5ZT1nLiQkdHlwZW9mO3N3aXRjaCh5ZSl7Y2FzZSBuOnZhciBnZT1nLnR5cGU7c3dpdGNoKGdlKXtjYXNlIG06Y2FzZSBfOmNhc2UgaTpjYXNlIGM6Y2FzZSBzOmNhc2UgTDpyZXR1cm4gZ2U7ZGVmYXVsdDp2YXIgQWU9Z2UmJmdlLiQkdHlwZW9mO3N3aXRjaChBZSl7Y2FzZSBoOmNhc2UgTzpjYXNlICQ6Y2FzZSBDOmNhc2UgZDpyZXR1cm4gQWU7ZGVmYXVsdDpyZXR1cm4geWV9fWNhc2UgdDpyZXR1cm4geWV9fX12YXIgRj1tLFc9XyxhZT1oLFM9ZCxQPW4sRz1PLGNlPWksZj0kLHA9Qyx3PXQsdj1jLFI9cyxJPUwsVD0hMTtmdW5jdGlvbiBBKGcpe3JldHVybiBUfHwoVD0hMCxjb25zb2xlLndhcm4oXCJUaGUgUmVhY3RJcy5pc0FzeW5jTW9kZSgpIGFsaWFzIGhhcyBiZWVuIGRlcHJlY2F0ZWQsIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gUmVhY3QgMTcrLiBVcGRhdGUgeW91ciBjb2RlIHRvIHVzZSBSZWFjdElzLmlzQ29uY3VycmVudE1vZGUoKSBpbnN0ZWFkLiBJdCBoYXMgdGhlIGV4YWN0IHNhbWUgQVBJLlwiKSksaihnKXx8WShnKT09PW19ZnVuY3Rpb24gaihnKXtyZXR1cm4gWShnKT09PV99ZnVuY3Rpb24gayhnKXtyZXR1cm4gWShnKT09PWh9ZnVuY3Rpb24gRChnKXtyZXR1cm4gWShnKT09PWR9ZnVuY3Rpb24gb2UoZyl7cmV0dXJuIHR5cGVvZiBnPT1cIm9iamVjdFwiJiZnIT09bnVsbCYmZy4kJHR5cGVvZj09PW59ZnVuY3Rpb24gWihnKXtyZXR1cm4gWShnKT09PU99ZnVuY3Rpb24gZGUoZyl7cmV0dXJuIFkoZyk9PT1pfWZ1bmN0aW9uIHdlKGcpe3JldHVybiBZKGcpPT09JH1mdW5jdGlvbiBSZShnKXtyZXR1cm4gWShnKT09PUN9ZnVuY3Rpb24gUWUoZyl7cmV0dXJuIFkoZyk9PT10fWZ1bmN0aW9uIFplKGcpe3JldHVybiBZKGcpPT09Y31mdW5jdGlvbiBrZShnKXtyZXR1cm4gWShnKT09PXN9ZnVuY3Rpb24gdWUoZyl7cmV0dXJuIFkoZyk9PT1MfU4uQXN5bmNNb2RlPUYsTi5Db25jdXJyZW50TW9kZT1XLE4uQ29udGV4dENvbnN1bWVyPWFlLE4uQ29udGV4dFByb3ZpZGVyPVMsTi5FbGVtZW50PVAsTi5Gb3J3YXJkUmVmPUcsTi5GcmFnbWVudD1jZSxOLkxhenk9ZixOLk1lbW89cCxOLlBvcnRhbD13LE4uUHJvZmlsZXI9dixOLlN0cmljdE1vZGU9UixOLlN1c3BlbnNlPUksTi5pc0FzeW5jTW9kZT1BLE4uaXNDb25jdXJyZW50TW9kZT1qLE4uaXNDb250ZXh0Q29uc3VtZXI9ayxOLmlzQ29udGV4dFByb3ZpZGVyPUQsTi5pc0VsZW1lbnQ9b2UsTi5pc0ZvcndhcmRSZWY9WixOLmlzRnJhZ21lbnQ9ZGUsTi5pc0xhenk9d2UsTi5pc01lbW89UmUsTi5pc1BvcnRhbD1RZSxOLmlzUHJvZmlsZXI9WmUsTi5pc1N0cmljdE1vZGU9a2UsTi5pc1N1c3BlbnNlPXVlLE4uaXNWYWxpZEVsZW1lbnRUeXBlPW5lLE4udHlwZU9mPVl9KSgpfSk7dmFyIGRyPXBlKCh0byx2dCk9PntcInVzZSBzdHJpY3RcIjt2dC5leHBvcnRzPW10KCl9KTt2YXIgcHI9cGUoKG5vLGd0KT0+e1widXNlIHN0cmljdFwiO3ZhciBodD1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLGxhPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksZGE9T2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtmdW5jdGlvbiBwYShyKXtpZihyPT1udWxsKXRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gT2JqZWN0KHIpfWZ1bmN0aW9uIG1hKCl7dHJ5e2lmKCFPYmplY3QuYXNzaWduKXJldHVybiExO3ZhciByPW5ldyBTdHJpbmcoXCJhYmNcIik7aWYocls1XT1cImRlXCIsT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocilbMF09PT1cIjVcIilyZXR1cm4hMTtmb3IodmFyIG49e30sdD0wO3Q8MTA7dCsrKW5bXCJfXCIrU3RyaW5nLmZyb21DaGFyQ29kZSh0KV09dDt2YXIgaT1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhuKS5tYXAoZnVuY3Rpb24oYyl7cmV0dXJuIG5bY119KTtpZihpLmpvaW4oXCJcIikhPT1cIjAxMjM0NTY3ODlcIilyZXR1cm4hMTt2YXIgcz17fTtyZXR1cm5cImFiY2RlZmdoaWprbG1ub3BxcnN0XCIuc3BsaXQoXCJcIikuZm9yRWFjaChmdW5jdGlvbihjKXtzW2NdPWN9KSxPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LHMpKS5qb2luKFwiXCIpPT09XCJhYmNkZWZnaGlqa2xtbm9wcXJzdFwifWNhdGNoKGMpe3JldHVybiExfX1ndC5leHBvcnRzPW1hKCk/T2JqZWN0LmFzc2lnbjpmdW5jdGlvbihyLG4pe2Zvcih2YXIgdCxpPXBhKHIpLHMsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspe3Q9T2JqZWN0KGFyZ3VtZW50c1tjXSk7Zm9yKHZhciBkIGluIHQpbGEuY2FsbCh0LGQpJiYoaVtkXT10W2RdKTtpZihodCl7cz1odCh0KTtmb3IodmFyIGg9MDtoPHMubGVuZ3RoO2grKylkYS5jYWxsKHQsc1toXSkmJihpW3NbaF1dPXRbc1toXV0pfX1yZXR1cm4gaX19KTt2YXIgbXI9cGUoKGFvLHl0KT0+e1widXNlIHN0cmljdFwiO3ZhciB2YT1cIlNFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEXCI7eXQuZXhwb3J0cz12YX0pO3ZhciBPdD1wZSgob28sYnQpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIHZyPWZ1bmN0aW9uKCl7fTt4dD1tcigpLExlPXt9LEV0PUZ1bmN0aW9uLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KSx2cj1mdW5jdGlvbihyKXt2YXIgbj1cIldhcm5pbmc6IFwiK3I7dHlwZW9mIGNvbnNvbGUhPVwidW5kZWZpbmVkXCImJmNvbnNvbGUuZXJyb3Iobik7dHJ5e3Rocm93IG5ldyBFcnJvcihuKX1jYXRjaCh0KXt9fTt2YXIgeHQsTGUsRXQ7ZnVuY3Rpb24gX3QocixuLHQsaSxzKXtmb3IodmFyIGMgaW4gcilpZihFdChyLGMpKXt2YXIgZDt0cnl7aWYodHlwZW9mIHJbY10hPVwiZnVuY3Rpb25cIil7dmFyIGg9RXJyb3IoKGl8fFwiUmVhY3QgY2xhc3NcIikrXCI6IFwiK3QrXCIgdHlwZSBgXCIrYytcImAgaXMgaW52YWxpZDsgaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5IGZyb20gdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLCBidXQgcmVjZWl2ZWQgYFwiK3R5cGVvZiByW2NdK1wiYC5cIik7dGhyb3cgaC5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwiLGh9ZD1yW2NdKG4sYyxpLHQsbnVsbCx4dCl9Y2F0Y2goXyl7ZD1ffWlmKGQmJiEoZCBpbnN0YW5jZW9mIEVycm9yKSYmdnIoKGl8fFwiUmVhY3QgY2xhc3NcIikrXCI6IHR5cGUgc3BlY2lmaWNhdGlvbiBvZiBcIit0K1wiIGBcIitjK1wiYCBpcyBpbnZhbGlkOyB0aGUgdHlwZSBjaGVja2VyIGZ1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhIFwiK3R5cGVvZiBkK1wiLiBZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIHBhc3MgYW4gYXJndW1lbnQgdG8gdGhlIHR5cGUgY2hlY2tlciBjcmVhdG9yIChhcnJheU9mLCBpbnN0YW5jZU9mLCBvYmplY3RPZiwgb25lT2YsIG9uZU9mVHlwZSwgYW5kIHNoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS5cIiksZCBpbnN0YW5jZW9mIEVycm9yJiYhKGQubWVzc2FnZSBpbiBMZSkpe0xlW2QubWVzc2FnZV09ITA7dmFyIG09cz9zKCk6XCJcIjt2cihcIkZhaWxlZCBcIit0K1wiIHR5cGU6IFwiK2QubWVzc2FnZSsobT8/XCJcIikpfX19X3QucmVzZXRXYXJuaW5nQ2FjaGU9ZnVuY3Rpb24oKXtMZT17fX07YnQuZXhwb3J0cz1fdH0pO3ZhciBSdD1wZSgoaW8sVHQpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIGdhPWRyKCksaGE9cHIoKSxFZT1tcigpLHd0PU90KCkseWE9RnVuY3Rpb24uY2FsbC5iaW5kKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkpLF9lPWZ1bmN0aW9uKCl7fTtfZT1mdW5jdGlvbihyKXt2YXIgbj1cIldhcm5pbmc6IFwiK3I7dHlwZW9mIGNvbnNvbGUhPVwidW5kZWZpbmVkXCImJmNvbnNvbGUuZXJyb3Iobik7dHJ5e3Rocm93IG5ldyBFcnJvcihuKX1jYXRjaCh0KXt9fTtmdW5jdGlvbiBWZSgpe3JldHVybiBudWxsfVR0LmV4cG9ydHM9ZnVuY3Rpb24ocixuKXt2YXIgdD10eXBlb2YgU3ltYm9sPT1cImZ1bmN0aW9uXCImJlN5bWJvbC5pdGVyYXRvcixpPVwiQEBpdGVyYXRvclwiO2Z1bmN0aW9uIHMoZil7dmFyIHA9ZiYmKHQmJmZbdF18fGZbaV0pO2lmKHR5cGVvZiBwPT1cImZ1bmN0aW9uXCIpcmV0dXJuIHB9dmFyIGM9XCI8PGFub255bW91cz4+XCIsZD17YXJyYXk6TyhcImFycmF5XCIpLGJvb2w6TyhcImJvb2xlYW5cIiksZnVuYzpPKFwiZnVuY3Rpb25cIiksbnVtYmVyOk8oXCJudW1iZXJcIiksb2JqZWN0Ok8oXCJvYmplY3RcIiksc3RyaW5nOk8oXCJzdHJpbmdcIiksc3ltYm9sOk8oXCJzeW1ib2xcIiksYW55OkwoKSxhcnJheU9mOlYsZWxlbWVudDpDKCksZWxlbWVudFR5cGU6JCgpLGluc3RhbmNlT2Y6eixub2RlOm5lKCksb2JqZWN0T2Y6USxvbmVPZjpYLG9uZU9mVHlwZTpNLHNoYXBlOlksZXhhY3Q6Rn07ZnVuY3Rpb24gaChmLHApe3JldHVybiBmPT09cD9mIT09MHx8MS9mPT0xL3A6ZiE9PWYmJnAhPT1wfWZ1bmN0aW9uIG0oZil7dGhpcy5tZXNzYWdlPWYsdGhpcy5zdGFjaz1cIlwifW0ucHJvdG90eXBlPUVycm9yLnByb3RvdHlwZTtmdW5jdGlvbiBfKGYpe3ZhciBwPXt9LHc9MDtmdW5jdGlvbiB2KEksVCxBLGosayxELG9lKXtpZihqPWp8fGMsRD1EfHxBLG9lIT09RWUpe2lmKG4pe3ZhciBaPW5ldyBFcnJvcihcIkNhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuIFVzZSBgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKClgIHRvIGNhbGwgdGhlbS4gUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlc1wiKTt0aHJvdyBaLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCIsWn1lbHNlIGlmKHR5cGVvZiBjb25zb2xlIT1cInVuZGVmaW5lZFwiKXt2YXIgZGU9aitcIjpcIitBOyFwW2RlXSYmdzwzJiYoX2UoXCJZb3UgYXJlIG1hbnVhbGx5IGNhbGxpbmcgYSBSZWFjdC5Qcm9wVHlwZXMgdmFsaWRhdGlvbiBmdW5jdGlvbiBmb3IgdGhlIGBcIitEK1wiYCBwcm9wIG9uIGBcIitqK1wiYC4gVGhpcyBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIHRocm93IGluIHRoZSBzdGFuZGFsb25lIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiBZb3UgbWF5IGJlIHNlZWluZyB0aGlzIHdhcm5pbmcgZHVlIHRvIGEgdGhpcmQtcGFydHkgUHJvcFR5cGVzIGxpYnJhcnkuIFNlZSBodHRwczovL2ZiLm1lL3JlYWN0LXdhcm5pbmctZG9udC1jYWxsLXByb3B0eXBlcyBmb3IgZGV0YWlscy5cIikscFtkZV09ITAsdysrKX19cmV0dXJuIFRbQV09PW51bGw/ST9UW0FdPT09bnVsbD9uZXcgbShcIlRoZSBcIitrK1wiIGBcIitEK1wiYCBpcyBtYXJrZWQgYXMgcmVxdWlyZWQgXCIrKFwiaW4gYFwiK2orXCJgLCBidXQgaXRzIHZhbHVlIGlzIGBudWxsYC5cIikpOm5ldyBtKFwiVGhlIFwiK2srXCIgYFwiK0QrXCJgIGlzIG1hcmtlZCBhcyByZXF1aXJlZCBpbiBcIisoXCJgXCIraitcImAsIGJ1dCBpdHMgdmFsdWUgaXMgYHVuZGVmaW5lZGAuXCIpKTpudWxsOmYoVCxBLGosayxEKX12YXIgUj12LmJpbmQobnVsbCwhMSk7cmV0dXJuIFIuaXNSZXF1aXJlZD12LmJpbmQobnVsbCwhMCksUn1mdW5jdGlvbiBPKGYpe2Z1bmN0aW9uIHAodyx2LFIsSSxULEEpe3ZhciBqPXdbdl0saz1TKGopO2lmKGshPT1mKXt2YXIgRD1QKGopO3JldHVybiBuZXcgbShcIkludmFsaWQgXCIrSStcIiBgXCIrVCtcImAgb2YgdHlwZSBcIisoXCJgXCIrRCtcImAgc3VwcGxpZWQgdG8gYFwiK1IrXCJgLCBleHBlY3RlZCBcIikrKFwiYFwiK2YrXCJgLlwiKSl9cmV0dXJuIG51bGx9cmV0dXJuIF8ocCl9ZnVuY3Rpb24gTCgpe3JldHVybiBfKFZlKX1mdW5jdGlvbiBWKGYpe2Z1bmN0aW9uIHAodyx2LFIsSSxUKXtpZih0eXBlb2YgZiE9XCJmdW5jdGlvblwiKXJldHVybiBuZXcgbShcIlByb3BlcnR5IGBcIitUK1wiYCBvZiBjb21wb25lbnQgYFwiK1IrXCJgIGhhcyBpbnZhbGlkIFByb3BUeXBlIG5vdGF0aW9uIGluc2lkZSBhcnJheU9mLlwiKTt2YXIgQT13W3ZdO2lmKCFBcnJheS5pc0FycmF5KEEpKXt2YXIgaj1TKEEpO3JldHVybiBuZXcgbShcIkludmFsaWQgXCIrSStcIiBgXCIrVCtcImAgb2YgdHlwZSBcIisoXCJgXCIraitcImAgc3VwcGxpZWQgdG8gYFwiK1IrXCJgLCBleHBlY3RlZCBhbiBhcnJheS5cIikpfWZvcih2YXIgaz0wO2s8QS5sZW5ndGg7aysrKXt2YXIgRD1mKEEsayxSLEksVCtcIltcIitrK1wiXVwiLEVlKTtpZihEIGluc3RhbmNlb2YgRXJyb3IpcmV0dXJuIER9cmV0dXJuIG51bGx9cmV0dXJuIF8ocCl9ZnVuY3Rpb24gQygpe2Z1bmN0aW9uIGYocCx3LHYsUixJKXt2YXIgVD1wW3ddO2lmKCFyKFQpKXt2YXIgQT1TKFQpO3JldHVybiBuZXcgbShcIkludmFsaWQgXCIrUitcIiBgXCIrSStcImAgb2YgdHlwZSBcIisoXCJgXCIrQStcImAgc3VwcGxpZWQgdG8gYFwiK3YrXCJgLCBleHBlY3RlZCBhIHNpbmdsZSBSZWFjdEVsZW1lbnQuXCIpKX1yZXR1cm4gbnVsbH1yZXR1cm4gXyhmKX1mdW5jdGlvbiAkKCl7ZnVuY3Rpb24gZihwLHcsdixSLEkpe3ZhciBUPXBbd107aWYoIWdhLmlzVmFsaWRFbGVtZW50VHlwZShUKSl7dmFyIEE9UyhUKTtyZXR1cm4gbmV3IG0oXCJJbnZhbGlkIFwiK1IrXCIgYFwiK0krXCJgIG9mIHR5cGUgXCIrKFwiYFwiK0ErXCJgIHN1cHBsaWVkIHRvIGBcIit2K1wiYCwgZXhwZWN0ZWQgYSBzaW5nbGUgUmVhY3RFbGVtZW50IHR5cGUuXCIpKX1yZXR1cm4gbnVsbH1yZXR1cm4gXyhmKX1mdW5jdGlvbiB6KGYpe2Z1bmN0aW9uIHAodyx2LFIsSSxUKXtpZighKHdbdl1pbnN0YW5jZW9mIGYpKXt2YXIgQT1mLm5hbWV8fGMsaj1jZSh3W3ZdKTtyZXR1cm4gbmV3IG0oXCJJbnZhbGlkIFwiK0krXCIgYFwiK1QrXCJgIG9mIHR5cGUgXCIrKFwiYFwiK2orXCJgIHN1cHBsaWVkIHRvIGBcIitSK1wiYCwgZXhwZWN0ZWQgXCIpKyhcImluc3RhbmNlIG9mIGBcIitBK1wiYC5cIikpfXJldHVybiBudWxsfXJldHVybiBfKHApfWZ1bmN0aW9uIFgoZil7aWYoIUFycmF5LmlzQXJyYXkoZikpcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg+MT9fZShcIkludmFsaWQgYXJndW1lbnRzIHN1cHBsaWVkIHRvIG9uZU9mLCBleHBlY3RlZCBhbiBhcnJheSwgZ290IFwiK2FyZ3VtZW50cy5sZW5ndGgrXCIgYXJndW1lbnRzLiBBIGNvbW1vbiBtaXN0YWtlIGlzIHRvIHdyaXRlIG9uZU9mKHgsIHksIHopIGluc3RlYWQgb2Ygb25lT2YoW3gsIHksIHpdKS5cIik6X2UoXCJJbnZhbGlkIGFyZ3VtZW50IHN1cHBsaWVkIHRvIG9uZU9mLCBleHBlY3RlZCBhbiBhcnJheS5cIiksVmU7ZnVuY3Rpb24gcCh3LHYsUixJLFQpe2Zvcih2YXIgQT13W3ZdLGo9MDtqPGYubGVuZ3RoO2orKylpZihoKEEsZltqXSkpcmV0dXJuIG51bGw7dmFyIGs9SlNPTi5zdHJpbmdpZnkoZixmdW5jdGlvbihvZSxaKXt2YXIgZGU9UChaKTtyZXR1cm4gZGU9PT1cInN5bWJvbFwiP1N0cmluZyhaKTpafSk7cmV0dXJuIG5ldyBtKFwiSW52YWxpZCBcIitJK1wiIGBcIitUK1wiYCBvZiB2YWx1ZSBgXCIrU3RyaW5nKEEpK1wiYCBcIisoXCJzdXBwbGllZCB0byBgXCIrUitcImAsIGV4cGVjdGVkIG9uZSBvZiBcIitrK1wiLlwiKSl9cmV0dXJuIF8ocCl9ZnVuY3Rpb24gUShmKXtmdW5jdGlvbiBwKHcsdixSLEksVCl7aWYodHlwZW9mIGYhPVwiZnVuY3Rpb25cIilyZXR1cm4gbmV3IG0oXCJQcm9wZXJ0eSBgXCIrVCtcImAgb2YgY29tcG9uZW50IGBcIitSK1wiYCBoYXMgaW52YWxpZCBQcm9wVHlwZSBub3RhdGlvbiBpbnNpZGUgb2JqZWN0T2YuXCIpO3ZhciBBPXdbdl0saj1TKEEpO2lmKGohPT1cIm9iamVjdFwiKXJldHVybiBuZXcgbShcIkludmFsaWQgXCIrSStcIiBgXCIrVCtcImAgb2YgdHlwZSBcIisoXCJgXCIraitcImAgc3VwcGxpZWQgdG8gYFwiK1IrXCJgLCBleHBlY3RlZCBhbiBvYmplY3QuXCIpKTtmb3IodmFyIGsgaW4gQSlpZih5YShBLGspKXt2YXIgRD1mKEEsayxSLEksVCtcIi5cIitrLEVlKTtpZihEIGluc3RhbmNlb2YgRXJyb3IpcmV0dXJuIER9cmV0dXJuIG51bGx9cmV0dXJuIF8ocCl9ZnVuY3Rpb24gTShmKXtpZighQXJyYXkuaXNBcnJheShmKSlyZXR1cm4gX2UoXCJJbnZhbGlkIGFyZ3VtZW50IHN1cHBsaWVkIHRvIG9uZU9mVHlwZSwgZXhwZWN0ZWQgYW4gaW5zdGFuY2Ugb2YgYXJyYXkuXCIpLFZlO2Zvcih2YXIgcD0wO3A8Zi5sZW5ndGg7cCsrKXt2YXIgdz1mW3BdO2lmKHR5cGVvZiB3IT1cImZ1bmN0aW9uXCIpcmV0dXJuIF9lKFwiSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZlR5cGUuIEV4cGVjdGVkIGFuIGFycmF5IG9mIGNoZWNrIGZ1bmN0aW9ucywgYnV0IHJlY2VpdmVkIFwiK0codykrXCIgYXQgaW5kZXggXCIrcCtcIi5cIiksVmV9ZnVuY3Rpb24gdihSLEksVCxBLGope2Zvcih2YXIgaz0wO2s8Zi5sZW5ndGg7aysrKXt2YXIgRD1mW2tdO2lmKEQoUixJLFQsQSxqLEVlKT09bnVsbClyZXR1cm4gbnVsbH1yZXR1cm4gbmV3IG0oXCJJbnZhbGlkIFwiK0ErXCIgYFwiK2orXCJgIHN1cHBsaWVkIHRvIFwiKyhcImBcIitUK1wiYC5cIikpfXJldHVybiBfKHYpfWZ1bmN0aW9uIG5lKCl7ZnVuY3Rpb24gZihwLHcsdixSLEkpe3JldHVybiBXKHBbd10pP251bGw6bmV3IG0oXCJJbnZhbGlkIFwiK1IrXCIgYFwiK0krXCJgIHN1cHBsaWVkIHRvIFwiKyhcImBcIit2K1wiYCwgZXhwZWN0ZWQgYSBSZWFjdE5vZGUuXCIpKX1yZXR1cm4gXyhmKX1mdW5jdGlvbiBZKGYpe2Z1bmN0aW9uIHAodyx2LFIsSSxUKXt2YXIgQT13W3ZdLGo9UyhBKTtpZihqIT09XCJvYmplY3RcIilyZXR1cm4gbmV3IG0oXCJJbnZhbGlkIFwiK0krXCIgYFwiK1QrXCJgIG9mIHR5cGUgYFwiK2orXCJgIFwiKyhcInN1cHBsaWVkIHRvIGBcIitSK1wiYCwgZXhwZWN0ZWQgYG9iamVjdGAuXCIpKTtmb3IodmFyIGsgaW4gZil7dmFyIEQ9ZltrXTtpZighIUQpe3ZhciBvZT1EKEEsayxSLEksVCtcIi5cIitrLEVlKTtpZihvZSlyZXR1cm4gb2V9fXJldHVybiBudWxsfXJldHVybiBfKHApfWZ1bmN0aW9uIEYoZil7ZnVuY3Rpb24gcCh3LHYsUixJLFQpe3ZhciBBPXdbdl0saj1TKEEpO2lmKGohPT1cIm9iamVjdFwiKXJldHVybiBuZXcgbShcIkludmFsaWQgXCIrSStcIiBgXCIrVCtcImAgb2YgdHlwZSBgXCIraitcImAgXCIrKFwic3VwcGxpZWQgdG8gYFwiK1IrXCJgLCBleHBlY3RlZCBgb2JqZWN0YC5cIikpO3ZhciBrPWhhKHt9LHdbdl0sZik7Zm9yKHZhciBEIGluIGspe3ZhciBvZT1mW0RdO2lmKCFvZSlyZXR1cm4gbmV3IG0oXCJJbnZhbGlkIFwiK0krXCIgYFwiK1QrXCJgIGtleSBgXCIrRCtcImAgc3VwcGxpZWQgdG8gYFwiK1IrXCJgLlxcbkJhZCBvYmplY3Q6IFwiK0pTT04uc3RyaW5naWZ5KHdbdl0sbnVsbCxcIiAgXCIpK2BcclxuVmFsaWQga2V5czogYCtKU09OLnN0cmluZ2lmeShPYmplY3Qua2V5cyhmKSxudWxsLFwiICBcIikpO3ZhciBaPW9lKEEsRCxSLEksVCtcIi5cIitELEVlKTtpZihaKXJldHVybiBafXJldHVybiBudWxsfXJldHVybiBfKHApfWZ1bmN0aW9uIFcoZil7c3dpdGNoKHR5cGVvZiBmKXtjYXNlXCJudW1iZXJcIjpjYXNlXCJzdHJpbmdcIjpjYXNlXCJ1bmRlZmluZWRcIjpyZXR1cm4hMDtjYXNlXCJib29sZWFuXCI6cmV0dXJuIWY7Y2FzZVwib2JqZWN0XCI6aWYoQXJyYXkuaXNBcnJheShmKSlyZXR1cm4gZi5ldmVyeShXKTtpZihmPT09bnVsbHx8cihmKSlyZXR1cm4hMDt2YXIgcD1zKGYpO2lmKHApe3ZhciB3PXAuY2FsbChmKSx2O2lmKHAhPT1mLmVudHJpZXMpe2Zvcig7ISh2PXcubmV4dCgpKS5kb25lOylpZighVyh2LnZhbHVlKSlyZXR1cm4hMX1lbHNlIGZvcig7ISh2PXcubmV4dCgpKS5kb25lOyl7dmFyIFI9di52YWx1ZTtpZihSJiYhVyhSWzFdKSlyZXR1cm4hMX19ZWxzZSByZXR1cm4hMTtyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBhZShmLHApe3JldHVybiBmPT09XCJzeW1ib2xcIj8hMDpwP3BbXCJAQHRvU3RyaW5nVGFnXCJdPT09XCJTeW1ib2xcInx8dHlwZW9mIFN5bWJvbD09XCJmdW5jdGlvblwiJiZwIGluc3RhbmNlb2YgU3ltYm9sOiExfWZ1bmN0aW9uIFMoZil7dmFyIHA9dHlwZW9mIGY7cmV0dXJuIEFycmF5LmlzQXJyYXkoZik/XCJhcnJheVwiOmYgaW5zdGFuY2VvZiBSZWdFeHA/XCJvYmplY3RcIjphZShwLGYpP1wic3ltYm9sXCI6cH1mdW5jdGlvbiBQKGYpe2lmKHR5cGVvZiBmPT1cInVuZGVmaW5lZFwifHxmPT09bnVsbClyZXR1cm5cIlwiK2Y7dmFyIHA9UyhmKTtpZihwPT09XCJvYmplY3RcIil7aWYoZiBpbnN0YW5jZW9mIERhdGUpcmV0dXJuXCJkYXRlXCI7aWYoZiBpbnN0YW5jZW9mIFJlZ0V4cClyZXR1cm5cInJlZ2V4cFwifXJldHVybiBwfWZ1bmN0aW9uIEcoZil7dmFyIHA9UChmKTtzd2l0Y2gocCl7Y2FzZVwiYXJyYXlcIjpjYXNlXCJvYmplY3RcIjpyZXR1cm5cImFuIFwiK3A7Y2FzZVwiYm9vbGVhblwiOmNhc2VcImRhdGVcIjpjYXNlXCJyZWdleHBcIjpyZXR1cm5cImEgXCIrcDtkZWZhdWx0OnJldHVybiBwfX1mdW5jdGlvbiBjZShmKXtyZXR1cm4hZi5jb25zdHJ1Y3Rvcnx8IWYuY29uc3RydWN0b3IubmFtZT9jOmYuY29uc3RydWN0b3IubmFtZX1yZXR1cm4gZC5jaGVja1Byb3BUeXBlcz13dCxkLnJlc2V0V2FybmluZ0NhY2hlPXd0LnJlc2V0V2FybmluZ0NhY2hlLGQuUHJvcFR5cGVzPWQsZH19KTt2YXIgZ3I9cGUoKHVvLEF0KT0+e0N0PWRyKCksUHQ9ITAsQXQuZXhwb3J0cz1SdCgpKEN0LmlzRWxlbWVudCxQdCk7dmFyIEN0LFB0fSk7dmFyIGVuPXBlKEU9PntcInVzZSBzdHJpY3RcIjsoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1wcigpLG49XCIxNy4wLjJcIix0PTYwMTAzLGk9NjAxMDY7RS5GcmFnbWVudD02MDEwNyxFLlN0cmljdE1vZGU9NjAxMDgsRS5Qcm9maWxlcj02MDExNDt2YXIgcz02MDEwOSxjPTYwMTEwLGQ9NjAxMTI7RS5TdXNwZW5zZT02MDExMzt2YXIgaD02MDEyMCxtPTYwMTE1LF89NjAxMTYsTz02MDEyMSxMPTYwMTIyLFY9NjAxMTcsQz02MDExOSwkPTYwMTI4LHo9NjAxMjksWD02MDEzMCxRPTYwMTMxO2lmKHR5cGVvZiBTeW1ib2w9PVwiZnVuY3Rpb25cIiYmU3ltYm9sLmZvcil7dmFyIE09U3ltYm9sLmZvcjt0PU0oXCJyZWFjdC5lbGVtZW50XCIpLGk9TShcInJlYWN0LnBvcnRhbFwiKSxFLkZyYWdtZW50PU0oXCJyZWFjdC5mcmFnbWVudFwiKSxFLlN0cmljdE1vZGU9TShcInJlYWN0LnN0cmljdF9tb2RlXCIpLEUuUHJvZmlsZXI9TShcInJlYWN0LnByb2ZpbGVyXCIpLHM9TShcInJlYWN0LnByb3ZpZGVyXCIpLGM9TShcInJlYWN0LmNvbnRleHRcIiksZD1NKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksRS5TdXNwZW5zZT1NKFwicmVhY3Quc3VzcGVuc2VcIiksaD1NKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKSxtPU0oXCJyZWFjdC5tZW1vXCIpLF89TShcInJlYWN0LmxhenlcIiksTz1NKFwicmVhY3QuYmxvY2tcIiksTD1NKFwicmVhY3Quc2VydmVyLmJsb2NrXCIpLFY9TShcInJlYWN0LmZ1bmRhbWVudGFsXCIpLEM9TShcInJlYWN0LnNjb3BlXCIpLCQ9TShcInJlYWN0Lm9wYXF1ZS5pZFwiKSx6PU0oXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpLFg9TShcInJlYWN0Lm9mZnNjcmVlblwiKSxRPU0oXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpfXZhciBuZT10eXBlb2YgU3ltYm9sPT1cImZ1bmN0aW9uXCImJlN5bWJvbC5pdGVyYXRvcixZPVwiQEBpdGVyYXRvclwiO2Z1bmN0aW9uIEYoZSl7aWYoZT09PW51bGx8fHR5cGVvZiBlIT1cIm9iamVjdFwiKXJldHVybiBudWxsO3ZhciBhPW5lJiZlW25lXXx8ZVtZXTtyZXR1cm4gdHlwZW9mIGE9PVwiZnVuY3Rpb25cIj9hOm51bGx9dmFyIFc9e2N1cnJlbnQ6bnVsbH0sYWU9e3RyYW5zaXRpb246MH0sUz17Y3VycmVudDpudWxsfSxQPXt9LEc9bnVsbDtmdW5jdGlvbiBjZShlKXtHPWV9UC5zZXRFeHRyYVN0YWNrRnJhbWU9ZnVuY3Rpb24oZSl7Rz1lfSxQLmdldEN1cnJlbnRTdGFjaz1udWxsLFAuZ2V0U3RhY2tBZGRlbmR1bT1mdW5jdGlvbigpe3ZhciBlPVwiXCI7RyYmKGUrPUcpO3ZhciBhPVAuZ2V0Q3VycmVudFN0YWNrO3JldHVybiBhJiYoZSs9YSgpfHxcIlwiKSxlfTt2YXIgZj17Y3VycmVudDohMX0scD17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpXLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOmFlLFJlYWN0Q3VycmVudE93bmVyOlMsSXNTb21lUmVuZGVyZXJBY3Rpbmc6Zixhc3NpZ246cn07cC5SZWFjdERlYnVnQ3VycmVudEZyYW1lPVA7ZnVuY3Rpb24gdyhlKXt7Zm9yKHZhciBhPWFyZ3VtZW50cy5sZW5ndGgsbz1uZXcgQXJyYXkoYT4xP2EtMTowKSx1PTE7dTxhO3UrKylvW3UtMV09YXJndW1lbnRzW3VdO1IoXCJ3YXJuXCIsZSxvKX19ZnVuY3Rpb24gdihlKXt7Zm9yKHZhciBhPWFyZ3VtZW50cy5sZW5ndGgsbz1uZXcgQXJyYXkoYT4xP2EtMTowKSx1PTE7dTxhO3UrKylvW3UtMV09YXJndW1lbnRzW3VdO1IoXCJlcnJvclwiLGUsbyl9fWZ1bmN0aW9uIFIoZSxhLG8pe3t2YXIgdT1wLlJlYWN0RGVidWdDdXJyZW50RnJhbWUsbD11LmdldFN0YWNrQWRkZW5kdW0oKTtsIT09XCJcIiYmKGErPVwiJXNcIixvPW8uY29uY2F0KFtsXSkpO3ZhciB4PW8ubWFwKGZ1bmN0aW9uKGIpe3JldHVyblwiXCIrYn0pO3gudW5zaGlmdChcIldhcm5pbmc6IFwiK2EpLEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGVbZV0sY29uc29sZSx4KX19dmFyIEk9e307ZnVuY3Rpb24gVChlLGEpe3t2YXIgbz1lLmNvbnN0cnVjdG9yLHU9byYmKG8uZGlzcGxheU5hbWV8fG8ubmFtZSl8fFwiUmVhY3RDbGFzc1wiLGw9dStcIi5cIithO2lmKElbbF0pcmV0dXJuO3YoXCJDYW4ndCBjYWxsICVzIG9uIGEgY29tcG9uZW50IHRoYXQgaXMgbm90IHlldCBtb3VudGVkLiBUaGlzIGlzIGEgbm8tb3AsIGJ1dCBpdCBtaWdodCBpbmRpY2F0ZSBhIGJ1ZyBpbiB5b3VyIGFwcGxpY2F0aW9uLiBJbnN0ZWFkLCBhc3NpZ24gdG8gYHRoaXMuc3RhdGVgIGRpcmVjdGx5IG9yIGRlZmluZSBhIGBzdGF0ZSA9IHt9O2AgY2xhc3MgcHJvcGVydHkgd2l0aCB0aGUgZGVzaXJlZCBzdGF0ZSBpbiB0aGUgJXMgY29tcG9uZW50LlwiLGEsdSksSVtsXT0hMH19dmFyIEE9e2lzTW91bnRlZDpmdW5jdGlvbihlKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGUsYSxvKXtUKGUsXCJmb3JjZVVwZGF0ZVwiKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihlLGEsbyx1KXtUKGUsXCJyZXBsYWNlU3RhdGVcIil9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihlLGEsbyx1KXtUKGUsXCJzZXRTdGF0ZVwiKX19LGo9e307T2JqZWN0LmZyZWV6ZShqKTtmdW5jdGlvbiBrKGUsYSxvKXt0aGlzLnByb3BzPWUsdGhpcy5jb250ZXh0PWEsdGhpcy5yZWZzPWosdGhpcy51cGRhdGVyPW98fEF9ay5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fSxrLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihlLGEpe2lmKCEodHlwZW9mIGU9PVwib2JqZWN0XCJ8fHR5cGVvZiBlPT1cImZ1bmN0aW9uXCJ8fGU9PW51bGwpKXRocm93IEVycm9yKFwic2V0U3RhdGUoLi4uKTogdGFrZXMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcyB0byB1cGRhdGUgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMuXCIpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxlLGEsXCJzZXRTdGF0ZVwiKX0say5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oZSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGUsXCJmb3JjZVVwZGF0ZVwiKX07e3ZhciBEPXtpc01vdW50ZWQ6W1wiaXNNb3VudGVkXCIsXCJJbnN0ZWFkLCBtYWtlIHN1cmUgdG8gY2xlYW4gdXAgc3Vic2NyaXB0aW9ucyBhbmQgcGVuZGluZyByZXF1ZXN0cyBpbiBjb21wb25lbnRXaWxsVW5tb3VudCB0byBwcmV2ZW50IG1lbW9yeSBsZWFrcy5cIl0scmVwbGFjZVN0YXRlOltcInJlcGxhY2VTdGF0ZVwiLFwiUmVmYWN0b3IgeW91ciBjb2RlIHRvIHVzZSBzZXRTdGF0ZSBpbnN0ZWFkIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8zMjM2KS5cIl19LG9lPWZ1bmN0aW9uKGUsYSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGsucHJvdG90eXBlLGUse2dldDpmdW5jdGlvbigpe3coXCIlcyguLi4pIGlzIGRlcHJlY2F0ZWQgaW4gcGxhaW4gSmF2YVNjcmlwdCBSZWFjdCBjbGFzc2VzLiAlc1wiLGFbMF0sYVsxXSl9fSl9O2Zvcih2YXIgWiBpbiBEKUQuaGFzT3duUHJvcGVydHkoWikmJm9lKFosRFtaXSl9ZnVuY3Rpb24gZGUoKXt9ZGUucHJvdG90eXBlPWsucHJvdG90eXBlO2Z1bmN0aW9uIHdlKGUsYSxvKXt0aGlzLnByb3BzPWUsdGhpcy5jb250ZXh0PWEsdGhpcy5yZWZzPWosdGhpcy51cGRhdGVyPW98fEF9dmFyIFJlPXdlLnByb3RvdHlwZT1uZXcgZGU7UmUuY29uc3RydWN0b3I9d2UscihSZSxrLnByb3RvdHlwZSksUmUuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7ZnVuY3Rpb24gUWUoKXt2YXIgZT17Y3VycmVudDpudWxsfTtyZXR1cm4gT2JqZWN0LnNlYWwoZSksZX1mdW5jdGlvbiBaZShlLGEsbyl7dmFyIHU9YS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxcIlwiO3JldHVybiBlLmRpc3BsYXlOYW1lfHwodSE9PVwiXCI/bytcIihcIit1K1wiKVwiOm8pfWZ1bmN0aW9uIGtlKGUpe3JldHVybiBlLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIn1mdW5jdGlvbiB1ZShlKXtpZihlPT1udWxsKXJldHVybiBudWxsO2lmKHR5cGVvZiBlLnRhZz09XCJudW1iZXJcIiYmdihcIlJlY2VpdmVkIGFuIHVuZXhwZWN0ZWQgb2JqZWN0IGluIGdldENvbXBvbmVudE5hbWUoKS4gVGhpcyBpcyBsaWtlbHkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLlwiKSx0eXBlb2YgZT09XCJmdW5jdGlvblwiKXJldHVybiBlLmRpc3BsYXlOYW1lfHxlLm5hbWV8fG51bGw7aWYodHlwZW9mIGU9PVwic3RyaW5nXCIpcmV0dXJuIGU7c3dpdGNoKGUpe2Nhc2UgRS5GcmFnbWVudDpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSBpOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBFLlByb2ZpbGVyOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIEUuU3RyaWN0TW9kZTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEUuU3VzcGVuc2U6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgaDpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKHR5cGVvZiBlPT1cIm9iamVjdFwiKXN3aXRjaChlLiQkdHlwZW9mKXtjYXNlIGM6dmFyIGE9ZTtyZXR1cm4ga2UoYSkrXCIuQ29uc3VtZXJcIjtjYXNlIHM6dmFyIG89ZTtyZXR1cm4ga2Uoby5fY29udGV4dCkrXCIuUHJvdmlkZXJcIjtjYXNlIGQ6cmV0dXJuIFplKGUsZS5yZW5kZXIsXCJGb3J3YXJkUmVmXCIpO2Nhc2UgbTpyZXR1cm4gdWUoZS50eXBlKTtjYXNlIE86cmV0dXJuIHVlKGUuX3JlbmRlcik7Y2FzZSBfOnt2YXIgdT1lLGw9dS5fcGF5bG9hZCx4PXUuX2luaXQ7dHJ5e3JldHVybiB1ZSh4KGwpKX1jYXRjaChiKXtyZXR1cm4gbnVsbH19fXJldHVybiBudWxsfXZhciBnPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkseWU9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfSxnZSxBZSxlcjtlcj17fTtmdW5jdGlvbiBOcihlKXtpZihnLmNhbGwoZSxcInJlZlwiKSl7dmFyIGE9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLFwicmVmXCIpLmdldDtpZihhJiZhLmlzUmVhY3RXYXJuaW5nKXJldHVybiExfXJldHVybiBlLnJlZiE9PXZvaWQgMH1mdW5jdGlvbiBXcihlKXtpZihnLmNhbGwoZSxcImtleVwiKSl7dmFyIGE9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLFwia2V5XCIpLmdldDtpZihhJiZhLmlzUmVhY3RXYXJuaW5nKXJldHVybiExfXJldHVybiBlLmtleSE9PXZvaWQgMH1mdW5jdGlvbiBzbihlLGEpe3ZhciBvPWZ1bmN0aW9uKCl7Z2V8fChnZT0hMCx2KFwiJXM6IGBrZXlgIGlzIG5vdCBhIHByb3AuIFRyeWluZyB0byBhY2Nlc3MgaXQgd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgYmVpbmcgcmV0dXJuZWQuIElmIHlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgc2FtZSB2YWx1ZSB3aXRoaW4gdGhlIGNoaWxkIGNvbXBvbmVudCwgeW91IHNob3VsZCBwYXNzIGl0IGFzIGEgZGlmZmVyZW50IHByb3AuIChodHRwczovL3JlYWN0anMub3JnL2xpbmsvc3BlY2lhbC1wcm9wcylcIixhKSl9O28uaXNSZWFjdFdhcm5pbmc9ITAsT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJrZXlcIix7Z2V0Om8sY29uZmlndXJhYmxlOiEwfSl9ZnVuY3Rpb24gZm4oZSxhKXt2YXIgbz1mdW5jdGlvbigpe0FlfHwoQWU9ITAsdihcIiVzOiBgcmVmYCBpcyBub3QgYSBwcm9wLiBUcnlpbmcgdG8gYWNjZXNzIGl0IHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGJlaW5nIHJldHVybmVkLiBJZiB5b3UgbmVlZCB0byBhY2Nlc3MgdGhlIHNhbWUgdmFsdWUgd2l0aGluIHRoZSBjaGlsZCBjb21wb25lbnQsIHlvdSBzaG91bGQgcGFzcyBpdCBhcyBhIGRpZmZlcmVudCBwcm9wLiAoaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3NwZWNpYWwtcHJvcHMpXCIsYSkpfTtvLmlzUmVhY3RXYXJuaW5nPSEwLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicmVmXCIse2dldDpvLGNvbmZpZ3VyYWJsZTohMH0pfWZ1bmN0aW9uIGNuKGUpe2lmKHR5cGVvZiBlLnJlZj09XCJzdHJpbmdcIiYmUy5jdXJyZW50JiZlLl9fc2VsZiYmUy5jdXJyZW50LnN0YXRlTm9kZSE9PWUuX19zZWxmKXt2YXIgYT11ZShTLmN1cnJlbnQudHlwZSk7ZXJbYV18fCh2KCdDb21wb25lbnQgXCIlc1wiIGNvbnRhaW5zIHRoZSBzdHJpbmcgcmVmIFwiJXNcIi4gU3VwcG9ydCBmb3Igc3RyaW5nIHJlZnMgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIG1ham9yIHJlbGVhc2UuIFRoaXMgY2FzZSBjYW5ub3QgYmUgYXV0b21hdGljYWxseSBjb252ZXJ0ZWQgdG8gYW4gYXJyb3cgZnVuY3Rpb24uIFdlIGFzayB5b3UgdG8gbWFudWFsbHkgZml4IHRoaXMgY2FzZSBieSB1c2luZyB1c2VSZWYoKSBvciBjcmVhdGVSZWYoKSBpbnN0ZWFkLiBMZWFybiBtb3JlIGFib3V0IHVzaW5nIHJlZnMgc2FmZWx5IGhlcmU6IGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9zdHJpY3QtbW9kZS1zdHJpbmctcmVmJyxhLGUucmVmKSxlclthXT0hMCl9fXZhciBycj1mdW5jdGlvbihlLGEsbyx1LGwseCxiKXt2YXIgeT17JCR0eXBlb2Y6dCx0eXBlOmUsa2V5OmEscmVmOm8scHJvcHM6Yixfb3duZXI6eH07cmV0dXJuIHkuX3N0b3JlPXt9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh5Ll9zdG9yZSxcInZhbGlkYXRlZFwiLHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCx2YWx1ZTohMX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh5LFwiX3NlbGZcIix7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITEsdmFsdWU6dX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh5LFwiX3NvdXJjZVwiLHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMSx2YWx1ZTpsfSksT2JqZWN0LmZyZWV6ZSYmKE9iamVjdC5mcmVlemUoeS5wcm9wcyksT2JqZWN0LmZyZWV6ZSh5KSkseX07ZnVuY3Rpb24gbG4oZSxhLG8pe3ZhciB1LGw9e30seD1udWxsLGI9bnVsbCx5PW51bGwsVT1udWxsO2lmKGEhPW51bGwpe05yKGEpJiYoYj1hLnJlZixjbihhKSksV3IoYSkmJih4PVwiXCIrYS5rZXkpLHk9YS5fX3NlbGY9PT12b2lkIDA/bnVsbDphLl9fc2VsZixVPWEuX19zb3VyY2U9PT12b2lkIDA/bnVsbDphLl9fc291cmNlO2Zvcih1IGluIGEpZy5jYWxsKGEsdSkmJiF5ZS5oYXNPd25Qcm9wZXJ0eSh1KSYmKGxbdV09YVt1XSl9dmFyIHE9YXJndW1lbnRzLmxlbmd0aC0yO2lmKHE9PT0xKWwuY2hpbGRyZW49bztlbHNlIGlmKHE+MSl7Zm9yKHZhciBIPUFycmF5KHEpLEs9MDtLPHE7SysrKUhbS109YXJndW1lbnRzW0srMl07T2JqZWN0LmZyZWV6ZSYmT2JqZWN0LmZyZWV6ZShIKSxsLmNoaWxkcmVuPUh9aWYoZSYmZS5kZWZhdWx0UHJvcHMpe3ZhciByZT1lLmRlZmF1bHRQcm9wcztmb3IodSBpbiByZSlsW3VdPT09dm9pZCAwJiYobFt1XT1yZVt1XSl9aWYoeHx8Yil7dmFyIGVlPXR5cGVvZiBlPT1cImZ1bmN0aW9uXCI/ZS5kaXNwbGF5TmFtZXx8ZS5uYW1lfHxcIlVua25vd25cIjplO3gmJnNuKGwsZWUpLGImJmZuKGwsZWUpfXJldHVybiBycihlLHgsYix5LFUsUy5jdXJyZW50LGwpfWZ1bmN0aW9uIGRuKGUsYSl7dmFyIG89cnIoZS50eXBlLGEsZS5yZWYsZS5fc2VsZixlLl9zb3VyY2UsZS5fb3duZXIsZS5wcm9wcyk7cmV0dXJuIG99ZnVuY3Rpb24gcG4oZSxhLG8pe2lmKGU9PW51bGwpdGhyb3cgRXJyb3IoXCJSZWFjdC5jbG9uZUVsZW1lbnQoLi4uKTogVGhlIGFyZ3VtZW50IG11c3QgYmUgYSBSZWFjdCBlbGVtZW50LCBidXQgeW91IHBhc3NlZCBcIitlK1wiLlwiKTt2YXIgdSxsPXIoe30sZS5wcm9wcykseD1lLmtleSxiPWUucmVmLHk9ZS5fc2VsZixVPWUuX3NvdXJjZSxxPWUuX293bmVyO2lmKGEhPW51bGwpe05yKGEpJiYoYj1hLnJlZixxPVMuY3VycmVudCksV3IoYSkmJih4PVwiXCIrYS5rZXkpO3ZhciBIO2UudHlwZSYmZS50eXBlLmRlZmF1bHRQcm9wcyYmKEg9ZS50eXBlLmRlZmF1bHRQcm9wcyk7Zm9yKHUgaW4gYSlnLmNhbGwoYSx1KSYmIXllLmhhc093blByb3BlcnR5KHUpJiYoYVt1XT09PXZvaWQgMCYmSCE9PXZvaWQgMD9sW3VdPUhbdV06bFt1XT1hW3VdKX12YXIgSz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoSz09PTEpbC5jaGlsZHJlbj1vO2Vsc2UgaWYoSz4xKXtmb3IodmFyIHJlPUFycmF5KEspLGVlPTA7ZWU8SztlZSsrKXJlW2VlXT1hcmd1bWVudHNbZWUrMl07bC5jaGlsZHJlbj1yZX1yZXR1cm4gcnIoZS50eXBlLHgsYix5LFUscSxsKX1mdW5jdGlvbiBiZShlKXtyZXR1cm4gdHlwZW9mIGU9PVwib2JqZWN0XCImJmUhPT1udWxsJiZlLiQkdHlwZW9mPT09dH12YXIgVXI9XCIuXCIsbW49XCI6XCI7ZnVuY3Rpb24gdm4oZSl7dmFyIGE9L1s9Ol0vZyxvPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifSx1PWUucmVwbGFjZShhLGZ1bmN0aW9uKGwpe3JldHVybiBvW2xdfSk7cmV0dXJuXCIkXCIrdX12YXIgWXI9ITEsZ249L1xcLysvZztmdW5jdGlvbiBMcihlKXtyZXR1cm4gZS5yZXBsYWNlKGduLFwiJCYvXCIpfWZ1bmN0aW9uIHRyKGUsYSl7cmV0dXJuIHR5cGVvZiBlPT1cIm9iamVjdFwiJiZlIT09bnVsbCYmZS5rZXkhPW51bGw/dm4oXCJcIitlLmtleSk6YS50b1N0cmluZygzNil9ZnVuY3Rpb24gSWUoZSxhLG8sdSxsKXt2YXIgeD10eXBlb2YgZTsoeD09PVwidW5kZWZpbmVkXCJ8fHg9PT1cImJvb2xlYW5cIikmJihlPW51bGwpO3ZhciBiPSExO2lmKGU9PT1udWxsKWI9ITA7ZWxzZSBzd2l0Y2goeCl7Y2FzZVwic3RyaW5nXCI6Y2FzZVwibnVtYmVyXCI6Yj0hMDticmVhaztjYXNlXCJvYmplY3RcIjpzd2l0Y2goZS4kJHR5cGVvZil7Y2FzZSB0OmNhc2UgaTpiPSEwfX1pZihiKXt2YXIgeT1lLFU9bCh5KSxxPXU9PT1cIlwiP1VyK3RyKHksMCk6dTtpZihBcnJheS5pc0FycmF5KFUpKXt2YXIgSD1cIlwiO3EhPW51bGwmJihIPUxyKHEpK1wiL1wiKSxJZShVLGEsSCxcIlwiLGZ1bmN0aW9uKHRhKXtyZXR1cm4gdGF9KX1lbHNlIFUhPW51bGwmJihiZShVKSYmKFU9ZG4oVSxvKyhVLmtleSYmKCF5fHx5LmtleSE9PVUua2V5KT9McihcIlwiK1Uua2V5KStcIi9cIjpcIlwiKStxKSksYS5wdXNoKFUpKTtyZXR1cm4gMX12YXIgSyxyZSxlZT0wLGllPXU9PT1cIlwiP1VyOnUrbW47aWYoQXJyYXkuaXNBcnJheShlKSlmb3IodmFyIFVlPTA7VWU8ZS5sZW5ndGg7VWUrKylLPWVbVWVdLHJlPWllK3RyKEssVWUpLGVlKz1JZShLLGEsbyxyZSxsKTtlbHNle3ZhciBzcj1GKGUpO2lmKHR5cGVvZiBzcj09XCJmdW5jdGlvblwiKXt2YXIgY3Q9ZTtzcj09PWN0LmVudHJpZXMmJihZcnx8dyhcIlVzaW5nIE1hcHMgYXMgY2hpbGRyZW4gaXMgbm90IHN1cHBvcnRlZC4gVXNlIGFuIGFycmF5IG9mIGtleWVkIFJlYWN0RWxlbWVudHMgaW5zdGVhZC5cIiksWXI9ITApO2Zvcih2YXIgZWE9c3IuY2FsbChjdCksbHQscmE9MDshKGx0PWVhLm5leHQoKSkuZG9uZTspSz1sdC52YWx1ZSxyZT1pZSt0cihLLHJhKyspLGVlKz1JZShLLGEsbyxyZSxsKX1lbHNlIGlmKHg9PT1cIm9iamVjdFwiKXt2YXIgZHQ9XCJcIitlO3Rocm93IEVycm9yKFwiT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiBcIisoZHQ9PT1cIltvYmplY3QgT2JqZWN0XVwiP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoZSkuam9pbihcIiwgXCIpK1wifVwiOmR0KStcIikuIElmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgaW5zdGVhZC5cIil9fXJldHVybiBlZX1mdW5jdGlvbiBNZShlLGEsbyl7aWYoZT09bnVsbClyZXR1cm4gZTt2YXIgdT1bXSxsPTA7cmV0dXJuIEllKGUsdSxcIlwiLFwiXCIsZnVuY3Rpb24oeCl7cmV0dXJuIGEuY2FsbChvLHgsbCsrKX0pLHV9ZnVuY3Rpb24gaG4oZSl7dmFyIGE9MDtyZXR1cm4gTWUoZSxmdW5jdGlvbigpe2ErK30pLGF9ZnVuY3Rpb24geW4oZSxhLG8pe01lKGUsZnVuY3Rpb24oKXthLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sbyl9ZnVuY3Rpb24gYm4oZSl7cmV0dXJuIE1lKGUsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119ZnVuY3Rpb24geG4oZSl7aWYoIWJlKGUpKXRocm93IEVycm9yKFwiUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuXCIpO3JldHVybiBlfWZ1bmN0aW9uIEVuKGUsYSl7YT09PXZvaWQgMD9hPW51bGw6YSE9PW51bGwmJnR5cGVvZiBhIT1cImZ1bmN0aW9uXCImJnYoXCJjcmVhdGVDb250ZXh0OiBFeHBlY3RlZCB0aGUgb3B0aW9uYWwgc2Vjb25kIGFyZ3VtZW50IHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQgcmVjZWl2ZWQ6ICVzXCIsYSk7dmFyIG89eyQkdHlwZW9mOmMsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmEsX2N1cnJlbnRWYWx1ZTplLF9jdXJyZW50VmFsdWUyOmUsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTtvLlByb3ZpZGVyPXskJHR5cGVvZjpzLF9jb250ZXh0Om99O3ZhciB1PSExLGw9ITEseD0hMTt7dmFyIGI9eyQkdHlwZW9mOmMsX2NvbnRleHQ6byxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6by5fY2FsY3VsYXRlQ2hhbmdlZEJpdHN9O09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGIse1Byb3ZpZGVyOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbHx8KGw9ITAsdihcIlJlbmRlcmluZyA8Q29udGV4dC5Db25zdW1lci5Qcm92aWRlcj4gaXMgbm90IHN1cHBvcnRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIG1ham9yIHJlbGVhc2UuIERpZCB5b3UgbWVhbiB0byByZW5kZXIgPENvbnRleHQuUHJvdmlkZXI+IGluc3RlYWQ/XCIpKSxvLlByb3ZpZGVyfSxzZXQ6ZnVuY3Rpb24oeSl7by5Qcm92aWRlcj15fX0sX2N1cnJlbnRWYWx1ZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG8uX2N1cnJlbnRWYWx1ZX0sc2V0OmZ1bmN0aW9uKHkpe28uX2N1cnJlbnRWYWx1ZT15fX0sX2N1cnJlbnRWYWx1ZTI6e2dldDpmdW5jdGlvbigpe3JldHVybiBvLl9jdXJyZW50VmFsdWUyfSxzZXQ6ZnVuY3Rpb24oeSl7by5fY3VycmVudFZhbHVlMj15fX0sX3RocmVhZENvdW50OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gby5fdGhyZWFkQ291bnR9LHNldDpmdW5jdGlvbih5KXtvLl90aHJlYWRDb3VudD15fX0sQ29uc3VtZXI6e2dldDpmdW5jdGlvbigpe3JldHVybiB1fHwodT0hMCx2KFwiUmVuZGVyaW5nIDxDb250ZXh0LkNvbnN1bWVyLkNvbnN1bWVyPiBpcyBub3Qgc3VwcG9ydGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgbWFqb3IgcmVsZWFzZS4gRGlkIHlvdSBtZWFuIHRvIHJlbmRlciA8Q29udGV4dC5Db25zdW1lcj4gaW5zdGVhZD9cIikpLG8uQ29uc3VtZXJ9fSxkaXNwbGF5TmFtZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG8uZGlzcGxheU5hbWV9LHNldDpmdW5jdGlvbih5KXt4fHwodyhcIlNldHRpbmcgYGRpc3BsYXlOYW1lYCBvbiBDb250ZXh0LkNvbnN1bWVyIGhhcyBubyBlZmZlY3QuIFlvdSBzaG91bGQgc2V0IGl0IGRpcmVjdGx5IG9uIHRoZSBjb250ZXh0IHdpdGggQ29udGV4dC5kaXNwbGF5TmFtZSA9ICclcycuXCIseSkseD0hMCl9fX0pLG8uQ29uc3VtZXI9Yn1yZXR1cm4gby5fY3VycmVudFJlbmRlcmVyPW51bGwsby5fY3VycmVudFJlbmRlcmVyMj1udWxsLG99dmFyIF9uPS0xLG5yPTAsVnI9MSxPbj0yO2Z1bmN0aW9uIFRuKGUpe2lmKGUuX3N0YXR1cz09PV9uKXt2YXIgYT1lLl9yZXN1bHQsbz1hKCksdT1lO3UuX3N0YXR1cz1ucix1Ll9yZXN1bHQ9byxvLnRoZW4oZnVuY3Rpb24obCl7aWYoZS5fc3RhdHVzPT09bnIpe3ZhciB4PWwuZGVmYXVsdDt4PT09dm9pZCAwJiZ2KGBsYXp5OiBFeHBlY3RlZCB0aGUgcmVzdWx0IG9mIGEgZHluYW1pYyBpbXBvcnQoKSBjYWxsLiBJbnN0ZWFkIHJlY2VpdmVkOiAlc1xyXG5cclxuWW91ciBjb2RlIHNob3VsZCBsb29rIGxpa2U6IFxyXG4gIGNvbnN0IE15Q29tcG9uZW50ID0gbGF6eSgoKSA9PiBpbXBvcnQoJy4vTXlDb21wb25lbnQnKSlgLGwpO3ZhciBiPWU7Yi5fc3RhdHVzPVZyLGIuX3Jlc3VsdD14fX0sZnVuY3Rpb24obCl7aWYoZS5fc3RhdHVzPT09bnIpe3ZhciB4PWU7eC5fc3RhdHVzPU9uLHguX3Jlc3VsdD1sfX0pfWlmKGUuX3N0YXR1cz09PVZyKXJldHVybiBlLl9yZXN1bHQ7dGhyb3cgZS5fcmVzdWx0fWZ1bmN0aW9uIHduKGUpe3ZhciBhPXtfc3RhdHVzOi0xLF9yZXN1bHQ6ZX0sbz17JCR0eXBlb2Y6XyxfcGF5bG9hZDphLF9pbml0OlRufTt7dmFyIHUsbDtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhvLHtkZWZhdWx0UHJvcHM6e2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdX0sc2V0OmZ1bmN0aW9uKHgpe3YoXCJSZWFjdC5sYXp5KC4uLik6IEl0IGlzIG5vdCBzdXBwb3J0ZWQgdG8gYXNzaWduIGBkZWZhdWx0UHJvcHNgIHRvIGEgbGF6eSBjb21wb25lbnQgaW1wb3J0LiBFaXRoZXIgc3BlY2lmeSB0aGVtIHdoZXJlIHRoZSBjb21wb25lbnQgaXMgZGVmaW5lZCwgb3IgY3JlYXRlIGEgd3JhcHBpbmcgY29tcG9uZW50IGFyb3VuZCBpdC5cIiksdT14LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiZGVmYXVsdFByb3BzXCIse2VudW1lcmFibGU6ITB9KX19LHByb3BUeXBlczp7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBsfSxzZXQ6ZnVuY3Rpb24oeCl7dihcIlJlYWN0LmxhenkoLi4uKTogSXQgaXMgbm90IHN1cHBvcnRlZCB0byBhc3NpZ24gYHByb3BUeXBlc2AgdG8gYSBsYXp5IGNvbXBvbmVudCBpbXBvcnQuIEVpdGhlciBzcGVjaWZ5IHRoZW0gd2hlcmUgdGhlIGNvbXBvbmVudCBpcyBkZWZpbmVkLCBvciBjcmVhdGUgYSB3cmFwcGluZyBjb21wb25lbnQgYXJvdW5kIGl0LlwiKSxsPXgsT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJwcm9wVHlwZXNcIix7ZW51bWVyYWJsZTohMH0pfX19KX1yZXR1cm4gb31mdW5jdGlvbiBSbihlKXtlIT1udWxsJiZlLiQkdHlwZW9mPT09bT92KFwiZm9yd2FyZFJlZiByZXF1aXJlcyBhIHJlbmRlciBmdW5jdGlvbiBidXQgcmVjZWl2ZWQgYSBgbWVtb2AgY29tcG9uZW50LiBJbnN0ZWFkIG9mIGZvcndhcmRSZWYobWVtbyguLi4pKSwgdXNlIG1lbW8oZm9yd2FyZFJlZiguLi4pKS5cIik6dHlwZW9mIGUhPVwiZnVuY3Rpb25cIj92KFwiZm9yd2FyZFJlZiByZXF1aXJlcyBhIHJlbmRlciBmdW5jdGlvbiBidXQgd2FzIGdpdmVuICVzLlwiLGU9PT1udWxsP1wibnVsbFwiOnR5cGVvZiBlKTplLmxlbmd0aCE9PTAmJmUubGVuZ3RoIT09MiYmdihcImZvcndhcmRSZWYgcmVuZGVyIGZ1bmN0aW9ucyBhY2NlcHQgZXhhY3RseSB0d28gcGFyYW1ldGVyczogcHJvcHMgYW5kIHJlZi4gJXNcIixlLmxlbmd0aD09PTE/XCJEaWQgeW91IGZvcmdldCB0byB1c2UgdGhlIHJlZiBwYXJhbWV0ZXI/XCI6XCJBbnkgYWRkaXRpb25hbCBwYXJhbWV0ZXIgd2lsbCBiZSB1bmRlZmluZWQuXCIpLGUhPW51bGwmJihlLmRlZmF1bHRQcm9wcyE9bnVsbHx8ZS5wcm9wVHlwZXMhPW51bGwpJiZ2KFwiZm9yd2FyZFJlZiByZW5kZXIgZnVuY3Rpb25zIGRvIG5vdCBzdXBwb3J0IHByb3BUeXBlcyBvciBkZWZhdWx0UHJvcHMuIERpZCB5b3UgYWNjaWRlbnRhbGx5IHBhc3MgYSBSZWFjdCBjb21wb25lbnQ/XCIpO3ZhciBhPXskJHR5cGVvZjpkLHJlbmRlcjplfTt7dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsXCJkaXNwbGF5TmFtZVwiLHtlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gb30sc2V0OmZ1bmN0aW9uKHUpe289dSxlLmRpc3BsYXlOYW1lPT1udWxsJiYoZS5kaXNwbGF5TmFtZT11KX19KX1yZXR1cm4gYX12YXIgQW49ITE7ZnVuY3Rpb24genIoZSl7cmV0dXJuISEodHlwZW9mIGU9PVwic3RyaW5nXCJ8fHR5cGVvZiBlPT1cImZ1bmN0aW9uXCJ8fGU9PT1FLkZyYWdtZW50fHxlPT09RS5Qcm9maWxlcnx8ZT09PXp8fGU9PT1FLlN0cmljdE1vZGV8fGU9PT1FLlN1c3BlbnNlfHxlPT09aHx8ZT09PVF8fEFufHx0eXBlb2YgZT09XCJvYmplY3RcIiYmZSE9PW51bGwmJihlLiQkdHlwZW9mPT09X3x8ZS4kJHR5cGVvZj09PW18fGUuJCR0eXBlb2Y9PT1zfHxlLiQkdHlwZW9mPT09Y3x8ZS4kJHR5cGVvZj09PWR8fGUuJCR0eXBlb2Y9PT1WfHxlLiQkdHlwZW9mPT09T3x8ZVswXT09PUwpKX1mdW5jdGlvbiBDbihlLGEpe3pyKGUpfHx2KFwibWVtbzogVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBjb21wb25lbnQuIEluc3RlYWQgcmVjZWl2ZWQ6ICVzXCIsZT09PW51bGw/XCJudWxsXCI6dHlwZW9mIGUpO3ZhciBvPXskJHR5cGVvZjptLHR5cGU6ZSxjb21wYXJlOmE9PT12b2lkIDA/bnVsbDphfTt7dmFyIHU7T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJkaXNwbGF5TmFtZVwiLHtlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdX0sc2V0OmZ1bmN0aW9uKGwpe3U9bCxlLmRpc3BsYXlOYW1lPT1udWxsJiYoZS5kaXNwbGF5TmFtZT1sKX19KX1yZXR1cm4gb31mdW5jdGlvbiBsZSgpe3ZhciBlPVcuY3VycmVudDtpZihlPT09bnVsbCl0aHJvdyBFcnJvcihgSW52YWxpZCBob29rIGNhbGwuIEhvb2tzIGNhbiBvbmx5IGJlIGNhbGxlZCBpbnNpZGUgb2YgdGhlIGJvZHkgb2YgYSBmdW5jdGlvbiBjb21wb25lbnQuIFRoaXMgY291bGQgaGFwcGVuIGZvciBvbmUgb2YgdGhlIGZvbGxvd2luZyByZWFzb25zOlxyXG4xLiBZb3UgbWlnaHQgaGF2ZSBtaXNtYXRjaGluZyB2ZXJzaW9ucyBvZiBSZWFjdCBhbmQgdGhlIHJlbmRlcmVyIChzdWNoIGFzIFJlYWN0IERPTSlcclxuMi4gWW91IG1pZ2h0IGJlIGJyZWFraW5nIHRoZSBSdWxlcyBvZiBIb29rc1xyXG4zLiBZb3UgbWlnaHQgaGF2ZSBtb3JlIHRoYW4gb25lIGNvcHkgb2YgUmVhY3QgaW4gdGhlIHNhbWUgYXBwXHJcblNlZSBodHRwczovL3JlYWN0anMub3JnL2xpbmsvaW52YWxpZC1ob29rLWNhbGwgZm9yIHRpcHMgYWJvdXQgaG93IHRvIGRlYnVnIGFuZCBmaXggdGhpcyBwcm9ibGVtLmApO3JldHVybiBlfWZ1bmN0aW9uIFBuKGUsYSl7dmFyIG89bGUoKTtpZihhIT09dm9pZCAwJiZ2KFwidXNlQ29udGV4dCgpIHNlY29uZCBhcmd1bWVudCBpcyByZXNlcnZlZCBmb3IgZnV0dXJlIHVzZSBpbiBSZWFjdC4gUGFzc2luZyBpdCBpcyBub3Qgc3VwcG9ydGVkLiBZb3UgcGFzc2VkOiAlcy4lc1wiLGEsdHlwZW9mIGE9PVwibnVtYmVyXCImJkFycmF5LmlzQXJyYXkoYXJndW1lbnRzWzJdKT9gXHJcblxyXG5EaWQgeW91IGNhbGwgYXJyYXkubWFwKHVzZUNvbnRleHQpPyBDYWxsaW5nIEhvb2tzIGluc2lkZSBhIGxvb3AgaXMgbm90IHN1cHBvcnRlZC4gTGVhcm4gbW9yZSBhdCBodHRwczovL3JlYWN0anMub3JnL2xpbmsvcnVsZXMtb2YtaG9va3NgOlwiXCIpLGUuX2NvbnRleHQhPT12b2lkIDApe3ZhciB1PWUuX2NvbnRleHQ7dS5Db25zdW1lcj09PWU/dihcIkNhbGxpbmcgdXNlQ29udGV4dChDb250ZXh0LkNvbnN1bWVyKSBpcyBub3Qgc3VwcG9ydGVkLCBtYXkgY2F1c2UgYnVncywgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSBtYWpvciByZWxlYXNlLiBEaWQgeW91IG1lYW4gdG8gY2FsbCB1c2VDb250ZXh0KENvbnRleHQpIGluc3RlYWQ/XCIpOnUuUHJvdmlkZXI9PT1lJiZ2KFwiQ2FsbGluZyB1c2VDb250ZXh0KENvbnRleHQuUHJvdmlkZXIpIGlzIG5vdCBzdXBwb3J0ZWQuIERpZCB5b3UgbWVhbiB0byBjYWxsIHVzZUNvbnRleHQoQ29udGV4dCkgaW5zdGVhZD9cIil9cmV0dXJuIG8udXNlQ29udGV4dChlLGEpfWZ1bmN0aW9uIFNuKGUpe3ZhciBhPWxlKCk7cmV0dXJuIGEudXNlU3RhdGUoZSl9ZnVuY3Rpb24gam4oZSxhLG8pe3ZhciB1PWxlKCk7cmV0dXJuIHUudXNlUmVkdWNlcihlLGEsbyl9ZnVuY3Rpb24ga24oZSl7dmFyIGE9bGUoKTtyZXR1cm4gYS51c2VSZWYoZSl9ZnVuY3Rpb24gSW4oZSxhKXt2YXIgbz1sZSgpO3JldHVybiBvLnVzZUVmZmVjdChlLGEpfWZ1bmN0aW9uIE1uKGUsYSl7dmFyIG89bGUoKTtyZXR1cm4gby51c2VMYXlvdXRFZmZlY3QoZSxhKX1mdW5jdGlvbiBEbihlLGEpe3ZhciBvPWxlKCk7cmV0dXJuIG8udXNlQ2FsbGJhY2soZSxhKX1mdW5jdGlvbiAkbihlLGEpe3ZhciBvPWxlKCk7cmV0dXJuIG8udXNlTWVtbyhlLGEpfWZ1bmN0aW9uIE5uKGUsYSxvKXt2YXIgdT1sZSgpO3JldHVybiB1LnVzZUltcGVyYXRpdmVIYW5kbGUoZSxhLG8pfWZ1bmN0aW9uIFduKGUsYSl7e3ZhciBvPWxlKCk7cmV0dXJuIG8udXNlRGVidWdWYWx1ZShlLGEpfX12YXIgQ2U9MCxGcixxcixCcixIcixLcixHcixKcjtmdW5jdGlvbiBYcigpe31Yci5fX3JlYWN0RGlzYWJsZWRMb2c9ITA7ZnVuY3Rpb24gVW4oKXt7aWYoQ2U9PT0wKXtGcj1jb25zb2xlLmxvZyxxcj1jb25zb2xlLmluZm8sQnI9Y29uc29sZS53YXJuLEhyPWNvbnNvbGUuZXJyb3IsS3I9Y29uc29sZS5ncm91cCxHcj1jb25zb2xlLmdyb3VwQ29sbGFwc2VkLEpyPWNvbnNvbGUuZ3JvdXBFbmQ7dmFyIGU9e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLHZhbHVlOlhyLHdyaXRhYmxlOiEwfTtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhjb25zb2xlLHtpbmZvOmUsbG9nOmUsd2FybjplLGVycm9yOmUsZ3JvdXA6ZSxncm91cENvbGxhcHNlZDplLGdyb3VwRW5kOmV9KX1DZSsrfX1mdW5jdGlvbiBZbigpe3tpZihDZS0tLENlPT09MCl7dmFyIGU9e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLHdyaXRhYmxlOiEwfTtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhjb25zb2xlLHtsb2c6cih7fSxlLHt2YWx1ZTpGcn0pLGluZm86cih7fSxlLHt2YWx1ZTpxcn0pLHdhcm46cih7fSxlLHt2YWx1ZTpCcn0pLGVycm9yOnIoe30sZSx7dmFsdWU6SHJ9KSxncm91cDpyKHt9LGUse3ZhbHVlOktyfSksZ3JvdXBDb2xsYXBzZWQ6cih7fSxlLHt2YWx1ZTpHcn0pLGdyb3VwRW5kOnIoe30sZSx7dmFsdWU6SnJ9KX0pfUNlPDAmJnYoXCJkaXNhYmxlZERlcHRoIGZlbGwgYmVsb3cgemVyby4gVGhpcyBpcyBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuXCIpfX12YXIgYXI9cC5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLG9yO2Z1bmN0aW9uIERlKGUsYSxvKXt7aWYob3I9PT12b2lkIDApdHJ5e3Rocm93IEVycm9yKCl9Y2F0Y2gobCl7dmFyIHU9bC5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtvcj11JiZ1WzFdfHxcIlwifXJldHVybmBcclxuYCtvcitlfX12YXIgaXI9ITEsJGU7e3ZhciBMbj10eXBlb2YgV2Vha01hcD09XCJmdW5jdGlvblwiP1dlYWtNYXA6TWFwOyRlPW5ldyBMbn1mdW5jdGlvbiBRcihlLGEpe2lmKCFlfHxpcilyZXR1cm5cIlwiO3t2YXIgbz0kZS5nZXQoZSk7aWYobyE9PXZvaWQgMClyZXR1cm4gb312YXIgdTtpcj0hMDt2YXIgbD1FcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT12b2lkIDA7dmFyIHg7eD1hci5jdXJyZW50LGFyLmN1cnJlbnQ9bnVsbCxVbigpO3RyeXtpZihhKXt2YXIgYj1mdW5jdGlvbigpe3Rocm93IEVycm9yKCl9O2lmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcInByb3BzXCIse3NldDpmdW5jdGlvbigpe3Rocm93IEVycm9yKCl9fSksdHlwZW9mIFJlZmxlY3Q9PVwib2JqZWN0XCImJlJlZmxlY3QuY29uc3RydWN0KXt0cnl7UmVmbGVjdC5jb25zdHJ1Y3QoYixbXSl9Y2F0Y2goaWUpe3U9aWV9UmVmbGVjdC5jb25zdHJ1Y3QoZSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChpZSl7dT1pZX1lLmNhbGwoYi5wcm90b3R5cGUpfX1lbHNle3RyeXt0aHJvdyBFcnJvcigpfWNhdGNoKGllKXt1PWllfWUoKX19Y2F0Y2goaWUpe2lmKGllJiZ1JiZ0eXBlb2YgaWUuc3RhY2s9PVwic3RyaW5nXCIpe2Zvcih2YXIgeT1pZS5zdGFjay5zcGxpdChgXHJcbmApLFU9dS5zdGFjay5zcGxpdChgXHJcbmApLHE9eS5sZW5ndGgtMSxIPVUubGVuZ3RoLTE7cT49MSYmSD49MCYmeVtxXSE9PVVbSF07KUgtLTtmb3IoO3E+PTEmJkg+PTA7cS0tLEgtLSlpZih5W3FdIT09VVtIXSl7aWYocSE9PTF8fEghPT0xKWRvIGlmKHEtLSxILS0sSDwwfHx5W3FdIT09VVtIXSl7dmFyIEs9YFxyXG5gK3lbcV0ucmVwbGFjZShcIiBhdCBuZXcgXCIsXCIgYXQgXCIpO3JldHVybiB0eXBlb2YgZT09XCJmdW5jdGlvblwiJiYkZS5zZXQoZSxLKSxLfXdoaWxlKHE+PTEmJkg+PTApO2JyZWFrfX19ZmluYWxseXtpcj0hMSxhci5jdXJyZW50PXgsWW4oKSxFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT1sfXZhciByZT1lP2UuZGlzcGxheU5hbWV8fGUubmFtZTpcIlwiLGVlPXJlP0RlKHJlKTpcIlwiO3JldHVybiB0eXBlb2YgZT09XCJmdW5jdGlvblwiJiYkZS5zZXQoZSxlZSksZWV9ZnVuY3Rpb24gWnIoZSxhLG8pe3JldHVybiBRcihlLCExKX1mdW5jdGlvbiBWbihlKXt2YXIgYT1lLnByb3RvdHlwZTtyZXR1cm4hIShhJiZhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIE5lKGUsYSxvKXtpZihlPT1udWxsKXJldHVyblwiXCI7aWYodHlwZW9mIGU9PVwiZnVuY3Rpb25cIilyZXR1cm4gUXIoZSxWbihlKSk7aWYodHlwZW9mIGU9PVwic3RyaW5nXCIpcmV0dXJuIERlKGUpO3N3aXRjaChlKXtjYXNlIEUuU3VzcGVuc2U6cmV0dXJuIERlKFwiU3VzcGVuc2VcIik7Y2FzZSBoOnJldHVybiBEZShcIlN1c3BlbnNlTGlzdFwiKX1pZih0eXBlb2YgZT09XCJvYmplY3RcIilzd2l0Y2goZS4kJHR5cGVvZil7Y2FzZSBkOnJldHVybiBacihlLnJlbmRlcik7Y2FzZSBtOnJldHVybiBOZShlLnR5cGUsYSxvKTtjYXNlIE86cmV0dXJuIFpyKGUuX3JlbmRlcik7Y2FzZSBfOnt2YXIgdT1lLGw9dS5fcGF5bG9hZCx4PXUuX2luaXQ7dHJ5e3JldHVybiBOZSh4KGwpLGEsbyl9Y2F0Y2goYil7fX19cmV0dXJuXCJcIn12YXIgZXQ9e30scnQ9cC5SZWFjdERlYnVnQ3VycmVudEZyYW1lO2Z1bmN0aW9uIFdlKGUpe2lmKGUpe3ZhciBhPWUuX293bmVyLG89TmUoZS50eXBlLGUuX3NvdXJjZSxhP2EudHlwZTpudWxsKTtydC5zZXRFeHRyYVN0YWNrRnJhbWUobyl9ZWxzZSBydC5zZXRFeHRyYVN0YWNrRnJhbWUobnVsbCl9ZnVuY3Rpb24gem4oZSxhLG8sdSxsKXt7dmFyIHg9RnVuY3Rpb24uY2FsbC5iaW5kKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkpO2Zvcih2YXIgYiBpbiBlKWlmKHgoZSxiKSl7dmFyIHk9dm9pZCAwO3RyeXtpZih0eXBlb2YgZVtiXSE9XCJmdW5jdGlvblwiKXt2YXIgVT1FcnJvcigodXx8XCJSZWFjdCBjbGFzc1wiKStcIjogXCIrbytcIiB0eXBlIGBcIitiK1wiYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UsIGJ1dCByZWNlaXZlZCBgXCIrdHlwZW9mIGVbYl0rXCJgLlRoaXMgb2Z0ZW4gaGFwcGVucyBiZWNhdXNlIG9mIHR5cG9zIHN1Y2ggYXMgYFByb3BUeXBlcy5mdW5jdGlvbmAgaW5zdGVhZCBvZiBgUHJvcFR5cGVzLmZ1bmNgLlwiKTt0aHJvdyBVLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCIsVX15PWVbYl0oYSxiLHUsbyxudWxsLFwiU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRURcIil9Y2F0Y2gocSl7eT1xfXkmJiEoeSBpbnN0YW5jZW9mIEVycm9yKSYmKFdlKGwpLHYoXCIlczogdHlwZSBzcGVjaWZpY2F0aW9uIG9mICVzIGAlc2AgaXMgaW52YWxpZDsgdGhlIHR5cGUgY2hlY2tlciBmdW5jdGlvbiBtdXN0IHJldHVybiBgbnVsbGAgb3IgYW4gYEVycm9yYCBidXQgcmV0dXJuZWQgYSAlcy4gWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBwYXNzIGFuIGFyZ3VtZW50IHRvIHRoZSB0eXBlIGNoZWNrZXIgY3JlYXRvciAoYXJyYXlPZiwgaW5zdGFuY2VPZiwgb2JqZWN0T2YsIG9uZU9mLCBvbmVPZlR5cGUsIGFuZCBzaGFwZSBhbGwgcmVxdWlyZSBhbiBhcmd1bWVudCkuXCIsdXx8XCJSZWFjdCBjbGFzc1wiLG8sYix0eXBlb2YgeSksV2UobnVsbCkpLHkgaW5zdGFuY2VvZiBFcnJvciYmISh5Lm1lc3NhZ2UgaW4gZXQpJiYoZXRbeS5tZXNzYWdlXT0hMCxXZShsKSx2KFwiRmFpbGVkICVzIHR5cGU6ICVzXCIsbyx5Lm1lc3NhZ2UpLFdlKG51bGwpKX19fWZ1bmN0aW9uIHhlKGUpe2lmKGUpe3ZhciBhPWUuX293bmVyLG89TmUoZS50eXBlLGUuX3NvdXJjZSxhP2EudHlwZTpudWxsKTtjZShvKX1lbHNlIGNlKG51bGwpfXZhciB1cjt1cj0hMTtmdW5jdGlvbiB0dCgpe2lmKFMuY3VycmVudCl7dmFyIGU9dWUoUy5jdXJyZW50LnR5cGUpO2lmKGUpcmV0dXJuYFxyXG5cclxuQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgXFxgYCtlK1wiYC5cIn1yZXR1cm5cIlwifWZ1bmN0aW9uIEZuKGUpe2lmKGUhPT12b2lkIDApe3ZhciBhPWUuZmlsZU5hbWUucmVwbGFjZSgvXi4qW1xcXFxcXC9dLyxcIlwiKSxvPWUubGluZU51bWJlcjtyZXR1cm5gXHJcblxyXG5DaGVjayB5b3VyIGNvZGUgYXQgYCthK1wiOlwiK28rXCIuXCJ9cmV0dXJuXCJcIn1mdW5jdGlvbiBxbihlKXtyZXR1cm4gZSE9bnVsbD9GbihlLl9fc291cmNlKTpcIlwifXZhciBudD17fTtmdW5jdGlvbiBCbihlKXt2YXIgYT10dCgpO2lmKCFhKXt2YXIgbz10eXBlb2YgZT09XCJzdHJpbmdcIj9lOmUuZGlzcGxheU5hbWV8fGUubmFtZTtvJiYoYT1gXHJcblxyXG5DaGVjayB0aGUgdG9wLWxldmVsIHJlbmRlciBjYWxsIHVzaW5nIDxgK28rXCI+LlwiKX1yZXR1cm4gYX1mdW5jdGlvbiBhdChlLGEpe2lmKCEoIWUuX3N0b3JlfHxlLl9zdG9yZS52YWxpZGF0ZWR8fGUua2V5IT1udWxsKSl7ZS5fc3RvcmUudmFsaWRhdGVkPSEwO3ZhciBvPUJuKGEpO2lmKCFudFtvXSl7bnRbb109ITA7dmFyIHU9XCJcIjtlJiZlLl9vd25lciYmZS5fb3duZXIhPT1TLmN1cnJlbnQmJih1PVwiIEl0IHdhcyBwYXNzZWQgYSBjaGlsZCBmcm9tIFwiK3VlKGUuX293bmVyLnR5cGUpK1wiLlwiKSx4ZShlKSx2KCdFYWNoIGNoaWxkIGluIGEgbGlzdCBzaG91bGQgaGF2ZSBhIHVuaXF1ZSBcImtleVwiIHByb3AuJXMlcyBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3dhcm5pbmcta2V5cyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nLG8sdSkseGUobnVsbCl9fX1mdW5jdGlvbiBvdChlLGEpe2lmKHR5cGVvZiBlPT1cIm9iamVjdFwiKXtpZihBcnJheS5pc0FycmF5KGUpKWZvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKXt2YXIgdT1lW29dO2JlKHUpJiZhdCh1LGEpfWVsc2UgaWYoYmUoZSkpZS5fc3RvcmUmJihlLl9zdG9yZS52YWxpZGF0ZWQ9ITApO2Vsc2UgaWYoZSl7dmFyIGw9RihlKTtpZih0eXBlb2YgbD09XCJmdW5jdGlvblwiJiZsIT09ZS5lbnRyaWVzKWZvcih2YXIgeD1sLmNhbGwoZSksYjshKGI9eC5uZXh0KCkpLmRvbmU7KWJlKGIudmFsdWUpJiZhdChiLnZhbHVlLGEpfX19ZnVuY3Rpb24gaXQoZSl7e3ZhciBhPWUudHlwZTtpZihhPT1udWxsfHx0eXBlb2YgYT09XCJzdHJpbmdcIilyZXR1cm47dmFyIG87aWYodHlwZW9mIGE9PVwiZnVuY3Rpb25cIilvPWEucHJvcFR5cGVzO2Vsc2UgaWYodHlwZW9mIGE9PVwib2JqZWN0XCImJihhLiQkdHlwZW9mPT09ZHx8YS4kJHR5cGVvZj09PW0pKW89YS5wcm9wVHlwZXM7ZWxzZSByZXR1cm47aWYobyl7dmFyIHU9dWUoYSk7em4obyxlLnByb3BzLFwicHJvcFwiLHUsZSl9ZWxzZSBpZihhLlByb3BUeXBlcyE9PXZvaWQgMCYmIXVyKXt1cj0hMDt2YXIgbD11ZShhKTt2KFwiQ29tcG9uZW50ICVzIGRlY2xhcmVkIGBQcm9wVHlwZXNgIGluc3RlYWQgb2YgYHByb3BUeXBlc2AuIERpZCB5b3UgbWlzc3BlbGwgdGhlIHByb3BlcnR5IGFzc2lnbm1lbnQ/XCIsbHx8XCJVbmtub3duXCIpfXR5cGVvZiBhLmdldERlZmF1bHRQcm9wcz09XCJmdW5jdGlvblwiJiYhYS5nZXREZWZhdWx0UHJvcHMuaXNSZWFjdENsYXNzQXBwcm92ZWQmJnYoXCJnZXREZWZhdWx0UHJvcHMgaXMgb25seSB1c2VkIG9uIGNsYXNzaWMgUmVhY3QuY3JlYXRlQ2xhc3MgZGVmaW5pdGlvbnMuIFVzZSBhIHN0YXRpYyBwcm9wZXJ0eSBuYW1lZCBgZGVmYXVsdFByb3BzYCBpbnN0ZWFkLlwiKX19ZnVuY3Rpb24gSG4oZSl7e2Zvcih2YXIgYT1PYmplY3Qua2V5cyhlLnByb3BzKSxvPTA7bzxhLmxlbmd0aDtvKyspe3ZhciB1PWFbb107aWYodSE9PVwiY2hpbGRyZW5cIiYmdSE9PVwia2V5XCIpe3hlKGUpLHYoXCJJbnZhbGlkIHByb3AgYCVzYCBzdXBwbGllZCB0byBgUmVhY3QuRnJhZ21lbnRgLiBSZWFjdC5GcmFnbWVudCBjYW4gb25seSBoYXZlIGBrZXlgIGFuZCBgY2hpbGRyZW5gIHByb3BzLlwiLHUpLHhlKG51bGwpO2JyZWFrfX1lLnJlZiE9PW51bGwmJih4ZShlKSx2KFwiSW52YWxpZCBhdHRyaWJ1dGUgYHJlZmAgc3VwcGxpZWQgdG8gYFJlYWN0LkZyYWdtZW50YC5cIikseGUobnVsbCkpfX1mdW5jdGlvbiB1dChlLGEsbyl7dmFyIHU9enIoZSk7aWYoIXUpe3ZhciBsPVwiXCI7KGU9PT12b2lkIDB8fHR5cGVvZiBlPT1cIm9iamVjdFwiJiZlIT09bnVsbCYmT2JqZWN0LmtleXMoZSkubGVuZ3RoPT09MCkmJihsKz1cIiBZb3UgbGlrZWx5IGZvcmdvdCB0byBleHBvcnQgeW91ciBjb21wb25lbnQgZnJvbSB0aGUgZmlsZSBpdCdzIGRlZmluZWQgaW4sIG9yIHlvdSBtaWdodCBoYXZlIG1peGVkIHVwIGRlZmF1bHQgYW5kIG5hbWVkIGltcG9ydHMuXCIpO3ZhciB4PXFuKGEpO3g/bCs9eDpsKz10dCgpO3ZhciBiO2U9PT1udWxsP2I9XCJudWxsXCI6QXJyYXkuaXNBcnJheShlKT9iPVwiYXJyYXlcIjplIT09dm9pZCAwJiZlLiQkdHlwZW9mPT09dD8oYj1cIjxcIisodWUoZS50eXBlKXx8XCJVbmtub3duXCIpK1wiIC8+XCIsbD1cIiBEaWQgeW91IGFjY2lkZW50YWxseSBleHBvcnQgYSBKU1ggbGl0ZXJhbCBpbnN0ZWFkIG9mIGEgY29tcG9uZW50P1wiKTpiPXR5cGVvZiBlLHYoXCJSZWFjdC5jcmVhdGVFbGVtZW50OiB0eXBlIGlzIGludmFsaWQgLS0gZXhwZWN0ZWQgYSBzdHJpbmcgKGZvciBidWlsdC1pbiBjb21wb25lbnRzKSBvciBhIGNsYXNzL2Z1bmN0aW9uIChmb3IgY29tcG9zaXRlIGNvbXBvbmVudHMpIGJ1dCBnb3Q6ICVzLiVzXCIsYixsKX12YXIgeT1sbi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoeT09bnVsbClyZXR1cm4geTtpZih1KWZvcih2YXIgVT0yO1U8YXJndW1lbnRzLmxlbmd0aDtVKyspb3QoYXJndW1lbnRzW1VdLGUpO3JldHVybiBlPT09RS5GcmFnbWVudD9Ibih5KTppdCh5KSx5fXZhciBzdD0hMTtmdW5jdGlvbiBLbihlKXt2YXIgYT11dC5iaW5kKG51bGwsZSk7cmV0dXJuIGEudHlwZT1lLHN0fHwoc3Q9ITAsdyhcIlJlYWN0LmNyZWF0ZUZhY3RvcnkoKSBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgbWFqb3IgcmVsZWFzZS4gQ29uc2lkZXIgdXNpbmcgSlNYIG9yIHVzZSBSZWFjdC5jcmVhdGVFbGVtZW50KCkgZGlyZWN0bHkgaW5zdGVhZC5cIikpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwidHlwZVwiLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB3KFwiRmFjdG9yeS50eXBlIGlzIGRlcHJlY2F0ZWQuIEFjY2VzcyB0aGUgY2xhc3MgZGlyZWN0bHkgYmVmb3JlIHBhc3NpbmcgaXQgdG8gY3JlYXRlRmFjdG9yeS5cIiksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJ0eXBlXCIse3ZhbHVlOmV9KSxlfX0pLGF9ZnVuY3Rpb24gR24oZSxhLG8pe2Zvcih2YXIgdT1wbi5hcHBseSh0aGlzLGFyZ3VtZW50cyksbD0yO2w8YXJndW1lbnRzLmxlbmd0aDtsKyspb3QoYXJndW1lbnRzW2xdLHUudHlwZSk7cmV0dXJuIGl0KHUpLHV9dHJ5e3ZhciBmdD1PYmplY3QuZnJlZXplKHt9KTtuZXcgTWFwKFtbZnQsbnVsbF1dKSxuZXcgU2V0KFtmdF0pfWNhdGNoKGUpe312YXIgSm49dXQsWG49R24sUW49S24sWm49e21hcDpNZSxmb3JFYWNoOnluLGNvdW50OmhuLHRvQXJyYXk6Ym4sb25seTp4bn07RS5DaGlsZHJlbj1abixFLkNvbXBvbmVudD1rLEUuUHVyZUNvbXBvbmVudD13ZSxFLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPXAsRS5jbG9uZUVsZW1lbnQ9WG4sRS5jcmVhdGVDb250ZXh0PUVuLEUuY3JlYXRlRWxlbWVudD1KbixFLmNyZWF0ZUZhY3Rvcnk9UW4sRS5jcmVhdGVSZWY9UWUsRS5mb3J3YXJkUmVmPVJuLEUuaXNWYWxpZEVsZW1lbnQ9YmUsRS5sYXp5PXduLEUubWVtbz1DbixFLnVzZUNhbGxiYWNrPURuLEUudXNlQ29udGV4dD1QbixFLnVzZURlYnVnVmFsdWU9V24sRS51c2VFZmZlY3Q9SW4sRS51c2VJbXBlcmF0aXZlSGFuZGxlPU5uLEUudXNlTGF5b3V0RWZmZWN0PU1uLEUudXNlTWVtbz0kbixFLnVzZVJlZHVjZXI9am4sRS51c2VSZWY9a24sRS51c2VTdGF0ZT1TbixFLnZlcnNpb249bn0pKCl9KTt2YXIgWGU9cGUoKEppLHJuKT0+e1widXNlIHN0cmljdFwiO3JuLmV4cG9ydHM9ZW4oKX0pO3B0KGV4cG9ydHMpO2ZyKGV4cG9ydHMse2Nsc3g6KCk9PmNyLGRldmljZTooKT0+JHJ9KTt2YXIgY3I9e307ZnIoY3Ise2Jvb2xTd2l0Y2g6KCk9PmNhLGpvaW46KCk9PmZhfSk7dmFyIGZhPSguLi5yKT0+ci5maWx0ZXIobj0+biE9PVwiXCImJm4hPT12b2lkIDApLmpvaW4oXCIgXCIpLGNhPShyLG4sdCk9PnI/bjp0O3ZhciAkcj17fTtmcigkcix7RGV2aWNlVHlwZTooKT0+dGUsZGV2aWNlU2l6ZTooKT0+QmEsZGV2aWNlVHlwZUJ5VWE6KCk9PkthLGdldEltYWdlV2lkdGg6KCk9PkhhfSk7ZnVuY3Rpb24gSigpe3JldHVybiBKPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKHIpe2Zvcih2YXIgbj0xO248YXJndW1lbnRzLmxlbmd0aDtuKyspe3ZhciB0PWFyZ3VtZW50c1tuXTtmb3IodmFyIGkgaW4gdClPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxpKSYmKHJbaV09dFtpXSl9cmV0dXJuIHJ9LEouYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIG1lKHIpe3JldHVybiB0eXBlb2YgU3ltYm9sPT1cImZ1bmN0aW9uXCImJnR5cGVvZiBTeW1ib2wuaXRlcmF0b3I9PVwic3ltYm9sXCI/bWU9ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTptZT1mdW5jdGlvbih0KXtyZXR1cm4gdCYmdHlwZW9mIFN5bWJvbD09XCJmdW5jdGlvblwiJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxtZShyKX1mdW5jdGlvbiBscihyKXtyZXR1cm4gciYmbWUocik9PT1cIm9iamVjdFwiJiZyLmNvbnN0cnVjdG9yPT09T2JqZWN0fWZ1bmN0aW9uIHNlKHIsbil7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4yJiZhcmd1bWVudHNbMl0hPT12b2lkIDA/YXJndW1lbnRzWzJdOntjbG9uZTohMH0saT10LmNsb25lP0ooe30scik6cjtyZXR1cm4gbHIocikmJmxyKG4pJiZPYmplY3Qua2V5cyhuKS5mb3JFYWNoKGZ1bmN0aW9uKHMpe3MhPT1cIl9fcHJvdG9fX1wiJiYobHIobltzXSkmJnMgaW4gcj9pW3NdPXNlKHJbc10sbltzXSx0KTppW3NdPW5bc10pfSksaX1mdW5jdGlvbiBoZShyLG4sdCl7cmV0dXJuIG4gaW4gcj9PYmplY3QuZGVmaW5lUHJvcGVydHkocixuLHt2YWx1ZTp0LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6cltuXT10LHJ9ZnVuY3Rpb24gU3Qocil7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4xJiZhcmd1bWVudHNbMV0hPT12b2lkIDA/YXJndW1lbnRzWzFdOjAsdD1hcmd1bWVudHMubGVuZ3RoPjImJmFyZ3VtZW50c1syXSE9PXZvaWQgMD9hcmd1bWVudHNbMl06MTtyZXR1cm4ocjxufHxyPnQpJiZjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IFRoZSB2YWx1ZSBwcm92aWRlZCBcIi5jb25jYXQocixcIiBpcyBvdXQgb2YgcmFuZ2UgW1wiKS5jb25jYXQobixcIiwgXCIpLmNvbmNhdCh0LFwiXS5cIikpLE1hdGgubWluKE1hdGgubWF4KG4sciksdCl9ZnVuY3Rpb24gYmEocil7cj1yLnN1YnN0cigxKTt2YXIgbj1uZXcgUmVnRXhwKFwiLnsxLFwiLmNvbmNhdChyLmxlbmd0aD49Nj8yOjEsXCJ9XCIpLFwiZ1wiKSx0PXIubWF0Y2gobik7cmV0dXJuIHQmJnRbMF0ubGVuZ3RoPT09MSYmKHQ9dC5tYXAoZnVuY3Rpb24oaSl7cmV0dXJuIGkraX0pKSx0P1wicmdiXCIuY29uY2F0KHQubGVuZ3RoPT09ND9cImFcIjpcIlwiLFwiKFwiKS5jb25jYXQodC5tYXAoZnVuY3Rpb24oaSxzKXtyZXR1cm4gczwzP3BhcnNlSW50KGksMTYpOk1hdGgucm91bmQocGFyc2VJbnQoaSwxNikvMjU1KjFlMykvMWUzfSkuam9pbihcIiwgXCIpLFwiKVwiKTpcIlwifWZ1bmN0aW9uIHhhKHIpe3I9T2Uocik7dmFyIG49cix0PW4udmFsdWVzLGk9dFswXSxzPXRbMV0vMTAwLGM9dFsyXS8xMDAsZD1zKk1hdGgubWluKGMsMS1jKSxoPWZ1bmN0aW9uKEwpe3ZhciBWPWFyZ3VtZW50cy5sZW5ndGg+MSYmYXJndW1lbnRzWzFdIT09dm9pZCAwP2FyZ3VtZW50c1sxXTooTCtpLzMwKSUxMjtyZXR1cm4gYy1kKk1hdGgubWF4KE1hdGgubWluKFYtMyw5LVYsMSksLTEpfSxtPVwicmdiXCIsXz1bTWF0aC5yb3VuZChoKDApKjI1NSksTWF0aC5yb3VuZChoKDgpKjI1NSksTWF0aC5yb3VuZChoKDQpKjI1NSldO3JldHVybiByLnR5cGU9PT1cImhzbGFcIiYmKG0rPVwiYVwiLF8ucHVzaCh0WzNdKSksaHIoe3R5cGU6bSx2YWx1ZXM6X30pfWZ1bmN0aW9uIE9lKHIpe2lmKHIudHlwZSlyZXR1cm4gcjtpZihyLmNoYXJBdCgwKT09PVwiI1wiKXJldHVybiBPZShiYShyKSk7dmFyIG49ci5pbmRleE9mKFwiKFwiKSx0PXIuc3Vic3RyaW5nKDAsbik7aWYoW1wicmdiXCIsXCJyZ2JhXCIsXCJoc2xcIixcImhzbGFcIl0uaW5kZXhPZih0KT09PS0xKXRocm93IG5ldyBFcnJvcihcIk1hdGVyaWFsLVVJOiBVbnN1cHBvcnRlZCBgXCIuY29uY2F0KHIsXCJgIGNvbG9yLlxcbldlIHN1cHBvcnQgdGhlIGZvbGxvd2luZyBmb3JtYXRzOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLlwiKSk7dmFyIGk9ci5zdWJzdHJpbmcobisxLHIubGVuZ3RoLTEpLnNwbGl0KFwiLFwiKTtyZXR1cm4gaT1pLm1hcChmdW5jdGlvbihzKXtyZXR1cm4gcGFyc2VGbG9hdChzKX0pLHt0eXBlOnQsdmFsdWVzOml9fWZ1bmN0aW9uIGhyKHIpe3ZhciBuPXIudHlwZSx0PXIudmFsdWVzO3JldHVybiBuLmluZGV4T2YoXCJyZ2JcIikhPT0tMT90PXQubWFwKGZ1bmN0aW9uKGkscyl7cmV0dXJuIHM8Mz9wYXJzZUludChpLDEwKTppfSk6bi5pbmRleE9mKFwiaHNsXCIpIT09LTEmJih0WzFdPVwiXCIuY29uY2F0KHRbMV0sXCIlXCIpLHRbMl09XCJcIi5jb25jYXQodFsyXSxcIiVcIikpLFwiXCIuY29uY2F0KG4sXCIoXCIpLmNvbmNhdCh0LmpvaW4oXCIsIFwiKSxcIilcIil9ZnVuY3Rpb24geXIocixuKXt2YXIgdD1qdChyKSxpPWp0KG4pO3JldHVybihNYXRoLm1heCh0LGkpKy4wNSkvKE1hdGgubWluKHQsaSkrLjA1KX1mdW5jdGlvbiBqdChyKXtyPU9lKHIpO3ZhciBuPXIudHlwZT09PVwiaHNsXCI/T2UoeGEocikpLnZhbHVlczpyLnZhbHVlcztyZXR1cm4gbj1uLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC89MjU1LHQ8PS4wMzkyOD90LzEyLjkyOk1hdGgucG93KCh0Ky4wNTUpLzEuMDU1LDIuNCl9KSxOdW1iZXIoKC4yMTI2Km5bMF0rLjcxNTIqblsxXSsuMDcyMipuWzJdKS50b0ZpeGVkKDMpKX1mdW5jdGlvbiBrdChyLG4pe2lmKHI9T2Uociksbj1TdChuKSxyLnR5cGUuaW5kZXhPZihcImhzbFwiKSE9PS0xKXIudmFsdWVzWzJdKj0xLW47ZWxzZSBpZihyLnR5cGUuaW5kZXhPZihcInJnYlwiKSE9PS0xKWZvcih2YXIgdD0wO3Q8Mzt0Kz0xKXIudmFsdWVzW3RdKj0xLW47cmV0dXJuIGhyKHIpfWZ1bmN0aW9uIEl0KHIsbil7aWYocj1PZShyKSxuPVN0KG4pLHIudHlwZS5pbmRleE9mKFwiaHNsXCIpIT09LTEpci52YWx1ZXNbMl0rPSgxMDAtci52YWx1ZXNbMl0pKm47ZWxzZSBpZihyLnR5cGUuaW5kZXhPZihcInJnYlwiKSE9PS0xKWZvcih2YXIgdD0wO3Q8Mzt0Kz0xKXIudmFsdWVzW3RdKz0oMjU1LXIudmFsdWVzW3RdKSpuO3JldHVybiBocihyKX1mdW5jdGlvbiBicihyLG4pe2lmKHI9PW51bGwpcmV0dXJue307dmFyIHQ9e30saT1PYmplY3Qua2V5cyhyKSxzLGM7Zm9yKGM9MDtjPGkubGVuZ3RoO2MrKylzPWlbY10sIShuLmluZGV4T2Yocyk+PTApJiYodFtzXT1yW3NdKTtyZXR1cm4gdH1mdW5jdGlvbiBmZShyLG4pe2lmKHI9PW51bGwpcmV0dXJue307dmFyIHQ9YnIocixuKSxpLHM7aWYoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyl7dmFyIGM9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhyKTtmb3Iocz0wO3M8Yy5sZW5ndGg7cysrKWk9Y1tzXSwhKG4uaW5kZXhPZihpKT49MCkmJighT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHIsaSl8fCh0W2ldPXJbaV0pKX1yZXR1cm4gdH12YXIgdmU9W1wieHNcIixcInNtXCIsXCJtZFwiLFwibGdcIixcInhsXCJdO2Z1bmN0aW9uIHhyKHIpe3ZhciBuPXIudmFsdWVzLHQ9bj09PXZvaWQgMD97eHM6MCxzbTo2MDAsbWQ6OTYwLGxnOjEyODAseGw6MTkyMH06bixpPXIudW5pdCxzPWk9PT12b2lkIDA/XCJweFwiOmksYz1yLnN0ZXAsZD1jPT09dm9pZCAwPzU6YyxoPWZlKHIsW1widmFsdWVzXCIsXCJ1bml0XCIsXCJzdGVwXCJdKTtmdW5jdGlvbiBtKEMpe3ZhciAkPXR5cGVvZiB0W0NdPT1cIm51bWJlclwiP3RbQ106QztyZXR1cm5cIkBtZWRpYSAobWluLXdpZHRoOlwiLmNvbmNhdCgkKS5jb25jYXQocyxcIilcIil9ZnVuY3Rpb24gXyhDKXt2YXIgJD12ZS5pbmRleE9mKEMpKzEsej10W3ZlWyRdXTtpZigkPT09dmUubGVuZ3RoKXJldHVybiBtKFwieHNcIik7dmFyIFg9dHlwZW9mIHo9PVwibnVtYmVyXCImJiQ+MD96OkM7cmV0dXJuXCJAbWVkaWEgKG1heC13aWR0aDpcIi5jb25jYXQoWC1kLzEwMCkuY29uY2F0KHMsXCIpXCIpfWZ1bmN0aW9uIE8oQywkKXt2YXIgej12ZS5pbmRleE9mKCQpO3JldHVybiB6PT09dmUubGVuZ3RoLTE/bShDKTpcIkBtZWRpYSAobWluLXdpZHRoOlwiLmNvbmNhdCh0eXBlb2YgdFtDXT09XCJudW1iZXJcIj90W0NdOkMpLmNvbmNhdChzLFwiKSBhbmQgXCIpK1wiKG1heC13aWR0aDpcIi5jb25jYXQoKHohPT0tMSYmdHlwZW9mIHRbdmVbeisxXV09PVwibnVtYmVyXCI/dFt2ZVt6KzFdXTokKS1kLzEwMCkuY29uY2F0KHMsXCIpXCIpfWZ1bmN0aW9uIEwoQyl7cmV0dXJuIE8oQyxDKX1mdW5jdGlvbiBWKEMpe3JldHVybiB0W0NdfXJldHVybiBKKHtrZXlzOnZlLHZhbHVlczp0LHVwOm0sZG93bjpfLGJldHdlZW46Tyxvbmx5Okwsd2lkdGg6Vn0saCl9ZnVuY3Rpb24gRXIocixuLHQpe3ZhciBpO3JldHVybiBKKHtndXR0ZXJzOmZ1bmN0aW9uKCl7dmFyIGM9YXJndW1lbnRzLmxlbmd0aD4wJiZhcmd1bWVudHNbMF0hPT12b2lkIDA/YXJndW1lbnRzWzBdOnt9O3JldHVybiBKKHtwYWRkaW5nTGVmdDpuKDIpLHBhZGRpbmdSaWdodDpuKDIpfSxjLGhlKHt9LHIudXAoXCJzbVwiKSxKKHtwYWRkaW5nTGVmdDpuKDMpLHBhZGRpbmdSaWdodDpuKDMpfSxjW3IudXAoXCJzbVwiKV0pKSl9LHRvb2xiYXI6KGk9e21pbkhlaWdodDo1Nn0saGUoaSxcIlwiLmNvbmNhdChyLnVwKFwieHNcIiksXCIgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKVwiKSx7bWluSGVpZ2h0OjQ4fSksaGUoaSxyLnVwKFwic21cIikse21pbkhlaWdodDo2NH0pLGkpfSx0KX12YXIgRWE9e2JsYWNrOlwiIzAwMFwiLHdoaXRlOlwiI2ZmZlwifSxTZT1FYTt2YXIgX2E9ezUwOlwiI2ZhZmFmYVwiLDEwMDpcIiNmNWY1ZjVcIiwyMDA6XCIjZWVlZWVlXCIsMzAwOlwiI2UwZTBlMFwiLDQwMDpcIiNiZGJkYmRcIiw1MDA6XCIjOWU5ZTllXCIsNjAwOlwiIzc1NzU3NVwiLDcwMDpcIiM2MTYxNjFcIiw4MDA6XCIjNDI0MjQyXCIsOTAwOlwiIzIxMjEyMVwiLEExMDA6XCIjZDVkNWQ1XCIsQTIwMDpcIiNhYWFhYWFcIixBNDAwOlwiIzMwMzAzMFwiLEE3MDA6XCIjNjE2MTYxXCJ9LHplPV9hO3ZhciBPYT17NTA6XCIjZThlYWY2XCIsMTAwOlwiI2M1Y2FlOVwiLDIwMDpcIiM5ZmE4ZGFcIiwzMDA6XCIjNzk4NmNiXCIsNDAwOlwiIzVjNmJjMFwiLDUwMDpcIiMzZjUxYjVcIiw2MDA6XCIjMzk0OWFiXCIsNzAwOlwiIzMwM2Y5ZlwiLDgwMDpcIiMyODM1OTNcIiw5MDA6XCIjMWEyMzdlXCIsQTEwMDpcIiM4YzllZmZcIixBMjAwOlwiIzUzNmRmZVwiLEE0MDA6XCIjM2Q1YWZlXCIsQTcwMDpcIiMzMDRmZmVcIn0sRmU9T2E7dmFyIFRhPXs1MDpcIiNmY2U0ZWNcIiwxMDA6XCIjZjhiYmQwXCIsMjAwOlwiI2Y0OGZiMVwiLDMwMDpcIiNmMDYyOTJcIiw0MDA6XCIjZWM0MDdhXCIsNTAwOlwiI2U5MWU2M1wiLDYwMDpcIiNkODFiNjBcIiw3MDA6XCIjYzIxODViXCIsODAwOlwiI2FkMTQ1N1wiLDkwMDpcIiM4ODBlNGZcIixBMTAwOlwiI2ZmODBhYlwiLEEyMDA6XCIjZmY0MDgxXCIsQTQwMDpcIiNmNTAwNTdcIixBNzAwOlwiI2M1MTE2MlwifSxxZT1UYTt2YXIgd2E9ezUwOlwiI2ZmZWJlZVwiLDEwMDpcIiNmZmNkZDJcIiwyMDA6XCIjZWY5YTlhXCIsMzAwOlwiI2U1NzM3M1wiLDQwMDpcIiNlZjUzNTBcIiw1MDA6XCIjZjQ0MzM2XCIsNjAwOlwiI2U1MzkzNVwiLDcwMDpcIiNkMzJmMmZcIiw4MDA6XCIjYzYyODI4XCIsOTAwOlwiI2I3MWMxY1wiLEExMDA6XCIjZmY4YTgwXCIsQTIwMDpcIiNmZjUyNTJcIixBNDAwOlwiI2ZmMTc0NFwiLEE3MDA6XCIjZDUwMDAwXCJ9LEJlPXdhO3ZhciBSYT17NTA6XCIjZmZmM2UwXCIsMTAwOlwiI2ZmZTBiMlwiLDIwMDpcIiNmZmNjODBcIiwzMDA6XCIjZmZiNzRkXCIsNDAwOlwiI2ZmYTcyNlwiLDUwMDpcIiNmZjk4MDBcIiw2MDA6XCIjZmI4YzAwXCIsNzAwOlwiI2Y1N2MwMFwiLDgwMDpcIiNlZjZjMDBcIiw5MDA6XCIjZTY1MTAwXCIsQTEwMDpcIiNmZmQxODBcIixBMjAwOlwiI2ZmYWI0MFwiLEE0MDA6XCIjZmY5MTAwXCIsQTcwMDpcIiNmZjZkMDBcIn0sSGU9UmE7dmFyIEFhPXs1MDpcIiNlM2YyZmRcIiwxMDA6XCIjYmJkZWZiXCIsMjAwOlwiIzkwY2FmOVwiLDMwMDpcIiM2NGI1ZjZcIiw0MDA6XCIjNDJhNWY1XCIsNTAwOlwiIzIxOTZmM1wiLDYwMDpcIiMxZTg4ZTVcIiw3MDA6XCIjMTk3NmQyXCIsODAwOlwiIzE1NjVjMFwiLDkwMDpcIiMwZDQ3YTFcIixBMTAwOlwiIzgyYjFmZlwiLEEyMDA6XCIjNDQ4YWZmXCIsQTQwMDpcIiMyOTc5ZmZcIixBNzAwOlwiIzI5NjJmZlwifSxLZT1BYTt2YXIgQ2E9ezUwOlwiI2U4ZjVlOVwiLDEwMDpcIiNjOGU2YzlcIiwyMDA6XCIjYTVkNmE3XCIsMzAwOlwiIzgxYzc4NFwiLDQwMDpcIiM2NmJiNmFcIiw1MDA6XCIjNGNhZjUwXCIsNjAwOlwiIzQzYTA0N1wiLDcwMDpcIiMzODhlM2NcIiw4MDA6XCIjMmU3ZDMyXCIsOTAwOlwiIzFiNWUyMFwiLEExMDA6XCIjYjlmNmNhXCIsQTIwMDpcIiM2OWYwYWVcIixBNDAwOlwiIzAwZTY3NlwiLEE3MDA6XCIjMDBjODUzXCJ9LEdlPUNhO3ZhciBNdD17dGV4dDp7cHJpbWFyeTpcInJnYmEoMCwgMCwgMCwgMC44NylcIixzZWNvbmRhcnk6XCJyZ2JhKDAsIDAsIDAsIDAuNTQpXCIsZGlzYWJsZWQ6XCJyZ2JhKDAsIDAsIDAsIDAuMzgpXCIsaGludDpcInJnYmEoMCwgMCwgMCwgMC4zOClcIn0sZGl2aWRlcjpcInJnYmEoMCwgMCwgMCwgMC4xMilcIixiYWNrZ3JvdW5kOntwYXBlcjpTZS53aGl0ZSxkZWZhdWx0OnplWzUwXX0sYWN0aW9uOnthY3RpdmU6XCJyZ2JhKDAsIDAsIDAsIDAuNTQpXCIsaG92ZXI6XCJyZ2JhKDAsIDAsIDAsIDAuMDQpXCIsaG92ZXJPcGFjaXR5Oi4wNCxzZWxlY3RlZDpcInJnYmEoMCwgMCwgMCwgMC4wOClcIixzZWxlY3RlZE9wYWNpdHk6LjA4LGRpc2FibGVkOlwicmdiYSgwLCAwLCAwLCAwLjI2KVwiLGRpc2FibGVkQmFja2dyb3VuZDpcInJnYmEoMCwgMCwgMCwgMC4xMilcIixkaXNhYmxlZE9wYWNpdHk6LjM4LGZvY3VzOlwicmdiYSgwLCAwLCAwLCAwLjEyKVwiLGZvY3VzT3BhY2l0eTouMTIsYWN0aXZhdGVkT3BhY2l0eTouMTJ9fSxfcj17dGV4dDp7cHJpbWFyeTpTZS53aGl0ZSxzZWNvbmRhcnk6XCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNylcIixkaXNhYmxlZDpcInJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KVwiLGhpbnQ6XCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSlcIixpY29uOlwicmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpXCJ9LGRpdmlkZXI6XCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpXCIsYmFja2dyb3VuZDp7cGFwZXI6emVbODAwXSxkZWZhdWx0OlwiIzMwMzAzMFwifSxhY3Rpb246e2FjdGl2ZTpTZS53aGl0ZSxob3ZlcjpcInJnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOClcIixob3Zlck9wYWNpdHk6LjA4LHNlbGVjdGVkOlwicmdiYSgyNTUsIDI1NSwgMjU1LCAwLjE2KVwiLHNlbGVjdGVkT3BhY2l0eTouMTYsZGlzYWJsZWQ6XCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMylcIixkaXNhYmxlZEJhY2tncm91bmQ6XCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpXCIsZGlzYWJsZWRPcGFjaXR5Oi4zOCxmb2N1czpcInJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMilcIixmb2N1c09wYWNpdHk6LjEyLGFjdGl2YXRlZE9wYWNpdHk6LjI0fX07ZnVuY3Rpb24gRHQocixuLHQsaSl7dmFyIHM9aS5saWdodHx8aSxjPWkuZGFya3x8aSoxLjU7cltuXXx8KHIuaGFzT3duUHJvcGVydHkodCk/cltuXT1yW3RdOm49PT1cImxpZ2h0XCI/ci5saWdodD1JdChyLm1haW4scyk6bj09PVwiZGFya1wiJiYoci5kYXJrPWt0KHIubWFpbixjKSkpfWZ1bmN0aW9uIE9yKHIpe3ZhciBuPXIucHJpbWFyeSx0PW49PT12b2lkIDA/e2xpZ2h0OkZlWzMwMF0sbWFpbjpGZVs1MDBdLGRhcms6RmVbNzAwXX06bixpPXIuc2Vjb25kYXJ5LHM9aT09PXZvaWQgMD97bGlnaHQ6cWUuQTIwMCxtYWluOnFlLkE0MDAsZGFyazpxZS5BNzAwfTppLGM9ci5lcnJvcixkPWM9PT12b2lkIDA/e2xpZ2h0OkJlWzMwMF0sbWFpbjpCZVs1MDBdLGRhcms6QmVbNzAwXX06YyxoPXIud2FybmluZyxtPWg9PT12b2lkIDA/e2xpZ2h0OkhlWzMwMF0sbWFpbjpIZVs1MDBdLGRhcms6SGVbNzAwXX06aCxfPXIuaW5mbyxPPV89PT12b2lkIDA/e2xpZ2h0OktlWzMwMF0sbWFpbjpLZVs1MDBdLGRhcms6S2VbNzAwXX06XyxMPXIuc3VjY2VzcyxWPUw9PT12b2lkIDA/e2xpZ2h0OkdlWzMwMF0sbWFpbjpHZVs1MDBdLGRhcms6R2VbNzAwXX06TCxDPXIudHlwZSwkPUM9PT12b2lkIDA/XCJsaWdodFwiOkMsej1yLmNvbnRyYXN0VGhyZXNob2xkLFg9ej09PXZvaWQgMD8zOnosUT1yLnRvbmFsT2Zmc2V0LE09UT09PXZvaWQgMD8uMjpRLG5lPWZlKHIsW1wicHJpbWFyeVwiLFwic2Vjb25kYXJ5XCIsXCJlcnJvclwiLFwid2FybmluZ1wiLFwiaW5mb1wiLFwic3VjY2Vzc1wiLFwidHlwZVwiLFwiY29udHJhc3RUaHJlc2hvbGRcIixcInRvbmFsT2Zmc2V0XCJdKTtmdW5jdGlvbiBZKFMpe3ZhciBQPXlyKFMsX3IudGV4dC5wcmltYXJ5KT49WD9fci50ZXh0LnByaW1hcnk6TXQudGV4dC5wcmltYXJ5LEc9eXIoUyxQKTtyZXR1cm4gRzwzJiZjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgY29udHJhc3QgcmF0aW8gb2YgXCIuY29uY2F0KEcsXCI6MSBmb3IgXCIpLmNvbmNhdChQLFwiIG9uIFwiKS5jb25jYXQoUyksXCJmYWxscyBiZWxvdyB0aGUgV0NBRyByZWNvbW1lbmRlZCBhYnNvbHV0ZSBtaW5pbXVtIGNvbnRyYXN0IHJhdGlvIG9mIDM6MS5cIixcImh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI3Zpc3VhbC1hdWRpby1jb250cmFzdC1jb250cmFzdFwiXS5qb2luKGBcclxuYCkpLFB9dmFyIEY9ZnVuY3Rpb24oUCl7dmFyIEc9YXJndW1lbnRzLmxlbmd0aD4xJiZhcmd1bWVudHNbMV0hPT12b2lkIDA/YXJndW1lbnRzWzFdOjUwMCxjZT1hcmd1bWVudHMubGVuZ3RoPjImJmFyZ3VtZW50c1syXSE9PXZvaWQgMD9hcmd1bWVudHNbMl06MzAwLGY9YXJndW1lbnRzLmxlbmd0aD4zJiZhcmd1bWVudHNbM10hPT12b2lkIDA/YXJndW1lbnRzWzNdOjcwMDtpZihQPUooe30sUCksIVAubWFpbiYmUFtHXSYmKFAubWFpbj1QW0ddKSwhUC5tYWluKXRocm93IG5ldyBFcnJvcihcIk1hdGVyaWFsLVVJOiBUaGUgY29sb3IgcHJvdmlkZWQgdG8gYXVnbWVudENvbG9yKGNvbG9yKSBpcyBpbnZhbGlkLlxcblRoZSBjb2xvciBvYmplY3QgbmVlZHMgdG8gaGF2ZSBhIGBtYWluYCBwcm9wZXJ0eSBvciBhIGBcIi5jb25jYXQoRyxcImAgcHJvcGVydHkuXCIpKTtpZih0eXBlb2YgUC5tYWluIT1cInN0cmluZ1wiKXRocm93IG5ldyBFcnJvcihcIk1hdGVyaWFsLVVJOiBUaGUgY29sb3IgcHJvdmlkZWQgdG8gYXVnbWVudENvbG9yKGNvbG9yKSBpcyBpbnZhbGlkLlxcbmBjb2xvci5tYWluYCBzaG91bGQgYmUgYSBzdHJpbmcsIGJ1dCBgXCIuY29uY2F0KEpTT04uc3RyaW5naWZ5KFAubWFpbiksYFxcYCB3YXMgcHJvdmlkZWQgaW5zdGVhZC5cclxuXHJcbkRpZCB5b3UgaW50ZW5kIHRvIHVzZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBhcHByb2FjaGVzP1xyXG5cclxuaW1wb3J0IHtcXHhBMGdyZWVuIH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL2NvbG9yc1wiO1xyXG5cclxuY29uc3QgdGhlbWUxID0gY3JlYXRlTXVpVGhlbWUoeyBwYWxldHRlOiB7XHJcbiAgcHJpbWFyeTogZ3JlZW4sXHJcbn0gfSk7XHJcblxyXG5jb25zdCB0aGVtZTIgPSBjcmVhdGVNdWlUaGVtZSh7IHBhbGV0dGU6IHtcclxuICBwcmltYXJ5OiB7IG1haW46IGdyZWVuWzUwMF0gfSxcclxufSB9KTtgKSk7cmV0dXJuIER0KFAsXCJsaWdodFwiLGNlLE0pLER0KFAsXCJkYXJrXCIsZixNKSxQLmNvbnRyYXN0VGV4dHx8KFAuY29udHJhc3RUZXh0PVkoUC5tYWluKSksUH0sVz17ZGFyazpfcixsaWdodDpNdH07V1skXXx8Y29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiBUaGUgcGFsZXR0ZSB0eXBlIGBcIi5jb25jYXQoJCxcImAgaXMgbm90IHN1cHBvcnRlZC5cIikpO3ZhciBhZT1zZShKKHtjb21tb246U2UsdHlwZTokLHByaW1hcnk6Rih0KSxzZWNvbmRhcnk6RihzLFwiQTQwMFwiLFwiQTIwMFwiLFwiQTcwMFwiKSxlcnJvcjpGKGQpLHdhcm5pbmc6RihtKSxpbmZvOkYoTyksc3VjY2VzczpGKFYpLGdyZXk6emUsY29udHJhc3RUaHJlc2hvbGQ6WCxnZXRDb250cmFzdFRleHQ6WSxhdWdtZW50Q29sb3I6Rix0b25hbE9mZnNldDpNfSxXWyRdKSxuZSk7cmV0dXJuIGFlfWZ1bmN0aW9uICR0KHIpe3JldHVybiBNYXRoLnJvdW5kKHIqMWU1KS8xZTV9dmFyIE50PXt0ZXh0VHJhbnNmb3JtOlwidXBwZXJjYXNlXCJ9LFd0PSdcIlJvYm90b1wiLCBcIkhlbHZldGljYVwiLCBcIkFyaWFsXCIsIHNhbnMtc2VyaWYnO2Z1bmN0aW9uIFRyKHIsbil7dmFyIHQ9dHlwZW9mIG49PVwiZnVuY3Rpb25cIj9uKHIpOm4saT10LmZvbnRGYW1pbHkscz1pPT09dm9pZCAwP1d0OmksYz10LmZvbnRTaXplLGQ9Yz09PXZvaWQgMD8xNDpjLGg9dC5mb250V2VpZ2h0TGlnaHQsbT1oPT09dm9pZCAwPzMwMDpoLF89dC5mb250V2VpZ2h0UmVndWxhcixPPV89PT12b2lkIDA/NDAwOl8sTD10LmZvbnRXZWlnaHRNZWRpdW0sVj1MPT09dm9pZCAwPzUwMDpMLEM9dC5mb250V2VpZ2h0Qm9sZCwkPUM9PT12b2lkIDA/NzAwOkMsej10Lmh0bWxGb250U2l6ZSxYPXo9PT12b2lkIDA/MTY6eixRPXQuYWxsVmFyaWFudHMsTT10LnB4VG9SZW0sbmU9ZmUodCxbXCJmb250RmFtaWx5XCIsXCJmb250U2l6ZVwiLFwiZm9udFdlaWdodExpZ2h0XCIsXCJmb250V2VpZ2h0UmVndWxhclwiLFwiZm9udFdlaWdodE1lZGl1bVwiLFwiZm9udFdlaWdodEJvbGRcIixcImh0bWxGb250U2l6ZVwiLFwiYWxsVmFyaWFudHNcIixcInB4VG9SZW1cIl0pO3R5cGVvZiBkIT1cIm51bWJlclwiJiZjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IGBmb250U2l6ZWAgaXMgcmVxdWlyZWQgdG8gYmUgYSBudW1iZXIuXCIpLHR5cGVvZiBYIT1cIm51bWJlclwiJiZjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IGBodG1sRm9udFNpemVgIGlzIHJlcXVpcmVkIHRvIGJlIGEgbnVtYmVyLlwiKTt2YXIgWT1kLzE0LEY9TXx8ZnVuY3Rpb24oUyl7cmV0dXJuXCJcIi5jb25jYXQoUy9YKlksXCJyZW1cIil9LFc9ZnVuY3Rpb24oUCxHLGNlLGYscCl7cmV0dXJuIEooe2ZvbnRGYW1pbHk6cyxmb250V2VpZ2h0OlAsZm9udFNpemU6RihHKSxsaW5lSGVpZ2h0OmNlfSxzPT09V3Q/e2xldHRlclNwYWNpbmc6XCJcIi5jb25jYXQoJHQoZi9HKSxcImVtXCIpfTp7fSxwLFEpfSxhZT17aDE6VyhtLDk2LDEuMTY3LC0xLjUpLGgyOlcobSw2MCwxLjIsLS41KSxoMzpXKE8sNDgsMS4xNjcsMCksaDQ6VyhPLDM0LDEuMjM1LC4yNSksaDU6VyhPLDI0LDEuMzM0LDApLGg2OlcoViwyMCwxLjYsLjE1KSxzdWJ0aXRsZTE6VyhPLDE2LDEuNzUsLjE1KSxzdWJ0aXRsZTI6VyhWLDE0LDEuNTcsLjEpLGJvZHkxOlcoTywxNiwxLjUsLjE1KSxib2R5MjpXKE8sMTQsMS40MywuMTUpLGJ1dHRvbjpXKFYsMTQsMS43NSwuNCxOdCksY2FwdGlvbjpXKE8sMTIsMS42NiwuNCksb3ZlcmxpbmU6VyhPLDEyLDIuNjYsMSxOdCl9O3JldHVybiBzZShKKHtodG1sRm9udFNpemU6WCxweFRvUmVtOkYscm91bmQ6JHQsZm9udEZhbWlseTpzLGZvbnRTaXplOmQsZm9udFdlaWdodExpZ2h0Om0sZm9udFdlaWdodFJlZ3VsYXI6Tyxmb250V2VpZ2h0TWVkaXVtOlYsZm9udFdlaWdodEJvbGQ6JH0sYWUpLG5lLHtjbG9uZTohMX0pfXZhciBQYT0uMixTYT0uMTQsamE9LjEyO2Z1bmN0aW9uIEIoKXtyZXR1cm5bXCJcIi5jb25jYXQoYXJndW1lbnRzLmxlbmd0aDw9MD92b2lkIDA6YXJndW1lbnRzWzBdLFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoPD0xP3ZvaWQgMDphcmd1bWVudHNbMV0sXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGg8PTI/dm9pZCAwOmFyZ3VtZW50c1syXSxcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aDw9Mz92b2lkIDA6YXJndW1lbnRzWzNdLFwicHggcmdiYSgwLDAsMCxcIikuY29uY2F0KFBhLFwiKVwiKSxcIlwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoPD00P3ZvaWQgMDphcmd1bWVudHNbNF0sXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGg8PTU/dm9pZCAwOmFyZ3VtZW50c1s1XSxcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aDw9Nj92b2lkIDA6YXJndW1lbnRzWzZdLFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoPD03P3ZvaWQgMDphcmd1bWVudHNbN10sXCJweCByZ2JhKDAsMCwwLFwiKS5jb25jYXQoU2EsXCIpXCIpLFwiXCIuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGg8PTg/dm9pZCAwOmFyZ3VtZW50c1s4XSxcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aDw9OT92b2lkIDA6YXJndW1lbnRzWzldLFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoPD0xMD92b2lkIDA6YXJndW1lbnRzWzEwXSxcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aDw9MTE/dm9pZCAwOmFyZ3VtZW50c1sxMV0sXCJweCByZ2JhKDAsMCwwLFwiKS5jb25jYXQoamEsXCIpXCIpXS5qb2luKFwiLFwiKX12YXIga2E9W1wibm9uZVwiLEIoMCwyLDEsLTEsMCwxLDEsMCwwLDEsMywwKSxCKDAsMywxLC0yLDAsMiwyLDAsMCwxLDUsMCksQigwLDMsMywtMiwwLDMsNCwwLDAsMSw4LDApLEIoMCwyLDQsLTEsMCw0LDUsMCwwLDEsMTAsMCksQigwLDMsNSwtMSwwLDUsOCwwLDAsMSwxNCwwKSxCKDAsMyw1LC0xLDAsNiwxMCwwLDAsMSwxOCwwKSxCKDAsNCw1LC0yLDAsNywxMCwxLDAsMiwxNiwxKSxCKDAsNSw1LC0zLDAsOCwxMCwxLDAsMywxNCwyKSxCKDAsNSw2LC0zLDAsOSwxMiwxLDAsMywxNiwyKSxCKDAsNiw2LC0zLDAsMTAsMTQsMSwwLDQsMTgsMyksQigwLDYsNywtNCwwLDExLDE1LDEsMCw0LDIwLDMpLEIoMCw3LDgsLTQsMCwxMiwxNywyLDAsNSwyMiw0KSxCKDAsNyw4LC00LDAsMTMsMTksMiwwLDUsMjQsNCksQigwLDcsOSwtNCwwLDE0LDIxLDIsMCw1LDI2LDQpLEIoMCw4LDksLTUsMCwxNSwyMiwyLDAsNiwyOCw1KSxCKDAsOCwxMCwtNSwwLDE2LDI0LDIsMCw2LDMwLDUpLEIoMCw4LDExLC01LDAsMTcsMjYsMiwwLDYsMzIsNSksQigwLDksMTEsLTUsMCwxOCwyOCwyLDAsNywzNCw2KSxCKDAsOSwxMiwtNiwwLDE5LDI5LDIsMCw3LDM2LDYpLEIoMCwxMCwxMywtNiwwLDIwLDMxLDMsMCw4LDM4LDcpLEIoMCwxMCwxMywtNiwwLDIxLDMzLDMsMCw4LDQwLDcpLEIoMCwxMCwxNCwtNiwwLDIyLDM1LDMsMCw4LDQyLDcpLEIoMCwxMSwxNCwtNywwLDIzLDM2LDMsMCw5LDQ0LDgpLEIoMCwxMSwxNSwtNywwLDI0LDM4LDMsMCw5LDQ2LDgpXSxVdD1rYTt2YXIgSWE9e2JvcmRlclJhZGl1czo0fSxZdD1JYTt2YXIgVGU9UGUoZ3IoKSksTWE9VGUuZGVmYXVsdC5vbmVPZlR5cGUoW1RlLmRlZmF1bHQubnVtYmVyLFRlLmRlZmF1bHQuc3RyaW5nLFRlLmRlZmF1bHQub2JqZWN0LFRlLmRlZmF1bHQuYXJyYXldKSxMdD1NYTtmdW5jdGlvbiBqZShyLG4peyhuPT1udWxsfHxuPnIubGVuZ3RoKSYmKG49ci5sZW5ndGgpO2Zvcih2YXIgdD0wLGk9bmV3IEFycmF5KG4pO3Q8bjt0KyspaVt0XT1yW3RdO3JldHVybiBpfWZ1bmN0aW9uIEplKHIsbil7aWYoISFyKXtpZih0eXBlb2Ygcj09XCJzdHJpbmdcIilyZXR1cm4gamUocixuKTt2YXIgdD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocikuc2xpY2UoOCwtMSk7aWYodD09PVwiT2JqZWN0XCImJnIuY29uc3RydWN0b3ImJih0PXIuY29uc3RydWN0b3IubmFtZSksdD09PVwiTWFwXCJ8fHQ9PT1cIlNldFwiKXJldHVybiBBcnJheS5mcm9tKHIpO2lmKHQ9PT1cIkFyZ3VtZW50c1wifHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KSlyZXR1cm4gamUocixuKX19dmFyICRhPVBlKGdyKCkpO2Z1bmN0aW9uIERhKHIsbil7cmV0dXJuIG4/c2UocixuLHtjbG9uZTohMX0pOnJ9dmFyIFZ0PURhO3ZhciBOYT17eHM6MCxzbTo2MDAsbWQ6OTYwLGxnOjEyODAseGw6MTkyMH0senQ9e2tleXM6W1wieHNcIixcInNtXCIsXCJtZFwiLFwibGdcIixcInhsXCJdLHVwOmZ1bmN0aW9uKG4pe3JldHVyblwiQG1lZGlhIChtaW4td2lkdGg6XCIuY29uY2F0KE5hW25dLFwicHgpXCIpfX07ZnVuY3Rpb24gRnQocixuLHQpe2lmKHIudGhlbWV8fGNvbnNvbGUuZXJyb3IoXCJNYXRlcmlhbC1VSTogWW91IGFyZSBjYWxsaW5nIGEgc3R5bGUgZnVuY3Rpb24gd2l0aG91dCBhIHRoZW1lIHZhbHVlLlwiKSxBcnJheS5pc0FycmF5KG4pKXt2YXIgaT1yLnRoZW1lLmJyZWFrcG9pbnRzfHx6dDtyZXR1cm4gbi5yZWR1Y2UoZnVuY3Rpb24oZCxoLG0pe3JldHVybiBkW2kudXAoaS5rZXlzW21dKV09dChuW21dKSxkfSx7fSl9aWYobWUobik9PT1cIm9iamVjdFwiKXt2YXIgcz1yLnRoZW1lLmJyZWFrcG9pbnRzfHx6dDtyZXR1cm4gT2JqZWN0LmtleXMobikucmVkdWNlKGZ1bmN0aW9uKGQsaCl7cmV0dXJuIGRbcy51cChoKV09dChuW2hdKSxkfSx7fSl9dmFyIGM9dChuKTtyZXR1cm4gY31mdW5jdGlvbiB3cihyKXtpZihBcnJheS5pc0FycmF5KHIpKXJldHVybiByfWZ1bmN0aW9uIFJyKHIsbil7aWYoISh0eXBlb2YgU3ltYm9sPT1cInVuZGVmaW5lZFwifHwhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QocikpKSl7dmFyIHQ9W10saT0hMCxzPSExLGM9dm9pZCAwO3RyeXtmb3IodmFyIGQ9cltTeW1ib2wuaXRlcmF0b3JdKCksaDshKGk9KGg9ZC5uZXh0KCkpLmRvbmUpJiYodC5wdXNoKGgudmFsdWUpLCEobiYmdC5sZW5ndGg9PT1uKSk7aT0hMCk7fWNhdGNoKG0pe3M9ITAsYz1tfWZpbmFsbHl7dHJ5eyFpJiZkLnJldHVybiE9bnVsbCYmZC5yZXR1cm4oKX1maW5hbGx5e2lmKHMpdGhyb3cgY319cmV0dXJuIHR9fWZ1bmN0aW9uIEFyKCl7dGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cclxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLmApfWZ1bmN0aW9uIENyKHIsbil7cmV0dXJuIHdyKHIpfHxScihyLG4pfHxKZShyLG4pfHxBcigpfWZ1bmN0aW9uIFByKHIpe3ZhciBuPXt9O3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gblt0XT09PXZvaWQgMCYmKG5bdF09cih0KSksblt0XX19dmFyIFdhPXttOlwibWFyZ2luXCIscDpcInBhZGRpbmdcIn0sVWE9e3Q6XCJUb3BcIixyOlwiUmlnaHRcIixiOlwiQm90dG9tXCIsbDpcIkxlZnRcIix4OltcIkxlZnRcIixcIlJpZ2h0XCJdLHk6W1wiVG9wXCIsXCJCb3R0b21cIl19LHF0PXttYXJnaW5YOlwibXhcIixtYXJnaW5ZOlwibXlcIixwYWRkaW5nWDpcInB4XCIscGFkZGluZ1k6XCJweVwifSxZYT1QcihmdW5jdGlvbihyKXtpZihyLmxlbmd0aD4yKWlmKHF0W3JdKXI9cXRbcl07ZWxzZSByZXR1cm5bcl07dmFyIG49ci5zcGxpdChcIlwiKSx0PUNyKG4sMiksaT10WzBdLHM9dFsxXSxjPVdhW2ldLGQ9VWFbc118fFwiXCI7cmV0dXJuIEFycmF5LmlzQXJyYXkoZCk/ZC5tYXAoZnVuY3Rpb24oaCl7cmV0dXJuIGMraH0pOltjK2RdfSksU3I9W1wibVwiLFwibXRcIixcIm1yXCIsXCJtYlwiLFwibWxcIixcIm14XCIsXCJteVwiLFwicFwiLFwicHRcIixcInByXCIsXCJwYlwiLFwicGxcIixcInB4XCIsXCJweVwiLFwibWFyZ2luXCIsXCJtYXJnaW5Ub3BcIixcIm1hcmdpblJpZ2h0XCIsXCJtYXJnaW5Cb3R0b21cIixcIm1hcmdpbkxlZnRcIixcIm1hcmdpblhcIixcIm1hcmdpbllcIixcInBhZGRpbmdcIixcInBhZGRpbmdUb3BcIixcInBhZGRpbmdSaWdodFwiLFwicGFkZGluZ0JvdHRvbVwiLFwicGFkZGluZ0xlZnRcIixcInBhZGRpbmdYXCIsXCJwYWRkaW5nWVwiXTtmdW5jdGlvbiBqcihyKXt2YXIgbj1yLnNwYWNpbmd8fDg7cmV0dXJuIHR5cGVvZiBuPT1cIm51bWJlclwiP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdCE9XCJudW1iZXJcIiYmY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiBFeHBlY3RlZCBzcGFjaW5nIGFyZ3VtZW50IHRvIGJlIGEgbnVtYmVyLCBnb3QgXCIuY29uY2F0KHQsXCIuXCIpKSxuKnR9OkFycmF5LmlzQXJyYXkobik/ZnVuY3Rpb24odCl7cmV0dXJuIHQ+bi5sZW5ndGgtMSYmY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogVGhlIHZhbHVlIHByb3ZpZGVkIChcIi5jb25jYXQodCxcIikgb3ZlcmZsb3dzLlwiKSxcIlRoZSBzdXBwb3J0ZWQgdmFsdWVzIGFyZTogXCIuY29uY2F0KEpTT04uc3RyaW5naWZ5KG4pLFwiLlwiKSxcIlwiLmNvbmNhdCh0LFwiID4gXCIpLmNvbmNhdChuLmxlbmd0aC0xLFwiLCB5b3UgbmVlZCB0byBhZGQgdGhlIG1pc3NpbmcgdmFsdWVzLlwiKV0uam9pbihgXHJcbmApKSxuW3RdfTp0eXBlb2Ygbj09XCJmdW5jdGlvblwiP246KGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSBgdGhlbWUuc3BhY2luZ2AgdmFsdWUgKFwiLmNvbmNhdChuLFwiKSBpcyBpbnZhbGlkLlwiKSxcIkl0IHNob3VsZCBiZSBhIG51bWJlciwgYW4gYXJyYXkgb3IgYSBmdW5jdGlvbi5cIl0uam9pbihgXHJcbmApKSxmdW5jdGlvbigpe30pfWZ1bmN0aW9uIExhKHIsbil7aWYodHlwZW9mIG49PVwic3RyaW5nXCJ8fG49PW51bGwpcmV0dXJuIG47dmFyIHQ9TWF0aC5hYnMobiksaT1yKHQpO3JldHVybiBuPj0wP2k6dHlwZW9mIGk9PVwibnVtYmVyXCI/LWk6XCItXCIuY29uY2F0KGkpfWZ1bmN0aW9uIFZhKHIsbil7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiByLnJlZHVjZShmdW5jdGlvbihpLHMpe3JldHVybiBpW3NdPUxhKG4sdCksaX0se30pfX1mdW5jdGlvbiBCdChyKXt2YXIgbj1yLnRoZW1lLHQ9anIobik7cmV0dXJuIE9iamVjdC5rZXlzKHIpLm1hcChmdW5jdGlvbihpKXtpZihTci5pbmRleE9mKGkpPT09LTEpcmV0dXJuIG51bGw7dmFyIHM9WWEoaSksYz1WYShzLHQpLGQ9cltpXTtyZXR1cm4gRnQocixkLGMpfSkucmVkdWNlKFZ0LHt9KX1CdC5wcm9wVHlwZXM9U3IucmVkdWNlKGZ1bmN0aW9uKHIsbil7cmV0dXJuIHJbbl09THQscn0se30pO0J0LmZpbHRlclByb3BzPVNyO3ZhciBIdDtmdW5jdGlvbiBrcigpe3ZhciByPWFyZ3VtZW50cy5sZW5ndGg+MCYmYXJndW1lbnRzWzBdIT09dm9pZCAwP2FyZ3VtZW50c1swXTo4O2lmKHIubXVpKXJldHVybiByO3ZhciBuPWpyKHtzcGFjaW5nOnJ9KSx0PWZ1bmN0aW9uKCl7Zm9yKHZhciBzPWFyZ3VtZW50cy5sZW5ndGgsYz1uZXcgQXJyYXkocyksZD0wO2Q8cztkKyspY1tkXT1hcmd1bWVudHNbZF07cmV0dXJuIGMubGVuZ3RoPD00fHxjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IFRvbyBtYW55IGFyZ3VtZW50cyBwcm92aWRlZCwgZXhwZWN0ZWQgYmV0d2VlbiAwIGFuZCA0LCBnb3QgXCIuY29uY2F0KGMubGVuZ3RoKSksYy5sZW5ndGg9PT0wP24oMSk6Yy5sZW5ndGg9PT0xP24oY1swXSk6Yy5tYXAoZnVuY3Rpb24oaCl7aWYodHlwZW9mIGg9PVwic3RyaW5nXCIpcmV0dXJuIGg7dmFyIG09bihoKTtyZXR1cm4gdHlwZW9mIG09PVwibnVtYmVyXCI/XCJcIi5jb25jYXQobSxcInB4XCIpOm19KS5qb2luKFwiIFwiKX07cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwidW5pdFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gSHR8fGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IHRoZW1lLnNwYWNpbmcudW5pdCB1c2FnZSBoYXMgYmVlbiBkZXByZWNhdGVkLlwiLFwiSXQgd2lsbCBiZSByZW1vdmVkIGluIHY1LlwiLFwiWW91IGNhbiByZXBsYWNlIGB0aGVtZS5zcGFjaW5nLnVuaXQgKiB5YCB3aXRoIGB0aGVtZS5zcGFjaW5nKHkpYC5cIixcIlwiLFwiWW91IGNhbiB1c2UgdGhlIGBodHRwczovL2dpdGh1Yi5jb20vbXVpLW9yZy9tYXRlcmlhbC11aS90cmVlL21hc3Rlci9wYWNrYWdlcy9tYXRlcmlhbC11aS1jb2RlbW9kL1JFQURNRS5tZCN0aGVtZS1zcGFjaW5nLWFwaWAgbWlncmF0aW9uIGhlbHBlciB0byBtYWtlIHRoZSBwcm9jZXNzIHNtb290aGVyLlwiXS5qb2luKGBcclxuYCkpLEh0PSEwLHJ9fSksdC5tdWk9ITAsdH12YXIgS3Q9e2Vhc2VJbk91dDpcImN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSlcIixlYXNlT3V0OlwiY3ViaWMtYmV6aWVyKDAuMCwgMCwgMC4yLCAxKVwiLGVhc2VJbjpcImN1YmljLWJlemllcigwLjQsIDAsIDEsIDEpXCIsc2hhcnA6XCJjdWJpYy1iZXppZXIoMC40LCAwLCAwLjYsIDEpXCJ9LEd0PXtzaG9ydGVzdDoxNTAsc2hvcnRlcjoyMDAsc2hvcnQ6MjUwLHN0YW5kYXJkOjMwMCxjb21wbGV4OjM3NSxlbnRlcmluZ1NjcmVlbjoyMjUsbGVhdmluZ1NjcmVlbjoxOTV9O2Z1bmN0aW9uIEp0KHIpe3JldHVyblwiXCIuY29uY2F0KE1hdGgucm91bmQociksXCJtc1wiKX12YXIgWHQ9e2Vhc2luZzpLdCxkdXJhdGlvbjpHdCxjcmVhdGU6ZnVuY3Rpb24oKXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPjAmJmFyZ3VtZW50c1swXSE9PXZvaWQgMD9hcmd1bWVudHNbMF06W1wiYWxsXCJdLHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZhcmd1bWVudHNbMV0hPT12b2lkIDA/YXJndW1lbnRzWzFdOnt9LGk9dC5kdXJhdGlvbixzPWk9PT12b2lkIDA/R3Quc3RhbmRhcmQ6aSxjPXQuZWFzaW5nLGQ9Yz09PXZvaWQgMD9LdC5lYXNlSW5PdXQ6YyxoPXQuZGVsYXksbT1oPT09dm9pZCAwPzA6aCxfPWZlKHQsW1wiZHVyYXRpb25cIixcImVhc2luZ1wiLFwiZGVsYXlcIl0pLE89ZnVuY3Rpb24oQyl7cmV0dXJuIHR5cGVvZiBDPT1cInN0cmluZ1wifSxMPWZ1bmN0aW9uKEMpe3JldHVybiFpc05hTihwYXJzZUZsb2F0KEMpKX07cmV0dXJuIU8obikmJiFBcnJheS5pc0FycmF5KG4pJiZjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogQXJndW1lbnQgXCJwcm9wc1wiIG11c3QgYmUgYSBzdHJpbmcgb3IgQXJyYXkuJyksIUwocykmJiFPKHMpJiZjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogQXJndW1lbnQgXCJkdXJhdGlvblwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcgYnV0IGZvdW5kICcuY29uY2F0KHMsXCIuXCIpKSxPKGQpfHxjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogQXJndW1lbnQgXCJlYXNpbmdcIiBtdXN0IGJlIGEgc3RyaW5nLicpLCFMKG0pJiYhTyhtKSYmY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IEFyZ3VtZW50IFwiZGVsYXlcIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nLicpLE9iamVjdC5rZXlzKF8pLmxlbmd0aCE9PTAmJmNvbnNvbGUuZXJyb3IoXCJNYXRlcmlhbC1VSTogVW5yZWNvZ25pemVkIGFyZ3VtZW50KHMpIFtcIi5jb25jYXQoT2JqZWN0LmtleXMoXykuam9pbihcIixcIiksXCJdLlwiKSksKEFycmF5LmlzQXJyYXkobik/bjpbbl0pLm1hcChmdW5jdGlvbihWKXtyZXR1cm5cIlwiLmNvbmNhdChWLFwiIFwiKS5jb25jYXQodHlwZW9mIHM9PVwic3RyaW5nXCI/czpKdChzKSxcIiBcIikuY29uY2F0KGQsXCIgXCIpLmNvbmNhdCh0eXBlb2YgbT09XCJzdHJpbmdcIj9tOkp0KG0pKX0pLmpvaW4oXCIsXCIpfSxnZXRBdXRvSGVpZ2h0RHVyYXRpb246ZnVuY3Rpb24obil7aWYoIW4pcmV0dXJuIDA7dmFyIHQ9bi8zNjtyZXR1cm4gTWF0aC5yb3VuZCgoNCsxNSpNYXRoLnBvdyh0LC4yNSkrdC81KSoxMCl9fTt2YXIgemE9e21vYmlsZVN0ZXBwZXI6MWUzLHNwZWVkRGlhbDoxMDUwLGFwcEJhcjoxMTAwLGRyYXdlcjoxMjAwLG1vZGFsOjEzMDAsc25hY2tiYXI6MTQwMCx0b29sdGlwOjE1MDB9LFF0PXphO2Z1bmN0aW9uIEZhKCl7Zm9yKHZhciByPWFyZ3VtZW50cy5sZW5ndGg+MCYmYXJndW1lbnRzWzBdIT09dm9pZCAwP2FyZ3VtZW50c1swXTp7fSxuPXIuYnJlYWtwb2ludHMsdD1uPT09dm9pZCAwP3t9Om4saT1yLm1peGlucyxzPWk9PT12b2lkIDA/e306aSxjPXIucGFsZXR0ZSxkPWM9PT12b2lkIDA/e306YyxoPXIuc3BhY2luZyxtPXIudHlwb2dyYXBoeSxfPW09PT12b2lkIDA/e306bSxPPWZlKHIsW1wiYnJlYWtwb2ludHNcIixcIm1peGluc1wiLFwicGFsZXR0ZVwiLFwic3BhY2luZ1wiLFwidHlwb2dyYXBoeVwiXSksTD1PcihkKSxWPXhyKHQpLEM9a3IoaCksJD1zZSh7YnJlYWtwb2ludHM6VixkaXJlY3Rpb246XCJsdHJcIixtaXhpbnM6RXIoVixDLHMpLG92ZXJyaWRlczp7fSxwYWxldHRlOkwscHJvcHM6e30sc2hhZG93czpVdCx0eXBvZ3JhcGh5OlRyKEwsXyksc3BhY2luZzpDLHNoYXBlOll0LHRyYW5zaXRpb25zOlh0LHpJbmRleDpRdH0sTyksej1hcmd1bWVudHMubGVuZ3RoLFg9bmV3IEFycmF5KHo+MT96LTE6MCksUT0xO1E8ejtRKyspWFtRLTFdPWFyZ3VtZW50c1tRXTskPVgucmVkdWNlKGZ1bmN0aW9uKFksRil7cmV0dXJuIHNlKFksRil9LCQpO3ZhciBNPVtcImNoZWNrZWRcIixcImRpc2FibGVkXCIsXCJlcnJvclwiLFwiZm9jdXNlZFwiLFwiZm9jdXNWaXNpYmxlXCIsXCJyZXF1aXJlZFwiLFwiZXhwYW5kZWRcIixcInNlbGVjdGVkXCJdLG5lPWZ1bmN0aW9uIFkoRixXKXt2YXIgYWU9YXJndW1lbnRzLmxlbmd0aD4yJiZhcmd1bWVudHNbMl0hPT12b2lkIDA/YXJndW1lbnRzWzJdOjEsUztmb3IoUyBpbiBGKXt2YXIgUD1GW1NdO2FlPT09MT9TLmluZGV4T2YoXCJNdWlcIik9PT0wJiZQJiZZKFAsUyxhZSsxKTpNLmluZGV4T2YoUykhPT0tMSYmT2JqZWN0LmtleXMoUCkubGVuZ3RoPjAmJihjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgYFwiLmNvbmNhdChXLFwiYCBjb21wb25lbnQgaW5jcmVhc2VzIFwiKStcInRoZSBDU1Mgc3BlY2lmaWNpdHkgb2YgdGhlIGBcIi5jb25jYXQoUyxcImAgaW50ZXJuYWwgc3RhdGUuXCIpLFwiWW91IGNhbiBub3Qgb3ZlcnJpZGUgaXQgbGlrZSB0aGlzOiBcIixKU09OLnN0cmluZ2lmeShGLG51bGwsMiksXCJcIixcIkluc3RlYWQsIHlvdSBuZWVkIHRvIHVzZSB0aGUgJHJ1bGVOYW1lIHN5bnRheDpcIixKU09OLnN0cmluZ2lmeSh7cm9vdDpoZSh7fSxcIiYkXCIuY29uY2F0KFMpLFApfSxudWxsLDIpLFwiXCIsXCJodHRwczovL21hdGVyaWFsLXVpLmNvbS9yL3BzZXVkby1jbGFzc2VzLWd1aWRlXCJdLmpvaW4oYFxyXG5gKSksRltTXT17fSl9fTtyZXR1cm4gbmUoJC5vdmVycmlkZXMpLCR9dmFyIFp0PUZhO3ZhciBJcj1QZShYZSgpKTt2YXIgdG49UGUoWGUoKSksbm49dG4uZGVmYXVsdC5jcmVhdGVDb250ZXh0KG51bGwpO25uLmRpc3BsYXlOYW1lPVwiVGhlbWVDb250ZXh0XCI7dmFyIGFuPW5uO2Z1bmN0aW9uIE1yKCl7dmFyIHI9SXIuZGVmYXVsdC51c2VDb250ZXh0KGFuKTtyZXR1cm4gSXIuZGVmYXVsdC51c2VEZWJ1Z1ZhbHVlKHIpLHJ9dmFyIHFhPVp0KCksb249cWE7dmFyIHVuPVBlKFhlKCkpO2Z1bmN0aW9uIERyKCl7dmFyIHI9TXIoKXx8b247cmV0dXJuIHVuLmRlZmF1bHQudXNlRGVidWdWYWx1ZShyKSxyfXZhciB0ZTsoZnVuY3Rpb24ocil7cltyLmRlc2t0b3A9MF09XCJkZXNrdG9wXCIscltyLnRhYmxldD0xXT1cInRhYmxldFwiLHJbci5tb2JpbGU9Ml09XCJtb2JpbGVcIn0pKHRlfHwodGU9e30pKTt2YXIgQmE9KCk9PntsZXQgcj1EcigpO3JldHVybiB3aW5kb3cuaW5uZXJXaWR0aD49ci5icmVha3BvaW50cy52YWx1ZXMubGc/MDpyLmJyZWFrcG9pbnRzLnZhbHVlcy5tZDw9d2luZG93LmlubmVyV2lkdGgmJndpbmRvdy5pbm5lcldpZHRoPHIuYnJlYWtwb2ludHMudmFsdWVzLmxnPzE6Mn0sSGE9KHIsbik9Pntzd2l0Y2gocil7Y2FzZSAwOnJldHVybmAke259PXckezEyMDB9YDtjYXNlIDE6cmV0dXJuYCR7bn09dyR7MTA4MH1gO2Nhc2UgMjpyZXR1cm5gJHtufT13JHs2MDB9YDtkZWZhdWx0OnJldHVybmAke259YH19LEthPSgpPT57bGV0IHI9d2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtyZXR1cm4gci5pbmRleE9mKFwiaXBob25lXCIpPjB8fHIuaW5kZXhPZihcImlwb2RcIik+MHx8ci5pbmRleE9mKFwiYW5kcm9pZFwiKT4wJiZyLmluZGV4T2YoXCJtb2JpbGVcIik+MD8yOnIuaW5kZXhPZihcImlwYWRcIik+MHx8ci5pbmRleE9mKFwiYW5kcm9pZFwiKT4wfHxyLmluZGV4T2YoXCJpcGFkXCIpPi0xfHxyLmluZGV4T2YoXCJtYWNpbnRvc2hcIik+LTEmJlwib250b3VjaGVuZFwiaW4gZG9jdW1lbnQ/MTowfTtcclxuLypcclxub2JqZWN0LWFzc2lnblxyXG4oYykgU2luZHJlIFNvcmh1c1xyXG5AbGljZW5zZSBNSVRcclxuKi9cclxuLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXHJcbiAqIHJlYWN0LWlzLmRldmVsb3BtZW50LmpzXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxyXG4gKi9cclxuLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjJcclxuICogcmVhY3QuZGV2ZWxvcG1lbnQuanNcclxuICpcclxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXHJcbiAqL1xyXG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMlxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBsPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49NjAxMDMscD02MDEwNjtleHBvcnRzLkZyYWdtZW50PTYwMTA3O2V4cG9ydHMuU3RyaWN0TW9kZT02MDEwODtleHBvcnRzLlByb2ZpbGVyPTYwMTE0O3ZhciBxPTYwMTA5LHI9NjAxMTAsdD02MDExMjtleHBvcnRzLlN1c3BlbnNlPTYwMTEzO3ZhciB1PTYwMTE1LHY9NjAxMTY7XG5pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgdz1TeW1ib2wuZm9yO249dyhcInJlYWN0LmVsZW1lbnRcIik7cD13KFwicmVhY3QucG9ydGFsXCIpO2V4cG9ydHMuRnJhZ21lbnQ9dyhcInJlYWN0LmZyYWdtZW50XCIpO2V4cG9ydHMuU3RyaWN0TW9kZT13KFwicmVhY3Quc3RyaWN0X21vZGVcIik7ZXhwb3J0cy5Qcm9maWxlcj13KFwicmVhY3QucHJvZmlsZXJcIik7cT13KFwicmVhY3QucHJvdmlkZXJcIik7cj13KFwicmVhY3QuY29udGV4dFwiKTt0PXcoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTtleHBvcnRzLlN1c3BlbnNlPXcoXCJyZWFjdC5zdXNwZW5zZVwiKTt1PXcoXCJyZWFjdC5tZW1vXCIpO3Y9dyhcInJlYWN0LmxhenlcIil9dmFyIHg9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO1xuZnVuY3Rpb24geShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eCYmYVt4XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfWZ1bmN0aW9uIHooYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9XG52YXIgQT17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sQj17fTtmdW5jdGlvbiBDKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUI7dGhpcy51cGRhdGVyPWN8fEF9Qy5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtDLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3Ioeig4NSkpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Qy5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07XG5mdW5jdGlvbiBEKCl7fUQucHJvdG90eXBlPUMucHJvdG90eXBlO2Z1bmN0aW9uIEUoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX12YXIgRj1FLnByb3RvdHlwZT1uZXcgRDtGLmNvbnN0cnVjdG9yPUU7bChGLEMucHJvdG90eXBlKTtGLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBHPXtjdXJyZW50Om51bGx9LEg9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxJPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBKKGEsYixjKXt2YXIgZSxkPXt9LGs9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoZSBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoaz1cIlwiK2Iua2V5KSxiKUguY2FsbChiLGUpJiYhSS5oYXNPd25Qcm9wZXJ0eShlKSYmKGRbZV09YltlXSk7dmFyIGc9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1nKWQuY2hpbGRyZW49YztlbHNlIGlmKDE8Zyl7Zm9yKHZhciBmPUFycmF5KGcpLG09MDttPGc7bSsrKWZbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1mfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihlIGluIGc9YS5kZWZhdWx0UHJvcHMsZyl2b2lkIDA9PT1kW2VdJiYoZFtlXT1nW2VdKTtyZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEsa2V5OmsscmVmOmgscHJvcHM6ZCxfb3duZXI6Ry5jdXJyZW50fX1cbmZ1bmN0aW9uIEsoYSxiKXtyZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIEwoYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PW59ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIithLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBNPS9cXC8rL2c7ZnVuY3Rpb24gTihhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShcIlwiK2Eua2V5KTpiLnRvU3RyaW5nKDM2KX1cbmZ1bmN0aW9uIE8oYSxiLGMsZSxkKXt2YXIgaz10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09a3x8XCJib29sZWFuXCI9PT1rKWE9bnVsbDt2YXIgaD0hMTtpZihudWxsPT09YSloPSEwO2Vsc2Ugc3dpdGNoKGspe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6aD0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgbjpjYXNlIHA6aD0hMH19aWYoaClyZXR1cm4gaD1hLGQ9ZChoKSxhPVwiXCI9PT1lP1wiLlwiK04oaCwwKTplLEFycmF5LmlzQXJyYXkoZCk/KGM9XCJcIixudWxsIT1hJiYoYz1hLnJlcGxhY2UoTSxcIiQmL1wiKStcIi9cIiksTyhkLGIsYyxcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBhfSkpOm51bGwhPWQmJihMKGQpJiYoZD1LKGQsYysoIWQua2V5fHxoJiZoLmtleT09PWQua2V5P1wiXCI6KFwiXCIrZC5rZXkpLnJlcGxhY2UoTSxcIiQmL1wiKStcIi9cIikrYSkpLGIucHVzaChkKSksMTtoPTA7ZT1cIlwiPT09ZT9cIi5cIjplK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBnPVxuMDtnPGEubGVuZ3RoO2crKyl7az1hW2ddO3ZhciBmPWUrTihrLGcpO2grPU8oayxiLGMsZixkKX1lbHNlIGlmKGY9eShhKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksZz0wOyEoaz1hLm5leHQoKSkuZG9uZTspaz1rLnZhbHVlLGY9ZStOKGssZysrKSxoKz1PKGssYixjLGYsZCk7ZWxzZSBpZihcIm9iamVjdFwiPT09ayl0aHJvdyBiPVwiXCIrYSxFcnJvcih6KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1iP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmIpKTtyZXR1cm4gaH1mdW5jdGlvbiBQKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBlPVtdLGQ9MDtPKGEsZSxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChjLGEsZCsrKX0pO3JldHVybiBlfVxuZnVuY3Rpb24gUShhKXtpZigtMT09PWEuX3N0YXR1cyl7dmFyIGI9YS5fcmVzdWx0O2I9YigpO2EuX3N0YXR1cz0wO2EuX3Jlc3VsdD1iO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSl9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0O3Rocm93IGEuX3Jlc3VsdDt9dmFyIFI9e2N1cnJlbnQ6bnVsbH07ZnVuY3Rpb24gUygpe3ZhciBhPVIuY3VycmVudDtpZihudWxsPT09YSl0aHJvdyBFcnJvcih6KDMyMSkpO3JldHVybiBhfXZhciBUPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlIsUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6e3RyYW5zaXRpb246MH0sUmVhY3RDdXJyZW50T3duZXI6RyxJc1NvbWVSZW5kZXJlckFjdGluZzp7Y3VycmVudDohMX0sYXNzaWduOmx9O1xuZXhwb3J0cy5DaGlsZHJlbj17bWFwOlAsZm9yRWFjaDpmdW5jdGlvbihhLGIsYyl7UChhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGMpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1AoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBQKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIUwoYSkpdGhyb3cgRXJyb3IoeigxNDMpKTtyZXR1cm4gYX19O2V4cG9ydHMuQ29tcG9uZW50PUM7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUU7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1UO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKHooMjY3LGEpKTt2YXIgZT1sKHt9LGEucHJvcHMpLGQ9YS5rZXksaz1hLnJlZixoPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZixoPUcuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihkPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZz1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihmIGluIGIpSC5jYWxsKGIsZikmJiFJLmhhc093blByb3BlcnR5KGYpJiYoZVtmXT12b2lkIDA9PT1iW2ZdJiZ2b2lkIDAhPT1nP2dbZl06YltmXSl9dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWUuY2hpbGRyZW49YztlbHNlIGlmKDE8Zil7Zz1BcnJheShmKTtmb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLFxua2V5OmQscmVmOmsscHJvcHM6ZSxfb3duZXI6aH19O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOnIsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjpxLF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1KO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1KLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07ZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp0LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1MO1xuZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp2LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6UX19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp1LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDb250ZXh0KGEsYil9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsYyl9O1xuZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUygpLnVzZVJlZHVjZXIoYSxiLGMpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gUygpLnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gUygpLnVzZVN0YXRlKGEpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjJcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYwLjIwLjJcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGYsZyxoLGs7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIGw9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gbC5ub3coKX19ZWxzZXt2YXIgcD1EYXRlLHE9cC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBwLm5vdygpLXF9fVxuaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIHQ9bnVsbCx1PW51bGwsdz1mdW5jdGlvbigpe2lmKG51bGwhPT10KXRyeXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO3QoITAsYSk7dD1udWxsfWNhdGNoKGIpe3Rocm93IHNldFRpbWVvdXQodywwKSxiO319O2Y9ZnVuY3Rpb24oYSl7bnVsbCE9PXQ/c2V0VGltZW91dChmLDAsYSk6KHQ9YSxzZXRUaW1lb3V0KHcsMCkpfTtnPWZ1bmN0aW9uKGEsYil7dT1zZXRUaW1lb3V0KGEsYil9O2g9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodSl9O2V4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXtyZXR1cm4hMX07az1leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKCl7fX1lbHNle3ZhciB4PXdpbmRvdy5zZXRUaW1lb3V0LHk9d2luZG93LmNsZWFyVGltZW91dDtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUpe3ZhciB6PVxud2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIik7XCJmdW5jdGlvblwiIT09dHlwZW9mIHomJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL3JlYWN0anMub3JnL2xpbmsvcmVhY3QtcG9seWZpbGxzXCIpfXZhciBBPSExLEI9bnVsbCxDPS0xLEQ9NSxFPTA7ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpPj1cbkV9O2s9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCIpOkQ9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O3ZhciBGPW5ldyBNZXNzYWdlQ2hhbm5lbCxHPUYucG9ydDI7Ri5wb3J0MS5vbm1lc3NhZ2U9ZnVuY3Rpb24oKXtpZihudWxsIT09Qil7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtFPWErRDt0cnl7QighMCxhKT9HLnBvc3RNZXNzYWdlKG51bGwpOihBPSExLEI9bnVsbCl9Y2F0Y2goYil7dGhyb3cgRy5wb3N0TWVzc2FnZShudWxsKSxiO319ZWxzZSBBPSExfTtmPWZ1bmN0aW9uKGEpe0I9YTtBfHwoQT0hMCxHLnBvc3RNZXNzYWdlKG51bGwpKX07Zz1mdW5jdGlvbihhLGIpe0M9XG54KGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9O2g9ZnVuY3Rpb24oKXt5KEMpO0M9LTF9fWZ1bmN0aW9uIEgoYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKHZvaWQgMCE9PWUmJjA8SShlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gSihhKXthPWFbMF07cmV0dXJuIHZvaWQgMD09PWE/bnVsbDphfVxuZnVuY3Rpb24gSyhhKXt2YXIgYj1hWzBdO2lmKHZvaWQgMCE9PWIpe3ZhciBjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZDxlOyl7dmFyIG09MiooZCsxKS0xLG49YVttXSx2PW0rMSxyPWFbdl07aWYodm9pZCAwIT09biYmMD5JKG4sYykpdm9pZCAwIT09ciYmMD5JKHIsbik/KGFbZF09cixhW3ZdPWMsZD12KTooYVtkXT1uLGFbbV09YyxkPW0pO2Vsc2UgaWYodm9pZCAwIT09ciYmMD5JKHIsYykpYVtkXT1yLGFbdl09YyxkPXY7ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBJKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfXZhciBMPVtdLE09W10sTj0xLE89bnVsbCxQPTMsUT0hMSxSPSExLFM9ITE7XG5mdW5jdGlvbiBUKGEpe2Zvcih2YXIgYj1KKE0pO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spSyhNKTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKUsoTSksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxIKEwsYik7ZWxzZSBicmVhaztiPUooTSl9fWZ1bmN0aW9uIFUoYSl7Uz0hMTtUKGEpO2lmKCFSKWlmKG51bGwhPT1KKEwpKVI9ITAsZihWKTtlbHNle3ZhciBiPUooTSk7bnVsbCE9PWImJmcoVSxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBWKGEsYil7Uj0hMTtTJiYoUz0hMSxoKCkpO1E9ITA7dmFyIGM9UDt0cnl7VChiKTtmb3IoTz1KKEwpO251bGwhPT1PJiYoIShPLmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZCgpKTspe3ZhciBkPU8uY2FsbGJhY2s7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe08uY2FsbGJhY2s9bnVsbDtQPU8ucHJpb3JpdHlMZXZlbDt2YXIgZT1kKE8uZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT9PLmNhbGxiYWNrPWU6Tz09PUooTCkmJksoTCk7VChiKX1lbHNlIEsoTCk7Tz1KKEwpfWlmKG51bGwhPT1PKXZhciBtPSEwO2Vsc2V7dmFyIG49SihNKTtudWxsIT09biYmZyhVLG4uc3RhcnRUaW1lLWIpO209ITF9cmV0dXJuIG19ZmluYWxseXtPPW51bGwsUD1jLFE9ITF9fXZhciBXPWs7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtcbmV4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7Unx8UXx8KFI9ITAsZihWKSl9O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gUH07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBKKEwpfTtcbmV4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goUCl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9UH12YXIgYz1QO1A9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e1A9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PVc7ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz1QO1A9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e1A9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWM/KGM9Yy5kZWxheSxjPVwibnVtYmVyXCI9PT10eXBlb2YgYyYmMDxjP2QrYzpkKTpjPWQ7c3dpdGNoKGEpe2Nhc2UgMTp2YXIgZT0tMTticmVhaztjYXNlIDI6ZT0yNTA7YnJlYWs7Y2FzZSA1OmU9MTA3Mzc0MTgyMzticmVhaztjYXNlIDQ6ZT0xRTQ7YnJlYWs7ZGVmYXVsdDplPTVFM31lPWMrZTthPXtpZDpOKyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmMsZXhwaXJhdGlvblRpbWU6ZSxzb3J0SW5kZXg6LTF9O2M+ZD8oYS5zb3J0SW5kZXg9YyxIKE0sYSksbnVsbD09PUooTCkmJmE9PT1KKE0pJiYoUz9oKCk6Uz0hMCxnKFUsYy1kKSkpOihhLnNvcnRJbmRleD1lLEgoTCxhKSxSfHxRfHwoUj0hMCxmKFYpKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9UDtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1QO1A9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7UD1jfX19O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsInZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XHJcbnZhciBfX21hcmtBc01vZHVsZSA9ICh0YXJnZXQpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwiX19lc01vZHVsZVwiLCB7dmFsdWU6IHRydWV9KTtcclxudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XHJcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXHJcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7Z2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWV9KTtcclxufTtcclxuXHJcbi8vIHNyYy9pbmRleC50c1xyXG5fX21hcmtBc01vZHVsZShleHBvcnRzKTtcclxuX19leHBvcnQoZXhwb3J0cywge1xyXG4gIEZ1bmN0aW9uYWw6ICgpID0+IEZ1bmN0aW9uYWxfZXhwb3J0cyxcclxuICBNb2xkaW5nOiAoKSA9PiBNb2xkaW5nX2V4cG9ydHMsXHJcbiAgVG9vbHM6ICgpID0+IFRvb2xzX2V4cG9ydHMsXHJcbiAgVHlwZUd1YXJkOiAoKSA9PiBUeXBlR3VhcmRfZXhwb3J0cyxcclxuICBWYWx1ZUNoZWNrOiAoKSA9PiBWYWx1ZUNoZWNrX2V4cG9ydHNcclxufSk7XHJcblxyXG4vLyBzcmMvbGliL1R5cGVHdWFyZC9pbmRleC50c1xyXG52YXIgVHlwZUd1YXJkX2V4cG9ydHMgPSB7fTtcclxuX19leHBvcnQoVHlwZUd1YXJkX2V4cG9ydHMsIHtcclxuICBpc05vdE51bGw6ICgpID0+IGlzTm90TnVsbCxcclxuICBpc05vdFVuZGVmaW5lZDogKCkgPT4gaXNOb3RVbmRlZmluZWQsXHJcbiAgaXNOb3RVbmRlZmluZWRBbmROdWxsOiAoKSA9PiBpc05vdFVuZGVmaW5lZEFuZE51bGxcclxufSk7XHJcbnZhciBpc05vdFVuZGVmaW5lZCA9ICh2KSA9PiB7XHJcbiAgcmV0dXJuIHYgIT09IHZvaWQgMDtcclxufTtcclxudmFyIGlzTm90TnVsbCA9ICh2KSA9PiB7XHJcbiAgcmV0dXJuIHYgIT09IG51bGw7XHJcbn07XHJcbnZhciBpc05vdFVuZGVmaW5lZEFuZE51bGwgPSAodikgPT4ge1xyXG4gIHJldHVybiB2ICE9PSB2b2lkIDAgJiYgdiAhPT0gbnVsbDtcclxufTtcclxuXHJcbi8vIHNyYy9saWIvVmFsdWVDaGVjay9pbmRleC50c1xyXG52YXIgVmFsdWVDaGVja19leHBvcnRzID0ge307XHJcbl9fZXhwb3J0KFZhbHVlQ2hlY2tfZXhwb3J0cywge1xyXG4gIGludmFsaWREYXRhVG9Ub2RheTogKCkgPT4gaW52YWxpZERhdGFUb1RvZGF5LFxyXG4gIGlzWmVyb0xlbmd0aDogKCkgPT4gaXNaZXJvTGVuZ3RoLFxyXG4gIG5hblRvWmVybzogKCkgPT4gbmFuVG9aZXJvLFxyXG4gIG51bGxUb0JsYW5rOiAoKSA9PiBudWxsVG9CbGFuayxcclxuICB1bmRlZmluZWRBbmROdWxsVG9CbGFuazogKCkgPT4gdW5kZWZpbmVkQW5kTnVsbFRvQmxhbmssXHJcbiAgdW5kZWZpbmVkVG9CbGFuazogKCkgPT4gdW5kZWZpbmVkVG9CbGFua1xyXG59KTtcclxudmFyIHVuZGVmaW5lZFRvQmxhbmsgPSAodikgPT4ge1xyXG4gIHJldHVybiB2ID09PSB2b2lkIDAgPyBcIlwiIDogdjtcclxufTtcclxudmFyIG51bGxUb0JsYW5rID0gKHYpID0+IHtcclxuICByZXR1cm4gdiA9PT0gbnVsbCA/IFwiXCIgOiB2O1xyXG59O1xyXG52YXIgdW5kZWZpbmVkQW5kTnVsbFRvQmxhbmsgPSAodikgPT4ge1xyXG4gIHJldHVybiB2ICE9PSB2b2lkIDAgJiYgdiAhPT0gbnVsbCA/IHYgOiBcIlwiO1xyXG59O1xyXG52YXIgbmFuVG9aZXJvID0gKHYpID0+IHtcclxuICByZXR1cm4gdi50b1N0cmluZygpID09PSBcIk5hTlwiID8gMCA6IHY7XHJcbn07XHJcbnZhciBpbnZhbGlkRGF0YVRvVG9kYXkgPSAodikgPT4ge1xyXG4gIHJldHVybiB2LnRvU3RyaW5nKCkgPT09IFwiSW52YWxpZCBEYXRlXCIgPyBuZXcgRGF0ZSgpIDogbmV3IERhdGUodi5nZXRUaW1lKCkpO1xyXG59O1xyXG52YXIgaXNaZXJvTGVuZ3RoID0gKHYpID0+IHtcclxuICByZXR1cm4gdi5sZW5ndGggPT09IDA7XHJcbn07XHJcblxyXG4vLyBzcmMvbGliL0Z1bmN0aW9uYWwvaW5kZXgudHNcclxudmFyIEZ1bmN0aW9uYWxfZXhwb3J0cyA9IHt9O1xyXG5fX2V4cG9ydChGdW5jdGlvbmFsX2V4cG9ydHMsIHtcclxuICBQaXBlOiAoKSA9PiBQaXBlXHJcbn0pO1xyXG52YXIgUGlwZSA9IGNsYXNzIHtcclxuICBjb25zdHJ1Y3Rvcih2KSB7XHJcbiAgICB0aGlzLnYgPSB2O1xyXG4gIH1cclxuICBsb2coKSB7XHJcbiAgICBjb25zb2xlLmxvZyh0aGlzLnYpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG4gIHRvKGZjKSB7XHJcbiAgICB0aGlzLnYgPSBmYyh0aGlzLnYpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG4gIGV4aXQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy52O1xyXG4gIH1cclxufTtcclxuXHJcbi8vIHNyYy9saWIvTW9sZGluZy9pbmRleC50c1xyXG52YXIgTW9sZGluZ19leHBvcnRzID0ge307XHJcbl9fZXhwb3J0KE1vbGRpbmdfZXhwb3J0cywge1xyXG4gIHRvM0RpZ2l0TnVtOiAoKSA9PiB0bzNEaWdpdE51bSxcclxuICB0b1dvcmRQYWRkaW5nOiAoKSA9PiB0b1dvcmRQYWRkaW5nLFxyXG4gIHRvWmVyb1BhZGRpbmc6ICgpID0+IHRvWmVyb1BhZGRpbmdcclxufSk7XHJcbnZhciB0bzNEaWdpdE51bSA9IChudW0pID0+IHtcclxuICBpZiAobnVtLnRvU3RyaW5nKCkgPT09IFwiTmFOXCIpXHJcbiAgICByZXR1cm4gXCIwXCI7XHJcbiAgcmV0dXJuIE51bWJlcihudW0pLnRvTG9jYWxlU3RyaW5nKCk7XHJcbn07XHJcbnZhciB0b1plcm9QYWRkaW5nID0gKHYsIGRpZ2l0KSA9PiB7XHJcbiAgY29uc3QgXyA9IGRpZ2l0IDwgMCA/IC1kaWdpdCA6IGRpZ2l0O1xyXG4gIGlmICh0eXBlb2YgdiA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgcmV0dXJuIGAke1wiMFwiLnJlcGVhdChfKX0ke3YudG9TdHJpbmcoKX1gLnNsaWNlKC1fKTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIGAke1wiMFwiLnJlcGVhdChfKX0ke3Z9YC5zbGljZSgtXyk7XHJcbiAgfVxyXG59O1xyXG52YXIgdG9Xb3JkUGFkZGluZyA9ICh2LCBkaWdpdCwgd29yZCkgPT4ge1xyXG4gIGNvbnN0IF8gPSBkaWdpdCA8IDAgPyAtZGlnaXQgOiBkaWdpdDtcclxuICBpZiAodHlwZW9mIHYgPT09IFwibnVtYmVyXCIpIHtcclxuICAgIHJldHVybiBgJHt3b3JkLnJlcGVhdChfKX0ke3YudG9TdHJpbmcoKX1gLnNsaWNlKC1fKTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIGAke3dvcmQucmVwZWF0KF8pfSR7dn1gLnNsaWNlKC1fKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBzcmMvbGliL1Rvb2xzL2luZGV4LnRzXHJcbnZhciBUb29sc19leHBvcnRzID0ge307XHJcbl9fZXhwb3J0KFRvb2xzX2V4cG9ydHMsIHtcclxuICBjcmVhdGVIYXNoS2V5OiAoKSA9PiBjcmVhdGVIYXNoS2V5LFxyXG4gIHN3YXBEb3duOiAoKSA9PiBzd2FwRG93bixcclxuICBzd2FwVXA6ICgpID0+IHN3YXBVcCxcclxuICB0aHJvdHRsZTogKCkgPT4gdGhyb3R0bGVcclxufSk7XHJcbnZhciB0aHJvdHRsZSA9IChmbiwgaW50ZXJ2YWwpID0+IHtcclxuICBsZXQgbGFzdFRpbWUgPSBEYXRlLm5vdygpIC0gaW50ZXJ2YWw7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKGxhc3RUaW1lICsgaW50ZXJ2YWwgPCBEYXRlLm5vdygpKSB7XHJcbiAgICAgIGxhc3RUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgZm4oKTtcclxuICAgIH1cclxuICB9O1xyXG59O1xyXG5mdW5jdGlvbiBjcmVhdGVIYXNoS2V5KCkge1xyXG4gIGNvbnN0IGRpZ2l0ID0gMWUxMTtcclxuICBjb25zdCByYW5kTnVtcyA9IFtcclxuICAgIG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxyXG4gICAgTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogZGlnaXQpICsgZGlnaXQsXHJcbiAgICBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiBkaWdpdCkgKyBkaWdpdFxyXG4gIF07XHJcbiAgbGV0IGhhc2hfa2V5ID0gXCJcIjtcclxuICByYW5kTnVtcy5mb3JFYWNoKChieXRlKSA9PiBoYXNoX2tleSArPSBieXRlIDwgMCA/IChieXRlICs9IDI1NikudG9TdHJpbmcoMTYpIDogYnl0ZS50b1N0cmluZygxNikpO1xyXG4gIHJldHVybiBoYXNoX2tleTtcclxufVxyXG5mdW5jdGlvbiBzd2FwVXAoYXJyYXksIGluZGV4KSB7XHJcbiAgaWYgKGluZGV4IDw9IDApIHtcclxuICAgIHJldHVybiBhcnJheTtcclxuICB9IGVsc2Uge1xyXG4gICAgYXJyYXkuc3BsaWNlKGluZGV4IC0gMSwgMiwgYXJyYXlbaW5kZXhdLCBhcnJheVtpbmRleCAtIDFdKTtcclxuICAgIHJldHVybiBhcnJheTtcclxuICB9XHJcbn1cclxuZnVuY3Rpb24gc3dhcERvd24oYXJyYXksIGluZGV4KSB7XHJcbiAgaWYgKGluZGV4IDwgMCkge1xyXG4gICAgcmV0dXJuIGFycmF5O1xyXG4gIH0gZWxzZSBpZiAoYXJyYXkubGVuZ3RoIC0gMSA8PSBpbmRleCkge1xyXG4gICAgcmV0dXJuIGFycmF5O1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zb2xlLmxvZyhhcnJheS5sZW5ndGgpO1xyXG4gICAgYXJyYXkuc3BsaWNlKGluZGV4LCAyLCBhcnJheVtpbmRleCArIDFdLCBhcnJheVtpbmRleF0pO1xyXG4gICAgcmV0dXJuIGFycmF5O1xyXG4gIH1cclxufVxyXG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcblx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIG1vZHVsZTsgfTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIGRlZmluaXRpb24pIHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9IiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvLCBmcm9tKSB7XG4gIGlmIChmcm9tID09PSB1bmRlZmluZWQpIGZyb20gPSAnJztcblxuICB2YXIgdG9QYXJ0cyA9ICh0byAmJiB0by5zcGxpdCgnLycpKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IChmcm9tICYmIGZyb20uc3BsaXQoJy8nKSkgfHwgW107XG5cbiAgdmFyIGlzVG9BYnMgPSB0byAmJiBpc0Fic29sdXRlKHRvKTtcbiAgdmFyIGlzRnJvbUFicyA9IGZyb20gJiYgaXNBYnNvbHV0ZShmcm9tKTtcbiAgdmFyIG11c3RFbmRBYnMgPSBpc1RvQWJzIHx8IGlzRnJvbUFicztcblxuICBpZiAodG8gJiYgaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAvLyB0byBpcyBhYnNvbHV0ZVxuICAgIGZyb21QYXJ0cyA9IHRvUGFydHM7XG4gIH0gZWxzZSBpZiAodG9QYXJ0cy5sZW5ndGgpIHtcbiAgICAvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbiAgICBmcm9tUGFydHMucG9wKCk7XG4gICAgZnJvbVBhcnRzID0gZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTtcbiAgfVxuXG4gIGlmICghZnJvbVBhcnRzLmxlbmd0aCkgcmV0dXJuICcvJztcblxuICB2YXIgaGFzVHJhaWxpbmdTbGFzaDtcbiAgaWYgKGZyb21QYXJ0cy5sZW5ndGgpIHtcbiAgICB2YXIgbGFzdCA9IGZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoIC0gMV07XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nIHx8IGxhc3QgPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJ0ID0gZnJvbVBhcnRzW2ldO1xuXG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbXVzdEVuZEFicykgZm9yICg7IHVwLS07IHVwKSBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcblxuICBpZiAoXG4gICAgbXVzdEVuZEFicyAmJlxuICAgIGZyb21QYXJ0c1swXSAhPT0gJycgJiZcbiAgICAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKVxuICApXG4gICAgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lO1xuIiwidmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG52YXIgcHJlZml4ID0gJ0ludmFyaWFudCBmYWlsZWQnO1xuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXgpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4ICsgXCI6IFwiICsgKG1lc3NhZ2UgfHwgJycpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaW52YXJpYW50O1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHJlc29sdmVQYXRobmFtZSBmcm9tICdyZXNvbHZlLXBhdGhuYW1lJztcbmltcG9ydCB2YWx1ZUVxdWFsIGZyb20gJ3ZhbHVlLWVxdWFsJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcblxuZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn1cbmZ1bmN0aW9uIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIHBhdGgudG9Mb3dlckNhc2UoKS5pbmRleE9mKHByZWZpeC50b0xvd2VyQ2FzZSgpKSA9PT0gMCAmJiAnLz8jJy5pbmRleE9mKHBhdGguY2hhckF0KHByZWZpeC5sZW5ndGgpKSAhPT0gLTE7XG59XG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSA/IHBhdGguc3Vic3RyKHByZWZpeC5sZW5ndGgpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHN0cmlwVHJhaWxpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdChwYXRoLmxlbmd0aCAtIDEpID09PSAnLycgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignIycpO1xuXG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG5cbiAgaWYgKHNlYXJjaEluZGV4ICE9PSAtMSkge1xuICAgIHNlYXJjaCA9IHBhdGhuYW1lLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2ggPT09ICc/JyA/ICcnIDogc2VhcmNoLFxuICAgIGhhc2g6IGhhc2ggPT09ICcjJyA/ICcnIDogaGFzaFxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuICB2YXIgcGF0aCA9IHBhdGhuYW1lIHx8ICcvJztcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICc/JykgcGF0aCArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gJyMnKSBwYXRoICs9IGhhc2guY2hhckF0KDApID09PSAnIycgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuICByZXR1cm4gcGF0aDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbjtcblxuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gVHdvLWFyZyBmb3JtOiBwdXNoKHBhdGgsIHN0YXRlKVxuICAgIGxvY2F0aW9uID0gcGFyc2VQYXRoKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuICAgIGlmIChsb2NhdGlvbi5wYXRobmFtZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5wYXRobmFtZSA9ICcnO1xuXG4gICAgaWYgKGxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLnNlYXJjaC5jaGFyQXQoMCkgIT09ICc/JykgbG9jYXRpb24uc2VhcmNoID0gJz8nICsgbG9jYXRpb24uc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5zZWFyY2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLmhhc2guY2hhckF0KDApICE9PSAnIycpIGxvY2F0aW9uLmhhc2ggPSAnIycgKyBsb2NhdGlvbi5oYXNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5oYXNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlICE9PSB1bmRlZmluZWQgJiYgbG9jYXRpb24uc3RhdGUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgbG9jYXRpb24ucGF0aG5hbWUgPSBkZWNvZGVVUkkobG9jYXRpb24ucGF0aG5hbWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBVUklFcnJvcikge1xuICAgICAgdGhyb3cgbmV3IFVSSUVycm9yKCdQYXRobmFtZSBcIicgKyBsb2NhdGlvbi5wYXRobmFtZSArICdcIiBjb3VsZCBub3QgYmUgZGVjb2RlZC4gJyArICdUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgYW4gaW52YWxpZCBwZXJjZW50LWVuY29kaW5nLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChrZXkpIGxvY2F0aW9uLmtleSA9IGtleTtcblxuICBpZiAoY3VycmVudExvY2F0aW9uKSB7XG4gICAgLy8gUmVzb2x2ZSBpbmNvbXBsZXRlL3JlbGF0aXZlIHBhdGhuYW1lIHJlbGF0aXZlIHRvIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSByZXNvbHZlUGF0aG5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gcHJpb3IgbG9jYXRpb24gYW5kIHBhdGhuYW1lIGlzIGVtcHR5LCBzZXQgaXQgdG8gL1xuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gJy8nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsb2NhdGlvbjtcbn1cbmZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiB2YWx1ZUVxdWFsKGEuc3RhdGUsIGIuc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpIHtcbiAgdmFyIHByb21wdCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gc2V0UHJvbXB0KG5leHRQcm9tcHQpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByb21wdCA9PSBudWxsLCAnQSBoaXN0b3J5IHN1cHBvcnRzIG9ubHkgb25lIHByb21wdCBhdCBhIHRpbWUnKSA6IHZvaWQgMDtcbiAgICBwcm9tcHQgPSBuZXh0UHJvbXB0O1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvbXB0ID09PSBuZXh0UHJvbXB0KSBwcm9tcHQgPSBudWxsO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogSWYgYW5vdGhlciB0cmFuc2l0aW9uIHN0YXJ0cyB3aGlsZSB3ZSdyZSBzdGlsbCBjb25maXJtaW5nXG4gICAgLy8gdGhlIHByZXZpb3VzIG9uZSwgd2UgbWF5IGVuZCB1cCBpbiBhIHdlaXJkIHN0YXRlLiBGaWd1cmUgb3V0IHRoZVxuICAgIC8vIGJlc3Qgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgIGlmIChwcm9tcHQgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHR5cGVvZiBwcm9tcHQgPT09ICdmdW5jdGlvbicgPyBwcm9tcHQobG9jYXRpb24sIGFjdGlvbikgOiBwcm9tcHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGdldFVzZXJDb25maXJtYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBnZXRVc2VyQ29uZmlybWF0aW9uKHJlc3VsdCwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdBIGhpc3RvcnkgbmVlZHMgYSBnZXRVc2VyQ29uZmlybWF0aW9uIGZ1bmN0aW9uIGluIG9yZGVyIHRvIHVzZSBhIHByb21wdCBtZXNzYWdlJykgOiB2b2lkIDA7XG4gICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiBmYWxzZSBmcm9tIGEgdHJhbnNpdGlvbiBob29rIHRvIGNhbmNlbCB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0ICE9PSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICBmdW5jdGlvbiBhcHBlbmRMaXN0ZW5lcihmbikge1xuICAgIHZhciBpc0FjdGl2ZSA9IHRydWU7XG5cbiAgICBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgIGlmIChpc0FjdGl2ZSkgZm4uYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVycygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2V0UHJvbXB0OiBzZXRQcm9tcHQsXG4gICAgY29uZmlybVRyYW5zaXRpb25UbzogY29uZmlybVRyYW5zaXRpb25UbyxcbiAgICBhcHBlbmRMaXN0ZW5lcjogYXBwZW5kTGlzdGVuZXIsXG4gICAgbm90aWZ5TGlzdGVuZXJzOiBub3RpZnlMaXN0ZW5lcnNcbiAgfTtcbn1cblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5mdW5jdGlvbiBnZXRDb25maXJtYXRpb24obWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgJ3B1c2hTdGF0ZScgaW4gd2luZG93Lmhpc3Rvcnk7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBicm93c2VyIGZpcmVzIHBvcHN0YXRlIG9uIGhhc2ggY2hhbmdlLlxuICogSUUxMCBhbmQgSUUxMSBkbyBub3QuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSA9PT0gLTE7XG59XG4vKipcbiAqIFJldHVybnMgZmFsc2UgaWYgdXNpbmcgZ28obikgd2l0aCBoYXNoIGhpc3RvcnkgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cblxuZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufVxuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG5mdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUgMTEgc29tZXRpbWVzIHRocm93cyB3aGVuIGFjY2Vzc2luZyB3aW5kb3cuaGlzdG9yeS5zdGF0ZVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG4gICAgcmV0dXJuIHt9O1xuICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGluY2x1ZGluZ1xuICogcHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9IHN1cHBvcnRzSGlzdG9yeSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpO1xuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBfcHJvcHMkZm9yY2VSZWZyZXNoID0gX3Byb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcbiAgICB2YXIgX3JlZiA9IGhpc3RvcnlTdGF0ZSB8fCB7fSxcbiAgICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkpIHJldHVybjtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIHZhciBuZXh0S2V5cyA9IGFsbEtleXMuc2xpY2UoMCwgcHJldkluZGV4ICsgMSk7XG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsS2V5c1twcmV2SW5kZXhdID0gbG9jYXRpb24ua2V5O1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbnZhciBIYXNoQ2hhbmdlRXZlbnQkMSA9ICdoYXNoY2hhbmdlJztcbnZhciBIYXNoUGF0aENvZGVycyA9IHtcbiAgaGFzaGJhbmc6IHtcbiAgICBlbmNvZGVQYXRoOiBmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aCA6ICchLycgKyBzdHJpcExlYWRpbmdTbGFzaChwYXRoKTtcbiAgICB9LFxuICAgIGRlY29kZVBhdGg6IGZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG4gICAgfVxuICB9LFxuICBub3NsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogc3RyaXBMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9XG59O1xuXG5mdW5jdGlvbiBzdHJpcEhhc2godXJsKSB7XG4gIHZhciBoYXNoSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpO1xufVxuXG5mdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gJycgOiBocmVmLnN1YnN0cmluZyhoYXNoSW5kZXggKyAxKTtcbn1cblxuZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpICsgJyMnICsgcGF0aCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Hb1dpdGhvdXRSZWxvYWQgPSBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpO1xuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRoYXNoVHlwZSA9IF9wcm9wcy5oYXNoVHlwZSxcbiAgICAgIGhhc2hUeXBlID0gX3Byb3BzJGhhc2hUeXBlID09PSB2b2lkIDAgPyAnc2xhc2gnIDogX3Byb3BzJGhhc2hUeXBlO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuICB2YXIgX0hhc2hQYXRoQ29kZXJzJGhhc2hUID0gSGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLFxuICAgICAgZW5jb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5lbmNvZGVQYXRoLFxuICAgICAgZGVjb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5kZWNvZGVQYXRoO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoKTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgdmFyIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsJCQxKGEsIGIpIHtcbiAgICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2g7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG4gICAgICBpZiAoIWZvcmNlTmV4dFBvcCAmJiBsb2NhdGlvbnNBcmVFcXVhbCQkMShwcmV2TG9jYXRpb24sIGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBBIGhhc2hjaGFuZ2UgZG9lc24ndCBhbHdheXMgPT0gbG9jYXRpb24gY2hhbmdlLlxuXG4gICAgICBpZiAoaWdub3JlUGF0aCA9PT0gY3JlYXRlUGF0aChsb2NhdGlvbikpIHJldHVybjsgLy8gSWdub3JlIHRoaXMgY2hhbmdlOyB3ZSBhbHJlYWR5IHNldFN0YXRlIGluIHB1c2gvcmVwbGFjZS5cblxuICAgICAgaWdub3JlUGF0aCA9IG51bGw7XG4gICAgICBoYW5kbGVQb3AobG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIHBhdGhzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIHBhdGhzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgodG9Mb2NhdGlvbikpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoZnJvbUxvY2F0aW9uKSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH0gLy8gRW5zdXJlIHRoZSBoYXNoIGlzIGVuY29kZWQgcHJvcGVybHkgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2UuXG5cblxuICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG4gIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gIHZhciBhbGxQYXRocyA9IFtjcmVhdGVQYXRoKGluaXRpYWxMb2NhdGlvbildOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHZhciBiYXNlVGFnID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYmFzZScpO1xuICAgIHZhciBocmVmID0gJyc7XG5cbiAgICBpZiAoYmFzZVRhZyAmJiBiYXNlVGFnLmdldEF0dHJpYnV0ZSgnaHJlZicpKSB7XG4gICAgICBocmVmID0gc3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaHJlZiArICcjJyArIGVuY29kZVBhdGgoYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKSk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ICsgMSk7XG4gICAgICAgIG5leHRQYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICBhbGxQYXRocyA9IG5leHRQYXRocztcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdIYXNoIGhpc3RvcnkgY2Fubm90IFBVU0ggdGhlIHNhbWUgcGF0aDsgYSBuZXcgZW50cnkgd2lsbCBub3QgYmUgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2snKSA6IHZvaWQgMDtcbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBSRVBMQUNFLCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMuaW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxQYXRoc1twcmV2SW5kZXhdID0gcGF0aDtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKSA6IHZvaWQgMDtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50JDEsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50JDEsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCBzdG9yZXMgbG9jYXRpb25zIGluIG1lbW9yeS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgX3Byb3BzJGluaXRpYWxFbnRyaWVzID0gX3Byb3BzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPT09IHZvaWQgMCA/IFsnLyddIDogX3Byb3BzJGluaXRpYWxFbnRyaWVzLFxuICAgICAgX3Byb3BzJGluaXRpYWxJbmRleCA9IF9wcm9wcy5pbml0aWFsSW5kZXgsXG4gICAgICBpbml0aWFsSW5kZXggPSBfcHJvcHMkaW5pdGlhbEluZGV4ID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJGluaXRpYWxJbmRleCxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfVxuXG4gIHZhciBpbmRleCA9IGNsYW1wKGluaXRpYWxJbmRleCwgMCwgaW5pdGlhbEVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiB0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnID8gY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgY3JlYXRlS2V5KCkpIDogY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgZW50cnkua2V5IHx8IGNyZWF0ZUtleSgpKTtcbiAgfSk7IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGNyZWF0ZVBhdGg7XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG4gICAgICB2YXIgbmV4dEVudHJpZXMgPSBoaXN0b3J5LmVudHJpZXMuc2xpY2UoMCk7XG5cbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgaGlzdG9yeS5lbnRyaWVzW2hpc3RvcnkuaW5kZXhdID0gbG9jYXRpb247XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBjbGFtcChoaXN0b3J5LmluZGV4ICsgbiwgMCwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aCAtIDEpO1xuICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICB2YXIgbG9jYXRpb24gPSBoaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKG9rKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgaW5kZXg6IG5leHRJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1pbWljIHRoZSBiZWhhdmlvciBvZiBET00gaGlzdG9yaWVzIGJ5XG4gICAgICAgIC8vIGNhdXNpbmcgYSByZW5kZXIgYWZ0ZXIgYSBjYW5jZWxsZWQgUE9QLlxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gaGlzdG9yeS5pbmRleCArIG47XG4gICAgcmV0dXJuIG5leHRJbmRleCA+PSAwICYmIG5leHRJbmRleCA8IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGVudHJpZXMubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGVudHJpZXNbaW5kZXhdLFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjYW5HbzogY2FuR28sXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5leHBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCwgcGFyc2VQYXRoLCBjcmVhdGVQYXRoIH07XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5cbnZhciBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgPSAxMDczNzQxODIzO1xudmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB7fTtcblxuZnVuY3Rpb24gZ2V0VW5pcXVlSWQoKSB7XG4gIHZhciBrZXkgPSAnX19nbG9iYWxfdW5pcXVlX2lkX18nO1xuICByZXR1cm4gY29tbW9uanNHbG9iYWxba2V5XSA9IChjb21tb25qc0dsb2JhbFtrZXldIHx8IDApICsgMTtcbn1cblxuZnVuY3Rpb24gb2JqZWN0SXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50RW1pdHRlcih2YWx1ZSkge1xuICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBvbjogZnVuY3Rpb24gb24oaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICB9LFxuICAgIG9mZjogZnVuY3Rpb24gb2ZmKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzID0gaGFuZGxlcnMuZmlsdGVyKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiBoICE9PSBoYW5kbGVyO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIodmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuWzBdIDogY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0Q29udGV4dChkZWZhdWx0VmFsdWUsIGNhbGN1bGF0ZUNoYW5nZWRCaXRzKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXgsIF9Db25zdW1lciRjb250ZXh0VHlwZTtcblxuICB2YXIgY29udGV4dFByb3AgPSAnX19jcmVhdGUtcmVhY3QtY29udGV4dC0nICsgZ2V0VW5pcXVlSWQoKSArICdfXyc7XG5cbiAgdmFyIFByb3ZpZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIoKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5lbWl0dGVyID0gY3JlYXRlRXZlbnRFbWl0dGVyKF90aGlzLnByb3BzLnZhbHVlKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gUHJvdmlkZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW2NvbnRleHRQcm9wXSA9IHRoaXMuZW1pdHRlciwgX3JlZjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMudmFsdWUgIT09IG5leHRQcm9wcy52YWx1ZSkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBuZXh0UHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBjaGFuZ2VkQml0cztcblxuICAgICAgICBpZiAob2JqZWN0SXMob2xkVmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IHR5cGVvZiBjYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGN1bGF0ZUNoYW5nZWRCaXRzKG9sZFZhbHVlLCBuZXdWYWx1ZSkgOiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQ7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgd2FybmluZygoY2hhbmdlZEJpdHMgJiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQpID09PSBjaGFuZ2VkQml0cywgJ2NhbGN1bGF0ZUNoYW5nZWRCaXRzOiBFeHBlY3RlZCB0aGUgcmV0dXJuIHZhbHVlIHRvIGJlIGEgJyArICczMS1iaXQgaW50ZWdlci4gSW5zdGVhZCByZWNlaXZlZDogJyArIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGFuZ2VkQml0cyB8PSAwO1xuXG4gICAgICAgICAgaWYgKGNoYW5nZWRCaXRzICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuc2V0KG5leHRQcm9wcy52YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHZhciBDb25zdW1lciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgICBfaW5oZXJpdHNMb29zZShDb25zdW1lciwgX0NvbXBvbmVudDIpO1xuXG4gICAgZnVuY3Rpb24gQ29uc3VtZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyO1xuXG4gICAgICBfdGhpczIgPSBfQ29tcG9uZW50Mi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpczIuc3RhdGUgPSB7XG4gICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgfTtcblxuICAgICAgX3RoaXMyLm9uVXBkYXRlID0gZnVuY3Rpb24gKG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gX3RoaXMyLm9ic2VydmVkQml0cyB8IDA7XG5cbiAgICAgICAgaWYgKChvYnNlcnZlZEJpdHMgJiBjaGFuZ2VkQml0cykgIT09IDApIHtcbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBfdGhpczI7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90bzIgPSBDb25zdW1lci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IG5leHRQcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vbih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IHRoaXMucHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub2ZmKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5nZXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIG9ubHlDaGlsZCh0aGlzLnByb3BzLmNoaWxkcmVuKSh0aGlzLnN0YXRlLnZhbHVlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbnN1bWVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgQ29uc3VtZXIuY29udGV4dFR5cGVzID0gKF9Db25zdW1lciRjb250ZXh0VHlwZSA9IHt9LCBfQ29uc3VtZXIkY29udGV4dFR5cGVbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlKTtcbiAgcmV0dXJuIHtcbiAgICBQcm92aWRlcjogUHJvdmlkZXIsXG4gICAgQ29uc3VtZXI6IENvbnN1bWVyXG4gIH07XG59XG5cbnZhciBpbmRleCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQgfHwgY3JlYXRlUmVhY3RDb250ZXh0O1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBjcmVhdGVQYXRoIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGNyZWF0ZUNvbnRleHQgZnJvbSAnbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSAncGF0aC10by1yZWdleHAnO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5cbi8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcblxudmFyIGNyZWF0ZU5hbWVkQ29udGV4dCA9IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkQ29udGV4dChuYW1lKSB7XG4gIHZhciBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICBjb250ZXh0LmRpc3BsYXlOYW1lID0gbmFtZTtcbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG52YXIgaGlzdG9yeUNvbnRleHQgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlTmFtZWRDb250ZXh0KFwiUm91dGVyLUhpc3RvcnlcIik7XG5cbi8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcblxudmFyIGNyZWF0ZU5hbWVkQ29udGV4dCQxID0gZnVuY3Rpb24gY3JlYXRlTmFtZWRDb250ZXh0KG5hbWUpIHtcbiAgdmFyIGNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG4gIGNvbnRleHQuZGlzcGxheU5hbWUgPSBuYW1lO1xuICByZXR1cm4gY29udGV4dDtcbn07XG5cbnZhciBjb250ZXh0ID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZU5hbWVkQ29udGV4dCQxKFwiUm91dGVyXCIpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgUm91dGVyLmNvbXB1dGVSb290TWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlUm9vdE1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgdXJsOiBcIi9cIixcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gXCIvXCJcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIFJvdXRlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmhpc3RvcnkubG9jYXRpb25cbiAgICB9OyAvLyBUaGlzIGlzIGEgYml0IG9mIGEgaGFjay4gV2UgaGF2ZSB0byBzdGFydCBsaXN0ZW5pbmcgZm9yIGxvY2F0aW9uXG4gICAgLy8gY2hhbmdlcyBoZXJlIGluIHRoZSBjb25zdHJ1Y3RvciBpbiBjYXNlIHRoZXJlIGFyZSBhbnkgPFJlZGlyZWN0PnNcbiAgICAvLyBvbiB0aGUgaW5pdGlhbCByZW5kZXIuIElmIHRoZXJlIGFyZSwgdGhleSB3aWxsIHJlcGxhY2UvcHVzaCB3aGVuXG4gICAgLy8gdGhleSBtb3VudCBhbmQgc2luY2UgY0RNIGZpcmVzIGluIGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLCB3ZSBtYXlcbiAgICAvLyBnZXQgYSBuZXcgbG9jYXRpb24gYmVmb3JlIHRoZSA8Um91dGVyPiBpcyBtb3VudGVkLlxuXG4gICAgX3RoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuXG4gICAgaWYgKCFwcm9wcy5zdGF0aWNDb250ZXh0KSB7XG4gICAgICBfdGhpcy51bmxpc3RlbiA9IHByb3BzLmhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICBpZiAoX3RoaXMuX2lzTW91bnRlZCkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9wZW5kaW5nTG9jYXRpb24pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBsb2NhdGlvbjogdGhpcy5fcGVuZGluZ0xvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudW5saXN0ZW4pIHRoaXMudW5saXN0ZW4oKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIGhpc3Rvcnk6IHRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgICAgbG9jYXRpb246IHRoaXMuc3RhdGUubG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCh0aGlzLnN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lKSxcbiAgICAgICAgc3RhdGljQ29udGV4dDogdGhpcy5wcm9wcy5zdGF0aWNDb250ZXh0XG4gICAgICB9XG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChoaXN0b3J5Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgbnVsbCxcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLmhpc3RvcnlcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJldlByb3BzLmhpc3RvcnkgPT09IHRoaXMucHJvcHMuaGlzdG9yeSwgXCJZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+XCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTWVtb3J5Um91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTWVtb3J5Um91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE1lbW9yeVJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgaW5pdGlhbEVudHJpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBpbml0aWFsSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxuICB9O1xuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxNZW1vcnlSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIExpZmVjeWNsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShMaWZlY3ljbGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpZmVjeWNsZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGlmZWN5Y2xlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbk1vdW50KSB0aGlzLnByb3BzLm9uTW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVXBkYXRlKSB0aGlzLnByb3BzLm9uVXBkYXRlLmNhbGwodGhpcywgdGhpcywgcHJldlByb3BzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVubW91bnQpIHRoaXMucHJvcHMub25Vbm1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gTGlmZWN5Y2xlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwcm9tcHRpbmcgdGhlIHVzZXIgYmVmb3JlIG5hdmlnYXRpbmcgYXdheSBmcm9tIGEgc2NyZWVuLlxuICovXG5cbmZ1bmN0aW9uIFByb21wdChfcmVmKSB7XG4gIHZhciBtZXNzYWdlID0gX3JlZi5tZXNzYWdlLFxuICAgICAgX3JlZiR3aGVuID0gX3JlZi53aGVuLFxuICAgICAgd2hlbiA9IF9yZWYkd2hlbiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkd2hlbjtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFByb21wdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBpZiAoIXdoZW4gfHwgY29udGV4dC5zdGF0aWNDb250ZXh0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgbWV0aG9kID0gY29udGV4dC5oaXN0b3J5LmJsb2NrO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIGlmIChwcmV2UHJvcHMubWVzc2FnZSAhPT0gbWVzc2FnZSkge1xuICAgICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uVW5tb3VudDogZnVuY3Rpb24gb25Vbm1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICB9LFxuICAgICAgbWVzc2FnZTogbWVzc2FnZVxuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgbWVzc2FnZVR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pO1xuICBQcm9tcHQucHJvcFR5cGVzID0ge1xuICAgIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICAgIG1lc3NhZ2U6IG1lc3NhZ2VUeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoKSB7XG4gIGlmIChjYWNoZVtwYXRoXSkgcmV0dXJuIGNhY2hlW3BhdGhdO1xuICB2YXIgZ2VuZXJhdG9yID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUocGF0aCk7XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0aF0gPSBnZW5lcmF0b3I7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGdlbmVyYXRvcjtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0aCBhbmQgcGFyYW1ldGVycy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0aChwYXRoLCBwYXJhbXMpIHtcbiAgaWYgKHBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhdGggPSBcIi9cIjtcbiAgfVxuXG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHBhdGggPT09IFwiL1wiID8gcGF0aCA6IGNvbXBpbGVQYXRoKHBhdGgpKHBhcmFtcywge1xuICAgIHByZXR0eTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbmF2aWdhdGluZyBwcm9ncmFtbWF0aWNhbGx5IHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gUmVkaXJlY3QoX3JlZikge1xuICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIF9yZWYkcHVzaCA9IF9yZWYucHVzaCxcbiAgICAgIHB1c2ggPSBfcmVmJHB1c2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRwdXNoO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UmVkaXJlY3Q+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3RvcnksXG4gICAgICAgIHN0YXRpY0NvbnRleHQgPSBjb250ZXh0LnN0YXRpY0NvbnRleHQ7XG4gICAgdmFyIG1ldGhvZCA9IHB1c2ggPyBoaXN0b3J5LnB1c2ggOiBoaXN0b3J5LnJlcGxhY2U7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oY29tcHV0ZWRNYXRjaCA/IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGdlbmVyYXRlUGF0aCh0bywgY29tcHV0ZWRNYXRjaC5wYXJhbXMpIDogX2V4dGVuZHMoe30sIHRvLCB7XG4gICAgICBwYXRobmFtZTogZ2VuZXJhdGVQYXRoKHRvLnBhdGhuYW1lLCBjb21wdXRlZE1hdGNoLnBhcmFtcylcbiAgICB9KSA6IHRvKTsgLy8gV2hlbiByZW5kZXJpbmcgaW4gYSBzdGF0aWMgY29udGV4dCxcbiAgICAvLyBzZXQgdGhlIG5ldyBsb2NhdGlvbiBpbW1lZGlhdGVseS5cblxuICAgIGlmIChzdGF0aWNDb250ZXh0KSB7XG4gICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLCB7XG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KCkge1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShzZWxmLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHByZXZQcm9wcy50byk7XG5cbiAgICAgICAgaWYgKCFsb2NhdGlvbnNBcmVFcXVhbChwcmV2TG9jYXRpb24sIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgICAgICAgIGtleTogcHJldkxvY2F0aW9uLmtleVxuICAgICAgICB9KSkpIHtcbiAgICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdG86IHRvXG4gICAgfSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBmcm9tOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgY2FjaGUkMSA9IHt9O1xudmFyIGNhY2hlTGltaXQkMSA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQkMSA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoJDEocGF0aCwgb3B0aW9ucykge1xuICB2YXIgY2FjaGVLZXkgPSBcIlwiICsgb3B0aW9ucy5lbmQgKyBvcHRpb25zLnN0cmljdCArIG9wdGlvbnMuc2Vuc2l0aXZlO1xuICB2YXIgcGF0aENhY2hlID0gY2FjaGUkMVtjYWNoZUtleV0gfHwgKGNhY2hlJDFbY2FjaGVLZXldID0ge30pO1xuICBpZiAocGF0aENhY2hlW3BhdGhdKSByZXR1cm4gcGF0aENhY2hlW3BhdGhdO1xuICB2YXIga2V5cyA9IFtdO1xuICB2YXIgcmVnZXhwID0gcGF0aFRvUmVnZXhwKHBhdGgsIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHJlZ2V4cDogcmVnZXhwLFxuICAgIGtleXM6IGtleXNcbiAgfTtcblxuICBpZiAoY2FjaGVDb3VudCQxIDwgY2FjaGVMaW1pdCQxKSB7XG4gICAgcGF0aENhY2hlW3BhdGhdID0gcmVzdWx0O1xuICAgIGNhY2hlQ291bnQkMSsrO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBVUkwgcGF0aG5hbWUgdG8gYSBwYXRoLlxuICovXG5cblxuZnVuY3Rpb24gbWF0Y2hQYXRoKHBhdGhuYW1lLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShvcHRpb25zKSkge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICBwYXRoOiBvcHRpb25zXG4gICAgfTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwYXRoID0gX29wdGlvbnMucGF0aCxcbiAgICAgIF9vcHRpb25zJGV4YWN0ID0gX29wdGlvbnMuZXhhY3QsXG4gICAgICBleGFjdCA9IF9vcHRpb25zJGV4YWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGV4YWN0LFxuICAgICAgX29wdGlvbnMkc3RyaWN0ID0gX29wdGlvbnMuc3RyaWN0LFxuICAgICAgc3RyaWN0ID0gX29wdGlvbnMkc3RyaWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHN0cmljdCxcbiAgICAgIF9vcHRpb25zJHNlbnNpdGl2ZSA9IF9vcHRpb25zLnNlbnNpdGl2ZSxcbiAgICAgIHNlbnNpdGl2ZSA9IF9vcHRpb25zJHNlbnNpdGl2ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRzZW5zaXRpdmU7XG4gIHZhciBwYXRocyA9IFtdLmNvbmNhdChwYXRoKTtcbiAgcmV0dXJuIHBhdGhzLnJlZHVjZShmdW5jdGlvbiAobWF0Y2hlZCwgcGF0aCkge1xuICAgIGlmICghcGF0aCAmJiBwYXRoICE9PSBcIlwiKSByZXR1cm4gbnVsbDtcbiAgICBpZiAobWF0Y2hlZCkgcmV0dXJuIG1hdGNoZWQ7XG5cbiAgICB2YXIgX2NvbXBpbGVQYXRoID0gY29tcGlsZVBhdGgkMShwYXRoLCB7XG4gICAgICBlbmQ6IGV4YWN0LFxuICAgICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgICBzZW5zaXRpdmU6IHNlbnNpdGl2ZVxuICAgIH0pLFxuICAgICAgICByZWdleHAgPSBfY29tcGlsZVBhdGgucmVnZXhwLFxuICAgICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgICB2YXIgbWF0Y2ggPSByZWdleHAuZXhlYyhwYXRobmFtZSk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgICB2YWx1ZXMgPSBtYXRjaC5zbGljZSgxKTtcbiAgICB2YXIgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG4gICAgaWYgKGV4YWN0ICYmICFpc0V4YWN0KSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogcGF0aCxcbiAgICAgIC8vIHRoZSBwYXRoIHVzZWQgdG8gbWF0Y2hcbiAgICAgIHVybDogcGF0aCA9PT0gXCIvXCIgJiYgdXJsID09PSBcIlwiID8gXCIvXCIgOiB1cmwsXG4gICAgICAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICAgIGlzRXhhY3Q6IGlzRXhhY3QsXG4gICAgICAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICAgIHBhcmFtczoga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGtleSwgaW5kZXgpIHtcbiAgICAgICAgbWVtb1trZXkubmFtZV0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgIH0sIHt9KVxuICAgIH07XG4gIH0sIG51bGwpO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgcGF0aCkge1xuICB2YXIgdmFsdWUgPSBjaGlsZHJlbihwcm9wcyk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodmFsdWUgIT09IHVuZGVmaW5lZCwgXCJZb3UgcmV0dXJuZWQgYHVuZGVmaW5lZGAgZnJvbSB0aGUgYGNoaWxkcmVuYCBmdW5jdGlvbiBvZiBcIiArIChcIjxSb3V0ZVwiICsgKHBhdGggPyBcIiBwYXRoPVxcXCJcIiArIHBhdGggKyBcIlxcXCJcIiA6IFwiXCIpICsgXCI+LCBidXQgeW91IFwiKSArIFwic2hvdWxkIGhhdmUgcmV0dXJuZWQgYSBSZWFjdCBlbGVtZW50IG9yIGBudWxsYFwiKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHZhbHVlIHx8IG51bGw7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIHNpbmdsZSBwYXRoIGFuZCByZW5kZXJpbmcuXG4gKi9cblxuXG52YXIgUm91dGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkMSkge1xuICAgICAgIWNvbnRleHQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dCQxLmxvY2F0aW9uO1xuICAgICAgdmFyIG1hdGNoID0gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCA/IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG4gICAgICA6IF90aGlzLnByb3BzLnBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF90aGlzLnByb3BzKSA6IGNvbnRleHQkMS5tYXRjaDtcblxuICAgICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIGNvbnRleHQkMSwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBtYXRjaFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgIHJlbmRlciA9IF90aGlzJHByb3BzLnJlbmRlcjsgLy8gUHJlYWN0IHVzZXMgYW4gZW1wdHkgYXJyYXkgYXMgY2hpbGRyZW4gYnlcbiAgICAgIC8vIGRlZmF1bHQsIHNvIHVzZSBudWxsIGlmIHRoYXQncyB0aGUgY2FzZS5cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjaGlsZHJlbiA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHByb3BzXG4gICAgICB9LCBwcm9wcy5tYXRjaCA/IGNoaWxkcmVuID8gdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IGNoaWxkcmVuIDogY29tcG9uZW50ID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IHJlbmRlciA/IHJlbmRlcihwcm9wcykgOiBudWxsIDogdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IG51bGwpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZS5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KHByb3BzLCBwcm9wTmFtZSkge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgcHJvcCAnY29tcG9uZW50JyBzdXBwbGllZCB0byAnUm91dGUnOiB0aGUgcHJvcCBpcyBub3QgYSB2YWxpZCBSZWFjdCBjb21wb25lbnRcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcGF0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyldKSxcbiAgICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbFxuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMuY29tcG9uZW50KSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufVxuXG5mdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufVxuXG5mdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPlwiLCBtZXRob2ROYW1lKSA6IGludmFyaWFudChmYWxzZSkgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG5cbnZhciBTdGF0aWNSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJQVVNIXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJSRVBMQUNFXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0YXRpY1JvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm5hdmlnYXRlVG8gPSBmdW5jdGlvbiBuYXZpZ2F0ZVRvKGxvY2F0aW9uLCBhY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9IF90aGlzJHByb3BzLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzJGNvbnRleHQgPSBfdGhpcyRwcm9wcy5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wcyRjb250ZXh0O1xuICAgIGNvbnRleHQuYWN0aW9uID0gYWN0aW9uO1xuICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMyJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wczIkY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMyJGNvbnRleHQsXG4gICAgICAgIF90aGlzJHByb3BzMiRsb2NhdGlvbiA9IF90aGlzJHByb3BzMi5sb2NhdGlvbixcbiAgICAgICAgbG9jYXRpb24gPSBfdGhpcyRwcm9wczIkbG9jYXRpb24gPT09IHZvaWQgMCA/IFwiL1wiIDogX3RoaXMkcHJvcHMyJGxvY2F0aW9uLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJiYXNlbmFtZVwiLCBcImNvbnRleHRcIiwgXCJsb2NhdGlvblwiXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IGZ1bmN0aW9uIGNyZWF0ZUhyZWYocGF0aCkge1xuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKTtcbiAgICAgIH0sXG4gICAgICBhY3Rpb246IFwiUE9QXCIsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKFwiZ29cIiksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhpc3Rvcnk6IGhpc3RvcnksXG4gICAgICBzdGF0aWNDb250ZXh0OiBjb250ZXh0XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU3RhdGljUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cblxudmFyIFN3aXRjaCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTd2l0Y2gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN3aXRjaCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3dpdGNoLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0LmxvY2F0aW9uO1xuICAgICAgdmFyIGVsZW1lbnQsIG1hdGNoOyAvLyBXZSB1c2UgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCBpbnN0ZWFkIG9mIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoKS5maW5kKClcbiAgICAgIC8vIGhlcmUgYmVjYXVzZSB0b0FycmF5IGFkZHMga2V5cyB0byBhbGwgY2hpbGQgZWxlbWVudHMgYW5kIHdlIGRvIG5vdCB3YW50XG4gICAgICAvLyB0byB0cmlnZ2VyIGFuIHVubW91bnQvcmVtb3VudCBmb3IgdHdvIDxSb3V0ZT5zIHRoYXQgcmVuZGVyIHRoZSBzYW1lXG4gICAgICAvLyBjb21wb25lbnQgYXQgZGlmZmVyZW50IFVSTHMuXG5cbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goX3RoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAobWF0Y2ggPT0gbnVsbCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY2hpbGQ7XG4gICAgICAgICAgdmFyIHBhdGggPSBjaGlsZC5wcm9wcy5wYXRoIHx8IGNoaWxkLnByb3BzLmZyb207XG4gICAgICAgICAgbWF0Y2ggPSBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfZXh0ZW5kcyh7fSwgY2hpbGQucHJvcHMsIHtcbiAgICAgICAgICAgIHBhdGg6IHBhdGhcbiAgICAgICAgICB9KSkgOiBjb250ZXh0Lm1hdGNoO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtYXRjaCA/IFJlYWN0LmNsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgY29tcHV0ZWRNYXRjaDogbWF0Y2hcbiAgICAgIH0pIDogbnVsbDtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gU3dpdGNoO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG5cbmZ1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBkaXNwbGF5TmFtZSA9IFwid2l0aFJvdXRlcihcIiArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgXCIpXCI7XG5cbiAgdmFyIEMgPSBmdW5jdGlvbiBDKHByb3BzKSB7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnRSZWYgPSBwcm9wcy53cmFwcGVkQ29tcG9uZW50UmVmLFxuICAgICAgICByZW1haW5pbmdQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJ3cmFwcGVkQ29tcG9uZW50UmVmXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFwiICsgZGlzcGxheU5hbWUgKyBcIiAvPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIGNvbnRleHQsIHtcbiAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEMucHJvcFR5cGVzID0ge1xuICAgICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59XG5cbnZhciB1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dDtcbmZ1bmN0aW9uIHVzZUhpc3RvcnkoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VIaXN0b3J5KClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoaGlzdG9yeUNvbnRleHQpO1xufVxuZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VMb2NhdGlvbigpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpLmxvY2F0aW9uO1xufVxuZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUGFyYW1zKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgdmFyIG1hdGNoID0gdXNlQ29udGV4dChjb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2gucGFyYW1zIDoge307XG59XG5mdW5jdGlvbiB1c2VSb3V0ZU1hdGNoKHBhdGgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVJvdXRlTWF0Y2goKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICB2YXIgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICB2YXIgbWF0Y2ggPSB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xuICByZXR1cm4gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgcGF0aCkgOiBtYXRjaDtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBnbG9iYWwgPSB3aW5kb3c7XG4gICAgdmFyIGtleSA9IFwiX19yZWFjdF9yb3V0ZXJfYnVpbGRfX1wiO1xuICAgIHZhciBidWlsZE5hbWVzID0ge1xuICAgICAgY2pzOiBcIkNvbW1vbkpTXCIsXG4gICAgICBlc206IFwiRVMgbW9kdWxlc1wiLFxuICAgICAgdW1kOiBcIlVNRFwiXG4gICAgfTtcblxuICAgIGlmIChnbG9iYWxba2V5XSAmJiBnbG9iYWxba2V5XSAhPT0gXCJlc21cIikge1xuICAgICAgdmFyIGluaXRpYWxCdWlsZE5hbWUgPSBidWlsZE5hbWVzW2dsb2JhbFtrZXldXTtcbiAgICAgIHZhciBzZWNvbmRhcnlCdWlsZE5hbWUgPSBidWlsZE5hbWVzW1wiZXNtXCJdOyAvLyBUT0RPOiBBZGQgbGluayB0byBhcnRpY2xlIHRoYXQgZXhwbGFpbnMgaW4gZGV0YWlsIGhvdyB0byBhdm9pZFxuICAgICAgLy8gbG9hZGluZyAyIGRpZmZlcmVudCBidWlsZHMuXG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBhcmUgbG9hZGluZyB0aGUgXCIgKyBzZWNvbmRhcnlCdWlsZE5hbWUgKyBcIiBidWlsZCBvZiBSZWFjdCBSb3V0ZXIgXCIgKyAoXCJvbiBhIHBhZ2UgdGhhdCBpcyBhbHJlYWR5IHJ1bm5pbmcgdGhlIFwiICsgaW5pdGlhbEJ1aWxkTmFtZSArIFwiIFwiKSArIFwiYnVpbGQsIHNvIHRoaW5ncyB3b24ndCB3b3JrIHJpZ2h0LlwiKTtcbiAgICB9XG5cbiAgICBnbG9iYWxba2V5XSA9IFwiZXNtXCI7XG4gIH1cbn1cblxuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBQcm9tcHQsIFJlZGlyZWN0LCBSb3V0ZSwgUm91dGVyLCBTdGF0aWNSb3V0ZXIsIFN3aXRjaCwgaGlzdG9yeUNvbnRleHQgYXMgX19IaXN0b3J5Q29udGV4dCwgY29udGV4dCBhcyBfX1JvdXRlckNvbnRleHQsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXIuanMubWFwXG4iLCJpbXBvcnQgeyBSb3V0ZXIsIF9fUm91dGVyQ29udGV4dCwgbWF0Y2hQYXRoIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnJvd3NlclJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQnJvd3NlclJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGZvcmNlUmVmcmVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyXG4gIH07XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxCcm93c2VyUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIYXNoSGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEhhc2hSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBIYXNoUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEhhc2hSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoYXNoVHlwZTogUHJvcFR5cGVzLm9uZU9mKFtcImhhc2hiYW5nXCIsIFwibm9zbGFzaFwiLCBcInNsYXNoXCJdKVxuICB9O1xuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8SGFzaFJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIHJlc29sdmVUb0xvY2F0aW9uID0gZnVuY3Rpb24gcmVzb2x2ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIHRvID09PSBcImZ1bmN0aW9uXCIgPyB0byhjdXJyZW50TG9jYXRpb24pIDogdG87XG59O1xudmFyIG5vcm1hbGl6ZVRvTG9jYXRpb24gPSBmdW5jdGlvbiBub3JtYWxpemVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGNyZWF0ZUxvY2F0aW9uKHRvLCBudWxsLCBudWxsLCBjdXJyZW50TG9jYXRpb24pIDogdG87XG59O1xuXG52YXIgZm9yd2FyZFJlZlNoaW0gPSBmdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShDKSB7XG4gIHJldHVybiBDO1xufTtcblxudmFyIGZvcndhcmRSZWYgPSBSZWFjdC5mb3J3YXJkUmVmO1xuXG5pZiAodHlwZW9mIGZvcndhcmRSZWYgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgZm9yd2FyZFJlZiA9IGZvcndhcmRSZWZTaGltO1xufVxuXG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuXG52YXIgTGlua0FuY2hvciA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIGZvcndhcmRlZFJlZikge1xuICB2YXIgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgbmF2aWdhdGUgPSBfcmVmLm5hdmlnYXRlLFxuICAgICAgX29uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiaW5uZXJSZWZcIiwgXCJuYXZpZ2F0ZVwiLCBcIm9uQ2xpY2tcIl0pO1xuXG4gIHZhciB0YXJnZXQgPSByZXN0LnRhcmdldDtcblxuICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChfb25DbGljaykgX29uQ2xpY2soZXZlbnQpO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhyb3cgZXg7XG4gICAgICB9XG5cbiAgICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAvLyBvbkNsaWNrIHByZXZlbnRlZCBkZWZhdWx0XG4gICAgICBldmVudC5idXR0b24gPT09IDAgJiYgKCAvLyBpZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAgICF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmIC8vIGxldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICAgICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBpZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICAgICAgKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBuYXZpZ2F0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICB9KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gIH0gZWxzZSB7XG4gICAgcHJvcHMucmVmID0gaW5uZXJSZWY7XG4gIH1cbiAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FuY2hvci1oYXMtY29udGVudCAqL1xuXG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHByb3BzKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExpbmtBbmNob3IuZGlzcGxheU5hbWUgPSBcIkxpbmtBbmNob3JcIjtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cblxudmFyIExpbmsgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmMiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmMiRjb21wb25lbnQgPSBfcmVmMi5jb21wb25lbnQsXG4gICAgICBjb21wb25lbnQgPSBfcmVmMiRjb21wb25lbnQgPT09IHZvaWQgMCA/IExpbmtBbmNob3IgOiBfcmVmMiRjb21wb25lbnQsXG4gICAgICByZXBsYWNlID0gX3JlZjIucmVwbGFjZSxcbiAgICAgIHRvID0gX3JlZjIudG8sXG4gICAgICBpbm5lclJlZiA9IF9yZWYyLmlubmVyUmVmLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJjb21wb25lbnRcIiwgXCJyZXBsYWNlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgaGlzdG9yeSA9IGNvbnRleHQuaGlzdG9yeTtcbiAgICB2YXIgbG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjb250ZXh0LmxvY2F0aW9uKSwgY29udGV4dC5sb2NhdGlvbik7XG4gICAgdmFyIGhyZWYgPSBsb2NhdGlvbiA/IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbikgOiBcIlwiO1xuXG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhyZWY6IGhyZWYsXG4gICAgICBuYXZpZ2F0ZTogZnVuY3Rpb24gbmF2aWdhdGUoKSB7XG4gICAgICAgIHZhciBsb2NhdGlvbiA9IHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjb250ZXh0LmxvY2F0aW9uKTtcbiAgICAgICAgdmFyIG1ldGhvZCA9IHJlcGxhY2UgPyBoaXN0b3J5LnJlcGxhY2UgOiBoaXN0b3J5LnB1c2g7XG4gICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICB9XG4gICAgfSk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMuaW5uZXJSZWYgPSBpbm5lclJlZjtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKTtcbiAgfSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgdG9UeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmZ1bmNdKTtcbiAgdmFyIHJlZlR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjdXJyZW50OiBQcm9wVHlwZXMuYW55XG4gIH0pXSk7XG4gIExpbmsuZGlzcGxheU5hbWUgPSBcIkxpbmtcIjtcbiAgTGluay5wcm9wVHlwZXMgPSB7XG4gICAgaW5uZXJSZWY6IHJlZlR5cGUsXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgcmVwbGFjZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgdGFyZ2V0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiB0b1R5cGUuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgZm9yd2FyZFJlZlNoaW0kMSA9IGZ1bmN0aW9uIGZvcndhcmRSZWZTaGltKEMpIHtcbiAgcmV0dXJuIEM7XG59O1xuXG52YXIgZm9yd2FyZFJlZiQxID0gUmVhY3QuZm9yd2FyZFJlZjtcblxuaWYgKHR5cGVvZiBmb3J3YXJkUmVmJDEgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgZm9yd2FyZFJlZiQxID0gZm9yd2FyZFJlZlNoaW0kMTtcbn1cblxuZnVuY3Rpb24gam9pbkNsYXNzbmFtZXMoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc25hbWVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGNsYXNzbmFtZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gY2xhc3NuYW1lcy5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICByZXR1cm4gaTtcbiAgfSkuam9pbihcIiBcIik7XG59XG4vKipcbiAqIEEgPExpbms+IHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG5cblxudmFyIE5hdkxpbmsgPSBmb3J3YXJkUmVmJDEoZnVuY3Rpb24gKF9yZWYsIGZvcndhcmRlZFJlZikge1xuICB2YXIgX3JlZiRhcmlhQ3VycmVudCA9IF9yZWZbXCJhcmlhLWN1cnJlbnRcIl0sXG4gICAgICBhcmlhQ3VycmVudCA9IF9yZWYkYXJpYUN1cnJlbnQgPT09IHZvaWQgMCA/IFwicGFnZVwiIDogX3JlZiRhcmlhQ3VycmVudCxcbiAgICAgIF9yZWYkYWN0aXZlQ2xhc3NOYW1lID0gX3JlZi5hY3RpdmVDbGFzc05hbWUsXG4gICAgICBhY3RpdmVDbGFzc05hbWUgPSBfcmVmJGFjdGl2ZUNsYXNzTmFtZSA9PT0gdm9pZCAwID8gXCJhY3RpdmVcIiA6IF9yZWYkYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgYWN0aXZlU3R5bGUgPSBfcmVmLmFjdGl2ZVN0eWxlLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgZXhhY3QgPSBfcmVmLmV4YWN0LFxuICAgICAgaXNBY3RpdmVQcm9wID0gX3JlZi5pc0FjdGl2ZSxcbiAgICAgIGxvY2F0aW9uUHJvcCA9IF9yZWYubG9jYXRpb24sXG4gICAgICBzZW5zaXRpdmUgPSBfcmVmLnNlbnNpdGl2ZSxcbiAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgc3R5bGVQcm9wID0gX3JlZi5zdHlsZSxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJhcmlhLWN1cnJlbnRcIiwgXCJhY3RpdmVDbGFzc05hbWVcIiwgXCJhY3RpdmVTdHlsZVwiLCBcImNsYXNzTmFtZVwiLCBcImV4YWN0XCIsIFwiaXNBY3RpdmVcIiwgXCJsb2NhdGlvblwiLCBcInNlbnNpdGl2ZVwiLCBcInN0cmljdFwiLCBcInN0eWxlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TmF2TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgY3VycmVudExvY2F0aW9uID0gbG9jYXRpb25Qcm9wIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgdmFyIHRvTG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pLCBjdXJyZW50TG9jYXRpb24pO1xuICAgIHZhciBwYXRoID0gdG9Mb2NhdGlvbi5wYXRobmFtZTsgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcblxuICAgIHZhciBlc2NhcGVkUGF0aCA9IHBhdGggJiYgcGF0aC5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfC9cXFxcXSkvZywgXCJcXFxcJDFcIik7XG4gICAgdmFyIG1hdGNoID0gZXNjYXBlZFBhdGggPyBtYXRjaFBhdGgoY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCB7XG4gICAgICBwYXRoOiBlc2NhcGVkUGF0aCxcbiAgICAgIGV4YWN0OiBleGFjdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlLFxuICAgICAgc3RyaWN0OiBzdHJpY3RcbiAgICB9KSA6IG51bGw7XG4gICAgdmFyIGlzQWN0aXZlID0gISEoaXNBY3RpdmVQcm9wID8gaXNBY3RpdmVQcm9wKG1hdGNoLCBjdXJyZW50TG9jYXRpb24pIDogbWF0Y2gpO1xuICAgIHZhciBjbGFzc05hbWUgPSBpc0FjdGl2ZSA/IGpvaW5DbGFzc25hbWVzKGNsYXNzTmFtZVByb3AsIGFjdGl2ZUNsYXNzTmFtZSkgOiBjbGFzc05hbWVQcm9wO1xuICAgIHZhciBzdHlsZSA9IGlzQWN0aXZlID8gX2V4dGVuZHMoe30sIHN0eWxlUHJvcCwge30sIGFjdGl2ZVN0eWxlKSA6IHN0eWxlUHJvcDtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHtcbiAgICAgIFwiYXJpYS1jdXJyZW50XCI6IGlzQWN0aXZlICYmIGFyaWFDdXJyZW50IHx8IG51bGwsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHRvOiB0b0xvY2F0aW9uXG4gICAgfSwgcmVzdCk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgICBpZiAoZm9yd2FyZFJlZlNoaW0kMSAhPT0gZm9yd2FyZFJlZiQxKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbiAgdmFyIGFyaWFDdXJyZW50VHlwZSA9IFByb3BUeXBlcy5vbmVPZihbXCJwYWdlXCIsIFwic3RlcFwiLCBcImxvY2F0aW9uXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJ0cnVlXCJdKTtcbiAgTmF2TGluay5wcm9wVHlwZXMgPSBfZXh0ZW5kcyh7fSwgTGluay5wcm9wVHlwZXMsIHtcbiAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudFR5cGUsXG4gICAgYWN0aXZlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNBY3RpdmU6IFByb3BUeXBlcy5mdW5jLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdFxuICB9KTtcbn1cblxuZXhwb3J0IHsgQnJvd3NlclJvdXRlciwgSGFzaFJvdXRlciwgTGluaywgTmF2TGluayB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3Qtcm91dGVyLWRvbS5qcy5tYXBcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbi8vIFNvcnRlZCBBU0MgYnkgc2l6ZS4gVGhhdCdzIGltcG9ydGFudC5cbi8vIEl0IGNhbid0IGJlIGNvbmZpZ3VyZWQgYXMgaXQncyB1c2VkIHN0YXRpY2FsbHkgZm9yIHByb3BUeXBlcy5cbmV4cG9ydCB2YXIga2V5cyA9IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXTsgLy8gS2VlcCBpbiBtaW5kIHRoYXQgQG1lZGlhIGlzIGluY2x1c2l2ZSBieSB0aGUgQ1NTIHNwZWNpZmljYXRpb24uXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzKSB7XG4gIHZhciBfYnJlYWtwb2ludHMkdmFsdWVzID0gYnJlYWtwb2ludHMudmFsdWVzLFxuICAgICAgdmFsdWVzID0gX2JyZWFrcG9pbnRzJHZhbHVlcyA9PT0gdm9pZCAwID8ge1xuICAgIHhzOiAwLFxuICAgIHNtOiA2MDAsXG4gICAgbWQ6IDk2MCxcbiAgICBsZzogMTI4MCxcbiAgICB4bDogMTkyMFxuICB9IDogX2JyZWFrcG9pbnRzJHZhbHVlcyxcbiAgICAgIF9icmVha3BvaW50cyR1bml0ID0gYnJlYWtwb2ludHMudW5pdCxcbiAgICAgIHVuaXQgPSBfYnJlYWtwb2ludHMkdW5pdCA9PT0gdm9pZCAwID8gJ3B4JyA6IF9icmVha3BvaW50cyR1bml0LFxuICAgICAgX2JyZWFrcG9pbnRzJHN0ZXAgPSBicmVha3BvaW50cy5zdGVwLFxuICAgICAgc3RlcCA9IF9icmVha3BvaW50cyRzdGVwID09PSB2b2lkIDAgPyA1IDogX2JyZWFrcG9pbnRzJHN0ZXAsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhicmVha3BvaW50cywgW1widmFsdWVzXCIsIFwidW5pdFwiLCBcInN0ZXBcIl0pO1xuXG4gIGZ1bmN0aW9uIHVwKGtleSkge1xuICAgIHZhciB2YWx1ZSA9IHR5cGVvZiB2YWx1ZXNba2V5XSA9PT0gJ251bWJlcicgPyB2YWx1ZXNba2V5XSA6IGtleTtcbiAgICByZXR1cm4gXCJAbWVkaWEgKG1pbi13aWR0aDpcIi5jb25jYXQodmFsdWUpLmNvbmNhdCh1bml0LCBcIilcIik7XG4gIH1cblxuICBmdW5jdGlvbiBkb3duKGtleSkge1xuICAgIHZhciBlbmRJbmRleCA9IGtleXMuaW5kZXhPZihrZXkpICsgMTtcbiAgICB2YXIgdXBwZXJib3VuZCA9IHZhbHVlc1trZXlzW2VuZEluZGV4XV07XG5cbiAgICBpZiAoZW5kSW5kZXggPT09IGtleXMubGVuZ3RoKSB7XG4gICAgICAvLyB4bCBkb3duIGFwcGxpZXMgdG8gYWxsIHNpemVzXG4gICAgICByZXR1cm4gdXAoJ3hzJyk7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gdHlwZW9mIHVwcGVyYm91bmQgPT09ICdudW1iZXInICYmIGVuZEluZGV4ID4gMCA/IHVwcGVyYm91bmQgOiBrZXk7XG4gICAgcmV0dXJuIFwiQG1lZGlhIChtYXgtd2lkdGg6XCIuY29uY2F0KHZhbHVlIC0gc3RlcCAvIDEwMCkuY29uY2F0KHVuaXQsIFwiKVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJldHdlZW4oc3RhcnQsIGVuZCkge1xuICAgIHZhciBlbmRJbmRleCA9IGtleXMuaW5kZXhPZihlbmQpO1xuXG4gICAgaWYgKGVuZEluZGV4ID09PSBrZXlzLmxlbmd0aCAtIDEpIHtcbiAgICAgIHJldHVybiB1cChzdGFydCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiQG1lZGlhIChtaW4td2lkdGg6XCIuY29uY2F0KHR5cGVvZiB2YWx1ZXNbc3RhcnRdID09PSAnbnVtYmVyJyA/IHZhbHVlc1tzdGFydF0gOiBzdGFydCkuY29uY2F0KHVuaXQsIFwiKSBhbmQgXCIpICsgXCIobWF4LXdpZHRoOlwiLmNvbmNhdCgoZW5kSW5kZXggIT09IC0xICYmIHR5cGVvZiB2YWx1ZXNba2V5c1tlbmRJbmRleCArIDFdXSA9PT0gJ251bWJlcicgPyB2YWx1ZXNba2V5c1tlbmRJbmRleCArIDFdXSA6IGVuZCkgLSBzdGVwIC8gMTAwKS5jb25jYXQodW5pdCwgXCIpXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25seShrZXkpIHtcbiAgICByZXR1cm4gYmV0d2VlbihrZXksIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiB3aWR0aChrZXkpIHtcbiAgICByZXR1cm4gdmFsdWVzW2tleV07XG4gIH1cblxuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGtleXM6IGtleXMsXG4gICAgdmFsdWVzOiB2YWx1ZXMsXG4gICAgdXA6IHVwLFxuICAgIGRvd246IGRvd24sXG4gICAgYmV0d2VlbjogYmV0d2VlbixcbiAgICBvbmx5OiBvbmx5LFxuICAgIHdpZHRoOiB3aWR0aFxuICB9LCBvdGhlcik7XG59IiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTWl4aW5zKGJyZWFrcG9pbnRzLCBzcGFjaW5nLCBtaXhpbnMpIHtcbiAgdmFyIF90b29sYmFyO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgZ3V0dGVyczogZnVuY3Rpb24gZ3V0dGVycygpIHtcbiAgICAgIHZhciBzdHlsZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgLy8gVG8gZGVwcmVjYXRlIGluIHY0LjFcbiAgICAgIC8vICAgICAgIHdhcm5pbmcoXG4gICAgICAvLyAgICAgICAgIGZhbHNlLFxuICAgICAgLy8gICAgICAgICBbXG4gICAgICAvLyAgICAgICAgICAgJ01hdGVyaWFsLVVJOiBUaGVtZS5taXhpbnMuZ3V0dGVycygpIGlzIGRlcHJlY2F0ZWQuJyxcbiAgICAgIC8vICAgICAgICAgICAnWW91IGNhbiB1c2UgdGhlIHNvdXJjZSBvZiB0aGUgbWl4aW4gZGlyZWN0bHk6JyxcbiAgICAgIC8vICAgICAgICAgICBgXG4gICAgICAvLyBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZygyKSxcbiAgICAgIC8vIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZygyKSxcbiAgICAgIC8vIFt0aGVtZS5icmVha3BvaW50cy51cCgnc20nKV06IHtcbiAgICAgIC8vICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMyksXG4gICAgICAvLyAgIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZygzKSxcbiAgICAgIC8vIH0sXG4gICAgICAvLyBgLFxuICAgICAgLy8gICAgICAgICBdLmpvaW4oJ1xcbicpLFxuICAgICAgLy8gICAgICAgKTtcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICAgIHBhZGRpbmdMZWZ0OiBzcGFjaW5nKDIpLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IHNwYWNpbmcoMilcbiAgICAgIH0sIHN0eWxlcywgX2RlZmluZVByb3BlcnR5KHt9LCBicmVha3BvaW50cy51cCgnc20nKSwgX2V4dGVuZHMoe1xuICAgICAgICBwYWRkaW5nTGVmdDogc3BhY2luZygzKSxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiBzcGFjaW5nKDMpXG4gICAgICB9LCBzdHlsZXNbYnJlYWtwb2ludHMudXAoJ3NtJyldKSkpO1xuICAgIH0sXG4gICAgdG9vbGJhcjogKF90b29sYmFyID0ge1xuICAgICAgbWluSGVpZ2h0OiA1NlxuICAgIH0sIF9kZWZpbmVQcm9wZXJ0eShfdG9vbGJhciwgXCJcIi5jb25jYXQoYnJlYWtwb2ludHMudXAoJ3hzJyksIFwiIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSlcIiksIHtcbiAgICAgIG1pbkhlaWdodDogNDhcbiAgICB9KSwgX2RlZmluZVByb3BlcnR5KF90b29sYmFyLCBicmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgbWluSGVpZ2h0OiA2NFxuICAgIH0pLCBfdG9vbGJhcilcbiAgfSwgbWl4aW5zKTtcbn0iLCJ2YXIgY29tbW9uID0ge1xuICBibGFjazogJyMwMDAnLFxuICB3aGl0ZTogJyNmZmYnXG59O1xuZXhwb3J0IGRlZmF1bHQgY29tbW9uOyIsInZhciBncmV5ID0ge1xuICA1MDogJyNmYWZhZmEnLFxuICAxMDA6ICcjZjVmNWY1JyxcbiAgMjAwOiAnI2VlZWVlZScsXG4gIDMwMDogJyNlMGUwZTAnLFxuICA0MDA6ICcjYmRiZGJkJyxcbiAgNTAwOiAnIzllOWU5ZScsXG4gIDYwMDogJyM3NTc1NzUnLFxuICA3MDA6ICcjNjE2MTYxJyxcbiAgODAwOiAnIzQyNDI0MicsXG4gIDkwMDogJyMyMTIxMjEnLFxuICBBMTAwOiAnI2Q1ZDVkNScsXG4gIEEyMDA6ICcjYWFhYWFhJyxcbiAgQTQwMDogJyMzMDMwMzAnLFxuICBBNzAwOiAnIzYxNjE2MSdcbn07XG5leHBvcnQgZGVmYXVsdCBncmV5OyIsInZhciBpbmRpZ28gPSB7XG4gIDUwOiAnI2U4ZWFmNicsXG4gIDEwMDogJyNjNWNhZTknLFxuICAyMDA6ICcjOWZhOGRhJyxcbiAgMzAwOiAnIzc5ODZjYicsXG4gIDQwMDogJyM1YzZiYzAnLFxuICA1MDA6ICcjM2Y1MWI1JyxcbiAgNjAwOiAnIzM5NDlhYicsXG4gIDcwMDogJyMzMDNmOWYnLFxuICA4MDA6ICcjMjgzNTkzJyxcbiAgOTAwOiAnIzFhMjM3ZScsXG4gIEExMDA6ICcjOGM5ZWZmJyxcbiAgQTIwMDogJyM1MzZkZmUnLFxuICBBNDAwOiAnIzNkNWFmZScsXG4gIEE3MDA6ICcjMzA0ZmZlJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGluZGlnbzsiLCJ2YXIgcGluayA9IHtcbiAgNTA6ICcjZmNlNGVjJyxcbiAgMTAwOiAnI2Y4YmJkMCcsXG4gIDIwMDogJyNmNDhmYjEnLFxuICAzMDA6ICcjZjA2MjkyJyxcbiAgNDAwOiAnI2VjNDA3YScsXG4gIDUwMDogJyNlOTFlNjMnLFxuICA2MDA6ICcjZDgxYjYwJyxcbiAgNzAwOiAnI2MyMTg1YicsXG4gIDgwMDogJyNhZDE0NTcnLFxuICA5MDA6ICcjODgwZTRmJyxcbiAgQTEwMDogJyNmZjgwYWInLFxuICBBMjAwOiAnI2ZmNDA4MScsXG4gIEE0MDA6ICcjZjUwMDU3JyxcbiAgQTcwMDogJyNjNTExNjInXG59O1xuZXhwb3J0IGRlZmF1bHQgcGluazsiLCJ2YXIgcmVkID0ge1xuICA1MDogJyNmZmViZWUnLFxuICAxMDA6ICcjZmZjZGQyJyxcbiAgMjAwOiAnI2VmOWE5YScsXG4gIDMwMDogJyNlNTczNzMnLFxuICA0MDA6ICcjZWY1MzUwJyxcbiAgNTAwOiAnI2Y0NDMzNicsXG4gIDYwMDogJyNlNTM5MzUnLFxuICA3MDA6ICcjZDMyZjJmJyxcbiAgODAwOiAnI2M2MjgyOCcsXG4gIDkwMDogJyNiNzFjMWMnLFxuICBBMTAwOiAnI2ZmOGE4MCcsXG4gIEEyMDA6ICcjZmY1MjUyJyxcbiAgQTQwMDogJyNmZjE3NDQnLFxuICBBNzAwOiAnI2Q1MDAwMCdcbn07XG5leHBvcnQgZGVmYXVsdCByZWQ7IiwidmFyIG9yYW5nZSA9IHtcbiAgNTA6ICcjZmZmM2UwJyxcbiAgMTAwOiAnI2ZmZTBiMicsXG4gIDIwMDogJyNmZmNjODAnLFxuICAzMDA6ICcjZmZiNzRkJyxcbiAgNDAwOiAnI2ZmYTcyNicsXG4gIDUwMDogJyNmZjk4MDAnLFxuICA2MDA6ICcjZmI4YzAwJyxcbiAgNzAwOiAnI2Y1N2MwMCcsXG4gIDgwMDogJyNlZjZjMDAnLFxuICA5MDA6ICcjZTY1MTAwJyxcbiAgQTEwMDogJyNmZmQxODAnLFxuICBBMjAwOiAnI2ZmYWI0MCcsXG4gIEE0MDA6ICcjZmY5MTAwJyxcbiAgQTcwMDogJyNmZjZkMDAnXG59O1xuZXhwb3J0IGRlZmF1bHQgb3JhbmdlOyIsInZhciBibHVlID0ge1xuICA1MDogJyNlM2YyZmQnLFxuICAxMDA6ICcjYmJkZWZiJyxcbiAgMjAwOiAnIzkwY2FmOScsXG4gIDMwMDogJyM2NGI1ZjYnLFxuICA0MDA6ICcjNDJhNWY1JyxcbiAgNTAwOiAnIzIxOTZmMycsXG4gIDYwMDogJyMxZTg4ZTUnLFxuICA3MDA6ICcjMTk3NmQyJyxcbiAgODAwOiAnIzE1NjVjMCcsXG4gIDkwMDogJyMwZDQ3YTEnLFxuICBBMTAwOiAnIzgyYjFmZicsXG4gIEEyMDA6ICcjNDQ4YWZmJyxcbiAgQTQwMDogJyMyOTc5ZmYnLFxuICBBNzAwOiAnIzI5NjJmZidcbn07XG5leHBvcnQgZGVmYXVsdCBibHVlOyIsInZhciBncmVlbiA9IHtcbiAgNTA6ICcjZThmNWU5JyxcbiAgMTAwOiAnI2M4ZTZjOScsXG4gIDIwMDogJyNhNWQ2YTcnLFxuICAzMDA6ICcjODFjNzg0JyxcbiAgNDAwOiAnIzY2YmI2YScsXG4gIDUwMDogJyM0Y2FmNTAnLFxuICA2MDA6ICcjNDNhMDQ3JyxcbiAgNzAwOiAnIzM4OGUzYycsXG4gIDgwMDogJyMyZTdkMzInLFxuICA5MDA6ICcjMWI1ZTIwJyxcbiAgQTEwMDogJyNiOWY2Y2EnLFxuICBBMjAwOiAnIzY5ZjBhZScsXG4gIEE0MDA6ICcjMDBlNjc2JyxcbiAgQTcwMDogJyMwMGM4NTMnXG59O1xuZXhwb3J0IGRlZmF1bHQgZ3JlZW47IiwiaW1wb3J0IHsgZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgfSBmcm9tIFwiQG1hdGVyaWFsLXVpL3V0aWxzXCI7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVzZS1iZWZvcmUtZGVmaW5lICovXG5cbi8qKlxuICogUmV0dXJucyBhIG51bWJlciB3aG9zZSB2YWx1ZSBpcyBsaW1pdGVkIHRvIHRoZSBnaXZlbiByYW5nZS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIHRvIGJlIGNsYW1wZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gVGhlIGxvd2VyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXggVGhlIHVwcGVyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgbnVtYmVyIGluIHRoZSByYW5nZSBbbWluLCBtYXhdXG4gKi9cbmZ1bmN0aW9uIGNsYW1wKHZhbHVlKSB7XG4gIHZhciBtaW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gIHZhciBtYXggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDE7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodmFsdWUgPCBtaW4gfHwgdmFsdWUgPiBtYXgpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXRlcmlhbC1VSTogVGhlIHZhbHVlIHByb3ZpZGVkIFwiLmNvbmNhdCh2YWx1ZSwgXCIgaXMgb3V0IG9mIHJhbmdlIFtcIikuY29uY2F0KG1pbiwgXCIsIFwiKS5jb25jYXQobWF4LCBcIl0uXCIpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobWluLCB2YWx1ZSksIG1heCk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBDU1MgaGV4IGZvcm1hdCB0byBDU1MgcmdiIGZvcm1hdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBIZXggY29sb3IsIGkuZS4gI25ubiBvciAjbm5ubm5uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyByZ2IgY29sb3Igc3RyaW5nXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gaGV4VG9SZ2IoY29sb3IpIHtcbiAgY29sb3IgPSBjb2xvci5zdWJzdHIoMSk7XG4gIHZhciByZSA9IG5ldyBSZWdFeHAoXCIuezEsXCIuY29uY2F0KGNvbG9yLmxlbmd0aCA+PSA2ID8gMiA6IDEsIFwifVwiKSwgJ2cnKTtcbiAgdmFyIGNvbG9ycyA9IGNvbG9yLm1hdGNoKHJlKTtcblxuICBpZiAoY29sb3JzICYmIGNvbG9yc1swXS5sZW5ndGggPT09IDEpIHtcbiAgICBjb2xvcnMgPSBjb2xvcnMubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgICByZXR1cm4gbiArIG47XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gY29sb3JzID8gXCJyZ2JcIi5jb25jYXQoY29sb3JzLmxlbmd0aCA9PT0gNCA/ICdhJyA6ICcnLCBcIihcIikuY29uY2F0KGNvbG9ycy5tYXAoZnVuY3Rpb24gKG4sIGluZGV4KSB7XG4gICAgcmV0dXJuIGluZGV4IDwgMyA/IHBhcnNlSW50KG4sIDE2KSA6IE1hdGgucm91bmQocGFyc2VJbnQobiwgMTYpIC8gMjU1ICogMTAwMCkgLyAxMDAwO1xuICB9KS5qb2luKCcsICcpLCBcIilcIikgOiAnJztcbn1cblxuZnVuY3Rpb24gaW50VG9IZXgoaW50KSB7XG4gIHZhciBoZXggPSBpbnQudG9TdHJpbmcoMTYpO1xuICByZXR1cm4gaGV4Lmxlbmd0aCA9PT0gMSA/IFwiMFwiLmNvbmNhdChoZXgpIDogaGV4O1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIHJnYiBmb3JtYXQgdG8gQ1NTIGhleCBmb3JtYXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gUkdCIGNvbG9yLCBpLmUuIHJnYihuLCBuLCBuKVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgcmdiIGNvbG9yIHN0cmluZywgaS5lLiAjbm5ubm5uXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gcmdiVG9IZXgoY29sb3IpIHtcbiAgLy8gSWRlbXBvdGVudFxuICBpZiAoY29sb3IuaW5kZXhPZignIycpID09PSAwKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgdmFyIF9kZWNvbXBvc2VDb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKSxcbiAgICAgIHZhbHVlcyA9IF9kZWNvbXBvc2VDb2xvci52YWx1ZXM7XG5cbiAgcmV0dXJuIFwiI1wiLmNvbmNhdCh2YWx1ZXMubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIGludFRvSGV4KG4pO1xuICB9KS5qb2luKCcnKSk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBoc2wgZm9ybWF0IHRvIHJnYiBmb3JtYXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gSFNMIGNvbG9yIHZhbHVlc1xuICogQHJldHVybnMge3N0cmluZ30gcmdiIGNvbG9yIHZhbHVlc1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBoc2xUb1JnYihjb2xvcikge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgdmFyIF9jb2xvciA9IGNvbG9yLFxuICAgICAgdmFsdWVzID0gX2NvbG9yLnZhbHVlcztcbiAgdmFyIGggPSB2YWx1ZXNbMF07XG4gIHZhciBzID0gdmFsdWVzWzFdIC8gMTAwO1xuICB2YXIgbCA9IHZhbHVlc1syXSAvIDEwMDtcbiAgdmFyIGEgPSBzICogTWF0aC5taW4obCwgMSAtIGwpO1xuXG4gIHZhciBmID0gZnVuY3Rpb24gZihuKSB7XG4gICAgdmFyIGsgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IChuICsgaCAvIDMwKSAlIDEyO1xuICAgIHJldHVybiBsIC0gYSAqIE1hdGgubWF4KE1hdGgubWluKGsgLSAzLCA5IC0gaywgMSksIC0xKTtcbiAgfTtcblxuICB2YXIgdHlwZSA9ICdyZ2InO1xuICB2YXIgcmdiID0gW01hdGgucm91bmQoZigwKSAqIDI1NSksIE1hdGgucm91bmQoZig4KSAqIDI1NSksIE1hdGgucm91bmQoZig0KSAqIDI1NSldO1xuXG4gIGlmIChjb2xvci50eXBlID09PSAnaHNsYScpIHtcbiAgICB0eXBlICs9ICdhJztcbiAgICByZ2IucHVzaCh2YWx1ZXNbM10pO1xuICB9XG5cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHZhbHVlczogcmdiXG4gIH0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSB0eXBlIGFuZCB2YWx1ZXMgb2YgYSBjb2xvci5cbiAqXG4gKiBOb3RlOiBEb2VzIG5vdCBzdXBwb3J0IHJnYiAlIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7b2JqZWN0fSAtIEEgTVVJIGNvbG9yIG9iamVjdDoge3R5cGU6IHN0cmluZywgdmFsdWVzOiBudW1iZXJbXX1cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGVjb21wb3NlQ29sb3IoY29sb3IpIHtcbiAgLy8gSWRlbXBvdGVudFxuICBpZiAoY29sb3IudHlwZSkge1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuXG4gIGlmIChjb2xvci5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgIHJldHVybiBkZWNvbXBvc2VDb2xvcihoZXhUb1JnYihjb2xvcikpO1xuICB9XG5cbiAgdmFyIG1hcmtlciA9IGNvbG9yLmluZGV4T2YoJygnKTtcbiAgdmFyIHR5cGUgPSBjb2xvci5zdWJzdHJpbmcoMCwgbWFya2VyKTtcblxuICBpZiAoWydyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYSddLmluZGV4T2YodHlwZSkgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFwiTWF0ZXJpYWwtVUk6IFVuc3VwcG9ydGVkIGBcIi5jb25jYXQoY29sb3IsIFwiYCBjb2xvci5cXG5XZSBzdXBwb3J0IHRoZSBmb2xsb3dpbmcgZm9ybWF0czogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKS5cIikgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDMsIGNvbG9yKSk7XG4gIH1cblxuICB2YXIgdmFsdWVzID0gY29sb3Iuc3Vic3RyaW5nKG1hcmtlciArIDEsIGNvbG9yLmxlbmd0aCAtIDEpLnNwbGl0KCcsJyk7XG4gIHZhbHVlcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHZhbHVlczogdmFsdWVzXG4gIH07XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3Igb2JqZWN0IHdpdGggdHlwZSBhbmQgdmFsdWVzIHRvIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb2xvciAtIERlY29tcG9zZWQgY29sb3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvci50eXBlIC0gT25lIG9mOiAncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnXG4gKiBAcGFyYW0ge2FycmF5fSBjb2xvci52YWx1ZXMgLSBbbixuLG5dIG9yIFtuLG4sbixuXVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIHZhciB0eXBlID0gY29sb3IudHlwZTtcbiAgdmFyIHZhbHVlcyA9IGNvbG9yLnZhbHVlcztcblxuICBpZiAodHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICAvLyBPbmx5IGNvbnZlcnQgdGhlIGZpcnN0IDMgdmFsdWVzIHRvIGludCAoaS5lLiBub3QgYWxwaGEpXG4gICAgdmFsdWVzID0gdmFsdWVzLm1hcChmdW5jdGlvbiAobiwgaSkge1xuICAgICAgcmV0dXJuIGkgPCAzID8gcGFyc2VJbnQobiwgMTApIDogbjtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICh0eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIHZhbHVlc1sxXSA9IFwiXCIuY29uY2F0KHZhbHVlc1sxXSwgXCIlXCIpO1xuICAgIHZhbHVlc1syXSA9IFwiXCIuY29uY2F0KHZhbHVlc1syXSwgXCIlXCIpO1xuICB9XG5cbiAgcmV0dXJuIFwiXCIuY29uY2F0KHR5cGUsIFwiKFwiKS5jb25jYXQodmFsdWVzLmpvaW4oJywgJyksIFwiKVwiKTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgY29udHJhc3QgcmF0aW8gYmV0d2VlbiB0d28gY29sb3JzLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcmVncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFja2dyb3VuZCAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgY29udHJhc3QgcmF0aW8gdmFsdWUgaW4gdGhlIHJhbmdlIDAgLSAyMS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udHJhc3RSYXRpbyhmb3JlZ3JvdW5kLCBiYWNrZ3JvdW5kKSB7XG4gIHZhciBsdW1BID0gZ2V0THVtaW5hbmNlKGZvcmVncm91bmQpO1xuICB2YXIgbHVtQiA9IGdldEx1bWluYW5jZShiYWNrZ3JvdW5kKTtcbiAgcmV0dXJuIChNYXRoLm1heChsdW1BLCBsdW1CKSArIDAuMDUpIC8gKE1hdGgubWluKGx1bUEsIGx1bUIpICsgMC4wNSk7XG59XG4vKipcbiAqIFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIGFueSBwb2ludCBpbiBhIGNvbG9yIHNwYWNlLFxuICogbm9ybWFsaXplZCB0byAwIGZvciBkYXJrZXN0IGJsYWNrIGFuZCAxIGZvciBsaWdodGVzdCB3aGl0ZS5cbiAqXG4gKiBGb3JtdWxhOiBodHRwczovL3d3dy53My5vcmcvVFIvV0NBRzIwLVRFQ0hTL0cxNy5odG1sI0cxNy10ZXN0c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIHRoZSBjb2xvciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0THVtaW5hbmNlKGNvbG9yKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICB2YXIgcmdiID0gY29sb3IudHlwZSA9PT0gJ2hzbCcgPyBkZWNvbXBvc2VDb2xvcihoc2xUb1JnYihjb2xvcikpLnZhbHVlcyA6IGNvbG9yLnZhbHVlcztcbiAgcmdiID0gcmdiLm1hcChmdW5jdGlvbiAodmFsKSB7XG4gICAgdmFsIC89IDI1NTsgLy8gbm9ybWFsaXplZFxuXG4gICAgcmV0dXJuIHZhbCA8PSAwLjAzOTI4ID8gdmFsIC8gMTIuOTIgOiBNYXRoLnBvdygodmFsICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG4gIH0pOyAvLyBUcnVuY2F0ZSBhdCAzIGRpZ2l0c1xuXG4gIHJldHVybiBOdW1iZXIoKDAuMjEyNiAqIHJnYlswXSArIDAuNzE1MiAqIHJnYlsxXSArIDAuMDcyMiAqIHJnYlsyXSkudG9GaXhlZCgzKSk7XG59XG4vKipcbiAqIERhcmtlbiBvciBsaWdodGVuIGEgY29sb3IsIGRlcGVuZGluZyBvbiBpdHMgbHVtaW5hbmNlLlxuICogTGlnaHQgY29sb3JzIGFyZSBkYXJrZW5lZCwgZGFyayBjb2xvcnMgYXJlIGxpZ2h0ZW5lZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQ9MC4xNSAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlbXBoYXNpemUoY29sb3IpIHtcbiAgdmFyIGNvZWZmaWNpZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwLjE1O1xuICByZXR1cm4gZ2V0THVtaW5hbmNlKGNvbG9yKSA+IDAuNSA/IGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIDogbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpO1xufVxuLyoqXG4gKiBTZXQgdGhlIGFic29sdXRlIHRyYW5zcGFyZW5jeSBvZiBhIGNvbG9yLlxuICogQW55IGV4aXN0aW5nIGFscGhhIHZhbHVlcyBhcmUgb3ZlcndyaXR0ZW4uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gdmFsdWUgdG8gc2V0IHRoZSBhbHBoYSBjaGFubmVsIHRvIGluIHRoZSByYW5nZSAwIC0xXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmYWRlKGNvbG9yLCB2YWx1ZSkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgdmFsdWUgPSBjbGFtcCh2YWx1ZSk7XG5cbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdyZ2InIHx8IGNvbG9yLnR5cGUgPT09ICdoc2wnKSB7XG4gICAgY29sb3IudHlwZSArPSAnYSc7XG4gIH1cblxuICBjb2xvci52YWx1ZXNbM10gPSB2YWx1ZTtcbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbi8qKlxuICogRGFya2VucyBhIGNvbG9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50KSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBjb2VmZmljaWVudCA9IGNsYW1wKGNvZWZmaWNpZW50KTtcblxuICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICBjb2xvci52YWx1ZXNbMl0gKj0gMSAtIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbi8qKlxuICogTGlnaHRlbnMgYSBjb2xvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuXG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSArPSAoMTAwIC0gY29sb3IudmFsdWVzWzJdKSAqIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSArPSAoMjU1IC0gY29sb3IudmFsdWVzW2ldKSAqIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IHsgZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgfSBmcm9tIFwiQG1hdGVyaWFsLXVpL3V0aWxzXCI7XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IGNvbW1vbiBmcm9tICcuLi9jb2xvcnMvY29tbW9uJztcbmltcG9ydCBncmV5IGZyb20gJy4uL2NvbG9ycy9ncmV5JztcbmltcG9ydCBpbmRpZ28gZnJvbSAnLi4vY29sb3JzL2luZGlnbyc7XG5pbXBvcnQgcGluayBmcm9tICcuLi9jb2xvcnMvcGluayc7XG5pbXBvcnQgcmVkIGZyb20gJy4uL2NvbG9ycy9yZWQnO1xuaW1wb3J0IG9yYW5nZSBmcm9tICcuLi9jb2xvcnMvb3JhbmdlJztcbmltcG9ydCBibHVlIGZyb20gJy4uL2NvbG9ycy9ibHVlJztcbmltcG9ydCBncmVlbiBmcm9tICcuLi9jb2xvcnMvZ3JlZW4nO1xuaW1wb3J0IHsgZGFya2VuLCBnZXRDb250cmFzdFJhdGlvLCBsaWdodGVuIH0gZnJvbSAnLi9jb2xvck1hbmlwdWxhdG9yJztcbmV4cG9ydCB2YXIgbGlnaHQgPSB7XG4gIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgdGV4dC5cbiAgdGV4dDoge1xuICAgIC8vIFRoZSBtb3N0IGltcG9ydGFudCB0ZXh0LlxuICAgIHByaW1hcnk6ICdyZ2JhKDAsIDAsIDAsIDAuODcpJyxcbiAgICAvLyBTZWNvbmRhcnkgdGV4dC5cbiAgICBzZWNvbmRhcnk6ICdyZ2JhKDAsIDAsIDAsIDAuNTQpJyxcbiAgICAvLyBEaXNhYmxlZCB0ZXh0IGhhdmUgZXZlbiBsb3dlciB2aXN1YWwgcHJvbWluZW5jZS5cbiAgICBkaXNhYmxlZDogJ3JnYmEoMCwgMCwgMCwgMC4zOCknLFxuICAgIC8vIFRleHQgaGludHMuXG4gICAgaGludDogJ3JnYmEoMCwgMCwgMCwgMC4zOCknXG4gIH0sXG4gIC8vIFRoZSBjb2xvciB1c2VkIHRvIGRpdmlkZSBkaWZmZXJlbnQgZWxlbWVudHMuXG4gIGRpdmlkZXI6ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyxcbiAgLy8gVGhlIGJhY2tncm91bmQgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIHN1cmZhY2VzLlxuICAvLyBDb25zaXN0ZW5jeSBiZXR3ZWVuIHRoZXNlIHZhbHVlcyBpcyBpbXBvcnRhbnQuXG4gIGJhY2tncm91bmQ6IHtcbiAgICBwYXBlcjogY29tbW9uLndoaXRlLFxuICAgIGRlZmF1bHQ6IGdyZXlbNTBdXG4gIH0sXG4gIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgYWN0aW9uIGVsZW1lbnRzLlxuICBhY3Rpb246IHtcbiAgICAvLyBUaGUgY29sb3Igb2YgYW4gYWN0aXZlIGFjdGlvbiBsaWtlIGFuIGljb24gYnV0dG9uLlxuICAgIGFjdGl2ZTogJ3JnYmEoMCwgMCwgMCwgMC41NCknLFxuICAgIC8vIFRoZSBjb2xvciBvZiBhbiBob3ZlcmVkIGFjdGlvbi5cbiAgICBob3ZlcjogJ3JnYmEoMCwgMCwgMCwgMC4wNCknLFxuICAgIGhvdmVyT3BhY2l0eTogMC4wNCxcbiAgICAvLyBUaGUgY29sb3Igb2YgYSBzZWxlY3RlZCBhY3Rpb24uXG4gICAgc2VsZWN0ZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMDgpJyxcbiAgICBzZWxlY3RlZE9wYWNpdHk6IDAuMDgsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjI2KScsXG4gICAgLy8gVGhlIGJhY2tncm91bmQgY29sb3Igb2YgYSBkaXNhYmxlZCBhY3Rpb24uXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gICAgZGlzYWJsZWRPcGFjaXR5OiAwLjM4LFxuICAgIGZvY3VzOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gICAgZm9jdXNPcGFjaXR5OiAwLjEyLFxuICAgIGFjdGl2YXRlZE9wYWNpdHk6IDAuMTJcbiAgfVxufTtcbmV4cG9ydCB2YXIgZGFyayA9IHtcbiAgdGV4dDoge1xuICAgIHByaW1hcnk6IGNvbW1vbi53aGl0ZSxcbiAgICBzZWNvbmRhcnk6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyknLFxuICAgIGRpc2FibGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJyxcbiAgICBoaW50OiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJyxcbiAgICBpY29uOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJ1xuICB9LFxuICBkaXZpZGVyOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gIGJhY2tncm91bmQ6IHtcbiAgICBwYXBlcjogZ3JleVs4MDBdLFxuICAgIGRlZmF1bHQ6ICcjMzAzMDMwJ1xuICB9LFxuICBhY3Rpb246IHtcbiAgICBhY3RpdmU6IGNvbW1vbi53aGl0ZSxcbiAgICBob3ZlcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOCknLFxuICAgIGhvdmVyT3BhY2l0eTogMC4wOCxcbiAgICBzZWxlY3RlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xNiknLFxuICAgIHNlbGVjdGVkT3BhY2l0eTogMC4xNixcbiAgICBkaXNhYmxlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKScsXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gICAgZGlzYWJsZWRPcGFjaXR5OiAwLjM4LFxuICAgIGZvY3VzOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gICAgZm9jdXNPcGFjaXR5OiAwLjEyLFxuICAgIGFjdGl2YXRlZE9wYWNpdHk6IDAuMjRcbiAgfVxufTtcblxuZnVuY3Rpb24gYWRkTGlnaHRPckRhcmsoaW50ZW50LCBkaXJlY3Rpb24sIHNoYWRlLCB0b25hbE9mZnNldCkge1xuICB2YXIgdG9uYWxPZmZzZXRMaWdodCA9IHRvbmFsT2Zmc2V0LmxpZ2h0IHx8IHRvbmFsT2Zmc2V0O1xuICB2YXIgdG9uYWxPZmZzZXREYXJrID0gdG9uYWxPZmZzZXQuZGFyayB8fCB0b25hbE9mZnNldCAqIDEuNTtcblxuICBpZiAoIWludGVudFtkaXJlY3Rpb25dKSB7XG4gICAgaWYgKGludGVudC5oYXNPd25Qcm9wZXJ0eShzaGFkZSkpIHtcbiAgICAgIGludGVudFtkaXJlY3Rpb25dID0gaW50ZW50W3NoYWRlXTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2xpZ2h0Jykge1xuICAgICAgaW50ZW50LmxpZ2h0ID0gbGlnaHRlbihpbnRlbnQubWFpbiwgdG9uYWxPZmZzZXRMaWdodCk7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdkYXJrJykge1xuICAgICAgaW50ZW50LmRhcmsgPSBkYXJrZW4oaW50ZW50Lm1haW4sIHRvbmFsT2Zmc2V0RGFyayk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVBhbGV0dGUocGFsZXR0ZSkge1xuICB2YXIgX3BhbGV0dGUkcHJpbWFyeSA9IHBhbGV0dGUucHJpbWFyeSxcbiAgICAgIHByaW1hcnkgPSBfcGFsZXR0ZSRwcmltYXJ5ID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IGluZGlnb1szMDBdLFxuICAgIG1haW46IGluZGlnb1s1MDBdLFxuICAgIGRhcms6IGluZGlnb1s3MDBdXG4gIH0gOiBfcGFsZXR0ZSRwcmltYXJ5LFxuICAgICAgX3BhbGV0dGUkc2Vjb25kYXJ5ID0gcGFsZXR0ZS5zZWNvbmRhcnksXG4gICAgICBzZWNvbmRhcnkgPSBfcGFsZXR0ZSRzZWNvbmRhcnkgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogcGluay5BMjAwLFxuICAgIG1haW46IHBpbmsuQTQwMCxcbiAgICBkYXJrOiBwaW5rLkE3MDBcbiAgfSA6IF9wYWxldHRlJHNlY29uZGFyeSxcbiAgICAgIF9wYWxldHRlJGVycm9yID0gcGFsZXR0ZS5lcnJvcixcbiAgICAgIGVycm9yID0gX3BhbGV0dGUkZXJyb3IgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogcmVkWzMwMF0sXG4gICAgbWFpbjogcmVkWzUwMF0sXG4gICAgZGFyazogcmVkWzcwMF1cbiAgfSA6IF9wYWxldHRlJGVycm9yLFxuICAgICAgX3BhbGV0dGUkd2FybmluZyA9IHBhbGV0dGUud2FybmluZyxcbiAgICAgIHdhcm5pbmcgPSBfcGFsZXR0ZSR3YXJuaW5nID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IG9yYW5nZVszMDBdLFxuICAgIG1haW46IG9yYW5nZVs1MDBdLFxuICAgIGRhcms6IG9yYW5nZVs3MDBdXG4gIH0gOiBfcGFsZXR0ZSR3YXJuaW5nLFxuICAgICAgX3BhbGV0dGUkaW5mbyA9IHBhbGV0dGUuaW5mbyxcbiAgICAgIGluZm8gPSBfcGFsZXR0ZSRpbmZvID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IGJsdWVbMzAwXSxcbiAgICBtYWluOiBibHVlWzUwMF0sXG4gICAgZGFyazogYmx1ZVs3MDBdXG4gIH0gOiBfcGFsZXR0ZSRpbmZvLFxuICAgICAgX3BhbGV0dGUkc3VjY2VzcyA9IHBhbGV0dGUuc3VjY2VzcyxcbiAgICAgIHN1Y2Nlc3MgPSBfcGFsZXR0ZSRzdWNjZXNzID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IGdyZWVuWzMwMF0sXG4gICAgbWFpbjogZ3JlZW5bNTAwXSxcbiAgICBkYXJrOiBncmVlbls3MDBdXG4gIH0gOiBfcGFsZXR0ZSRzdWNjZXNzLFxuICAgICAgX3BhbGV0dGUkdHlwZSA9IHBhbGV0dGUudHlwZSxcbiAgICAgIHR5cGUgPSBfcGFsZXR0ZSR0eXBlID09PSB2b2lkIDAgPyAnbGlnaHQnIDogX3BhbGV0dGUkdHlwZSxcbiAgICAgIF9wYWxldHRlJGNvbnRyYXN0VGhyZSA9IHBhbGV0dGUuY29udHJhc3RUaHJlc2hvbGQsXG4gICAgICBjb250cmFzdFRocmVzaG9sZCA9IF9wYWxldHRlJGNvbnRyYXN0VGhyZSA9PT0gdm9pZCAwID8gMyA6IF9wYWxldHRlJGNvbnRyYXN0VGhyZSxcbiAgICAgIF9wYWxldHRlJHRvbmFsT2Zmc2V0ID0gcGFsZXR0ZS50b25hbE9mZnNldCxcbiAgICAgIHRvbmFsT2Zmc2V0ID0gX3BhbGV0dGUkdG9uYWxPZmZzZXQgPT09IHZvaWQgMCA/IDAuMiA6IF9wYWxldHRlJHRvbmFsT2Zmc2V0LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocGFsZXR0ZSwgW1wicHJpbWFyeVwiLCBcInNlY29uZGFyeVwiLCBcImVycm9yXCIsIFwid2FybmluZ1wiLCBcImluZm9cIiwgXCJzdWNjZXNzXCIsIFwidHlwZVwiLCBcImNvbnRyYXN0VGhyZXNob2xkXCIsIFwidG9uYWxPZmZzZXRcIl0pOyAvLyBVc2UgdGhlIHNhbWUgbG9naWMgYXNcbiAgLy8gQm9vdHN0cmFwOiBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi8xZDZlMzcxMGRkNDQ3ZGUxYTIwMGYyOWU4ZmE1MjFmOGEwOTA4ZjcwL3Njc3MvX2Z1bmN0aW9ucy5zY3NzI0w1OVxuICAvLyBhbmQgbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIgaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWNvbXBvbmVudHMvbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIvYmxvYi9hYzQ2Yjg4NjNjNGRhYjlmYzIyYzRjNjYyZGM2YmQxYjY1ZGQ2NTJmL3BhY2thZ2VzL21kYy10aGVtZS9fZnVuY3Rpb25zLnNjc3MjTDU0XG5cblxuICBmdW5jdGlvbiBnZXRDb250cmFzdFRleHQoYmFja2dyb3VuZCkge1xuICAgIHZhciBjb250cmFzdFRleHQgPSBnZXRDb250cmFzdFJhdGlvKGJhY2tncm91bmQsIGRhcmsudGV4dC5wcmltYXJ5KSA+PSBjb250cmFzdFRocmVzaG9sZCA/IGRhcmsudGV4dC5wcmltYXJ5IDogbGlnaHQudGV4dC5wcmltYXJ5O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBjb250cmFzdCA9IGdldENvbnRyYXN0UmF0aW8oYmFja2dyb3VuZCwgY29udHJhc3RUZXh0KTtcblxuICAgICAgaWYgKGNvbnRyYXN0IDwgMykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgY29udHJhc3QgcmF0aW8gb2YgXCIuY29uY2F0KGNvbnRyYXN0LCBcIjoxIGZvciBcIikuY29uY2F0KGNvbnRyYXN0VGV4dCwgXCIgb24gXCIpLmNvbmNhdChiYWNrZ3JvdW5kKSwgJ2ZhbGxzIGJlbG93IHRoZSBXQ0FHIHJlY29tbWVuZGVkIGFic29sdXRlIG1pbmltdW0gY29udHJhc3QgcmF0aW8gb2YgMzoxLicsICdodHRwczovL3d3dy53My5vcmcvVFIvMjAwOC9SRUMtV0NBRzIwLTIwMDgxMjExLyN2aXN1YWwtYXVkaW8tY29udHJhc3QtY29udHJhc3QnXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRyYXN0VGV4dDtcbiAgfVxuXG4gIHZhciBhdWdtZW50Q29sb3IgPSBmdW5jdGlvbiBhdWdtZW50Q29sb3IoY29sb3IpIHtcbiAgICB2YXIgbWFpblNoYWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiA1MDA7XG4gICAgdmFyIGxpZ2h0U2hhZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDMwMDtcbiAgICB2YXIgZGFya1NoYWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiA3MDA7XG4gICAgY29sb3IgPSBfZXh0ZW5kcyh7fSwgY29sb3IpO1xuXG4gICAgaWYgKCFjb2xvci5tYWluICYmIGNvbG9yW21haW5TaGFkZV0pIHtcbiAgICAgIGNvbG9yLm1haW4gPSBjb2xvclttYWluU2hhZGVdO1xuICAgIH1cblxuICAgIGlmICghY29sb3IubWFpbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFwiTWF0ZXJpYWwtVUk6IFRoZSBjb2xvciBwcm92aWRlZCB0byBhdWdtZW50Q29sb3IoY29sb3IpIGlzIGludmFsaWQuXFxuVGhlIGNvbG9yIG9iamVjdCBuZWVkcyB0byBoYXZlIGEgYG1haW5gIHByb3BlcnR5IG9yIGEgYFwiLmNvbmNhdChtYWluU2hhZGUsIFwiYCBwcm9wZXJ0eS5cIikgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDQsIG1haW5TaGFkZSkpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY29sb3IubWFpbiAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBcIk1hdGVyaWFsLVVJOiBUaGUgY29sb3IgcHJvdmlkZWQgdG8gYXVnbWVudENvbG9yKGNvbG9yKSBpcyBpbnZhbGlkLlxcbmBjb2xvci5tYWluYCBzaG91bGQgYmUgYSBzdHJpbmcsIGJ1dCBgXCIuY29uY2F0KEpTT04uc3RyaW5naWZ5KGNvbG9yLm1haW4pLCBcImAgd2FzIHByb3ZpZGVkIGluc3RlYWQuXFxuXFxuRGlkIHlvdSBpbnRlbmQgdG8gdXNlIG9uZSBvZiB0aGUgZm9sbG93aW5nIGFwcHJvYWNoZXM/XFxuXFxuaW1wb3J0IHtcXHhBMGdyZWVuIH0gZnJvbSBcXFwiQG1hdGVyaWFsLXVpL2NvcmUvY29sb3JzXFxcIjtcXG5cXG5jb25zdCB0aGVtZTEgPSBjcmVhdGVNdWlUaGVtZSh7IHBhbGV0dGU6IHtcXG4gIHByaW1hcnk6IGdyZWVuLFxcbn0gfSk7XFxuXFxuY29uc3QgdGhlbWUyID0gY3JlYXRlTXVpVGhlbWUoeyBwYWxldHRlOiB7XFxuICBwcmltYXJ5OiB7IG1haW46IGdyZWVuWzUwMF0gfSxcXG59IH0pO1wiKSA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoNSwgSlNPTi5zdHJpbmdpZnkoY29sb3IubWFpbikpKTtcbiAgICB9XG5cbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2xpZ2h0JywgbGlnaHRTaGFkZSwgdG9uYWxPZmZzZXQpO1xuICAgIGFkZExpZ2h0T3JEYXJrKGNvbG9yLCAnZGFyaycsIGRhcmtTaGFkZSwgdG9uYWxPZmZzZXQpO1xuXG4gICAgaWYgKCFjb2xvci5jb250cmFzdFRleHQpIHtcbiAgICAgIGNvbG9yLmNvbnRyYXN0VGV4dCA9IGdldENvbnRyYXN0VGV4dChjb2xvci5tYWluKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29sb3I7XG4gIH07XG5cbiAgdmFyIHR5cGVzID0ge1xuICAgIGRhcms6IGRhcmssXG4gICAgbGlnaHQ6IGxpZ2h0XG4gIH07XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIXR5cGVzW3R5cGVdKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IFRoZSBwYWxldHRlIHR5cGUgYFwiLmNvbmNhdCh0eXBlLCBcImAgaXMgbm90IHN1cHBvcnRlZC5cIikpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwYWxldHRlT3V0cHV0ID0gZGVlcG1lcmdlKF9leHRlbmRzKHtcbiAgICAvLyBBIGNvbGxlY3Rpb24gb2YgY29tbW9uIGNvbG9ycy5cbiAgICBjb21tb246IGNvbW1vbixcbiAgICAvLyBUaGUgcGFsZXR0ZSB0eXBlLCBjYW4gYmUgbGlnaHQgb3IgZGFyay5cbiAgICB0eXBlOiB0eXBlLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgcHJpbWFyeSBpbnRlcmZhY2UgZWxlbWVudHMgZm9yIGEgdXNlci5cbiAgICBwcmltYXJ5OiBhdWdtZW50Q29sb3IocHJpbWFyeSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBzZWNvbmRhcnkgaW50ZXJmYWNlIGVsZW1lbnRzIGZvciBhIHVzZXIuXG4gICAgc2Vjb25kYXJ5OiBhdWdtZW50Q29sb3Ioc2Vjb25kYXJ5LCAnQTQwMCcsICdBMjAwJywgJ0E3MDAnKSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IGludGVyZmFjZSBlbGVtZW50cyB0aGF0IHRoZSB1c2VyIHNob3VsZCBiZSBtYWRlIGF3YXJlIG9mLlxuICAgIGVycm9yOiBhdWdtZW50Q29sb3IoZXJyb3IpLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgcG90ZW50aWFsbHkgZGFuZ2Vyb3VzIGFjdGlvbnMgb3IgaW1wb3J0YW50IG1lc3NhZ2VzLlxuICAgIHdhcm5pbmc6IGF1Z21lbnRDb2xvcih3YXJuaW5nKSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcHJlc2VudCBpbmZvcm1hdGlvbiB0byB0aGUgdXNlciB0aGF0IGlzIG5ldXRyYWwgYW5kIG5vdCBuZWNlc3NhcmlseSBpbXBvcnRhbnQuXG4gICAgaW5mbzogYXVnbWVudENvbG9yKGluZm8pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBpbmRpY2F0ZSB0aGUgc3VjY2Vzc2Z1bCBjb21wbGV0aW9uIG9mIGFuIGFjdGlvbiB0aGF0IHVzZXIgdHJpZ2dlcmVkLlxuICAgIHN1Y2Nlc3M6IGF1Z21lbnRDb2xvcihzdWNjZXNzKSxcbiAgICAvLyBUaGUgZ3JleSBjb2xvcnMuXG4gICAgZ3JleTogZ3JleSxcbiAgICAvLyBVc2VkIGJ5IGBnZXRDb250cmFzdFRleHQoKWAgdG8gbWF4aW1pemUgdGhlIGNvbnRyYXN0IGJldHdlZW5cbiAgICAvLyB0aGUgYmFja2dyb3VuZCBhbmQgdGhlIHRleHQuXG4gICAgY29udHJhc3RUaHJlc2hvbGQ6IGNvbnRyYXN0VGhyZXNob2xkLFxuICAgIC8vIFRha2VzIGEgYmFja2dyb3VuZCBjb2xvciBhbmQgcmV0dXJucyB0aGUgdGV4dCBjb2xvciB0aGF0IG1heGltaXplcyB0aGUgY29udHJhc3QuXG4gICAgZ2V0Q29udHJhc3RUZXh0OiBnZXRDb250cmFzdFRleHQsXG4gICAgLy8gR2VuZXJhdGUgYSByaWNoIGNvbG9yIG9iamVjdC5cbiAgICBhdWdtZW50Q29sb3I6IGF1Z21lbnRDb2xvcixcbiAgICAvLyBVc2VkIGJ5IHRoZSBmdW5jdGlvbnMgYmVsb3cgdG8gc2hpZnQgYSBjb2xvcidzIGx1bWluYW5jZSBieSBhcHByb3hpbWF0ZWx5XG4gICAgLy8gdHdvIGluZGV4ZXMgd2l0aGluIGl0cyB0b25hbCBwYWxldHRlLlxuICAgIC8vIEUuZy4sIHNoaWZ0IGZyb20gUmVkIDUwMCB0byBSZWQgMzAwIG9yIFJlZCA3MDAuXG4gICAgdG9uYWxPZmZzZXQ6IHRvbmFsT2Zmc2V0XG4gIH0sIHR5cGVzW3R5cGVdKSwgb3RoZXIpO1xuICByZXR1cm4gcGFsZXR0ZU91dHB1dDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuXG5mdW5jdGlvbiByb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDFlNSkgLyAxZTU7XG59XG5cbnZhciBjYXNlQWxsQ2FwcyA9IHtcbiAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZSdcbn07XG52YXIgZGVmYXVsdEZvbnRGYW1pbHkgPSAnXCJSb2JvdG9cIiwgXCJIZWx2ZXRpY2FcIiwgXCJBcmlhbFwiLCBzYW5zLXNlcmlmJztcbi8qKlxuICogQHNlZSBAbGlua3todHRwczovL21hdGVyaWFsLmlvL2Rlc2lnbi90eXBvZ3JhcGh5L3RoZS10eXBlLXN5c3RlbS5odG1sfVxuICogQHNlZSBAbGlua3todHRwczovL21hdGVyaWFsLmlvL2Rlc2lnbi90eXBvZ3JhcGh5L3VuZGVyc3RhbmRpbmctdHlwb2dyYXBoeS5odG1sfVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVR5cG9ncmFwaHkocGFsZXR0ZSwgdHlwb2dyYXBoeSkge1xuICB2YXIgX3JlZiA9IHR5cGVvZiB0eXBvZ3JhcGh5ID09PSAnZnVuY3Rpb24nID8gdHlwb2dyYXBoeShwYWxldHRlKSA6IHR5cG9ncmFwaHksXG4gICAgICBfcmVmJGZvbnRGYW1pbHkgPSBfcmVmLmZvbnRGYW1pbHksXG4gICAgICBmb250RmFtaWx5ID0gX3JlZiRmb250RmFtaWx5ID09PSB2b2lkIDAgPyBkZWZhdWx0Rm9udEZhbWlseSA6IF9yZWYkZm9udEZhbWlseSxcbiAgICAgIF9yZWYkZm9udFNpemUgPSBfcmVmLmZvbnRTaXplLFxuICAgICAgZm9udFNpemUgPSBfcmVmJGZvbnRTaXplID09PSB2b2lkIDAgPyAxNCA6IF9yZWYkZm9udFNpemUsXG4gICAgICBfcmVmJGZvbnRXZWlnaHRMaWdodCA9IF9yZWYuZm9udFdlaWdodExpZ2h0LFxuICAgICAgZm9udFdlaWdodExpZ2h0ID0gX3JlZiRmb250V2VpZ2h0TGlnaHQgPT09IHZvaWQgMCA/IDMwMCA6IF9yZWYkZm9udFdlaWdodExpZ2h0LFxuICAgICAgX3JlZiRmb250V2VpZ2h0UmVndWxhID0gX3JlZi5mb250V2VpZ2h0UmVndWxhcixcbiAgICAgIGZvbnRXZWlnaHRSZWd1bGFyID0gX3JlZiRmb250V2VpZ2h0UmVndWxhID09PSB2b2lkIDAgPyA0MDAgOiBfcmVmJGZvbnRXZWlnaHRSZWd1bGEsXG4gICAgICBfcmVmJGZvbnRXZWlnaHRNZWRpdW0gPSBfcmVmLmZvbnRXZWlnaHRNZWRpdW0sXG4gICAgICBmb250V2VpZ2h0TWVkaXVtID0gX3JlZiRmb250V2VpZ2h0TWVkaXVtID09PSB2b2lkIDAgPyA1MDAgOiBfcmVmJGZvbnRXZWlnaHRNZWRpdW0sXG4gICAgICBfcmVmJGZvbnRXZWlnaHRCb2xkID0gX3JlZi5mb250V2VpZ2h0Qm9sZCxcbiAgICAgIGZvbnRXZWlnaHRCb2xkID0gX3JlZiRmb250V2VpZ2h0Qm9sZCA9PT0gdm9pZCAwID8gNzAwIDogX3JlZiRmb250V2VpZ2h0Qm9sZCxcbiAgICAgIF9yZWYkaHRtbEZvbnRTaXplID0gX3JlZi5odG1sRm9udFNpemUsXG4gICAgICBodG1sRm9udFNpemUgPSBfcmVmJGh0bWxGb250U2l6ZSA9PT0gdm9pZCAwID8gMTYgOiBfcmVmJGh0bWxGb250U2l6ZSxcbiAgICAgIGFsbFZhcmlhbnRzID0gX3JlZi5hbGxWYXJpYW50cyxcbiAgICAgIHB4VG9SZW0yID0gX3JlZi5weFRvUmVtLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1wiZm9udEZhbWlseVwiLCBcImZvbnRTaXplXCIsIFwiZm9udFdlaWdodExpZ2h0XCIsIFwiZm9udFdlaWdodFJlZ3VsYXJcIiwgXCJmb250V2VpZ2h0TWVkaXVtXCIsIFwiZm9udFdlaWdodEJvbGRcIiwgXCJodG1sRm9udFNpemVcIiwgXCJhbGxWYXJpYW50c1wiLCBcInB4VG9SZW1cIl0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBmb250U2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBgZm9udFNpemVgIGlzIHJlcXVpcmVkIHRvIGJlIGEgbnVtYmVyLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaHRtbEZvbnRTaXplICE9PSAnbnVtYmVyJykge1xuICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IGBodG1sRm9udFNpemVgIGlzIHJlcXVpcmVkIHRvIGJlIGEgbnVtYmVyLicpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb2VmID0gZm9udFNpemUgLyAxNDtcblxuICB2YXIgcHhUb1JlbSA9IHB4VG9SZW0yIHx8IGZ1bmN0aW9uIChzaXplKSB7XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KHNpemUgLyBodG1sRm9udFNpemUgKiBjb2VmLCBcInJlbVwiKTtcbiAgfTtcblxuICB2YXIgYnVpbGRWYXJpYW50ID0gZnVuY3Rpb24gYnVpbGRWYXJpYW50KGZvbnRXZWlnaHQsIHNpemUsIGxpbmVIZWlnaHQsIGxldHRlclNwYWNpbmcsIGNhc2luZykge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgZm9udFdlaWdodDogZm9udFdlaWdodCxcbiAgICAgIGZvbnRTaXplOiBweFRvUmVtKHNpemUpLFxuICAgICAgLy8gVW5pdGxlc3MgZm9sbG93aW5nIGh0dHBzOi8vbWV5ZXJ3ZWIuY29tL2VyaWMvdGhvdWdodHMvMjAwNi8wMi8wOC91bml0bGVzcy1saW5lLWhlaWdodHMvXG4gICAgICBsaW5lSGVpZ2h0OiBsaW5lSGVpZ2h0XG4gICAgfSwgZm9udEZhbWlseSA9PT0gZGVmYXVsdEZvbnRGYW1pbHkgPyB7XG4gICAgICBsZXR0ZXJTcGFjaW5nOiBcIlwiLmNvbmNhdChyb3VuZChsZXR0ZXJTcGFjaW5nIC8gc2l6ZSksIFwiZW1cIilcbiAgICB9IDoge30sIGNhc2luZywgYWxsVmFyaWFudHMpO1xuICB9O1xuXG4gIHZhciB2YXJpYW50cyA9IHtcbiAgICBoMTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRMaWdodCwgOTYsIDEuMTY3LCAtMS41KSxcbiAgICBoMjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRMaWdodCwgNjAsIDEuMiwgLTAuNSksXG4gICAgaDM6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgNDgsIDEuMTY3LCAwKSxcbiAgICBoNDogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAzNCwgMS4yMzUsIDAuMjUpLFxuICAgIGg1OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDI0LCAxLjMzNCwgMCksXG4gICAgaDY6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAyMCwgMS42LCAwLjE1KSxcbiAgICBzdWJ0aXRsZTE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTYsIDEuNzUsIDAuMTUpLFxuICAgIHN1YnRpdGxlMjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjU3LCAwLjEpLFxuICAgIGJvZHkxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE2LCAxLjUsIDAuMTUpLFxuICAgIGJvZHkyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE0LCAxLjQzLCAwLjE1KSxcbiAgICBidXR0b246IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAxNCwgMS43NSwgMC40LCBjYXNlQWxsQ2FwcyksXG4gICAgY2FwdGlvbjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxMiwgMS42NiwgMC40KSxcbiAgICBvdmVybGluZTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxMiwgMi42NiwgMSwgY2FzZUFsbENhcHMpXG4gIH07XG4gIHJldHVybiBkZWVwbWVyZ2UoX2V4dGVuZHMoe1xuICAgIGh0bWxGb250U2l6ZTogaHRtbEZvbnRTaXplLFxuICAgIHB4VG9SZW06IHB4VG9SZW0sXG4gICAgcm91bmQ6IHJvdW5kLFxuICAgIC8vIFRPRE8gdjU6IHJlbW92ZVxuICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgZm9udFNpemU6IGZvbnRTaXplLFxuICAgIGZvbnRXZWlnaHRMaWdodDogZm9udFdlaWdodExpZ2h0LFxuICAgIGZvbnRXZWlnaHRSZWd1bGFyOiBmb250V2VpZ2h0UmVndWxhcixcbiAgICBmb250V2VpZ2h0TWVkaXVtOiBmb250V2VpZ2h0TWVkaXVtLFxuICAgIGZvbnRXZWlnaHRCb2xkOiBmb250V2VpZ2h0Qm9sZFxuICB9LCB2YXJpYW50cyksIG90aGVyLCB7XG4gICAgY2xvbmU6IGZhbHNlIC8vIE5vIG5lZWQgdG8gY2xvbmUgZGVlcFxuXG4gIH0pO1xufSIsInZhciBzaGFkb3dLZXlVbWJyYU9wYWNpdHkgPSAwLjI7XG52YXIgc2hhZG93S2V5UGVudW1icmFPcGFjaXR5ID0gMC4xNDtcbnZhciBzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eSA9IDAuMTI7XG5cbmZ1bmN0aW9uIGNyZWF0ZVNoYWRvdygpIHtcbiAgcmV0dXJuIFtcIlwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMl0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDMgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbM10sIFwicHggcmdiYSgwLDAsMCxcIikuY29uY2F0KHNoYWRvd0tleVVtYnJhT3BhY2l0eSwgXCIpXCIpLCBcIlwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDQgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbNF0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDUgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbNV0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDYgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbNl0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDcgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbN10sIFwicHggcmdiYSgwLDAsMCxcIikuY29uY2F0KHNoYWRvd0tleVBlbnVtYnJhT3BhY2l0eSwgXCIpXCIpLCBcIlwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDggPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbOF0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDkgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbOV0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDEwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzEwXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMTEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMTFdLCBcInB4IHJnYmEoMCwwLDAsXCIpLmNvbmNhdChzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eSwgXCIpXCIpXS5qb2luKCcsJyk7XG59IC8vIFZhbHVlcyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtd2ViL2Jsb2IvYmU4NzQ3Zjk0NTc0NjY5Y2I1ZTdhZGQxYTdjNTRmYTQxYTg5Y2VjNy9wYWNrYWdlcy9tZGMtZWxldmF0aW9uL192YXJpYWJsZXMuc2Nzc1xuXG5cbnZhciBzaGFkb3dzID0gWydub25lJywgY3JlYXRlU2hhZG93KDAsIDIsIDEsIC0xLCAwLCAxLCAxLCAwLCAwLCAxLCAzLCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDEsIC0yLCAwLCAyLCAyLCAwLCAwLCAxLCA1LCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDMsIC0yLCAwLCAzLCA0LCAwLCAwLCAxLCA4LCAwKSwgY3JlYXRlU2hhZG93KDAsIDIsIDQsIC0xLCAwLCA0LCA1LCAwLCAwLCAxLCAxMCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNSwgOCwgMCwgMCwgMSwgMTQsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgNSwgLTEsIDAsIDYsIDEwLCAwLCAwLCAxLCAxOCwgMCksIGNyZWF0ZVNoYWRvdygwLCA0LCA1LCAtMiwgMCwgNywgMTAsIDEsIDAsIDIsIDE2LCAxKSwgY3JlYXRlU2hhZG93KDAsIDUsIDUsIC0zLCAwLCA4LCAxMCwgMSwgMCwgMywgMTQsIDIpLCBjcmVhdGVTaGFkb3coMCwgNSwgNiwgLTMsIDAsIDksIDEyLCAxLCAwLCAzLCAxNiwgMiksIGNyZWF0ZVNoYWRvdygwLCA2LCA2LCAtMywgMCwgMTAsIDE0LCAxLCAwLCA0LCAxOCwgMyksIGNyZWF0ZVNoYWRvdygwLCA2LCA3LCAtNCwgMCwgMTEsIDE1LCAxLCAwLCA0LCAyMCwgMyksIGNyZWF0ZVNoYWRvdygwLCA3LCA4LCAtNCwgMCwgMTIsIDE3LCAyLCAwLCA1LCAyMiwgNCksIGNyZWF0ZVNoYWRvdygwLCA3LCA4LCAtNCwgMCwgMTMsIDE5LCAyLCAwLCA1LCAyNCwgNCksIGNyZWF0ZVNoYWRvdygwLCA3LCA5LCAtNCwgMCwgMTQsIDIxLCAyLCAwLCA1LCAyNiwgNCksIGNyZWF0ZVNoYWRvdygwLCA4LCA5LCAtNSwgMCwgMTUsIDIyLCAyLCAwLCA2LCAyOCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMCwgLTUsIDAsIDE2LCAyNCwgMiwgMCwgNiwgMzAsIDUpLCBjcmVhdGVTaGFkb3coMCwgOCwgMTEsIC01LCAwLCAxNywgMjYsIDIsIDAsIDYsIDMyLCA1KSwgY3JlYXRlU2hhZG93KDAsIDksIDExLCAtNSwgMCwgMTgsIDI4LCAyLCAwLCA3LCAzNCwgNiksIGNyZWF0ZVNoYWRvdygwLCA5LCAxMiwgLTYsIDAsIDE5LCAyOSwgMiwgMCwgNywgMzYsIDYpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDEzLCAtNiwgMCwgMjAsIDMxLCAzLCAwLCA4LCAzOCwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMSwgMzMsIDMsIDAsIDgsIDQwLCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxNCwgLTYsIDAsIDIyLCAzNSwgMywgMCwgOCwgNDIsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTEsIDE0LCAtNywgMCwgMjMsIDM2LCAzLCAwLCA5LCA0NCwgOCksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTUsIC03LCAwLCAyNCwgMzgsIDMsIDAsIDksIDQ2LCA4KV07XG5leHBvcnQgZGVmYXVsdCBzaGFkb3dzOyIsInZhciBzaGFwZSA9IHtcbiAgYm9yZGVyUmFkaXVzOiA0XG59O1xuZXhwb3J0IGRlZmF1bHQgc2hhcGU7IiwiaW1wb3J0IHsgY3JlYXRlVW5hcnlTcGFjaW5nIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N5c3RlbSc7XG52YXIgd2Fybk9uY2U7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTcGFjaW5nKCkge1xuICB2YXIgc3BhY2luZ0lucHV0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiA4O1xuXG4gIC8vIEFscmVhZHkgdHJhbnNmb3JtZWQuXG4gIGlmIChzcGFjaW5nSW5wdXQubXVpKSB7XG4gICAgcmV0dXJuIHNwYWNpbmdJbnB1dDtcbiAgfSAvLyBNYXRlcmlhbCBEZXNpZ24gbGF5b3V0cyBhcmUgdmlzdWFsbHkgYmFsYW5jZWQuIE1vc3QgbWVhc3VyZW1lbnRzIGFsaWduIHRvIGFuIDhkcCBncmlkIGFwcGxpZWQsIHdoaWNoIGFsaWducyBib3RoIHNwYWNpbmcgYW5kIHRoZSBvdmVyYWxsIGxheW91dC5cbiAgLy8gU21hbGxlciBjb21wb25lbnRzLCBzdWNoIGFzIGljb25zIGFuZCB0eXBlLCBjYW4gYWxpZ24gdG8gYSA0ZHAgZ3JpZC5cbiAgLy8gaHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vbGF5b3V0L3VuZGVyc3RhbmRpbmctbGF5b3V0Lmh0bWwjdXNhZ2VcblxuXG4gIHZhciB0cmFuc2Zvcm0gPSBjcmVhdGVVbmFyeVNwYWNpbmcoe1xuICAgIHNwYWNpbmc6IHNwYWNpbmdJbnB1dFxuICB9KTtcblxuICB2YXIgc3BhY2luZyA9IGZ1bmN0aW9uIHNwYWNpbmcoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIShhcmdzLmxlbmd0aCA8PSA0KSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IFRvbyBtYW55IGFyZ3VtZW50cyBwcm92aWRlZCwgZXhwZWN0ZWQgYmV0d2VlbiAwIGFuZCA0LCBnb3QgXCIuY29uY2F0KGFyZ3MubGVuZ3RoKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdHJhbnNmb3JtKDEpO1xuICAgIH1cblxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgcmV0dXJuIHRyYW5zZm9ybShhcmdzWzBdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJncy5tYXAoZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gICAgICBpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gYXJndW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHZhciBvdXRwdXQgPSB0cmFuc2Zvcm0oYXJndW1lbnQpO1xuICAgICAgcmV0dXJuIHR5cGVvZiBvdXRwdXQgPT09ICdudW1iZXInID8gXCJcIi5jb25jYXQob3V0cHV0LCBcInB4XCIpIDogb3V0cHV0O1xuICAgIH0pLmpvaW4oJyAnKTtcbiAgfTsgLy8gQmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdG8gcmVtb3ZlIGluIHY1LlxuXG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNwYWNpbmcsICd1bml0Jywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKCF3YXJuT25jZSB8fCBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiB0aGVtZS5zcGFjaW5nLnVuaXQgdXNhZ2UgaGFzIGJlZW4gZGVwcmVjYXRlZC4nLCAnSXQgd2lsbCBiZSByZW1vdmVkIGluIHY1LicsICdZb3UgY2FuIHJlcGxhY2UgYHRoZW1lLnNwYWNpbmcudW5pdCAqIHlgIHdpdGggYHRoZW1lLnNwYWNpbmcoeSlgLicsICcnLCAnWW91IGNhbiB1c2UgdGhlIGBodHRwczovL2dpdGh1Yi5jb20vbXVpLW9yZy9tYXRlcmlhbC11aS90cmVlL21hc3Rlci9wYWNrYWdlcy9tYXRlcmlhbC11aS1jb2RlbW9kL1JFQURNRS5tZCN0aGVtZS1zcGFjaW5nLWFwaWAgbWlncmF0aW9uIGhlbHBlciB0byBtYWtlIHRoZSBwcm9jZXNzIHNtb290aGVyLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdhcm5PbmNlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNwYWNpbmdJbnB1dDtcbiAgICB9XG4gIH0pO1xuICBzcGFjaW5nLm11aSA9IHRydWU7XG4gIHJldHVybiBzcGFjaW5nO1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG4vLyBGb2xsb3cgaHR0cHM6Ly9tYXRlcmlhbC5nb29nbGUuY29tL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctbmF0dXJhbC1lYXNpbmctY3VydmVzXG4vLyB0byBsZWFybiB0aGUgY29udGV4dCBpbiB3aGljaCBlYWNoIGVhc2luZyBzaG91bGQgYmUgdXNlZC5cbmV4cG9ydCB2YXIgZWFzaW5nID0ge1xuICAvLyBUaGlzIGlzIHRoZSBtb3N0IGNvbW1vbiBlYXNpbmcgY3VydmUuXG4gIGVhc2VJbk91dDogJ2N1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSknLFxuICAvLyBPYmplY3RzIGVudGVyIHRoZSBzY3JlZW4gYXQgZnVsbCB2ZWxvY2l0eSBmcm9tIG9mZi1zY3JlZW4gYW5kXG4gIC8vIHNsb3dseSBkZWNlbGVyYXRlIHRvIGEgcmVzdGluZyBwb2ludC5cbiAgZWFzZU91dDogJ2N1YmljLWJlemllcigwLjAsIDAsIDAuMiwgMSknLFxuICAvLyBPYmplY3RzIGxlYXZlIHRoZSBzY3JlZW4gYXQgZnVsbCB2ZWxvY2l0eS4gVGhleSBkbyBub3QgZGVjZWxlcmF0ZSB3aGVuIG9mZi1zY3JlZW4uXG4gIGVhc2VJbjogJ2N1YmljLWJlemllcigwLjQsIDAsIDEsIDEpJyxcbiAgLy8gVGhlIHNoYXJwIGN1cnZlIGlzIHVzZWQgYnkgb2JqZWN0cyB0aGF0IG1heSByZXR1cm4gdG8gdGhlIHNjcmVlbiBhdCBhbnkgdGltZS5cbiAgc2hhcnA6ICdjdWJpYy1iZXppZXIoMC40LCAwLCAwLjYsIDEpJ1xufTsgLy8gRm9sbG93IGh0dHBzOi8vbWF0ZXJpYWwuaW8vZ3VpZGVsaW5lcy9tb3Rpb24vZHVyYXRpb24tZWFzaW5nLmh0bWwjZHVyYXRpb24tZWFzaW5nLWNvbW1vbi1kdXJhdGlvbnNcbi8vIHRvIGxlYXJuIHdoZW4gdXNlIHdoYXQgdGltaW5nXG5cbmV4cG9ydCB2YXIgZHVyYXRpb24gPSB7XG4gIHNob3J0ZXN0OiAxNTAsXG4gIHNob3J0ZXI6IDIwMCxcbiAgc2hvcnQ6IDI1MCxcbiAgLy8gbW9zdCBiYXNpYyByZWNvbW1lbmRlZCB0aW1pbmdcbiAgc3RhbmRhcmQ6IDMwMCxcbiAgLy8gdGhpcyBpcyB0byBiZSB1c2VkIGluIGNvbXBsZXggYW5pbWF0aW9uc1xuICBjb21wbGV4OiAzNzUsXG4gIC8vIHJlY29tbWVuZGVkIHdoZW4gc29tZXRoaW5nIGlzIGVudGVyaW5nIHNjcmVlblxuICBlbnRlcmluZ1NjcmVlbjogMjI1LFxuICAvLyByZWNvbW1lbmRlZCB3aGVuIHNvbWV0aGluZyBpcyBsZWF2aW5nIHNjcmVlblxuICBsZWF2aW5nU2NyZWVuOiAxOTVcbn07XG5cbmZ1bmN0aW9uIGZvcm1hdE1zKG1pbGxpc2Vjb25kcykge1xuICByZXR1cm4gXCJcIi5jb25jYXQoTWF0aC5yb3VuZChtaWxsaXNlY29uZHMpLCBcIm1zXCIpO1xufVxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheX0gcHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbVxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtLnByb3BcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYXJhbS5kdXJhdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtLmVhc2luZ1xuICogQHBhcmFtIHtudW1iZXJ9IHBhcmFtLmRlbGF5XG4gKi9cblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGVhc2luZzogZWFzaW5nLFxuICBkdXJhdGlvbjogZHVyYXRpb24sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogWydhbGwnXTtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICB2YXIgX29wdGlvbnMkZHVyYXRpb24gPSBvcHRpb25zLmR1cmF0aW9uLFxuICAgICAgICBkdXJhdGlvbk9wdGlvbiA9IF9vcHRpb25zJGR1cmF0aW9uID09PSB2b2lkIDAgPyBkdXJhdGlvbi5zdGFuZGFyZCA6IF9vcHRpb25zJGR1cmF0aW9uLFxuICAgICAgICBfb3B0aW9ucyRlYXNpbmcgPSBvcHRpb25zLmVhc2luZyxcbiAgICAgICAgZWFzaW5nT3B0aW9uID0gX29wdGlvbnMkZWFzaW5nID09PSB2b2lkIDAgPyBlYXNpbmcuZWFzZUluT3V0IDogX29wdGlvbnMkZWFzaW5nLFxuICAgICAgICBfb3B0aW9ucyRkZWxheSA9IG9wdGlvbnMuZGVsYXksXG4gICAgICAgIGRlbGF5ID0gX29wdGlvbnMkZGVsYXkgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyRkZWxheSxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgW1wiZHVyYXRpb25cIiwgXCJlYXNpbmdcIiwgXCJkZWxheVwiXSk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGlzU3RyaW5nID0gZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG4gICAgICB9O1xuXG4gICAgICB2YXIgaXNOdW1iZXIgPSBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKTtcbiAgICAgIH07XG5cbiAgICAgIGlmICghaXNTdHJpbmcocHJvcHMpICYmICFBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogQXJndW1lbnQgXCJwcm9wc1wiIG11c3QgYmUgYSBzdHJpbmcgb3IgQXJyYXkuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOdW1iZXIoZHVyYXRpb25PcHRpb24pICYmICFpc1N0cmluZyhkdXJhdGlvbk9wdGlvbikpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiBBcmd1bWVudCBcXFwiZHVyYXRpb25cXFwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcgYnV0IGZvdW5kIFwiLmNvbmNhdChkdXJhdGlvbk9wdGlvbiwgXCIuXCIpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc1N0cmluZyhlYXNpbmdPcHRpb24pKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBBcmd1bWVudCBcImVhc2luZ1wiIG11c3QgYmUgYSBzdHJpbmcuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOdW1iZXIoZGVsYXkpICYmICFpc1N0cmluZyhkZWxheSkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IEFyZ3VtZW50IFwiZGVsYXlcIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nLicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoT2JqZWN0LmtleXMob3RoZXIpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IFVucmVjb2duaXplZCBhcmd1bWVudChzKSBbXCIuY29uY2F0KE9iamVjdC5rZXlzKG90aGVyKS5qb2luKCcsJyksIFwiXS5cIikpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoQXJyYXkuaXNBcnJheShwcm9wcykgPyBwcm9wcyA6IFtwcm9wc10pLm1hcChmdW5jdGlvbiAoYW5pbWF0ZWRQcm9wKSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoYW5pbWF0ZWRQcm9wLCBcIiBcIikuY29uY2F0KHR5cGVvZiBkdXJhdGlvbk9wdGlvbiA9PT0gJ3N0cmluZycgPyBkdXJhdGlvbk9wdGlvbiA6IGZvcm1hdE1zKGR1cmF0aW9uT3B0aW9uKSwgXCIgXCIpLmNvbmNhdChlYXNpbmdPcHRpb24sIFwiIFwiKS5jb25jYXQodHlwZW9mIGRlbGF5ID09PSAnc3RyaW5nJyA/IGRlbGF5IDogZm9ybWF0TXMoZGVsYXkpKTtcbiAgICB9KS5qb2luKCcsJyk7XG4gIH0sXG4gIGdldEF1dG9IZWlnaHREdXJhdGlvbjogZnVuY3Rpb24gZ2V0QXV0b0hlaWdodER1cmF0aW9uKGhlaWdodCkge1xuICAgIGlmICghaGVpZ2h0KSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICB2YXIgY29uc3RhbnQgPSBoZWlnaHQgLyAzNjsgLy8gaHR0cHM6Ly93d3cud29sZnJhbWFscGhhLmNvbS9pbnB1dC8/aT0oNCslMkIrMTUrKisoeCslMkYrMzYrKSsqKiswLjI1KyUyQisoeCslMkYrMzYpKyUyRis1KSsqKzEwXG5cbiAgICByZXR1cm4gTWF0aC5yb3VuZCgoNCArIDE1ICogTWF0aC5wb3coY29uc3RhbnQsIDAuMjUpICsgY29uc3RhbnQgLyA1KSAqIDEwKTtcbiAgfVxufTsiLCIvLyBXZSBuZWVkIHRvIGNlbnRyYWxpemUgdGhlIHpJbmRleCBkZWZpbml0aW9ucyBhcyB0aGV5IHdvcmtcbi8vIGxpa2UgZ2xvYmFsIHZhbHVlcyBpbiB0aGUgYnJvd3Nlci5cbnZhciB6SW5kZXggPSB7XG4gIG1vYmlsZVN0ZXBwZXI6IDEwMDAsXG4gIHNwZWVkRGlhbDogMTA1MCxcbiAgYXBwQmFyOiAxMTAwLFxuICBkcmF3ZXI6IDEyMDAsXG4gIG1vZGFsOiAxMzAwLFxuICBzbmFja2JhcjogMTQwMCxcbiAgdG9vbHRpcDogMTUwMFxufTtcbmV4cG9ydCBkZWZhdWx0IHpJbmRleDsiLCJpbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgY3JlYXRlQnJlYWtwb2ludHMgZnJvbSAnLi9jcmVhdGVCcmVha3BvaW50cyc7XG5pbXBvcnQgY3JlYXRlTWl4aW5zIGZyb20gJy4vY3JlYXRlTWl4aW5zJztcbmltcG9ydCBjcmVhdGVQYWxldHRlIGZyb20gJy4vY3JlYXRlUGFsZXR0ZSc7XG5pbXBvcnQgY3JlYXRlVHlwb2dyYXBoeSBmcm9tICcuL2NyZWF0ZVR5cG9ncmFwaHknO1xuaW1wb3J0IHNoYWRvd3MgZnJvbSAnLi9zaGFkb3dzJztcbmltcG9ydCBzaGFwZSBmcm9tICcuL3NoYXBlJztcbmltcG9ydCBjcmVhdGVTcGFjaW5nIGZyb20gJy4vY3JlYXRlU3BhY2luZyc7XG5pbXBvcnQgdHJhbnNpdGlvbnMgZnJvbSAnLi90cmFuc2l0aW9ucyc7XG5pbXBvcnQgekluZGV4IGZyb20gJy4vekluZGV4JztcblxuZnVuY3Rpb24gY3JlYXRlTXVpVGhlbWUoKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICB2YXIgX29wdGlvbnMkYnJlYWtwb2ludHMgPSBvcHRpb25zLmJyZWFrcG9pbnRzLFxuICAgICAgYnJlYWtwb2ludHNJbnB1dCA9IF9vcHRpb25zJGJyZWFrcG9pbnRzID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJGJyZWFrcG9pbnRzLFxuICAgICAgX29wdGlvbnMkbWl4aW5zID0gb3B0aW9ucy5taXhpbnMsXG4gICAgICBtaXhpbnNJbnB1dCA9IF9vcHRpb25zJG1peGlucyA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyRtaXhpbnMsXG4gICAgICBfb3B0aW9ucyRwYWxldHRlID0gb3B0aW9ucy5wYWxldHRlLFxuICAgICAgcGFsZXR0ZUlucHV0ID0gX29wdGlvbnMkcGFsZXR0ZSA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyRwYWxldHRlLFxuICAgICAgc3BhY2luZ0lucHV0ID0gb3B0aW9ucy5zcGFjaW5nLFxuICAgICAgX29wdGlvbnMkdHlwb2dyYXBoeSA9IG9wdGlvbnMudHlwb2dyYXBoeSxcbiAgICAgIHR5cG9ncmFwaHlJbnB1dCA9IF9vcHRpb25zJHR5cG9ncmFwaHkgPT09IHZvaWQgMCA/IHt9IDogX29wdGlvbnMkdHlwb2dyYXBoeSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIFtcImJyZWFrcG9pbnRzXCIsIFwibWl4aW5zXCIsIFwicGFsZXR0ZVwiLCBcInNwYWNpbmdcIiwgXCJ0eXBvZ3JhcGh5XCJdKTtcblxuICB2YXIgcGFsZXR0ZSA9IGNyZWF0ZVBhbGV0dGUocGFsZXR0ZUlucHV0KTtcbiAgdmFyIGJyZWFrcG9pbnRzID0gY3JlYXRlQnJlYWtwb2ludHMoYnJlYWtwb2ludHNJbnB1dCk7XG4gIHZhciBzcGFjaW5nID0gY3JlYXRlU3BhY2luZyhzcGFjaW5nSW5wdXQpO1xuICB2YXIgbXVpVGhlbWUgPSBkZWVwbWVyZ2Uoe1xuICAgIGJyZWFrcG9pbnRzOiBicmVha3BvaW50cyxcbiAgICBkaXJlY3Rpb246ICdsdHInLFxuICAgIG1peGluczogY3JlYXRlTWl4aW5zKGJyZWFrcG9pbnRzLCBzcGFjaW5nLCBtaXhpbnNJbnB1dCksXG4gICAgb3ZlcnJpZGVzOiB7fSxcbiAgICAvLyBJbmplY3QgY3VzdG9tIHN0eWxlc1xuICAgIHBhbGV0dGU6IHBhbGV0dGUsXG4gICAgcHJvcHM6IHt9LFxuICAgIC8vIFByb3ZpZGUgZGVmYXVsdCBwcm9wc1xuICAgIHNoYWRvd3M6IHNoYWRvd3MsXG4gICAgdHlwb2dyYXBoeTogY3JlYXRlVHlwb2dyYXBoeShwYWxldHRlLCB0eXBvZ3JhcGh5SW5wdXQpLFxuICAgIHNwYWNpbmc6IHNwYWNpbmcsXG4gICAgc2hhcGU6IHNoYXBlLFxuICAgIHRyYW5zaXRpb25zOiB0cmFuc2l0aW9ucyxcbiAgICB6SW5kZXg6IHpJbmRleFxuICB9LCBvdGhlcik7XG5cbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgbXVpVGhlbWUgPSBhcmdzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBhcmd1bWVudCkge1xuICAgIHJldHVybiBkZWVwbWVyZ2UoYWNjLCBhcmd1bWVudCk7XG4gIH0sIG11aVRoZW1lKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBwc2V1ZG9DbGFzc2VzID0gWydjaGVja2VkJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2ZvY3VzZWQnLCAnZm9jdXNWaXNpYmxlJywgJ3JlcXVpcmVkJywgJ2V4cGFuZGVkJywgJ3NlbGVjdGVkJ107XG5cbiAgICB2YXIgdHJhdmVyc2UgPSBmdW5jdGlvbiB0cmF2ZXJzZShub2RlLCBwYXJlbnRLZXkpIHtcbiAgICAgIHZhciBkZXB0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTtcbiAgICAgIHZhciBrZXk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW4sIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG5cbiAgICAgIGZvciAoa2V5IGluIG5vZGUpIHtcbiAgICAgICAgdmFyIGNoaWxkID0gbm9kZVtrZXldO1xuXG4gICAgICAgIGlmIChkZXB0aCA9PT0gMSkge1xuICAgICAgICAgIGlmIChrZXkuaW5kZXhPZignTXVpJykgPT09IDAgJiYgY2hpbGQpIHtcbiAgICAgICAgICAgIHRyYXZlcnNlKGNoaWxkLCBrZXksIGRlcHRoICsgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHBzZXVkb0NsYXNzZXMuaW5kZXhPZihrZXkpICE9PSAtMSAmJiBPYmplY3Qua2V5cyhjaGlsZCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgYFwiLmNvbmNhdChwYXJlbnRLZXksIFwiYCBjb21wb25lbnQgaW5jcmVhc2VzIFwiKSArIFwidGhlIENTUyBzcGVjaWZpY2l0eSBvZiB0aGUgYFwiLmNvbmNhdChrZXksIFwiYCBpbnRlcm5hbCBzdGF0ZS5cIiksICdZb3UgY2FuIG5vdCBvdmVycmlkZSBpdCBsaWtlIHRoaXM6ICcsIEpTT04uc3RyaW5naWZ5KG5vZGUsIG51bGwsIDIpLCAnJywgJ0luc3RlYWQsIHlvdSBuZWVkIHRvIHVzZSB0aGUgJHJ1bGVOYW1lIHN5bnRheDonLCBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgIHJvb3Q6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCImJFwiLmNvbmNhdChrZXkpLCBjaGlsZClcbiAgICAgICAgICAgIH0sIG51bGwsIDIpLCAnJywgJ2h0dHBzOi8vbWF0ZXJpYWwtdWkuY29tL3IvcHNldWRvLWNsYXNzZXMtZ3VpZGUnXS5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgfSAvLyBSZW1vdmUgdGhlIHN0eWxlIHRvIHByZXZlbnQgZ2xvYmFsIGNvbmZsaWN0cy5cblxuXG4gICAgICAgICAgbm9kZVtrZXldID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdHJhdmVyc2UobXVpVGhlbWUub3ZlcnJpZGVzKTtcbiAgfVxuXG4gIHJldHVybiBtdWlUaGVtZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlTXVpVGhlbWU7IiwiaW1wb3J0IGNyZWF0ZU11aVRoZW1lIGZyb20gJy4vY3JlYXRlTXVpVGhlbWUnO1xudmFyIGRlZmF1bHRUaGVtZSA9IGNyZWF0ZU11aVRoZW1lKCk7XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0VGhlbWU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgeyB3aXRoU3R5bGVzIGFzIHdpdGhTdHlsZXNXaXRob3V0RGVmYXVsdCB9IGZyb20gJ0BtYXRlcmlhbC11aS9zdHlsZXMnO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5cbmZ1bmN0aW9uIHdpdGhTdHlsZXMoc3R5bGVzT3JDcmVhdG9yLCBvcHRpb25zKSB7XG4gIHJldHVybiB3aXRoU3R5bGVzV2l0aG91dERlZmF1bHQoc3R5bGVzT3JDcmVhdG9yLCBfZXh0ZW5kcyh7XG4gICAgZGVmYXVsdFRoZW1lOiBkZWZhdWx0VGhlbWVcbiAgfSwgb3B0aW9ucykpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCB7IGV4YWN0UHJvcCB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5leHBvcnQgdmFyIGh0bWwgPSB7XG4gIFdlYmtpdEZvbnRTbW9vdGhpbmc6ICdhbnRpYWxpYXNlZCcsXG4gIC8vIEFudGlhbGlhc2luZy5cbiAgTW96T3N4Rm9udFNtb290aGluZzogJ2dyYXlzY2FsZScsXG4gIC8vIEFudGlhbGlhc2luZy5cbiAgLy8gQ2hhbmdlIGZyb20gYGJveC1zaXppbmc6IGNvbnRlbnQtYm94YCBzbyB0aGF0IGB3aWR0aGBcbiAgLy8gaXMgbm90IGFmZmVjdGVkIGJ5IGBwYWRkaW5nYCBvciBgYm9yZGVyYC5cbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCdcbn07XG5leHBvcnQgdmFyIGJvZHkgPSBmdW5jdGlvbiBib2R5KHRoZW1lKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5XG4gIH0sIHRoZW1lLnR5cG9ncmFwaHkuYm9keTIsIHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5kZWZhdWx0LFxuICAgICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgICAvLyBTYXZlIHByaW50ZXIgaW5rLlxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmNvbW1vbi53aGl0ZVxuICAgIH1cbiAgfSk7XG59O1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAnQGdsb2JhbCc6IHtcbiAgICAgIGh0bWw6IGh0bWwsXG4gICAgICAnKiwgKjo6YmVmb3JlLCAqOjphZnRlcic6IHtcbiAgICAgICAgYm94U2l6aW5nOiAnaW5oZXJpdCdcbiAgICAgIH0sXG4gICAgICAnc3Ryb25nLCBiJzoge1xuICAgICAgICBmb250V2VpZ2h0OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHRCb2xkXG4gICAgICB9LFxuICAgICAgYm9keTogX2V4dGVuZHMoe1xuICAgICAgICBtYXJnaW46IDBcbiAgICAgIH0sIGJvZHkodGhlbWUpLCB7XG4gICAgICAgIC8vIEFkZCBzdXBwb3J0IGZvciBkb2N1bWVudC5ib2R5LnJlcXVlc3RGdWxsU2NyZWVuKCkuXG4gICAgICAgIC8vIE90aGVyIGVsZW1lbnRzLCBpZiBiYWNrZ3JvdW5kIHRyYW5zcGFyZW50LCBhcmUgbm90IHN1cHBvcnRlZC5cbiAgICAgICAgJyY6OmJhY2tkcm9wJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHRcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBLaWNrc3RhcnQgYW4gZWxlZ2FudCwgY29uc2lzdGVudCwgYW5kIHNpbXBsZSBiYXNlbGluZSB0byBidWlsZCB1cG9uLlxuICovXG5cbmZ1bmN0aW9uIENzc0Jhc2VsaW5lKHByb3BzKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG4gIHZhciBfcHJvcHMkY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNoaWxkcmVuID0gX3Byb3BzJGNoaWxkcmVuID09PSB2b2lkIDAgPyBudWxsIDogX3Byb3BzJGNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXM7XG4gIC8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGNoaWxkcmVuKTtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ3NzQmFzZWxpbmUucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogWW91IGNhbiB3cmFwIGEgbm9kZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgQ3NzQmFzZWxpbmVbJ3Byb3BUeXBlcycgKyAnJ10gPSBleGFjdFByb3AoQ3NzQmFzZWxpbmUucHJvcFR5cGVzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUNzc0Jhc2VsaW5lJ1xufSkoQ3NzQmFzZWxpbmUpOyIsImltcG9ydCB7IGNyZWF0ZU11aVRoZW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJztcclxuaW1wb3J0IGdyZXkgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvY29sb3JzL2dyZXknO1xyXG5leHBvcnQgdmFyIHRoZW1lID0gY3JlYXRlTXVpVGhlbWUoe1xyXG4gICAgcGFsZXR0ZToge1xyXG4gICAgICAgIHNlY29uZGFyeToge1xyXG4gICAgICAgICAgICBsaWdodDogZ3JleVs0MDBdLFxyXG4gICAgICAgICAgICBtYWluOiBncmV5WzUwMF0sXHJcbiAgICAgICAgICAgIGRhcms6IGdyZXlbNzAwXSxcclxuICAgICAgICAgICAgY29udHJhc3RUZXh0OiAnI2ZmZicsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICB0cmFuc2l0aW9uczoge1xyXG4gICAgICAgIGR1cmF0aW9uOiB7XHJcbiAgICAgICAgICAgIGNvbXBsZXg6IDEwMDAsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbn0pO1xyXG4iLCJpbXBvcnQgeyBmb3JtYXRNdWlFcnJvck1lc3NhZ2UgYXMgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvdXRpbHNcIjtcbi8vIEl0IHNob3VsZCB0byBiZSBub3RlZCB0aGF0IHRoaXMgZnVuY3Rpb24gaXNuJ3QgZXF1aXZhbGVudCB0byBgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemVgLlxuLy9cbi8vIEEgc3RyaWN0IGNhcGl0YWxpemF0aW9uIHNob3VsZCB1cHBlcmNhc2UgdGhlIGZpcnN0IGxldHRlciBvZiBlYWNoIHdvcmQgYSB0aGUgc2VudGVuY2UuXG4vLyBXZSBvbmx5IGhhbmRsZSB0aGUgZmlyc3Qgd29yZC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBcIk1hdGVyaWFsLVVJOiBjYXBpdGFsaXplKHN0cmluZykgZXhwZWN0cyBhIHN0cmluZyBhcmd1bWVudC5cIiA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoNykpO1xuICB9XG5cbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogX2RlZmluZVByb3BlcnR5KHtcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBtYXJnaW5MZWZ0OiAnYXV0bycsXG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIG1hcmdpblJpZ2h0OiAnYXV0bycsXG4gICAgICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZygyKSxcbiAgICAgIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZygyKSxcbiAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICB9LCB0aGVtZS5icmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMyksXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMylcbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVHdXR0ZXJzPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZUd1dHRlcnM6IHtcbiAgICAgIHBhZGRpbmdMZWZ0OiAwLFxuICAgICAgcGFkZGluZ1JpZ2h0OiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZpeGVkPXt0cnVlfWAuICovXG4gICAgZml4ZWQ6IE9iamVjdC5rZXlzKHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGJyZWFrcG9pbnQpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlc1ticmVha3BvaW50XTtcblxuICAgICAgaWYgKHZhbHVlICE9PSAwKSB7XG4gICAgICAgIGFjY1t0aGVtZS5icmVha3BvaW50cy51cChicmVha3BvaW50KV0gPSB7XG4gICAgICAgICAgbWF4V2lkdGg6IHZhbHVlXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbWF4V2lkdGg9XCJ4c1wiYC4gKi9cbiAgICBtYXhXaWR0aFhzOiBfZGVmaW5lUHJvcGVydHkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCd4cycpLCB7XG4gICAgICBtYXhXaWR0aDogTWF0aC5tYXgodGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLnhzLCA0NDQpXG4gICAgfSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtYXhXaWR0aD1cInNtXCJgLiAqL1xuICAgIG1heFdpZHRoU206IF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyksIHtcbiAgICAgIG1heFdpZHRoOiB0aGVtZS5icmVha3BvaW50cy52YWx1ZXMuc21cbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG1heFdpZHRoPVwibWRcImAuICovXG4gICAgbWF4V2lkdGhNZDogX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy51cCgnbWQnKSwge1xuICAgICAgbWF4V2lkdGg6IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy5tZFxuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbWF4V2lkdGg9XCJsZ1wiYC4gKi9cbiAgICBtYXhXaWR0aExnOiBfZGVmaW5lUHJvcGVydHkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCdsZycpLCB7XG4gICAgICBtYXhXaWR0aDogdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLmxnXG4gICAgfSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtYXhXaWR0aD1cInhsXCJgLiAqL1xuICAgIG1heFdpZHRoWGw6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ3hsJyksIHtcbiAgICAgIG1heFdpZHRoOiB0aGVtZS5icmVha3BvaW50cy52YWx1ZXMueGxcbiAgICB9KVxuICB9O1xufTtcbnZhciBDb250YWluZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDb250YWluZXIocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRpc2FibGVHdXR0ZXJzID0gcHJvcHMuZGlzYWJsZUd1dHRlcnMsXG4gICAgICBkaXNhYmxlR3V0dGVycyA9IF9wcm9wcyRkaXNhYmxlR3V0dGVycyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUd1dHRlcnMsXG4gICAgICBfcHJvcHMkZml4ZWQgPSBwcm9wcy5maXhlZCxcbiAgICAgIGZpeGVkID0gX3Byb3BzJGZpeGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmaXhlZCxcbiAgICAgIF9wcm9wcyRtYXhXaWR0aCA9IHByb3BzLm1heFdpZHRoLFxuICAgICAgbWF4V2lkdGggPSBfcHJvcHMkbWF4V2lkdGggPT09IHZvaWQgMCA/ICdsZycgOiBfcHJvcHMkbWF4V2lkdGgsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVHdXR0ZXJzXCIsIFwiZml4ZWRcIiwgXCJtYXhXaWR0aFwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgZml4ZWQgJiYgY2xhc3Nlcy5maXhlZCwgZGlzYWJsZUd1dHRlcnMgJiYgY2xhc3Nlcy5kaXNhYmxlR3V0dGVycywgbWF4V2lkdGggIT09IGZhbHNlICYmIGNsYXNzZXNbXCJtYXhXaWR0aFwiLmNvbmNhdChjYXBpdGFsaXplKFN0cmluZyhtYXhXaWR0aCkpKV0pLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENvbnRhaW5lci5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsZWZ0IGFuZCByaWdodCBwYWRkaW5nIGlzIHJlbW92ZWQuXG4gICAqL1xuICBkaXNhYmxlR3V0dGVyczogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFNldCB0aGUgbWF4LXdpZHRoIHRvIG1hdGNoIHRoZSBtaW4td2lkdGggb2YgdGhlIGN1cnJlbnQgYnJlYWtwb2ludC5cbiAgICogVGhpcyBpcyB1c2VmdWwgaWYgeW91J2QgcHJlZmVyIHRvIGRlc2lnbiBmb3IgYSBmaXhlZCBzZXQgb2Ygc2l6ZXNcbiAgICogaW5zdGVhZCBvZiB0cnlpbmcgdG8gYWNjb21tb2RhdGUgYSBmdWxseSBmbHVpZCB2aWV3cG9ydC5cbiAgICogSXQncyBmbHVpZCBieSBkZWZhdWx0LlxuICAgKi9cbiAgZml4ZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgdGhlIG1heC13aWR0aCBvZiB0aGUgY29udGFpbmVyLlxuICAgKiBUaGUgY29udGFpbmVyIHdpZHRoIGdyb3dzIHdpdGggdGhlIHNpemUgb2YgdGhlIHNjcmVlbi5cbiAgICogU2V0IHRvIGBmYWxzZWAgdG8gZGlzYWJsZSBgbWF4V2lkdGhgLlxuICAgKi9cbiAgbWF4V2lkdGg6IFByb3BUeXBlcy5vbmVPZihbJ2xnJywgJ21kJywgJ3NtJywgJ3hsJywgJ3hzJywgZmFsc2VdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlDb250YWluZXInXG59KShDb250YWluZXIpOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbi8vIEEgZ3JpZCBjb21wb25lbnQgdXNpbmcgdGhlIGZvbGxvd2luZyBsaWJzIGFzIGluc3BpcmF0aW9uLlxuLy9cbi8vIEZvciB0aGUgaW1wbGVtZW50YXRpb246XG4vLyAtIGh0dHBzOi8vZ2V0Ym9vdHN0cmFwLmNvbS9kb2NzLzQuMy9sYXlvdXQvZ3JpZC9cbi8vIC0gaHR0cHM6Ly9naXRodWIuY29tL2tyaXN0b2Zlcmpvc2VwaC9mbGV4Ym94Z3JpZC9ibG9iL21hc3Rlci9zcmMvY3NzL2ZsZXhib3hncmlkLmNzc1xuLy8gLSBodHRwczovL2dpdGh1Yi5jb20vcm95bGVlMDcwNC9yZWFjdC1mbGV4Ym94LWdyaWRcbi8vIC0gaHR0cHM6Ly9tYXRlcmlhbC5hbmd1bGFyanMub3JnL2xhdGVzdC9sYXlvdXQvaW50cm9kdWN0aW9uXG4vL1xuLy8gRm9sbG93IHRoaXMgZmxleGJveCBHdWlkZSB0byBiZXR0ZXIgdW5kZXJzdGFuZCB0aGUgdW5kZXJseWluZyBtb2RlbDpcbi8vIC0gaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9zbmlwcGV0cy9jc3MvYS1ndWlkZS10by1mbGV4Ym94L1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHJlcXVpcmVQcm9wRmFjdG9yeSBmcm9tICcuLi91dGlscy9yZXF1aXJlUHJvcEZhY3RvcnknO1xudmFyIFNQQUNJTkdTID0gWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwXTtcbnZhciBHUklEX1NJWkVTID0gWydhdXRvJywgdHJ1ZSwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMl07XG5cbmZ1bmN0aW9uIGdlbmVyYXRlR3JpZChnbG9iYWxTdHlsZXMsIHRoZW1lLCBicmVha3BvaW50KSB7XG4gIHZhciBzdHlsZXMgPSB7fTtcbiAgR1JJRF9TSVpFUy5mb3JFYWNoKGZ1bmN0aW9uIChzaXplKSB7XG4gICAgdmFyIGtleSA9IFwiZ3JpZC1cIi5jb25jYXQoYnJlYWtwb2ludCwgXCItXCIpLmNvbmNhdChzaXplKTtcblxuICAgIGlmIChzaXplID09PSB0cnVlKSB7XG4gICAgICAvLyBGb3IgdGhlIGF1dG8gbGF5b3V0aW5nXG4gICAgICBzdHlsZXNba2V5XSA9IHtcbiAgICAgICAgZmxleEJhc2lzOiAwLFxuICAgICAgICBmbGV4R3JvdzogMSxcbiAgICAgICAgbWF4V2lkdGg6ICcxMDAlJ1xuICAgICAgfTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc2l6ZSA9PT0gJ2F1dG8nKSB7XG4gICAgICBzdHlsZXNba2V5XSA9IHtcbiAgICAgICAgZmxleEJhc2lzOiAnYXV0bycsXG4gICAgICAgIGZsZXhHcm93OiAwLFxuICAgICAgICBtYXhXaWR0aDogJ25vbmUnXG4gICAgICB9O1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gS2VlcCA3IHNpZ25pZmljYW50IG51bWJlcnMuXG5cblxuICAgIHZhciB3aWR0aCA9IFwiXCIuY29uY2F0KE1hdGgucm91bmQoc2l6ZSAvIDEyICogMTBlNykgLyAxMGU1LCBcIiVcIik7IC8vIENsb3NlIHRvIHRoZSBib290c3RyYXAgaW1wbGVtZW50YXRpb246XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvOGZjY2FhMjQzOWU5N2VjNzJhNGI3ZGM0MmNjYzFmNjQ5NzkwYWRiMC9zY3NzL21peGlucy9fZ3JpZC5zY3NzI0w0MVxuXG4gICAgc3R5bGVzW2tleV0gPSB7XG4gICAgICBmbGV4QmFzaXM6IHdpZHRoLFxuICAgICAgZmxleEdyb3c6IDAsXG4gICAgICBtYXhXaWR0aDogd2lkdGhcbiAgICB9O1xuICB9KTsgLy8gTm8gbmVlZCBmb3IgYSBtZWRpYSBxdWVyeSBmb3IgdGhlIGZpcnN0IHNpemUuXG5cbiAgaWYgKGJyZWFrcG9pbnQgPT09ICd4cycpIHtcbiAgICBfZXh0ZW5kcyhnbG9iYWxTdHlsZXMsIHN0eWxlcyk7XG4gIH0gZWxzZSB7XG4gICAgZ2xvYmFsU3R5bGVzW3RoZW1lLmJyZWFrcG9pbnRzLnVwKGJyZWFrcG9pbnQpXSA9IHN0eWxlcztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRPZmZzZXQodmFsKSB7XG4gIHZhciBkaXYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDE7XG4gIHZhciBwYXJzZSA9IHBhcnNlRmxvYXQodmFsKTtcbiAgcmV0dXJuIFwiXCIuY29uY2F0KHBhcnNlIC8gZGl2KS5jb25jYXQoU3RyaW5nKHZhbCkucmVwbGFjZShTdHJpbmcocGFyc2UpLCAnJykgfHwgJ3B4Jyk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlR3V0dGVyKHRoZW1lLCBicmVha3BvaW50KSB7XG4gIHZhciBzdHlsZXMgPSB7fTtcbiAgU1BBQ0lOR1MuZm9yRWFjaChmdW5jdGlvbiAoc3BhY2luZykge1xuICAgIHZhciB0aGVtZVNwYWNpbmcgPSB0aGVtZS5zcGFjaW5nKHNwYWNpbmcpO1xuXG4gICAgaWYgKHRoZW1lU3BhY2luZyA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN0eWxlc1tcInNwYWNpbmctXCIuY29uY2F0KGJyZWFrcG9pbnQsIFwiLVwiKS5jb25jYXQoc3BhY2luZyldID0ge1xuICAgICAgbWFyZ2luOiBcIi1cIi5jb25jYXQoZ2V0T2Zmc2V0KHRoZW1lU3BhY2luZywgMikpLFxuICAgICAgd2lkdGg6IFwiY2FsYygxMDAlICsgXCIuY29uY2F0KGdldE9mZnNldCh0aGVtZVNwYWNpbmcpLCBcIilcIiksXG4gICAgICAnJiA+ICRpdGVtJzoge1xuICAgICAgICBwYWRkaW5nOiBnZXRPZmZzZXQodGhlbWVTcGFjaW5nLCAyKVxuICAgICAgfVxuICAgIH07XG4gIH0pO1xuICByZXR1cm4gc3R5bGVzO1xufSAvLyBEZWZhdWx0IENTUyB2YWx1ZXNcbi8vIGZsZXg6ICcwIDEgYXV0bycsXG4vLyBmbGV4RGlyZWN0aW9uOiAncm93Jyxcbi8vIGFsaWduSXRlbXM6ICdmbGV4LXN0YXJ0Jyxcbi8vIGZsZXhXcmFwOiAnbm93cmFwJyxcbi8vIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG5cblxuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29udGFpbmVyPXt0cnVlfWAuICovXG4gICAgY29udGFpbmVyOiB7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGZsZXhXcmFwOiAnd3JhcCcsXG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGl0ZW09e3RydWV9YC4gKi9cbiAgICBpdGVtOiB7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIG1hcmdpbjogJzAnIC8vIEZvciBpbnN0YW5jZSwgaXQncyB1c2VmdWwgd2hlbiB1c2VkIHdpdGggYSBgZmlndXJlYCBlbGVtZW50LlxuXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHplcm9NaW5XaWR0aD17dHJ1ZX1gLiAqL1xuICAgIHplcm9NaW5XaWR0aDoge1xuICAgICAgbWluV2lkdGg6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlyZWN0aW9uPVwiY29sdW1uXCJgLiAqL1xuICAgICdkaXJlY3Rpb24teHMtY29sdW1uJzoge1xuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlyZWN0aW9uPVwiY29sdW1uLXJldmVyc2VcImAuICovXG4gICAgJ2RpcmVjdGlvbi14cy1jb2x1bW4tcmV2ZXJzZSc6IHtcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4tcmV2ZXJzZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlyZWN0aW9uPVwicm93LXJldmVyc2VcImAuICovXG4gICAgJ2RpcmVjdGlvbi14cy1yb3ctcmV2ZXJzZSc6IHtcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdyb3ctcmV2ZXJzZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgd3JhcD1cIm5vd3JhcFwiYC4gKi9cbiAgICAnd3JhcC14cy1ub3dyYXAnOiB7XG4gICAgICBmbGV4V3JhcDogJ25vd3JhcCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgd3JhcD1cInJldmVyc2VcImAuICovXG4gICAgJ3dyYXAteHMtd3JhcC1yZXZlcnNlJzoge1xuICAgICAgZmxleFdyYXA6ICd3cmFwLXJldmVyc2UnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduSXRlbXM9XCJjZW50ZXJcImAuICovXG4gICAgJ2FsaWduLWl0ZW1zLXhzLWNlbnRlcic6IHtcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduSXRlbXM9XCJmbGV4LXN0YXJ0XCJgLiAqL1xuICAgICdhbGlnbi1pdGVtcy14cy1mbGV4LXN0YXJ0Jzoge1xuICAgICAgYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduSXRlbXM9XCJmbGV4LWVuZFwiYC4gKi9cbiAgICAnYWxpZ24taXRlbXMteHMtZmxleC1lbmQnOiB7XG4gICAgICBhbGlnbkl0ZW1zOiAnZmxleC1lbmQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduSXRlbXM9XCJiYXNlbGluZVwiYC4gKi9cbiAgICAnYWxpZ24taXRlbXMteHMtYmFzZWxpbmUnOiB7XG4gICAgICBhbGlnbkl0ZW1zOiAnYmFzZWxpbmUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduQ29udGVudD1cImNlbnRlclwiYC4gKi9cbiAgICAnYWxpZ24tY29udGVudC14cy1jZW50ZXInOiB7XG4gICAgICBhbGlnbkNvbnRlbnQ6ICdjZW50ZXInXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduQ29udGVudD1cImZsZXgtc3RhcnRcImAuICovXG4gICAgJ2FsaWduLWNvbnRlbnQteHMtZmxleC1zdGFydCc6IHtcbiAgICAgIGFsaWduQ29udGVudDogJ2ZsZXgtc3RhcnQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduQ29udGVudD1cImZsZXgtZW5kXCJgLiAqL1xuICAgICdhbGlnbi1jb250ZW50LXhzLWZsZXgtZW5kJzoge1xuICAgICAgYWxpZ25Db250ZW50OiAnZmxleC1lbmQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduQ29udGVudD1cInNwYWNlLWJldHdlZW5cImAuICovXG4gICAgJ2FsaWduLWNvbnRlbnQteHMtc3BhY2UtYmV0d2Vlbic6IHtcbiAgICAgIGFsaWduQ29udGVudDogJ3NwYWNlLWJldHdlZW4nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduQ29udGVudD1cInNwYWNlLWFyb3VuZFwiYC4gKi9cbiAgICAnYWxpZ24tY29udGVudC14cy1zcGFjZS1hcm91bmQnOiB7XG4gICAgICBhbGlnbkNvbnRlbnQ6ICdzcGFjZS1hcm91bmQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGp1c3RpZnk9XCJjZW50ZXJcImAuICovXG4gICAgJ2p1c3RpZnkteHMtY2VudGVyJzoge1xuICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGp1c3RpZnk9XCJmbGV4LWVuZFwiYC4gKi9cbiAgICAnanVzdGlmeS14cy1mbGV4LWVuZCc6IHtcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1lbmQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGp1c3RpZnk9XCJzcGFjZS1iZXR3ZWVuXCJgLiAqL1xuICAgICdqdXN0aWZ5LXhzLXNwYWNlLWJldHdlZW4nOiB7XG4gICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGp1c3RpZnk9XCJzcGFjZS1hcm91bmRcImAuICovXG4gICAgJ2p1c3RpZnkteHMtc3BhY2UtYXJvdW5kJzoge1xuICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1hcm91bmQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGp1c3RpZnk9XCJzcGFjZS1ldmVubHlcImAuICovXG4gICAgJ2p1c3RpZnkteHMtc3BhY2UtZXZlbmx5Jzoge1xuICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1ldmVubHknXG4gICAgfVxuICB9LCBnZW5lcmF0ZUd1dHRlcih0aGVtZSwgJ3hzJyksIHRoZW1lLmJyZWFrcG9pbnRzLmtleXMucmVkdWNlKGZ1bmN0aW9uIChhY2N1bXVsYXRvciwga2V5KSB7XG4gICAgLy8gVXNlIHNpZGUgZWZmZWN0IG92ZXIgaW1tdXRhYmlsaXR5IGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuXG4gICAgZ2VuZXJhdGVHcmlkKGFjY3VtdWxhdG9yLCB0aGVtZSwga2V5KTtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH0sIHt9KSk7XG59O1xudmFyIEdyaWQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBHcmlkKHByb3BzLCByZWYpIHtcbiAgdmFyIF9wcm9wcyRhbGlnbkNvbnRlbnQgPSBwcm9wcy5hbGlnbkNvbnRlbnQsXG4gICAgICBhbGlnbkNvbnRlbnQgPSBfcHJvcHMkYWxpZ25Db250ZW50ID09PSB2b2lkIDAgPyAnc3RyZXRjaCcgOiBfcHJvcHMkYWxpZ25Db250ZW50LFxuICAgICAgX3Byb3BzJGFsaWduSXRlbXMgPSBwcm9wcy5hbGlnbkl0ZW1zLFxuICAgICAgYWxpZ25JdGVtcyA9IF9wcm9wcyRhbGlnbkl0ZW1zID09PSB2b2lkIDAgPyAnc3RyZXRjaCcgOiBfcHJvcHMkYWxpZ25JdGVtcyxcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkY29udGFpbmVyID0gcHJvcHMuY29udGFpbmVyLFxuICAgICAgY29udGFpbmVyID0gX3Byb3BzJGNvbnRhaW5lciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkY29udGFpbmVyLFxuICAgICAgX3Byb3BzJGRpcmVjdGlvbiA9IHByb3BzLmRpcmVjdGlvbixcbiAgICAgIGRpcmVjdGlvbiA9IF9wcm9wcyRkaXJlY3Rpb24gPT09IHZvaWQgMCA/ICdyb3cnIDogX3Byb3BzJGRpcmVjdGlvbixcbiAgICAgIF9wcm9wcyRpdGVtID0gcHJvcHMuaXRlbSxcbiAgICAgIGl0ZW0gPSBfcHJvcHMkaXRlbSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkaXRlbSxcbiAgICAgIF9wcm9wcyRqdXN0aWZ5ID0gcHJvcHMuanVzdGlmeSxcbiAgICAgIGp1c3RpZnkgPSBfcHJvcHMkanVzdGlmeSA9PT0gdm9pZCAwID8gJ2ZsZXgtc3RhcnQnIDogX3Byb3BzJGp1c3RpZnksXG4gICAgICBfcHJvcHMkbGcgPSBwcm9wcy5sZyxcbiAgICAgIGxnID0gX3Byb3BzJGxnID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRsZyxcbiAgICAgIF9wcm9wcyRtZCA9IHByb3BzLm1kLFxuICAgICAgbWQgPSBfcHJvcHMkbWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJG1kLFxuICAgICAgX3Byb3BzJHNtID0gcHJvcHMuc20sXG4gICAgICBzbSA9IF9wcm9wcyRzbSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkc20sXG4gICAgICBfcHJvcHMkc3BhY2luZyA9IHByb3BzLnNwYWNpbmcsXG4gICAgICBzcGFjaW5nID0gX3Byb3BzJHNwYWNpbmcgPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkc3BhY2luZyxcbiAgICAgIF9wcm9wcyR3cmFwID0gcHJvcHMud3JhcCxcbiAgICAgIHdyYXAgPSBfcHJvcHMkd3JhcCA9PT0gdm9pZCAwID8gJ3dyYXAnIDogX3Byb3BzJHdyYXAsXG4gICAgICBfcHJvcHMkeGwgPSBwcm9wcy54bCxcbiAgICAgIHhsID0gX3Byb3BzJHhsID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyR4bCxcbiAgICAgIF9wcm9wcyR4cyA9IHByb3BzLnhzLFxuICAgICAgeHMgPSBfcHJvcHMkeHMgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHhzLFxuICAgICAgX3Byb3BzJHplcm9NaW5XaWR0aCA9IHByb3BzLnplcm9NaW5XaWR0aCxcbiAgICAgIHplcm9NaW5XaWR0aCA9IF9wcm9wcyR6ZXJvTWluV2lkdGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHplcm9NaW5XaWR0aCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhbGlnbkNvbnRlbnRcIiwgXCJhbGlnbkl0ZW1zXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImNvbnRhaW5lclwiLCBcImRpcmVjdGlvblwiLCBcIml0ZW1cIiwgXCJqdXN0aWZ5XCIsIFwibGdcIiwgXCJtZFwiLCBcInNtXCIsIFwic3BhY2luZ1wiLCBcIndyYXBcIiwgXCJ4bFwiLCBcInhzXCIsIFwiemVyb01pbldpZHRoXCJdKTtcblxuICB2YXIgY2xhc3NOYW1lID0gY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZVByb3AsIGNvbnRhaW5lciAmJiBbY2xhc3Nlcy5jb250YWluZXIsIHNwYWNpbmcgIT09IDAgJiYgY2xhc3Nlc1tcInNwYWNpbmcteHMtXCIuY29uY2F0KFN0cmluZyhzcGFjaW5nKSldXSwgaXRlbSAmJiBjbGFzc2VzLml0ZW0sIHplcm9NaW5XaWR0aCAmJiBjbGFzc2VzLnplcm9NaW5XaWR0aCwgZGlyZWN0aW9uICE9PSAncm93JyAmJiBjbGFzc2VzW1wiZGlyZWN0aW9uLXhzLVwiLmNvbmNhdChTdHJpbmcoZGlyZWN0aW9uKSldLCB3cmFwICE9PSAnd3JhcCcgJiYgY2xhc3Nlc1tcIndyYXAteHMtXCIuY29uY2F0KFN0cmluZyh3cmFwKSldLCBhbGlnbkl0ZW1zICE9PSAnc3RyZXRjaCcgJiYgY2xhc3Nlc1tcImFsaWduLWl0ZW1zLXhzLVwiLmNvbmNhdChTdHJpbmcoYWxpZ25JdGVtcykpXSwgYWxpZ25Db250ZW50ICE9PSAnc3RyZXRjaCcgJiYgY2xhc3Nlc1tcImFsaWduLWNvbnRlbnQteHMtXCIuY29uY2F0KFN0cmluZyhhbGlnbkNvbnRlbnQpKV0sIGp1c3RpZnkgIT09ICdmbGV4LXN0YXJ0JyAmJiBjbGFzc2VzW1wianVzdGlmeS14cy1cIi5jb25jYXQoU3RyaW5nKGp1c3RpZnkpKV0sIHhzICE9PSBmYWxzZSAmJiBjbGFzc2VzW1wiZ3JpZC14cy1cIi5jb25jYXQoU3RyaW5nKHhzKSldLCBzbSAhPT0gZmFsc2UgJiYgY2xhc3Nlc1tcImdyaWQtc20tXCIuY29uY2F0KFN0cmluZyhzbSkpXSwgbWQgIT09IGZhbHNlICYmIGNsYXNzZXNbXCJncmlkLW1kLVwiLmNvbmNhdChTdHJpbmcobWQpKV0sIGxnICE9PSBmYWxzZSAmJiBjbGFzc2VzW1wiZ3JpZC1sZy1cIi5jb25jYXQoU3RyaW5nKGxnKSldLCB4bCAhPT0gZmFsc2UgJiYgY2xhc3Nlc1tcImdyaWQteGwtXCIuY29uY2F0KFN0cmluZyh4bCkpXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBHcmlkLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBhbGlnbi1jb250ZW50YCBzdHlsZSBwcm9wZXJ0eS5cbiAgICogSXQncyBhcHBsaWVkIGZvciBhbGwgc2NyZWVuIHNpemVzLlxuICAgKi9cbiAgYWxpZ25Db250ZW50OiBQcm9wVHlwZXMub25lT2YoWydzdHJldGNoJywgJ2NlbnRlcicsICdmbGV4LXN0YXJ0JywgJ2ZsZXgtZW5kJywgJ3NwYWNlLWJldHdlZW4nLCAnc3BhY2UtYXJvdW5kJ10pLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBgYWxpZ24taXRlbXNgIHN0eWxlIHByb3BlcnR5LlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIGFsbCBzY3JlZW4gc2l6ZXMuXG4gICAqL1xuICBhbGlnbkl0ZW1zOiBQcm9wVHlwZXMub25lT2YoWydmbGV4LXN0YXJ0JywgJ2NlbnRlcicsICdmbGV4LWVuZCcsICdzdHJldGNoJywgJ2Jhc2VsaW5lJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgaGF2ZSB0aGUgZmxleCAqY29udGFpbmVyKiBiZWhhdmlvci5cbiAgICogWW91IHNob3VsZCBiZSB3cmFwcGluZyAqaXRlbXMqIHdpdGggYSAqY29udGFpbmVyKi5cbiAgICovXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBmbGV4LWRpcmVjdGlvbmAgc3R5bGUgcHJvcGVydHkuXG4gICAqIEl0IGlzIGFwcGxpZWQgZm9yIGFsbCBzY3JlZW4gc2l6ZXMuXG4gICAqL1xuICBkaXJlY3Rpb246IFByb3BUeXBlcy5vbmVPZihbJ3JvdycsICdyb3ctcmV2ZXJzZScsICdjb2x1bW4nLCAnY29sdW1uLXJldmVyc2UnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIGhhdmUgdGhlIGZsZXggKml0ZW0qIGJlaGF2aW9yLlxuICAgKiBZb3Ugc2hvdWxkIGJlIHdyYXBwaW5nICppdGVtcyogd2l0aCBhICpjb250YWluZXIqLlxuICAgKi9cbiAgaXRlbTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBqdXN0aWZ5LWNvbnRlbnRgIHN0eWxlIHByb3BlcnR5LlxuICAgKiBJdCBpcyBhcHBsaWVkIGZvciBhbGwgc2NyZWVuIHNpemVzLlxuICAgKi9cbiAganVzdGlmeTogUHJvcFR5cGVzLm9uZU9mKFsnZmxleC1zdGFydCcsICdjZW50ZXInLCAnZmxleC1lbmQnLCAnc3BhY2UtYmV0d2VlbicsICdzcGFjZS1hcm91bmQnLCAnc3BhY2UtZXZlbmx5J10pLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBudW1iZXIgb2YgZ3JpZHMgdGhlIGNvbXBvbmVudCBpcyBnb2luZyB0byB1c2UuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgdGhlIGBsZ2AgYnJlYWtwb2ludCBhbmQgd2lkZXIgc2NyZWVucyBpZiBub3Qgb3ZlcnJpZGRlbi5cbiAgICovXG4gIGxnOiBQcm9wVHlwZXMub25lT2YoW2ZhbHNlLCAnYXV0bycsIHRydWUsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTJdKSxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgbnVtYmVyIG9mIGdyaWRzIHRoZSBjb21wb25lbnQgaXMgZ29pbmcgdG8gdXNlLlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIHRoZSBgbWRgIGJyZWFrcG9pbnQgYW5kIHdpZGVyIHNjcmVlbnMgaWYgbm90IG92ZXJyaWRkZW4uXG4gICAqL1xuICBtZDogUHJvcFR5cGVzLm9uZU9mKFtmYWxzZSwgJ2F1dG8nLCB0cnVlLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXSksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIG51bWJlciBvZiBncmlkcyB0aGUgY29tcG9uZW50IGlzIGdvaW5nIHRvIHVzZS5cbiAgICogSXQncyBhcHBsaWVkIGZvciB0aGUgYHNtYCBicmVha3BvaW50IGFuZCB3aWRlciBzY3JlZW5zIGlmIG5vdCBvdmVycmlkZGVuLlxuICAgKi9cbiAgc206IFByb3BUeXBlcy5vbmVPZihbZmFsc2UsICdhdXRvJywgdHJ1ZSwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMl0pLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBzcGFjZSBiZXR3ZWVuIHRoZSB0eXBlIGBpdGVtYCBjb21wb25lbnQuXG4gICAqIEl0IGNhbiBvbmx5IGJlIHVzZWQgb24gYSB0eXBlIGBjb250YWluZXJgIGNvbXBvbmVudC5cbiAgICovXG4gIHNwYWNpbmc6IFByb3BUeXBlcy5vbmVPZihTUEFDSU5HUyksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBmbGV4LXdyYXBgIHN0eWxlIHByb3BlcnR5LlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIGFsbCBzY3JlZW4gc2l6ZXMuXG4gICAqL1xuICB3cmFwOiBQcm9wVHlwZXMub25lT2YoWydub3dyYXAnLCAnd3JhcCcsICd3cmFwLXJldmVyc2UnXSksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIG51bWJlciBvZiBncmlkcyB0aGUgY29tcG9uZW50IGlzIGdvaW5nIHRvIHVzZS5cbiAgICogSXQncyBhcHBsaWVkIGZvciB0aGUgYHhsYCBicmVha3BvaW50IGFuZCB3aWRlciBzY3JlZW5zLlxuICAgKi9cbiAgeGw6IFByb3BUeXBlcy5vbmVPZihbZmFsc2UsICdhdXRvJywgdHJ1ZSwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMl0pLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBudW1iZXIgb2YgZ3JpZHMgdGhlIGNvbXBvbmVudCBpcyBnb2luZyB0byB1c2UuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgYWxsIHRoZSBzY3JlZW4gc2l6ZXMgd2l0aCB0aGUgbG93ZXN0IHByaW9yaXR5LlxuICAgKi9cbiAgeHM6IFByb3BUeXBlcy5vbmVPZihbZmFsc2UsICdhdXRvJywgdHJ1ZSwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMl0pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGl0IHNldHMgYG1pbi13aWR0aDogMGAgb24gdGhlIGl0ZW0uXG4gICAqIFJlZmVyIHRvIHRoZSBsaW1pdGF0aW9ucyBzZWN0aW9uIG9mIHRoZSBkb2N1bWVudGF0aW9uIHRvIGJldHRlciB1bmRlcnN0YW5kIHRoZSB1c2UgY2FzZS5cbiAgICovXG4gIHplcm9NaW5XaWR0aDogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG52YXIgU3R5bGVkR3JpZCA9IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlHcmlkJ1xufSkoR3JpZCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciByZXF1aXJlUHJvcCA9IHJlcXVpcmVQcm9wRmFjdG9yeSgnR3JpZCcpO1xuICBTdHlsZWRHcmlkLnByb3BUeXBlcyA9IF9leHRlbmRzKHt9LCBTdHlsZWRHcmlkLnByb3BUeXBlcywge1xuICAgIGFsaWduQ29udGVudDogcmVxdWlyZVByb3AoJ2NvbnRhaW5lcicpLFxuICAgIGFsaWduSXRlbXM6IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICBkaXJlY3Rpb246IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICBqdXN0aWZ5OiByZXF1aXJlUHJvcCgnY29udGFpbmVyJyksXG4gICAgbGc6IHJlcXVpcmVQcm9wKCdpdGVtJyksXG4gICAgbWQ6IHJlcXVpcmVQcm9wKCdpdGVtJyksXG4gICAgc206IHJlcXVpcmVQcm9wKCdpdGVtJyksXG4gICAgc3BhY2luZzogcmVxdWlyZVByb3AoJ2NvbnRhaW5lcicpLFxuICAgIHdyYXA6IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICB4czogcmVxdWlyZVByb3AoJ2l0ZW0nKSxcbiAgICB6ZXJvTWluV2lkdGg6IHJlcXVpcmVQcm9wKCdpdGVtJylcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN0eWxlZEdyaWQ7IiwiLy8gVE9ETyB2NTogY29uc2lkZXIgdG8gbWFrZSBpdCBwcml2YXRlXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRSZWYocmVmLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJlZih2YWx1ZSk7XG4gIH0gZWxzZSBpZiAocmVmKSB7XG4gICAgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgfVxufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzZXRSZWYgZnJvbSAnLi9zZXRSZWYnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlRm9ya1JlZihyZWZBLCByZWZCKSB7XG4gIC8qKlxuICAgKiBUaGlzIHdpbGwgY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIGlmIHRoZSByZWYgcHJvcHMgY2hhbmdlIGFuZCBhcmUgZGVmaW5lZC5cbiAgICogVGhpcyBtZWFucyByZWFjdCB3aWxsIGNhbGwgdGhlIG9sZCBmb3JrUmVmIHdpdGggYG51bGxgIGFuZCB0aGUgbmV3IGZvcmtSZWZcbiAgICogd2l0aCB0aGUgcmVmLiBDbGVhbnVwIG5hdHVyYWxseSBlbWVyZ2VzIGZyb20gdGhpcyBiZWhhdmlvclxuICAgKi9cbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIGlmIChyZWZBID09IG51bGwgJiYgcmVmQiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKHJlZlZhbHVlKSB7XG4gICAgICBzZXRSZWYocmVmQSwgcmVmVmFsdWUpO1xuICAgICAgc2V0UmVmKHJlZkIsIHJlZlZhbHVlKTtcbiAgICB9O1xuICB9LCBbcmVmQSwgcmVmQl0pO1xufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbnZhciB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xuLyoqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzE0MDk5I2lzc3VlY29tbWVudC00NDAwMTM4OTJcbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmblxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUV2ZW50Q2FsbGJhY2soZm4pIHtcbiAgdmFyIHJlZiA9IFJlYWN0LnVzZVJlZihmbik7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZWYuY3VycmVudCA9IGZuO1xuICB9KTtcbiAgcmV0dXJuIFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKDAsIHJlZi5jdXJyZW50KS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gIH0sIFtdKTtcbn0iLCIvLyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlL2Jsb2IvdjQuMS41L3NyYy9mb2N1cy12aXNpYmxlLmpzXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xudmFyIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xudmFyIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gZmFsc2U7XG52YXIgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0ID0gbnVsbDtcbnZhciBpbnB1dFR5cGVzV2hpdGVsaXN0ID0ge1xuICB0ZXh0OiB0cnVlLFxuICBzZWFyY2g6IHRydWUsXG4gIHVybDogdHJ1ZSxcbiAgdGVsOiB0cnVlLFxuICBlbWFpbDogdHJ1ZSxcbiAgcGFzc3dvcmQ6IHRydWUsXG4gIG51bWJlcjogdHJ1ZSxcbiAgZGF0ZTogdHJ1ZSxcbiAgbW9udGg6IHRydWUsXG4gIHdlZWs6IHRydWUsXG4gIHRpbWU6IHRydWUsXG4gIGRhdGV0aW1lOiB0cnVlLFxuICAnZGF0ZXRpbWUtbG9jYWwnOiB0cnVlXG59O1xuLyoqXG4gKiBDb21wdXRlcyB3aGV0aGVyIHRoZSBnaXZlbiBlbGVtZW50IHNob3VsZCBhdXRvbWF0aWNhbGx5IHRyaWdnZXIgdGhlXG4gKiBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgYmVpbmcgYWRkZWQsIGkuZS4gd2hldGhlciBpdCBzaG91bGQgYWx3YXlzIG1hdGNoXG4gKiBgOmZvY3VzLXZpc2libGVgIHdoZW4gZm9jdXNlZC5cbiAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eShub2RlKSB7XG4gIHZhciB0eXBlID0gbm9kZS50eXBlLFxuICAgICAgdGFnTmFtZSA9IG5vZGUudGFnTmFtZTtcblxuICBpZiAodGFnTmFtZSA9PT0gJ0lOUFVUJyAmJiBpbnB1dFR5cGVzV2hpdGVsaXN0W3R5cGVdICYmICFub2RlLnJlYWRPbmx5KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJiAhbm9kZS5yZWFkT25seSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKG5vZGUuaXNDb250ZW50RWRpdGFibGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogS2VlcCB0cmFjayBvZiBvdXIga2V5Ym9hcmQgbW9kYWxpdHkgc3RhdGUgd2l0aCBgaGFkS2V5Ym9hcmRFdmVudGAuXG4gKiBJZiB0aGUgbW9zdCByZWNlbnQgdXNlciBpbnRlcmFjdGlvbiB3YXMgdmlhIHRoZSBrZXlib2FyZDtcbiAqIGFuZCB0aGUga2V5IHByZXNzIGRpZCBub3QgaW5jbHVkZSBhIG1ldGEsIGFsdC9vcHRpb24sIG9yIGNvbnRyb2wga2V5O1xuICogdGhlbiB0aGUgbW9kYWxpdHkgaXMga2V5Ym9hcmQuIE90aGVyd2lzZSwgdGhlIG1vZGFsaXR5IGlzIG5vdCBrZXlib2FyZC5cbiAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnRcbiAqL1xuXG5cbmZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgaWYgKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbn1cbi8qKlxuICogSWYgYXQgYW55IHBvaW50IGEgdXNlciBjbGlja3Mgd2l0aCBhIHBvaW50aW5nIGRldmljZSwgZW5zdXJlIHRoYXQgd2UgY2hhbmdlXG4gKiB0aGUgbW9kYWxpdHkgYXdheSBmcm9tIGtleWJvYXJkLlxuICogVGhpcyBhdm9pZHMgdGhlIHNpdHVhdGlvbiB3aGVyZSBhIHVzZXIgcHJlc3NlcyBhIGtleSBvbiBhbiBhbHJlYWR5IGZvY3VzZWRcbiAqIGVsZW1lbnQsIGFuZCB0aGVuIGNsaWNrcyBvbiBhIGRpZmZlcmVudCBlbGVtZW50LCBmb2N1c2luZyBpdCB3aXRoIGFcbiAqIHBvaW50aW5nIGRldmljZSwgd2hpbGUgd2Ugc3RpbGwgdGhpbmsgd2UncmUgaW4ga2V5Ym9hcmQgbW9kYWxpdHkuXG4gKi9cblxuXG5mdW5jdGlvbiBoYW5kbGVQb2ludGVyRG93bigpIHtcbiAgaGFkS2V5Ym9hcmRFdmVudCA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKCkge1xuICBpZiAodGhpcy52aXNpYmlsaXR5U3RhdGUgPT09ICdoaWRkZW4nKSB7XG4gICAgLy8gSWYgdGhlIHRhYiBiZWNvbWVzIGFjdGl2ZSBhZ2FpbiwgdGhlIGJyb3dzZXIgd2lsbCBoYW5kbGUgY2FsbGluZyBmb2N1c1xuICAgIC8vIG9uIHRoZSBlbGVtZW50IChTYWZhcmkgYWN0dWFsbHkgY2FsbHMgaXQgdHdpY2UpLlxuICAgIC8vIElmIHRoaXMgdGFiIGNoYW5nZSBjYXVzZWQgYSBibHVyIG9uIGFuIGVsZW1lbnQgd2l0aCBmb2N1cy12aXNpYmxlLFxuICAgIC8vIHJlLWFwcGx5IHRoZSBjbGFzcyB3aGVuIHRoZSB1c2VyIHN3aXRjaGVzIGJhY2sgdG8gdGhlIHRhYi5cbiAgICBpZiAoaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkpIHtcbiAgICAgIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcmVwYXJlKGRvYykge1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24sIHRydWUpO1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UsIHRydWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGVhcmRvd24oZG9jKSB7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93biwgdHJ1ZSk7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGlzRm9jdXNWaXNpYmxlKGV2ZW50KSB7XG4gIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gdGFyZ2V0Lm1hdGNoZXMoJzpmb2N1cy12aXNpYmxlJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7fSAvLyBicm93c2VycyBub3QgaW1wbGVtZW50aW5nIDpmb2N1cy12aXNpYmxlIHdpbGwgdGhyb3cgYSBTeW50YXhFcnJvclxuICAvLyB3ZSB1c2Ugb3VyIG93biBoZXVyaXN0aWMgZm9yIHRob3NlIGJyb3dzZXJzXG4gIC8vIHJldGhyb3cgbWlnaHQgYmUgYmV0dGVyIGlmIGl0J3Mgbm90IHRoZSBleHBlY3RlZCBlcnJvciBidXQgZG8gd2UgcmVhbGx5XG4gIC8vIHdhbnQgdG8gY3Jhc2ggaWYgZm9jdXMtdmlzaWJsZSBtYWxmdW5jdGlvbmVkP1xuICAvLyBubyBuZWVkIGZvciB2YWxpZEZvY3VzVGFyZ2V0IGNoZWNrLiB0aGUgdXNlciBkb2VzIHRoYXQgYnkgYXR0YWNoaW5nIGl0IHRvXG4gIC8vIGZvY3VzYWJsZSBldmVudHMgb25seVxuXG5cbiAgcmV0dXJuIGhhZEtleWJvYXJkRXZlbnQgfHwgZm9jdXNUcmlnZ2Vyc0tleWJvYXJkTW9kYWxpdHkodGFyZ2V0KTtcbn1cbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCBpZiBhIGJsdXIgZXZlbnQgaXMgZmlyZWQgb24gYSBmb2N1cy12aXNpYmxlIGVsZW1lbnRcbiAqL1xuXG5cbmZ1bmN0aW9uIGhhbmRsZUJsdXJWaXNpYmxlKCkge1xuICAvLyBUbyBkZXRlY3QgYSB0YWIvd2luZG93IHN3aXRjaCwgd2UgbG9vayBmb3IgYSBibHVyIGV2ZW50IGZvbGxvd2VkXG4gIC8vIHJhcGlkbHkgYnkgYSB2aXNpYmlsaXR5IGNoYW5nZS5cbiAgLy8gSWYgd2UgZG9uJ3Qgc2VlIGEgdmlzaWJpbGl0eSBjaGFuZ2Ugd2l0aGluIDEwMG1zLCBpdCdzIHByb2JhYmx5IGFcbiAgLy8gcmVndWxhciBmb2N1cyBjaGFuZ2UuXG4gIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gdHJ1ZTtcbiAgd2luZG93LmNsZWFyVGltZW91dChoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQpO1xuICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSBmYWxzZTtcbiAgfSwgMTAwKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlSXNGb2N1c1Zpc2libGUoKSB7XG4gIHZhciByZWYgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICB2YXIgbm9kZSA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKGluc3RhbmNlKTtcblxuICAgIGlmIChub2RlICE9IG51bGwpIHtcbiAgICAgIHByZXBhcmUobm9kZS5vd25lckRvY3VtZW50KTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZURlYnVnVmFsdWUoaXNGb2N1c1Zpc2libGUpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpc0ZvY3VzVmlzaWJsZTogaXNGb2N1c1Zpc2libGUsXG4gICAgb25CbHVyVmlzaWJsZTogaGFuZGxlQmx1clZpc2libGUsXG4gICAgcmVmOiByZWZcbiAgfTtcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGRlZmF1bHQgUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTsiLCJpbXBvcnQgeyBDaGlsZHJlbiwgY2xvbmVFbGVtZW50LCBpc1ZhbGlkRWxlbWVudCB9IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogR2l2ZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gLCByZXR1cm4gYW4gb2JqZWN0IG1hcHBpbmcga2V5IHRvIGNoaWxkLlxuICpcbiAqIEBwYXJhbSB7Kn0gY2hpbGRyZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gXG4gKiBAcmV0dXJuIHtvYmplY3R9IE1hcHBpbmcgb2Yga2V5IHRvIGNoaWxkXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENoaWxkTWFwcGluZyhjaGlsZHJlbiwgbWFwRm4pIHtcbiAgdmFyIG1hcHBlciA9IGZ1bmN0aW9uIG1hcHBlcihjaGlsZCkge1xuICAgIHJldHVybiBtYXBGbiAmJiBpc1ZhbGlkRWxlbWVudChjaGlsZCkgPyBtYXBGbihjaGlsZCkgOiBjaGlsZDtcbiAgfTtcblxuICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKGNoaWxkcmVuKSBDaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGM7XG4gIH0pLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgLy8gcnVuIHRoZSBtYXAgZnVuY3Rpb24gaGVyZSBpbnN0ZWFkIHNvIHRoYXQgdGhlIGtleSBpcyB0aGUgY29tcHV0ZWQgb25lXG4gICAgcmVzdWx0W2NoaWxkLmtleV0gPSBtYXBwZXIoY2hpbGQpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogV2hlbiB5b3UncmUgYWRkaW5nIG9yIHJlbW92aW5nIGNoaWxkcmVuIHNvbWUgbWF5IGJlIGFkZGVkIG9yIHJlbW92ZWQgaW4gdGhlXG4gKiBzYW1lIHJlbmRlciBwYXNzLiBXZSB3YW50IHRvIHNob3cgKmJvdGgqIHNpbmNlIHdlIHdhbnQgdG8gc2ltdWx0YW5lb3VzbHlcbiAqIGFuaW1hdGUgZWxlbWVudHMgaW4gYW5kIG91dC4gVGhpcyBmdW5jdGlvbiB0YWtlcyBhIHByZXZpb3VzIHNldCBvZiBrZXlzXG4gKiBhbmQgYSBuZXcgc2V0IG9mIGtleXMgYW5kIG1lcmdlcyB0aGVtIHdpdGggaXRzIGJlc3QgZ3Vlc3Mgb2YgdGhlIGNvcnJlY3RcbiAqIG9yZGVyaW5nLiBJbiB0aGUgZnV0dXJlIHdlIG1heSBleHBvc2Ugc29tZSBvZiB0aGUgdXRpbGl0aWVzIGluXG4gKiBSZWFjdE11bHRpQ2hpbGQgdG8gbWFrZSB0aGlzIGVhc3ksIGJ1dCBmb3Igbm93IFJlYWN0IGl0c2VsZiBkb2VzIG5vdFxuICogZGlyZWN0bHkgaGF2ZSB0aGlzIGNvbmNlcHQgb2YgdGhlIHVuaW9uIG9mIHByZXZDaGlsZHJlbiBhbmQgbmV4dENoaWxkcmVuXG4gKiBzbyB3ZSBpbXBsZW1lbnQgaXQgaGVyZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcHJldiBwcmV2IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHBhcmFtIHtvYmplY3R9IG5leHQgbmV4dCBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEByZXR1cm4ge29iamVjdH0gYSBrZXkgc2V0IHRoYXQgY29udGFpbnMgYWxsIGtleXMgaW4gYHByZXZgIGFuZCBhbGwga2V5c1xuICogaW4gYG5leHRgIGluIGEgcmVhc29uYWJsZSBvcmRlci5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXYsIG5leHQpIHtcbiAgcHJldiA9IHByZXYgfHwge307XG4gIG5leHQgPSBuZXh0IHx8IHt9O1xuXG4gIGZ1bmN0aW9uIGdldFZhbHVlRm9yS2V5KGtleSkge1xuICAgIHJldHVybiBrZXkgaW4gbmV4dCA/IG5leHRba2V5XSA6IHByZXZba2V5XTtcbiAgfSAvLyBGb3IgZWFjaCBrZXkgb2YgYG5leHRgLCB0aGUgbGlzdCBvZiBrZXlzIHRvIGluc2VydCBiZWZvcmUgdGhhdCBrZXkgaW5cbiAgLy8gdGhlIGNvbWJpbmVkIGxpc3RcblxuXG4gIHZhciBuZXh0S2V5c1BlbmRpbmcgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgcGVuZGluZ0tleXMgPSBbXTtcblxuICBmb3IgKHZhciBwcmV2S2V5IGluIHByZXYpIHtcbiAgICBpZiAocHJldktleSBpbiBuZXh0KSB7XG4gICAgICBpZiAocGVuZGluZ0tleXMubGVuZ3RoKSB7XG4gICAgICAgIG5leHRLZXlzUGVuZGluZ1twcmV2S2V5XSA9IHBlbmRpbmdLZXlzO1xuICAgICAgICBwZW5kaW5nS2V5cyA9IFtdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZW5kaW5nS2V5cy5wdXNoKHByZXZLZXkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpO1xuICB2YXIgY2hpbGRNYXBwaW5nID0ge307XG5cbiAgZm9yICh2YXIgbmV4dEtleSBpbiBuZXh0KSB7XG4gICAgaWYgKG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGVuZGluZ05leHRLZXkgPSBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV07XG4gICAgICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ05leHRLZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5XSA9IGdldFZhbHVlRm9yS2V5KG5leHRLZXkpO1xuICB9IC8vIEZpbmFsbHksIGFkZCB0aGUga2V5cyB3aGljaCBkaWRuJ3QgYXBwZWFyIGJlZm9yZSBhbnkga2V5IGluIGBuZXh0YFxuXG5cbiAgZm9yIChpID0gMDsgaSA8IHBlbmRpbmdLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2hpbGRNYXBwaW5nW3BlbmRpbmdLZXlzW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdLZXlzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZE1hcHBpbmc7XG59XG5cbmZ1bmN0aW9uIGdldFByb3AoY2hpbGQsIHByb3AsIHByb3BzKSB7XG4gIHJldHVybiBwcm9wc1twcm9wXSAhPSBudWxsID8gcHJvcHNbcHJvcF0gOiBjaGlsZC5wcm9wc1twcm9wXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEluaXRpYWxDaGlsZE1hcHBpbmcocHJvcHMsIG9uRXhpdGVkKSB7XG4gIHJldHVybiBnZXRDaGlsZE1hcHBpbmcocHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgIGluOiB0cnVlLFxuICAgICAgYXBwZWFyOiBnZXRQcm9wKGNoaWxkLCAnYXBwZWFyJywgcHJvcHMpLFxuICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIHByb3BzKSxcbiAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgcHJvcHMpXG4gICAgfSk7XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE5leHRDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBwcmV2Q2hpbGRNYXBwaW5nLCBvbkV4aXRlZCkge1xuICB2YXIgbmV4dENoaWxkTWFwcGluZyA9IGdldENoaWxkTWFwcGluZyhuZXh0UHJvcHMuY2hpbGRyZW4pO1xuICB2YXIgY2hpbGRyZW4gPSBtZXJnZUNoaWxkTWFwcGluZ3MocHJldkNoaWxkTWFwcGluZywgbmV4dENoaWxkTWFwcGluZyk7XG4gIE9iamVjdC5rZXlzKGNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltrZXldO1xuICAgIGlmICghaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSByZXR1cm47XG4gICAgdmFyIGhhc1ByZXYgPSAoa2V5IGluIHByZXZDaGlsZE1hcHBpbmcpO1xuICAgIHZhciBoYXNOZXh0ID0gKGtleSBpbiBuZXh0Q2hpbGRNYXBwaW5nKTtcbiAgICB2YXIgcHJldkNoaWxkID0gcHJldkNoaWxkTWFwcGluZ1trZXldO1xuICAgIHZhciBpc0xlYXZpbmcgPSBpc1ZhbGlkRWxlbWVudChwcmV2Q2hpbGQpICYmICFwcmV2Q2hpbGQucHJvcHMuaW47IC8vIGl0ZW0gaXMgbmV3IChlbnRlcmluZylcblxuICAgIGlmIChoYXNOZXh0ICYmICghaGFzUHJldiB8fCBpc0xlYXZpbmcpKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZygnZW50ZXJpbmcnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgICAgaW46IHRydWUsXG4gICAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgbmV4dFByb3BzKSxcbiAgICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIG5leHRQcm9wcylcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoIWhhc05leHQgJiYgaGFzUHJldiAmJiAhaXNMZWF2aW5nKSB7XG4gICAgICAvLyBpdGVtIGlzIG9sZCAoZXhpdGluZylcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdsZWF2aW5nJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBpbjogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaGFzTmV4dCAmJiBoYXNQcmV2ICYmIGlzVmFsaWRFbGVtZW50KHByZXZDaGlsZCkpIHtcbiAgICAgIC8vIGl0ZW0gaGFzbid0IGNoYW5nZWQgdHJhbnNpdGlvbiBzdGF0ZXNcbiAgICAgIC8vIGNvcHkgb3ZlciB0aGUgbGFzdCB0cmFuc2l0aW9uIHByb3BzO1xuICAgICAgLy8gY29uc29sZS5sb2coJ3VuY2hhbmdlZCcsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgICBpbjogcHJldkNoaWxkLnByb3BzLmluLFxuICAgICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIG5leHRQcm9wcyksXG4gICAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBuZXh0UHJvcHMpXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY2hpbGRyZW47XG59IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVHJhbnNpdGlvbkdyb3VwQ29udGV4dCBmcm9tICcuL1RyYW5zaXRpb25Hcm91cENvbnRleHQnO1xuaW1wb3J0IHsgZ2V0Q2hpbGRNYXBwaW5nLCBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nLCBnZXROZXh0Q2hpbGRNYXBwaW5nIH0gZnJvbSAnLi91dGlscy9DaGlsZE1hcHBpbmcnO1xuXG52YXIgdmFsdWVzID0gT2JqZWN0LnZhbHVlcyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbiAoaykge1xuICAgIHJldHVybiBvYmpba107XG4gIH0pO1xufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50OiAnZGl2JyxcbiAgY2hpbGRGYWN0b3J5OiBmdW5jdGlvbiBjaGlsZEZhY3RvcnkoY2hpbGQpIHtcbiAgICByZXR1cm4gY2hpbGQ7XG4gIH1cbn07XG4vKipcbiAqIFRoZSBgPFRyYW5zaXRpb25Hcm91cD5gIGNvbXBvbmVudCBtYW5hZ2VzIGEgc2V0IG9mIHRyYW5zaXRpb24gY29tcG9uZW50c1xuICogKGA8VHJhbnNpdGlvbj5gIGFuZCBgPENTU1RyYW5zaXRpb24+YCkgaW4gYSBsaXN0LiBMaWtlIHdpdGggdGhlIHRyYW5zaXRpb25cbiAqIGNvbXBvbmVudHMsIGA8VHJhbnNpdGlvbkdyb3VwPmAgaXMgYSBzdGF0ZSBtYWNoaW5lIGZvciBtYW5hZ2luZyB0aGUgbW91bnRpbmdcbiAqIGFuZCB1bm1vdW50aW5nIG9mIGNvbXBvbmVudHMgb3ZlciB0aW1lLlxuICpcbiAqIENvbnNpZGVyIHRoZSBleGFtcGxlIGJlbG93LiBBcyBpdGVtcyBhcmUgcmVtb3ZlZCBvciBhZGRlZCB0byB0aGUgVG9kb0xpc3QgdGhlXG4gKiBgaW5gIHByb3AgaXMgdG9nZ2xlZCBhdXRvbWF0aWNhbGx5IGJ5IHRoZSBgPFRyYW5zaXRpb25Hcm91cD5gLlxuICpcbiAqIE5vdGUgdGhhdCBgPFRyYW5zaXRpb25Hcm91cD5gICBkb2VzIG5vdCBkZWZpbmUgYW55IGFuaW1hdGlvbiBiZWhhdmlvciFcbiAqIEV4YWN0bHkgX2hvd18gYSBsaXN0IGl0ZW0gYW5pbWF0ZXMgaXMgdXAgdG8gdGhlIGluZGl2aWR1YWwgdHJhbnNpdGlvblxuICogY29tcG9uZW50LiBUaGlzIG1lYW5zIHlvdSBjYW4gbWl4IGFuZCBtYXRjaCBhbmltYXRpb25zIGFjcm9zcyBkaWZmZXJlbnQgbGlzdFxuICogaXRlbXMuXG4gKi9cblxudmFyIFRyYW5zaXRpb25Hcm91cCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUcmFuc2l0aW9uR3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb25Hcm91cChwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuXG4gICAgdmFyIGhhbmRsZUV4aXRlZCA9IF90aGlzLmhhbmRsZUV4aXRlZC5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTsgLy8gSW5pdGlhbCBjaGlsZHJlbiBzaG91bGQgYWxsIGJlIGVudGVyaW5nLCBkZXBlbmRlbnQgb24gYXBwZWFyXG5cblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgY29udGV4dFZhbHVlOiB7XG4gICAgICAgIGlzTW91bnRpbmc6IHRydWVcbiAgICAgIH0sXG4gICAgICBoYW5kbGVFeGl0ZWQ6IGhhbmRsZUV4aXRlZCxcbiAgICAgIGZpcnN0UmVuZGVyOiB0cnVlXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVHJhbnNpdGlvbkdyb3VwLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLm1vdW50ZWQgPSB0cnVlO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY29udGV4dFZhbHVlOiB7XG4gICAgICAgIGlzTW91bnRpbmc6IGZhbHNlXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5tb3VudGVkID0gZmFsc2U7XG4gIH07XG5cbiAgVHJhbnNpdGlvbkdyb3VwLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIF9yZWYpIHtcbiAgICB2YXIgcHJldkNoaWxkTWFwcGluZyA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICAgIGhhbmRsZUV4aXRlZCA9IF9yZWYuaGFuZGxlRXhpdGVkLFxuICAgICAgICBmaXJzdFJlbmRlciA9IF9yZWYuZmlyc3RSZW5kZXI7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNoaWxkcmVuOiBmaXJzdFJlbmRlciA/IGdldEluaXRpYWxDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBoYW5kbGVFeGl0ZWQpIDogZ2V0TmV4dENoaWxkTWFwcGluZyhuZXh0UHJvcHMsIHByZXZDaGlsZE1hcHBpbmcsIGhhbmRsZUV4aXRlZCksXG4gICAgICBmaXJzdFJlbmRlcjogZmFsc2VcbiAgICB9O1xuICB9IC8vIG5vZGUgaXMgYHVuZGVmaW5lZGAgd2hlbiB1c2VyIHByb3ZpZGVkIGBub2RlUmVmYCBwcm9wXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlRXhpdGVkID0gZnVuY3Rpb24gaGFuZGxlRXhpdGVkKGNoaWxkLCBub2RlKSB7XG4gICAgdmFyIGN1cnJlbnRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmcodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgaWYgKGNoaWxkLmtleSBpbiBjdXJyZW50Q2hpbGRNYXBwaW5nKSByZXR1cm47XG5cbiAgICBpZiAoY2hpbGQucHJvcHMub25FeGl0ZWQpIHtcbiAgICAgIGNoaWxkLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm1vdW50ZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IF9leHRlbmRzKHt9LCBzdGF0ZS5jaGlsZHJlbik7XG5cbiAgICAgICAgZGVsZXRlIGNoaWxkcmVuW2NoaWxkLmtleV07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnQsXG4gICAgICAgIGNoaWxkRmFjdG9yeSA9IF90aGlzJHByb3BzLmNoaWxkRmFjdG9yeSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY29tcG9uZW50XCIsIFwiY2hpbGRGYWN0b3J5XCJdKTtcblxuICAgIHZhciBjb250ZXh0VmFsdWUgPSB0aGlzLnN0YXRlLmNvbnRleHRWYWx1ZTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2YWx1ZXModGhpcy5zdGF0ZS5jaGlsZHJlbikubWFwKGNoaWxkRmFjdG9yeSk7XG4gICAgZGVsZXRlIHByb3BzLmFwcGVhcjtcbiAgICBkZWxldGUgcHJvcHMuZW50ZXI7XG4gICAgZGVsZXRlIHByb3BzLmV4aXQ7XG5cbiAgICBpZiAoQ29tcG9uZW50ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gICAgICB9LCBjaGlsZHJlbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Hcm91cENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIHByb3BzLCBjaGlsZHJlbikpO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uR3JvdXA7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRyYW5zaXRpb25Hcm91cC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBgPFRyYW5zaXRpb25Hcm91cD5gIHJlbmRlcnMgYSBgPGRpdj5gIGJ5IGRlZmF1bHQuIFlvdSBjYW4gY2hhbmdlIHRoaXNcbiAgICogYmVoYXZpb3IgYnkgcHJvdmlkaW5nIGEgYGNvbXBvbmVudGAgcHJvcC5cbiAgICogSWYgeW91IHVzZSBSZWFjdCB2MTYrIGFuZCB3b3VsZCBsaWtlIHRvIGF2b2lkIGEgd3JhcHBpbmcgYDxkaXY+YCBlbGVtZW50XG4gICAqIHlvdSBjYW4gcGFzcyBpbiBgY29tcG9uZW50PXtudWxsfWAuIFRoaXMgaXMgdXNlZnVsIGlmIHRoZSB3cmFwcGluZyBkaXZcbiAgICogYm9ya3MgeW91ciBjc3Mgc3R5bGVzLlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBBIHNldCBvZiBgPFRyYW5zaXRpb24+YCBjb21wb25lbnRzLCB0aGF0IGFyZSB0b2dnbGVkIGBpbmAgYW5kIG91dCBhcyB0aGV5XG4gICAqIGxlYXZlLiB0aGUgYDxUcmFuc2l0aW9uR3JvdXA+YCB3aWxsIGluamVjdCBzcGVjaWZpYyB0cmFuc2l0aW9uIHByb3BzLCBzb1xuICAgKiByZW1lbWJlciB0byBzcHJlYWQgdGhlbSB0aHJvdWdoIGlmIHlvdSBhcmUgd3JhcHBpbmcgdGhlIGA8VHJhbnNpdGlvbj5gIGFzXG4gICAqIHdpdGggb3VyIGA8RmFkZT5gIGV4YW1wbGUuXG4gICAqXG4gICAqIFdoaWxlIHRoaXMgY29tcG9uZW50IGlzIG1lYW50IGZvciBtdWx0aXBsZSBgVHJhbnNpdGlvbmAgb3IgYENTU1RyYW5zaXRpb25gXG4gICAqIGNoaWxkcmVuLCBzb21ldGltZXMgeW91IG1heSB3YW50IHRvIGhhdmUgYSBzaW5nbGUgdHJhbnNpdGlvbiBjaGlsZCB3aXRoXG4gICAqIGNvbnRlbnQgdGhhdCB5b3Ugd2FudCB0byBiZSB0cmFuc2l0aW9uZWQgb3V0IGFuZCBpbiB3aGVuIHlvdSBjaGFuZ2UgaXRcbiAgICogKGUuZy4gcm91dGVzLCBpbWFnZXMgZXRjLikgSW4gdGhhdCBjYXNlIHlvdSBjYW4gY2hhbmdlIHRoZSBga2V5YCBwcm9wIG9mXG4gICAqIHRoZSB0cmFuc2l0aW9uIGNoaWxkIGFzIHlvdSBjaGFuZ2UgaXRzIGNvbnRlbnQsIHRoaXMgd2lsbCBjYXVzZVxuICAgKiBgVHJhbnNpdGlvbkdyb3VwYCB0byB0cmFuc2l0aW9uIHRoZSBjaGlsZCBvdXQgYW5kIGJhY2sgaW4uXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgYXBwZWFyIGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgZW50ZXIgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGV4aXQgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgZXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFlvdSBtYXkgbmVlZCB0byBhcHBseSByZWFjdGl2ZSB1cGRhdGVzIHRvIGEgY2hpbGQgYXMgaXQgaXMgZXhpdGluZy5cbiAgICogVGhpcyBpcyBnZW5lcmFsbHkgZG9uZSBieSB1c2luZyBgY2xvbmVFbGVtZW50YCBob3dldmVyIGluIHRoZSBjYXNlIG9mIGFuIGV4aXRpbmdcbiAgICogY2hpbGQgdGhlIGVsZW1lbnQgaGFzIGFscmVhZHkgYmVlbiByZW1vdmVkIGFuZCBub3QgYWNjZXNzaWJsZSB0byB0aGUgY29uc3VtZXIuXG4gICAqXG4gICAqIElmIHlvdSBkbyBuZWVkIHRvIHVwZGF0ZSBhIGNoaWxkIGFzIGl0IGxlYXZlcyB5b3UgY2FuIHByb3ZpZGUgYSBgY2hpbGRGYWN0b3J5YFxuICAgKiB0byB3cmFwIGV2ZXJ5IGNoaWxkLCBldmVuIHRoZSBvbmVzIHRoYXQgYXJlIGxlYXZpbmcuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKGNoaWxkOiBSZWFjdEVsZW1lbnQpIC0+IFJlYWN0RWxlbWVudFxuICAgKi9cbiAgY2hpbGRGYWN0b3J5OiBQcm9wVHlwZXMuZnVuY1xufSA6IHt9O1xuVHJhbnNpdGlvbkdyb3VwLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IFRyYW5zaXRpb25Hcm91cDsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgdXNlRXZlbnRDYWxsYmFjayBmcm9tICcuLi91dGlscy91c2VFdmVudENhbGxiYWNrJztcbnZhciB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlRWZmZWN0IDogUmVhY3QudXNlTGF5b3V0RWZmZWN0O1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmZ1bmN0aW9uIFJpcHBsZShwcm9wcykge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBfcHJvcHMkcHVsc2F0ZSA9IHByb3BzLnB1bHNhdGUsXG4gICAgICBwdWxzYXRlID0gX3Byb3BzJHB1bHNhdGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHB1bHNhdGUsXG4gICAgICByaXBwbGVYID0gcHJvcHMucmlwcGxlWCxcbiAgICAgIHJpcHBsZVkgPSBwcm9wcy5yaXBwbGVZLFxuICAgICAgcmlwcGxlU2l6ZSA9IHByb3BzLnJpcHBsZVNpemUsXG4gICAgICBpblByb3AgPSBwcm9wcy5pbixcbiAgICAgIF9wcm9wcyRvbkV4aXRlZCA9IHByb3BzLm9uRXhpdGVkLFxuICAgICAgb25FeGl0ZWQgPSBfcHJvcHMkb25FeGl0ZWQgPT09IHZvaWQgMCA/IGZ1bmN0aW9uICgpIHt9IDogX3Byb3BzJG9uRXhpdGVkLFxuICAgICAgdGltZW91dCA9IHByb3BzLnRpbWVvdXQ7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIGxlYXZpbmcgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRMZWF2aW5nID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciByaXBwbGVDbGFzc05hbWUgPSBjbHN4KGNsYXNzZXMucmlwcGxlLCBjbGFzc2VzLnJpcHBsZVZpc2libGUsIHB1bHNhdGUgJiYgY2xhc3Nlcy5yaXBwbGVQdWxzYXRlKTtcbiAgdmFyIHJpcHBsZVN0eWxlcyA9IHtcbiAgICB3aWR0aDogcmlwcGxlU2l6ZSxcbiAgICBoZWlnaHQ6IHJpcHBsZVNpemUsXG4gICAgdG9wOiAtKHJpcHBsZVNpemUgLyAyKSArIHJpcHBsZVksXG4gICAgbGVmdDogLShyaXBwbGVTaXplIC8gMikgKyByaXBwbGVYXG4gIH07XG4gIHZhciBjaGlsZENsYXNzTmFtZSA9IGNsc3goY2xhc3Nlcy5jaGlsZCwgbGVhdmluZyAmJiBjbGFzc2VzLmNoaWxkTGVhdmluZywgcHVsc2F0ZSAmJiBjbGFzc2VzLmNoaWxkUHVsc2F0ZSk7XG4gIHZhciBoYW5kbGVFeGl0ZWQgPSB1c2VFdmVudENhbGxiYWNrKG9uRXhpdGVkKTsgLy8gUmlwcGxlIGlzIHVzZWQgZm9yIHVzZXIgZmVlZGJhY2sgKGUuZy4gY2xpY2sgb3IgcHJlc3MpIHNvIHdlIHdhbnQgdG8gYXBwbHkgc3R5bGVzIHdpdGggdGhlIGhpZ2hlc3QgcHJpb3JpdHlcblxuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFpblByb3ApIHtcbiAgICAgIC8vIHJlYWN0LXRyYW5zaXRpb24tZ3JvdXAjb25FeGl0XG4gICAgICBzZXRMZWF2aW5nKHRydWUpOyAvLyByZWFjdC10cmFuc2l0aW9uLWdyb3VwI29uRXhpdGVkXG5cbiAgICAgIHZhciB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGhhbmRsZUV4aXRlZCwgdGltZW91dCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW2hhbmRsZUV4aXRlZCwgaW5Qcm9wLCB0aW1lb3V0XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogcmlwcGxlQ2xhc3NOYW1lLFxuICAgIHN0eWxlOiByaXBwbGVTdHlsZXNcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNoaWxkQ2xhc3NOYW1lXG4gIH0pKTtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUmlwcGxlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlIC0gaW5qZWN0ZWQgZnJvbSBUcmFuc2l0aW9uR3JvdXBcbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZSAtIGluamVjdGVkIGZyb20gVHJhbnNpdGlvbkdyb3VwXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBwdWxzYXRlcywgdHlwaWNhbGx5IGluZGljYXRpbmcgdGhlIGtleWJvYXJkIGZvY3VzIHN0YXRlIG9mIGFuIGVsZW1lbnQuXG4gICAqL1xuICBwdWxzYXRlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRGlhbWV0ZXIgb2YgdGhlIHJpcHBsZS5cbiAgICovXG4gIHJpcHBsZVNpemU6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIEhvcml6b250YWwgcG9zaXRpb24gb2YgdGhlIHJpcHBsZSBjZW50ZXIuXG4gICAqL1xuICByaXBwbGVYOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBWZXJ0aWNhbCBwb3NpdGlvbiBvZiB0aGUgcmlwcGxlIGNlbnRlci5cbiAgICovXG4gIHJpcHBsZVk6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIGV4aXQgZGVsYXlcbiAgICovXG4gIHRpbWVvdXQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFJpcHBsZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFRyYW5zaXRpb25Hcm91cCB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgUmlwcGxlIGZyb20gJy4vUmlwcGxlJztcbnZhciBEVVJBVElPTiA9IDU1MDtcbmV4cG9ydCB2YXIgREVMQVlfUklQUExFID0gODA7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB6SW5kZXg6IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBib3JkZXJSYWRpdXM6ICdpbmhlcml0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgcmlwcGxlYCBjbGFzcy4gKi9cbiAgICByaXBwbGU6IHtcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgcmlwcGxlVmlzaWJsZWAgY2xhc3MuICovXG4gICAgcmlwcGxlVmlzaWJsZToge1xuICAgICAgb3BhY2l0eTogMC4zLFxuICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknLFxuICAgICAgYW5pbWF0aW9uOiBcIiRlbnRlciBcIi5jb25jYXQoRFVSQVRJT04sIFwibXMgXCIpLmNvbmNhdCh0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgcmlwcGxlUHVsc2F0ZWAgY2xhc3MuICovXG4gICAgcmlwcGxlUHVsc2F0ZToge1xuICAgICAgYW5pbWF0aW9uRHVyYXRpb246IFwiXCIuY29uY2F0KHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsIFwibXNcIilcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBSaXBwbGVgIGNvbXBvbmVudHMgYGNoaWxkYCBjbGFzcy4gKi9cbiAgICBjaGlsZDoge1xuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAnY3VycmVudENvbG9yJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgY2hpbGRMZWF2aW5nYCBjbGFzcy4gKi9cbiAgICBjaGlsZExlYXZpbmc6IHtcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgICBhbmltYXRpb246IFwiJGV4aXQgXCIuY29uY2F0KERVUkFUSU9OLCBcIm1zIFwiKS5jb25jYXQodGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dClcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBSaXBwbGVgIGNvbXBvbmVudHMgYGNoaWxkUHVsc2F0ZWAgY2xhc3MuICovXG4gICAgY2hpbGRQdWxzYXRlOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICBhbmltYXRpb246IFwiJHB1bHNhdGUgMjUwMG1zIFwiLmNvbmNhdCh0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0LCBcIiAyMDBtcyBpbmZpbml0ZVwiKVxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgZW50ZXInOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApJyxcbiAgICAgICAgb3BhY2l0eTogMC4xXG4gICAgICB9LFxuICAgICAgJzEwMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJyxcbiAgICAgICAgb3BhY2l0eTogMC4zXG4gICAgICB9XG4gICAgfSxcbiAgICAnQGtleWZyYW1lcyBleGl0Jzoge1xuICAgICAgJzAlJzoge1xuICAgICAgICBvcGFjaXR5OiAxXG4gICAgICB9LFxuICAgICAgJzEwMCUnOiB7XG4gICAgICAgIG9wYWNpdHk6IDBcbiAgICAgIH1cbiAgICB9LFxuICAgICdAa2V5ZnJhbWVzIHB1bHNhdGUnOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJ1xuICAgICAgfSxcbiAgICAgICc1MCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDAuOTIpJ1xuICAgICAgfSxcbiAgICAgICcxMDAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSdcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICpcbiAqIFRPRE8gdjU6IE1ha2UgcHJpdmF0ZVxuICovXG5cbnZhciBUb3VjaFJpcHBsZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRvdWNoUmlwcGxlKHByb3BzLCByZWYpIHtcbiAgdmFyIF9wcm9wcyRjZW50ZXIgPSBwcm9wcy5jZW50ZXIsXG4gICAgICBjZW50ZXJQcm9wID0gX3Byb3BzJGNlbnRlciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkY2VudGVyLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2VudGVyXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKFtdKSxcbiAgICAgIHJpcHBsZXMgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRSaXBwbGVzID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciBuZXh0S2V5ID0gUmVhY3QudXNlUmVmKDApO1xuICB2YXIgcmlwcGxlQ2FsbGJhY2sgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQpIHtcbiAgICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQoKTtcbiAgICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQgPSBudWxsO1xuICAgIH1cbiAgfSwgW3JpcHBsZXNdKTsgLy8gVXNlZCB0byBmaWx0ZXIgb3V0IG1vdXNlIGVtdWxhdGVkIGV2ZW50cyBvbiBtb2JpbGUuXG5cbiAgdmFyIGlnbm9yaW5nTW91c2VEb3duID0gUmVhY3QudXNlUmVmKGZhbHNlKTsgLy8gV2UgdXNlIGEgdGltZXIgaW4gb3JkZXIgdG8gb25seSBzaG93IHRoZSByaXBwbGVzIGZvciB0b3VjaCBcImNsaWNrXCIgbGlrZSBldmVudHMuXG4gIC8vIFdlIGRvbid0IHdhbnQgdG8gZGlzcGxheSB0aGUgcmlwcGxlIGZvciB0b3VjaCBzY3JvbGwgZXZlbnRzLlxuXG4gIHZhciBzdGFydFRpbWVyID0gUmVhY3QudXNlUmVmKG51bGwpOyAvLyBUaGlzIGlzIHRoZSBob29rIGNhbGxlZCBvbmNlIHRoZSBwcmV2aW91cyB0aW1lb3V0IGlzIHJlYWR5LlxuXG4gIHZhciBzdGFydFRpbWVyQ29tbWl0ID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgY29udGFpbmVyID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjbGVhclRpbWVvdXQoc3RhcnRUaW1lci5jdXJyZW50KTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIHZhciBzdGFydENvbW1pdCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICB2YXIgcHVsc2F0ZSA9IHBhcmFtcy5wdWxzYXRlLFxuICAgICAgICByaXBwbGVYID0gcGFyYW1zLnJpcHBsZVgsXG4gICAgICAgIHJpcHBsZVkgPSBwYXJhbXMucmlwcGxlWSxcbiAgICAgICAgcmlwcGxlU2l6ZSA9IHBhcmFtcy5yaXBwbGVTaXplLFxuICAgICAgICBjYiA9IHBhcmFtcy5jYjtcbiAgICBzZXRSaXBwbGVzKGZ1bmN0aW9uIChvbGRSaXBwbGVzKSB7XG4gICAgICByZXR1cm4gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShvbGRSaXBwbGVzKSwgWy8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJpcHBsZSwge1xuICAgICAgICBrZXk6IG5leHRLZXkuY3VycmVudCxcbiAgICAgICAgY2xhc3NlczogY2xhc3NlcyxcbiAgICAgICAgdGltZW91dDogRFVSQVRJT04sXG4gICAgICAgIHB1bHNhdGU6IHB1bHNhdGUsXG4gICAgICAgIHJpcHBsZVg6IHJpcHBsZVgsXG4gICAgICAgIHJpcHBsZVk6IHJpcHBsZVksXG4gICAgICAgIHJpcHBsZVNpemU6IHJpcHBsZVNpemVcbiAgICAgIH0pXSk7XG4gICAgfSk7XG4gICAgbmV4dEtleS5jdXJyZW50ICs9IDE7XG4gICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCA9IGNiO1xuICB9LCBbY2xhc3Nlc10pO1xuICB2YXIgc3RhcnQgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV2ZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIGNiID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIF9vcHRpb25zJHB1bHNhdGUgPSBvcHRpb25zLnB1bHNhdGUsXG4gICAgICAgIHB1bHNhdGUgPSBfb3B0aW9ucyRwdWxzYXRlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHB1bHNhdGUsXG4gICAgICAgIF9vcHRpb25zJGNlbnRlciA9IG9wdGlvbnMuY2VudGVyLFxuICAgICAgICBjZW50ZXIgPSBfb3B0aW9ucyRjZW50ZXIgPT09IHZvaWQgMCA/IGNlbnRlclByb3AgfHwgb3B0aW9ucy5wdWxzYXRlIDogX29wdGlvbnMkY2VudGVyLFxuICAgICAgICBfb3B0aW9ucyRmYWtlRWxlbWVudCA9IG9wdGlvbnMuZmFrZUVsZW1lbnQsXG4gICAgICAgIGZha2VFbGVtZW50ID0gX29wdGlvbnMkZmFrZUVsZW1lbnQgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZmFrZUVsZW1lbnQ7XG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bicgJiYgaWdub3JpbmdNb3VzZURvd24uY3VycmVudCkge1xuICAgICAgaWdub3JpbmdNb3VzZURvd24uY3VycmVudCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldmVudC50eXBlID09PSAndG91Y2hzdGFydCcpIHtcbiAgICAgIGlnbm9yaW5nTW91c2VEb3duLmN1cnJlbnQgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBlbGVtZW50ID0gZmFrZUVsZW1lbnQgPyBudWxsIDogY29udGFpbmVyLmN1cnJlbnQ7XG4gICAgdmFyIHJlY3QgPSBlbGVtZW50ID8gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IHtcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMFxuICAgIH07IC8vIEdldCB0aGUgc2l6ZSBvZiB0aGUgcmlwcGxlXG5cbiAgICB2YXIgcmlwcGxlWDtcbiAgICB2YXIgcmlwcGxlWTtcbiAgICB2YXIgcmlwcGxlU2l6ZTtcblxuICAgIGlmIChjZW50ZXIgfHwgZXZlbnQuY2xpZW50WCA9PT0gMCAmJiBldmVudC5jbGllbnRZID09PSAwIHx8ICFldmVudC5jbGllbnRYICYmICFldmVudC50b3VjaGVzKSB7XG4gICAgICByaXBwbGVYID0gTWF0aC5yb3VuZChyZWN0LndpZHRoIC8gMik7XG4gICAgICByaXBwbGVZID0gTWF0aC5yb3VuZChyZWN0LmhlaWdodCAvIDIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX3JlZiA9IGV2ZW50LnRvdWNoZXMgPyBldmVudC50b3VjaGVzWzBdIDogZXZlbnQsXG4gICAgICAgICAgY2xpZW50WCA9IF9yZWYuY2xpZW50WCxcbiAgICAgICAgICBjbGllbnRZID0gX3JlZi5jbGllbnRZO1xuXG4gICAgICByaXBwbGVYID0gTWF0aC5yb3VuZChjbGllbnRYIC0gcmVjdC5sZWZ0KTtcbiAgICAgIHJpcHBsZVkgPSBNYXRoLnJvdW5kKGNsaWVudFkgLSByZWN0LnRvcCk7XG4gICAgfVxuXG4gICAgaWYgKGNlbnRlcikge1xuICAgICAgcmlwcGxlU2l6ZSA9IE1hdGguc3FydCgoMiAqIE1hdGgucG93KHJlY3Qud2lkdGgsIDIpICsgTWF0aC5wb3cocmVjdC5oZWlnaHQsIDIpKSAvIDMpOyAvLyBGb3Igc29tZSByZWFzb24gdGhlIGFuaW1hdGlvbiBpcyBicm9rZW4gb24gTW9iaWxlIENocm9tZSBpZiB0aGUgc2l6ZSBpZiBldmVuLlxuXG4gICAgICBpZiAocmlwcGxlU2l6ZSAlIDIgPT09IDApIHtcbiAgICAgICAgcmlwcGxlU2l6ZSArPSAxO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc2l6ZVggPSBNYXRoLm1heChNYXRoLmFicygoZWxlbWVudCA/IGVsZW1lbnQuY2xpZW50V2lkdGggOiAwKSAtIHJpcHBsZVgpLCByaXBwbGVYKSAqIDIgKyAyO1xuICAgICAgdmFyIHNpemVZID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudEhlaWdodCA6IDApIC0gcmlwcGxlWSksIHJpcHBsZVkpICogMiArIDI7XG4gICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KE1hdGgucG93KHNpemVYLCAyKSArIE1hdGgucG93KHNpemVZLCAyKSk7XG4gICAgfSAvLyBUb3VjaGUgZGV2aWNlc1xuXG5cbiAgICBpZiAoZXZlbnQudG91Y2hlcykge1xuICAgICAgLy8gY2hlY2sgdGhhdCB0aGlzIGlzbid0IGFub3RoZXIgdG91Y2hzdGFydCBkdWUgdG8gbXVsdGl0b3VjaFxuICAgICAgLy8gb3RoZXJ3aXNlIHdlIHdpbGwgb25seSBjbGVhciBhIHNpbmdsZSB0aW1lciB3aGVuIHVubW91bnRpbmcgd2hpbGUgdHdvXG4gICAgICAvLyBhcmUgcnVubmluZ1xuICAgICAgaWYgKHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgICAvLyBQcmVwYXJlIHRoZSByaXBwbGUgZWZmZWN0LlxuICAgICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3RhcnRDb21taXQoe1xuICAgICAgICAgICAgcHVsc2F0ZTogcHVsc2F0ZSxcbiAgICAgICAgICAgIHJpcHBsZVg6IHJpcHBsZVgsXG4gICAgICAgICAgICByaXBwbGVZOiByaXBwbGVZLFxuICAgICAgICAgICAgcmlwcGxlU2l6ZTogcmlwcGxlU2l6ZSxcbiAgICAgICAgICAgIGNiOiBjYlxuICAgICAgICAgIH0pO1xuICAgICAgICB9OyAvLyBEZWxheSB0aGUgZXhlY3V0aW9uIG9mIHRoZSByaXBwbGUgZWZmZWN0LlxuXG5cbiAgICAgICAgc3RhcnRUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHN0YXJ0VGltZXJDb21taXQuY3VycmVudCkge1xuICAgICAgICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50KCk7XG4gICAgICAgICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgREVMQVlfUklQUExFKTsgLy8gV2UgaGF2ZSB0byBtYWtlIGEgdHJhZGVvZmYgd2l0aCB0aGlzIHZhbHVlLlxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdGFydENvbW1pdCh7XG4gICAgICAgIHB1bHNhdGU6IHB1bHNhdGUsXG4gICAgICAgIHJpcHBsZVg6IHJpcHBsZVgsXG4gICAgICAgIHJpcHBsZVk6IHJpcHBsZVksXG4gICAgICAgIHJpcHBsZVNpemU6IHJpcHBsZVNpemUsXG4gICAgICAgIGNiOiBjYlxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbY2VudGVyUHJvcCwgc3RhcnRDb21taXRdKTtcbiAgdmFyIHB1bHNhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgc3RhcnQoe30sIHtcbiAgICAgIHB1bHNhdGU6IHRydWVcbiAgICB9KTtcbiAgfSwgW3N0YXJ0XSk7XG4gIHZhciBzdG9wID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50LCBjYikge1xuICAgIGNsZWFyVGltZW91dChzdGFydFRpbWVyLmN1cnJlbnQpOyAvLyBUaGUgdG91Y2ggaW50ZXJhY3Rpb24gb2NjdXJzIHRvbyBxdWlja2x5LlxuICAgIC8vIFdlIHN0aWxsIHdhbnQgdG8gc2hvdyByaXBwbGUgZWZmZWN0LlxuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICd0b3VjaGVuZCcgJiYgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50KSB7XG4gICAgICBldmVudC5wZXJzaXN0KCk7XG4gICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQoKTtcbiAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9IG51bGw7XG4gICAgICBzdGFydFRpbWVyLmN1cnJlbnQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3RvcChldmVudCwgY2IpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gbnVsbDtcbiAgICBzZXRSaXBwbGVzKGZ1bmN0aW9uIChvbGRSaXBwbGVzKSB7XG4gICAgICBpZiAob2xkUmlwcGxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBvbGRSaXBwbGVzLnNsaWNlKDEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2xkUmlwcGxlcztcbiAgICB9KTtcbiAgICByaXBwbGVDYWxsYmFjay5jdXJyZW50ID0gY2I7XG4gIH0sIFtdKTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHVsc2F0ZTogcHVsc2F0ZSxcbiAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgIHN0b3A6IHN0b3BcbiAgICB9O1xuICB9LCBbcHVsc2F0ZSwgc3RhcnQsIHN0b3BdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IGNvbnRhaW5lclxuICB9LCBvdGhlciksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Hcm91cCwge1xuICAgIGNvbXBvbmVudDogbnVsbCxcbiAgICBleGl0OiB0cnVlXG4gIH0sIHJpcHBsZXMpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVG91Y2hSaXBwbGUucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIHN0YXJ0cyBhdCB0aGUgY2VudGVyIG9mIHRoZSBjb21wb25lbnRcbiAgICogcmF0aGVyIHRoYW4gYXQgdGhlIHBvaW50IG9mIGludGVyYWN0aW9uLlxuICAgKi9cbiAgY2VudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZ1xufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIGZsaXA6IGZhbHNlLFxuICBuYW1lOiAnTXVpVG91Y2hSaXBwbGUnXG59KSggLyojX19QVVJFX18qL1JlYWN0Lm1lbW8oVG91Y2hSaXBwbGUpKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYsIHJlZlR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdXNlRXZlbnRDYWxsYmFjayBmcm9tICcuLi91dGlscy91c2VFdmVudENhbGxiYWNrJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCB1c2VJc0ZvY3VzVmlzaWJsZSBmcm9tICcuLi91dGlscy91c2VJc0ZvY3VzVmlzaWJsZSc7XG5pbXBvcnQgVG91Y2hSaXBwbGUgZnJvbSAnLi9Ub3VjaFJpcHBsZSc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAvLyBSZXNldCBkZWZhdWx0IHZhbHVlXG4gICAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgICBvdXRsaW5lOiAwLFxuICAgIGJvcmRlcjogMCxcbiAgICBtYXJnaW46IDAsXG4gICAgLy8gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gU2FmYXJpXG4gICAgYm9yZGVyUmFkaXVzOiAwLFxuICAgIHBhZGRpbmc6IDAsXG4gICAgLy8gUmVtb3ZlIHRoZSBwYWRkaW5nIGluIEZpcmVmb3hcbiAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgJy1tb3otYXBwZWFyYW5jZSc6ICdub25lJyxcbiAgICAvLyBSZXNldFxuICAgICctd2Via2l0LWFwcGVhcmFuY2UnOiAnbm9uZScsXG4gICAgLy8gUmVzZXRcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgIC8vIFNvIHdlIHRha2UgcHJlY2VkZW50IG92ZXIgdGhlIHN0eWxlIG9mIGEgbmF0aXZlIDxhIC8+IGVsZW1lbnQuXG4gICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAnJjo6LW1vei1mb2N1cy1pbm5lcic6IHtcbiAgICAgIGJvcmRlclN0eWxlOiAnbm9uZScgLy8gUmVtb3ZlIEZpcmVmb3ggZG90dGVkIG91dGxpbmUuXG5cbiAgICB9LFxuICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgLy8gRGlzYWJsZSBsaW5rIGludGVyYWN0aW9uc1xuICAgICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgICB9LFxuICAgICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgICBjb2xvckFkanVzdDogJ2V4YWN0J1xuICAgIH1cbiAgfSxcblxuICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICBkaXNhYmxlZDoge30sXG5cbiAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBrZXlib2FyZCBmb2N1c2VkLiAqL1xuICBmb2N1c1Zpc2libGU6IHt9XG59O1xuLyoqXG4gKiBgQnV0dG9uQmFzZWAgY29udGFpbnMgYXMgZmV3IHN0eWxlcyBhcyBwb3NzaWJsZS5cbiAqIEl0IGFpbXMgdG8gYmUgYSBzaW1wbGUgYnVpbGRpbmcgYmxvY2sgZm9yIGNyZWF0aW5nIGEgYnV0dG9uLlxuICogSXQgY29udGFpbnMgYSBsb2FkIG9mIHN0eWxlIHJlc2V0IGFuZCBzb21lIGZvY3VzL3JpcHBsZSBsb2dpYy5cbiAqL1xuXG52YXIgQnV0dG9uQmFzZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJ1dHRvbkJhc2UocHJvcHMsIHJlZikge1xuICB2YXIgYWN0aW9uID0gcHJvcHMuYWN0aW9uLFxuICAgICAgYnV0dG9uUmVmUHJvcCA9IHByb3BzLmJ1dHRvblJlZixcbiAgICAgIF9wcm9wcyRjZW50ZXJSaXBwbGUgPSBwcm9wcy5jZW50ZXJSaXBwbGUsXG4gICAgICBjZW50ZXJSaXBwbGUgPSBfcHJvcHMkY2VudGVyUmlwcGxlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRjZW50ZXJSaXBwbGUsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2J1dHRvbicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBkaXNhYmxlZCA9IF9wcm9wcyRkaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZWQsXG4gICAgICBfcHJvcHMkZGlzYWJsZVJpcHBsZSA9IHByb3BzLmRpc2FibGVSaXBwbGUsXG4gICAgICBkaXNhYmxlUmlwcGxlID0gX3Byb3BzJGRpc2FibGVSaXBwbGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVSaXBwbGUsXG4gICAgICBfcHJvcHMkZGlzYWJsZVRvdWNoUmkgPSBwcm9wcy5kaXNhYmxlVG91Y2hSaXBwbGUsXG4gICAgICBkaXNhYmxlVG91Y2hSaXBwbGUgPSBfcHJvcHMkZGlzYWJsZVRvdWNoUmkgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVUb3VjaFJpLFxuICAgICAgX3Byb3BzJGZvY3VzUmlwcGxlID0gcHJvcHMuZm9jdXNSaXBwbGUsXG4gICAgICBmb2N1c1JpcHBsZSA9IF9wcm9wcyRmb2N1c1JpcHBsZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZm9jdXNSaXBwbGUsXG4gICAgICBmb2N1c1Zpc2libGVDbGFzc05hbWUgPSBwcm9wcy5mb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgICBvbkJsdXIgPSBwcm9wcy5vbkJsdXIsXG4gICAgICBvbkNsaWNrID0gcHJvcHMub25DbGljayxcbiAgICAgIG9uRm9jdXMgPSBwcm9wcy5vbkZvY3VzLFxuICAgICAgb25Gb2N1c1Zpc2libGUgPSBwcm9wcy5vbkZvY3VzVmlzaWJsZSxcbiAgICAgIG9uS2V5RG93biA9IHByb3BzLm9uS2V5RG93bixcbiAgICAgIG9uS2V5VXAgPSBwcm9wcy5vbktleVVwLFxuICAgICAgb25Nb3VzZURvd24gPSBwcm9wcy5vbk1vdXNlRG93bixcbiAgICAgIG9uTW91c2VMZWF2ZSA9IHByb3BzLm9uTW91c2VMZWF2ZSxcbiAgICAgIG9uTW91c2VVcCA9IHByb3BzLm9uTW91c2VVcCxcbiAgICAgIG9uVG91Y2hFbmQgPSBwcm9wcy5vblRvdWNoRW5kLFxuICAgICAgb25Ub3VjaE1vdmUgPSBwcm9wcy5vblRvdWNoTW92ZSxcbiAgICAgIG9uVG91Y2hTdGFydCA9IHByb3BzLm9uVG91Y2hTdGFydCxcbiAgICAgIG9uRHJhZ0xlYXZlID0gcHJvcHMub25EcmFnTGVhdmUsXG4gICAgICBfcHJvcHMkdGFiSW5kZXggPSBwcm9wcy50YWJJbmRleCxcbiAgICAgIHRhYkluZGV4ID0gX3Byb3BzJHRhYkluZGV4ID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJHRhYkluZGV4LFxuICAgICAgVG91Y2hSaXBwbGVQcm9wcyA9IHByb3BzLlRvdWNoUmlwcGxlUHJvcHMsXG4gICAgICBfcHJvcHMkdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICB0eXBlID0gX3Byb3BzJHR5cGUgPT09IHZvaWQgMCA/ICdidXR0b24nIDogX3Byb3BzJHR5cGUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYWN0aW9uXCIsIFwiYnV0dG9uUmVmXCIsIFwiY2VudGVyUmlwcGxlXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlUmlwcGxlXCIsIFwiZGlzYWJsZVRvdWNoUmlwcGxlXCIsIFwiZm9jdXNSaXBwbGVcIiwgXCJmb2N1c1Zpc2libGVDbGFzc05hbWVcIiwgXCJvbkJsdXJcIiwgXCJvbkNsaWNrXCIsIFwib25Gb2N1c1wiLCBcIm9uRm9jdXNWaXNpYmxlXCIsIFwib25LZXlEb3duXCIsIFwib25LZXlVcFwiLCBcIm9uTW91c2VEb3duXCIsIFwib25Nb3VzZUxlYXZlXCIsIFwib25Nb3VzZVVwXCIsIFwib25Ub3VjaEVuZFwiLCBcIm9uVG91Y2hNb3ZlXCIsIFwib25Ub3VjaFN0YXJ0XCIsIFwib25EcmFnTGVhdmVcIiwgXCJ0YWJJbmRleFwiLCBcIlRvdWNoUmlwcGxlUHJvcHNcIiwgXCJ0eXBlXCJdKTtcblxuICB2YXIgYnV0dG9uUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuXG4gIGZ1bmN0aW9uIGdldEJ1dHRvbk5vZGUoKSB7XG4gICAgLy8gI1N0cmljdE1vZGUgcmVhZHlcbiAgICByZXR1cm4gUmVhY3RET00uZmluZERPTU5vZGUoYnV0dG9uUmVmLmN1cnJlbnQpO1xuICB9XG5cbiAgdmFyIHJpcHBsZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgZm9jdXNWaXNpYmxlID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0Rm9jdXNWaXNpYmxlID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIGlmIChkaXNhYmxlZCAmJiBmb2N1c1Zpc2libGUpIHtcbiAgICBzZXRGb2N1c1Zpc2libGUoZmFsc2UpO1xuICB9XG5cbiAgdmFyIF91c2VJc0ZvY3VzVmlzaWJsZSA9IHVzZUlzRm9jdXNWaXNpYmxlKCksXG4gICAgICBpc0ZvY3VzVmlzaWJsZSA9IF91c2VJc0ZvY3VzVmlzaWJsZS5pc0ZvY3VzVmlzaWJsZSxcbiAgICAgIG9uQmx1clZpc2libGUgPSBfdXNlSXNGb2N1c1Zpc2libGUub25CbHVyVmlzaWJsZSxcbiAgICAgIGZvY3VzVmlzaWJsZVJlZiA9IF91c2VJc0ZvY3VzVmlzaWJsZS5yZWY7XG5cbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShhY3Rpb24sIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9jdXNWaXNpYmxlOiBmdW5jdGlvbiBmb2N1c1Zpc2libGUoKSB7XG4gICAgICAgIHNldEZvY3VzVmlzaWJsZSh0cnVlKTtcbiAgICAgICAgYnV0dG9uUmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGZvY3VzVmlzaWJsZSAmJiBmb2N1c1JpcHBsZSAmJiAhZGlzYWJsZVJpcHBsZSkge1xuICAgICAgcmlwcGxlUmVmLmN1cnJlbnQucHVsc2F0ZSgpO1xuICAgIH1cbiAgfSwgW2Rpc2FibGVSaXBwbGUsIGZvY3VzUmlwcGxlLCBmb2N1c1Zpc2libGVdKTtcblxuICBmdW5jdGlvbiB1c2VSaXBwbGVIYW5kbGVyKHJpcHBsZUFjdGlvbiwgZXZlbnRDYWxsYmFjaykge1xuICAgIHZhciBza2lwUmlwcGxlQWN0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBkaXNhYmxlVG91Y2hSaXBwbGU7XG4gICAgcmV0dXJuIHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnRDYWxsYmFjaykge1xuICAgICAgICBldmVudENhbGxiYWNrKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGlnbm9yZSA9IHNraXBSaXBwbGVBY3Rpb247XG5cbiAgICAgIGlmICghaWdub3JlICYmIHJpcHBsZVJlZi5jdXJyZW50KSB7XG4gICAgICAgIHJpcHBsZVJlZi5jdXJyZW50W3JpcHBsZUFjdGlvbl0oZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBoYW5kbGVNb3VzZURvd24gPSB1c2VSaXBwbGVIYW5kbGVyKCdzdGFydCcsIG9uTW91c2VEb3duKTtcbiAgdmFyIGhhbmRsZURyYWdMZWF2ZSA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvbkRyYWdMZWF2ZSk7XG4gIHZhciBoYW5kbGVNb3VzZVVwID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uTW91c2VVcCk7XG4gIHZhciBoYW5kbGVNb3VzZUxlYXZlID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChmb2N1c1Zpc2libGUpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKG9uTW91c2VMZWF2ZSkge1xuICAgICAgb25Nb3VzZUxlYXZlKGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuICB2YXIgaGFuZGxlVG91Y2hTdGFydCA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0YXJ0Jywgb25Ub3VjaFN0YXJ0KTtcbiAgdmFyIGhhbmRsZVRvdWNoRW5kID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uVG91Y2hFbmQpO1xuICB2YXIgaGFuZGxlVG91Y2hNb3ZlID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uVG91Y2hNb3ZlKTtcbiAgdmFyIGhhbmRsZUJsdXIgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGZvY3VzVmlzaWJsZSkge1xuICAgICAgb25CbHVyVmlzaWJsZShldmVudCk7XG4gICAgICBzZXRGb2N1c1Zpc2libGUoZmFsc2UpO1xuICAgIH1cblxuICAgIGlmIChvbkJsdXIpIHtcbiAgICAgIG9uQmx1cihldmVudCk7XG4gICAgfVxuICB9LCBmYWxzZSk7XG4gIHZhciBoYW5kbGVGb2N1cyA9IHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gRml4IGZvciBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzc3NjlcbiAgICBpZiAoIWJ1dHRvblJlZi5jdXJyZW50KSB7XG4gICAgICBidXR0b25SZWYuY3VycmVudCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG4gICAgfVxuXG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlKGV2ZW50KSkge1xuICAgICAgc2V0Rm9jdXNWaXNpYmxlKHRydWUpO1xuXG4gICAgICBpZiAob25Gb2N1c1Zpc2libGUpIHtcbiAgICAgICAgb25Gb2N1c1Zpc2libGUoZXZlbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvbkZvY3VzKSB7XG4gICAgICBvbkZvY3VzKGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBpc05vbk5hdGl2ZUJ1dHRvbiA9IGZ1bmN0aW9uIGlzTm9uTmF0aXZlQnV0dG9uKCkge1xuICAgIHZhciBidXR0b24gPSBnZXRCdXR0b25Ob2RlKCk7XG4gICAgcmV0dXJuIGNvbXBvbmVudCAmJiBjb21wb25lbnQgIT09ICdidXR0b24nICYmICEoYnV0dG9uLnRhZ05hbWUgPT09ICdBJyAmJiBidXR0b24uaHJlZik7XG4gIH07XG4gIC8qKlxuICAgKiBJRSAxMSBzaGltIGZvciBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudC9yZXBlYXRcbiAgICovXG5cblxuICB2YXIga2V5ZG93blJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIHZhciBoYW5kbGVLZXlEb3duID0gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBDaGVjayBpZiBrZXkgaXMgYWxyZWFkeSBkb3duIHRvIGF2b2lkIHJlcGVhdHMgYmVpbmcgY291bnRlZCBhcyBtdWx0aXBsZSBhY3RpdmF0aW9uc1xuICAgIGlmIChmb2N1c1JpcHBsZSAmJiAha2V5ZG93blJlZi5jdXJyZW50ICYmIGZvY3VzVmlzaWJsZSAmJiByaXBwbGVSZWYuY3VycmVudCAmJiBldmVudC5rZXkgPT09ICcgJykge1xuICAgICAga2V5ZG93blJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgIGV2ZW50LnBlcnNpc3QoKTtcbiAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnN0b3AoZXZlbnQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmlwcGxlUmVmLmN1cnJlbnQuc3RhcnQoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gZXZlbnQuY3VycmVudFRhcmdldCAmJiBpc05vbk5hdGl2ZUJ1dHRvbigpICYmIGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGlmIChvbktleURvd24pIHtcbiAgICAgIG9uS2V5RG93bihldmVudCk7XG4gICAgfSAvLyBLZXlib2FyZCBhY2Nlc3NpYmlsaXR5IGZvciBub24gaW50ZXJhY3RpdmUgZWxlbWVudHNcblxuXG4gICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gZXZlbnQuY3VycmVudFRhcmdldCAmJiBpc05vbk5hdGl2ZUJ1dHRvbigpICYmIGV2ZW50LmtleSA9PT0gJ0VudGVyJyAmJiAhZGlzYWJsZWQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICAgIG9uQ2xpY2soZXZlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHZhciBoYW5kbGVLZXlVcCA9IHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gY2FsbGluZyBwcmV2ZW50RGVmYXVsdCBpbiBrZXlVcCBvbiBhIDxidXR0b24+IHdpbGwgbm90IGRpc3BhdGNoIGEgY2xpY2sgZXZlbnQgaWYgU3BhY2UgaXMgcHJlc3NlZFxuICAgIC8vIGh0dHBzOi8vY29kZXNhbmRib3guaW8vcy9idXR0b24ta2V5dXAtcHJldmVudGRlZmF1bHQtZG43ZjBcbiAgICBpZiAoZm9jdXNSaXBwbGUgJiYgZXZlbnQua2V5ID09PSAnICcgJiYgcmlwcGxlUmVmLmN1cnJlbnQgJiYgZm9jdXNWaXNpYmxlICYmICFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICBrZXlkb3duUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIGV2ZW50LnBlcnNpc3QoKTtcbiAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnN0b3AoZXZlbnQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmlwcGxlUmVmLmN1cnJlbnQucHVsc2F0ZShldmVudCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAob25LZXlVcCkge1xuICAgICAgb25LZXlVcChldmVudCk7XG4gICAgfSAvLyBLZXlib2FyZCBhY2Nlc3NpYmlsaXR5IGZvciBub24gaW50ZXJhY3RpdmUgZWxlbWVudHNcblxuXG4gICAgaWYgKG9uQ2xpY2sgJiYgZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICYmIGlzTm9uTmF0aXZlQnV0dG9uKCkgJiYgZXZlbnQua2V5ID09PSAnICcgJiYgIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIG9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBDb21wb25lbnRQcm9wID0gY29tcG9uZW50O1xuXG4gIGlmIChDb21wb25lbnRQcm9wID09PSAnYnV0dG9uJyAmJiBvdGhlci5ocmVmKSB7XG4gICAgQ29tcG9uZW50UHJvcCA9ICdhJztcbiAgfVxuXG4gIHZhciBidXR0b25Qcm9wcyA9IHt9O1xuXG4gIGlmIChDb21wb25lbnRQcm9wID09PSAnYnV0dG9uJykge1xuICAgIGJ1dHRvblByb3BzLnR5cGUgPSB0eXBlO1xuICAgIGJ1dHRvblByb3BzLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKENvbXBvbmVudFByb3AgIT09ICdhJyB8fCAhb3RoZXIuaHJlZikge1xuICAgICAgYnV0dG9uUHJvcHMucm9sZSA9ICdidXR0b24nO1xuICAgIH1cblxuICAgIGJ1dHRvblByb3BzWydhcmlhLWRpc2FibGVkJ10gPSBkaXNhYmxlZDtcbiAgfVxuXG4gIHZhciBoYW5kbGVVc2VyUmVmID0gdXNlRm9ya1JlZihidXR0b25SZWZQcm9wLCByZWYpO1xuICB2YXIgaGFuZGxlT3duUmVmID0gdXNlRm9ya1JlZihmb2N1c1Zpc2libGVSZWYsIGJ1dHRvblJlZik7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGhhbmRsZVVzZXJSZWYsIGhhbmRsZU93blJlZik7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZTIgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksXG4gICAgICBtb3VudGVkU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0TW91bnRlZFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHNldE1vdW50ZWRTdGF0ZSh0cnVlKTtcbiAgfSwgW10pO1xuICB2YXIgZW5hYmxlVG91Y2hSaXBwbGUgPSBtb3VudGVkU3RhdGUgJiYgIWRpc2FibGVSaXBwbGUgJiYgIWRpc2FibGVkO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChlbmFibGVUb3VjaFJpcHBsZSAmJiAhcmlwcGxlUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBUaGUgYGNvbXBvbmVudGAgcHJvcCBwcm92aWRlZCB0byBCdXR0b25CYXNlIGlzIGludmFsaWQuJywgJ1BsZWFzZSBtYWtlIHN1cmUgdGhlIGNoaWxkcmVuIHByb3AgaXMgcmVuZGVyZWQgaW4gdGhpcyBjdXN0b20gY29tcG9uZW50LiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9LCBbZW5hYmxlVG91Y2hSaXBwbGVdKTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnRQcm9wLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBmb2N1c1Zpc2libGUgJiYgW2NsYXNzZXMuZm9jdXNWaXNpYmxlLCBmb2N1c1Zpc2libGVDbGFzc05hbWVdLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkKSxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICBvbkZvY3VzOiBoYW5kbGVGb2N1cyxcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgb25LZXlVcDogaGFuZGxlS2V5VXAsXG4gICAgb25Nb3VzZURvd246IGhhbmRsZU1vdXNlRG93bixcbiAgICBvbk1vdXNlTGVhdmU6IGhhbmRsZU1vdXNlTGVhdmUsXG4gICAgb25Nb3VzZVVwOiBoYW5kbGVNb3VzZVVwLFxuICAgIG9uRHJhZ0xlYXZlOiBoYW5kbGVEcmFnTGVhdmUsXG4gICAgb25Ub3VjaEVuZDogaGFuZGxlVG91Y2hFbmQsXG4gICAgb25Ub3VjaE1vdmU6IGhhbmRsZVRvdWNoTW92ZSxcbiAgICBvblRvdWNoU3RhcnQ6IGhhbmRsZVRvdWNoU3RhcnQsXG4gICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgdGFiSW5kZXg6IGRpc2FibGVkID8gLTEgOiB0YWJJbmRleFxuICB9LCBidXR0b25Qcm9wcywgb3RoZXIpLCBjaGlsZHJlbiwgZW5hYmxlVG91Y2hSaXBwbGUgP1xuICAvKiNfX1BVUkVfXyovXG5cbiAgLyogVG91Y2hSaXBwbGUgaXMgb25seSBuZWVkZWQgY2xpZW50LXNpZGUsIHgyIGJvb3N0IG9uIHRoZSBzZXJ2ZXIuICovXG4gIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVG91Y2hSaXBwbGUsIF9leHRlbmRzKHtcbiAgICByZWY6IHJpcHBsZVJlZixcbiAgICBjZW50ZXI6IGNlbnRlclJpcHBsZVxuICB9LCBUb3VjaFJpcHBsZVByb3BzKSkgOiBudWxsKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQnV0dG9uQmFzZS5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBIHJlZiBmb3IgaW1wZXJhdGl2ZSBhY3Rpb25zLlxuICAgKiBJdCBjdXJyZW50bHkgb25seSBzdXBwb3J0cyBgZm9jdXNWaXNpYmxlKClgIGFjdGlvbi5cbiAgICovXG4gIGFjdGlvbjogcmVmVHlwZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKlxuICAgKiBVc2UgdGhhdCBwcm9wIHRvIHBhc3MgYSByZWYgdG8gdGhlIG5hdGl2ZSBidXR0b24gY29tcG9uZW50LlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgYHJlZmAgaW5zdGVhZC5cbiAgICovXG4gIGJ1dHRvblJlZjogcmVmVHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlcyB3aWxsIGJlIGNlbnRlcmVkLlxuICAgKiBUaGV5IHdvbid0IHN0YXJ0IGF0IHRoZSBjdXJzb3IgaW50ZXJhY3Rpb24gcG9zaXRpb24uXG4gICAqL1xuICBjZW50ZXJSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZixcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFzZSBidXR0b24gd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIGVmZmVjdCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKlxuICAgKiDimqDvuI8gV2l0aG91dCBhIHJpcHBsZSB0aGVyZSBpcyBubyBzdHlsaW5nIGZvciA6Zm9jdXMtdmlzaWJsZSBieSBkZWZhdWx0LiBCZSBzdXJlXG4gICAqIHRvIGhpZ2hsaWdodCB0aGUgZWxlbWVudCBieSBhcHBseWluZyBzZXBhcmF0ZSBzdHlsZXMgd2l0aCB0aGUgYGZvY3VzVmlzaWJsZUNsYXNzTmFtZWAuXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdG91Y2ggcmlwcGxlIGVmZmVjdCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZVRvdWNoUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFzZSBidXR0b24gd2lsbCBoYXZlIGEga2V5Ym9hcmQgZm9jdXMgcmlwcGxlLlxuICAgKi9cbiAgZm9jdXNSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgY2FuIGhlbHAgYSBwZXJzb24ga25vdyB3aGljaCBlbGVtZW50IGhhcyB0aGUga2V5Ym9hcmQgZm9jdXMuXG4gICAqIFRoZSBjbGFzcyBuYW1lIHdpbGwgYmUgYXBwbGllZCB3aGVuIHRoZSBlbGVtZW50IGdhaW4gdGhlIGZvY3VzIHRocm91Z2ggYSBrZXlib2FyZCBpbnRlcmFjdGlvbi5cbiAgICogSXQncyBhIHBvbHlmaWxsIGZvciB0aGUgW0NTUyA6Zm9jdXMtdmlzaWJsZSBzZWxlY3Rvcl0oaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL3NlbGVjdG9ycy00LyN0aGUtZm9jdXMtdmlzaWJsZS1wc2V1ZG8pLlxuICAgKiBUaGUgcmF0aW9uYWxlIGZvciB1c2luZyB0aGlzIGZlYXR1cmUgW2lzIGV4cGxhaW5lZCBoZXJlXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlL2Jsb2IvbWFzdGVyL2V4cGxhaW5lci5tZCkuXG4gICAqIEEgW3BvbHlmaWxsIGNhbiBiZSB1c2VkXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlKSB0byBhcHBseSBhIGBmb2N1cy12aXNpYmxlYCBjbGFzcyB0byBvdGhlciBjb21wb25lbnRzXG4gICAqIGlmIG5lZWRlZC5cbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgaHJlZjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRHJhZ0xlYXZlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBmb2N1c2VkIHdpdGggYSBrZXlib2FyZC5cbiAgICogV2UgdHJpZ2dlciBhIGBvbkZvY3VzYCBjYWxsYmFjayB0b28uXG4gICAqL1xuICBvbkZvY3VzVmlzaWJsZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5VXA6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlRG93bjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VVcDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hFbmQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoTW92ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hTdGFydDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIGBUb3VjaFJpcHBsZWAgZWxlbWVudC5cbiAgICovXG4gIFRvdWNoUmlwcGxlUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2J1dHRvbicsICdyZXNldCcsICdzdWJtaXQnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlCdXR0b25CYXNlJ1xufSkoQnV0dG9uQmFzZSk7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgZmFkZSB9IGZyb20gJy4uL3N0eWxlcy9jb2xvck1hbmlwdWxhdG9yJztcbmltcG9ydCBCdXR0b25CYXNlIGZyb20gJy4uL0J1dHRvbkJhc2UnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYnV0dG9uLCB7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIG1pbldpZHRoOiA2NCxcbiAgICAgIHBhZGRpbmc6ICc2cHggMTZweCcsXG4gICAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ2JhY2tncm91bmQtY29sb3InLCAnYm94LXNoYWRvdycsICdib3JkZXInXSwge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRcbiAgICAgIH0pLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9LFxuICAgICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICAgIH1cbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBzcGFuIGVsZW1lbnQgdGhhdCB3cmFwcyB0aGUgY2hpbGRyZW4uICovXG4gICAgbGFiZWw6IHtcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAvLyBFbnN1cmUgdGhlIGNvcnJlY3Qgd2lkdGggZm9yIGlPUyBTYWZhcmlcbiAgICAgIGRpc3BsYXk6ICdpbmhlcml0JyxcbiAgICAgIGFsaWduSXRlbXM6ICdpbmhlcml0JyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInRleHRcImAuICovXG4gICAgdGV4dDoge1xuICAgICAgcGFkZGluZzogJzZweCA4cHgnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJ0ZXh0XCJgIGFuZCBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIHRleHRQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInRleHRcImAgYW5kIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICB0ZXh0U2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYC4gKi9cbiAgICBvdXRsaW5lZDoge1xuICAgICAgcGFkZGluZzogJzVweCAxNXB4JyxcbiAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/ICdyZ2JhKDAsIDAsIDAsIDAuMjMpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjMpJyksXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRCYWNrZ3JvdW5kKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwib3V0bGluZWRcImAgYW5kIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgb3V0bGluZWRQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChmYWRlKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCAwLjUpKSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiksXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYCBhbmQgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIG91dGxpbmVkU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KGZhZGUodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbiwgMC41KSksXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbiksXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWQpXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJjb250YWluZWRcImAuICovXG4gICAgY29udGFpbmVkOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5nZXRDb250cmFzdFRleHQodGhlbWUucGFsZXR0ZS5ncmV5WzMwMF0pLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXlbMzAwXSxcbiAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1syXSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuZ3JleS5BMTAwLFxuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbNF0sXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbMl0sXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXlbMzAwXVxuICAgICAgICB9LFxuICAgICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkQmFja2dyb3VuZFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyYkZm9jdXNWaXNpYmxlJzoge1xuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbNl1cbiAgICAgIH0sXG4gICAgICAnJjphY3RpdmUnOiB7XG4gICAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1s4XVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWQsXG4gICAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1swXSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZEJhY2tncm91bmRcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImNvbnRhaW5lZFwiYCBhbmQgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb250YWluZWRQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5LmNvbnRyYXN0VGV4dCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkuZGFyayxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiY29udGFpbmVkXCJgIGFuZCBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29udGFpbmVkU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkuY29udHJhc3RUZXh0LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkuZGFyayxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVFbGV2YXRpb249e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlRWxldmF0aW9uOiB7XG4gICAgICBib3hTaGFkb3c6ICdub25lJyxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBib3hTaGFkb3c6ICdub25lJ1xuICAgICAgfSxcbiAgICAgICcmJGZvY3VzVmlzaWJsZSc6IHtcbiAgICAgICAgYm94U2hhZG93OiAnbm9uZSdcbiAgICAgIH0sXG4gICAgICAnJjphY3RpdmUnOiB7XG4gICAgICAgIGJveFNoYWRvdzogJ25vbmUnXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGJveFNoYWRvdzogJ25vbmUnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSBCdXR0b25CYXNlIHJvb3QgZWxlbWVudCBpZiB0aGUgYnV0dG9uIGlzIGtleWJvYXJkIGZvY3VzZWQuICovXG4gICAgZm9jdXNWaXNpYmxlOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJpbmhlcml0XCJgLiAqL1xuICAgIGNvbG9ySW5oZXJpdDoge1xuICAgICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAgIGJvcmRlckNvbG9yOiAnY3VycmVudENvbG9yJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwic21hbGxcImAgYW5kIGB2YXJpYW50PVwidGV4dFwiYC4gKi9cbiAgICB0ZXh0U2l6ZVNtYWxsOiB7XG4gICAgICBwYWRkaW5nOiAnNHB4IDVweCcsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEzKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwibGFyZ2VcImAgYW5kIGB2YXJpYW50PVwidGV4dFwiYC4gKi9cbiAgICB0ZXh0U2l6ZUxhcmdlOiB7XG4gICAgICBwYWRkaW5nOiAnOHB4IDExcHgnLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cInNtYWxsXCJgIGFuZCBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIG91dGxpbmVkU2l6ZVNtYWxsOiB7XG4gICAgICBwYWRkaW5nOiAnM3B4IDlweCcsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEzKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwibGFyZ2VcImAgYW5kIGB2YXJpYW50PVwib3V0bGluZWRcImAuICovXG4gICAgb3V0bGluZWRTaXplTGFyZ2U6IHtcbiAgICAgIHBhZGRpbmc6ICc3cHggMjFweCcsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE1KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwic21hbGxcImAgYW5kIGB2YXJpYW50PVwiY29udGFpbmVkXCJgLiAqL1xuICAgIGNvbnRhaW5lZFNpemVTbWFsbDoge1xuICAgICAgcGFkZGluZzogJzRweCAxMHB4JyxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTMpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNpemU9XCJsYXJnZVwiYCBhbmQgYHZhcmlhbnQ9XCJjb250YWluZWRcImAuICovXG4gICAgY29udGFpbmVkU2l6ZUxhcmdlOiB7XG4gICAgICBwYWRkaW5nOiAnOHB4IDIycHgnLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cInNtYWxsXCJgLiAqL1xuICAgIHNpemVTbWFsbDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwibGFyZ2VcImAuICovXG4gICAgc2l6ZUxhcmdlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZ1bGxXaWR0aD17dHJ1ZX1gLiAqL1xuICAgIGZ1bGxXaWR0aDoge1xuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgc3RhcnRJY29uIGVsZW1lbnQgaWYgc3VwcGxpZWQuICovXG4gICAgc3RhcnRJY29uOiB7XG4gICAgICBkaXNwbGF5OiAnaW5oZXJpdCcsXG4gICAgICBtYXJnaW5SaWdodDogOCxcbiAgICAgIG1hcmdpbkxlZnQ6IC00LFxuICAgICAgJyYkaWNvblNpemVTbWFsbCc6IHtcbiAgICAgICAgbWFyZ2luTGVmdDogLTJcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGVuZEljb24gZWxlbWVudCBpZiBzdXBwbGllZC4gKi9cbiAgICBlbmRJY29uOiB7XG4gICAgICBkaXNwbGF5OiAnaW5oZXJpdCcsXG4gICAgICBtYXJnaW5SaWdodDogLTQsXG4gICAgICBtYXJnaW5MZWZ0OiA4LFxuICAgICAgJyYkaWNvblNpemVTbWFsbCc6IHtcbiAgICAgICAgbWFyZ2luUmlnaHQ6IC0yXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpY29uIGVsZW1lbnQgaWYgc3VwcGxpZWQgYW5kIGBzaXplPVwic21hbGxcImAuICovXG4gICAgaWNvblNpemVTbWFsbDoge1xuICAgICAgJyYgPiAqOmZpcnN0LWNoaWxkJzoge1xuICAgICAgICBmb250U2l6ZTogMThcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGljb24gZWxlbWVudCBpZiBzdXBwbGllZCBhbmQgYHNpemU9XCJtZWRpdW1cImAuICovXG4gICAgaWNvblNpemVNZWRpdW06IHtcbiAgICAgICcmID4gKjpmaXJzdC1jaGlsZCc6IHtcbiAgICAgICAgZm9udFNpemU6IDIwXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpY29uIGVsZW1lbnQgaWYgc3VwcGxpZWQgYW5kIGBzaXplPVwibGFyZ2VcImAuICovXG4gICAgaWNvblNpemVMYXJnZToge1xuICAgICAgJyYgPiAqOmZpcnN0LWNoaWxkJzoge1xuICAgICAgICBmb250U2l6ZTogMjJcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xudmFyIEJ1dHRvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJ1dHRvbihwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAnZGVmYXVsdCcgOiBfcHJvcHMkY29sb3IsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2J1dHRvbicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBkaXNhYmxlZCA9IF9wcm9wcyRkaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZWQsXG4gICAgICBfcHJvcHMkZGlzYWJsZUVsZXZhdGkgPSBwcm9wcy5kaXNhYmxlRWxldmF0aW9uLFxuICAgICAgZGlzYWJsZUVsZXZhdGlvbiA9IF9wcm9wcyRkaXNhYmxlRWxldmF0aSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUVsZXZhdGksXG4gICAgICBfcHJvcHMkZGlzYWJsZUZvY3VzUmkgPSBwcm9wcy5kaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgICBkaXNhYmxlRm9jdXNSaXBwbGUgPSBfcHJvcHMkZGlzYWJsZUZvY3VzUmkgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVGb2N1c1JpLFxuICAgICAgZW5kSWNvblByb3AgPSBwcm9wcy5lbmRJY29uLFxuICAgICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lID0gcHJvcHMuZm9jdXNWaXNpYmxlQ2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGZ1bGxXaWR0aCA9IHByb3BzLmZ1bGxXaWR0aCxcbiAgICAgIGZ1bGxXaWR0aCA9IF9wcm9wcyRmdWxsV2lkdGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZ1bGxXaWR0aCxcbiAgICAgIF9wcm9wcyRzaXplID0gcHJvcHMuc2l6ZSxcbiAgICAgIHNpemUgPSBfcHJvcHMkc2l6ZSA9PT0gdm9pZCAwID8gJ21lZGl1bScgOiBfcHJvcHMkc2l6ZSxcbiAgICAgIHN0YXJ0SWNvblByb3AgPSBwcm9wcy5zdGFydEljb24sXG4gICAgICBfcHJvcHMkdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICB0eXBlID0gX3Byb3BzJHR5cGUgPT09IHZvaWQgMCA/ICdidXR0b24nIDogX3Byb3BzJHR5cGUsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICd0ZXh0JyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlRWxldmF0aW9uXCIsIFwiZGlzYWJsZUZvY3VzUmlwcGxlXCIsIFwiZW5kSWNvblwiLCBcImZvY3VzVmlzaWJsZUNsYXNzTmFtZVwiLCBcImZ1bGxXaWR0aFwiLCBcInNpemVcIiwgXCJzdGFydEljb25cIiwgXCJ0eXBlXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIHN0YXJ0SWNvbiA9IHN0YXJ0SWNvblByb3AgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5zdGFydEljb24sIGNsYXNzZXNbXCJpY29uU2l6ZVwiLmNvbmNhdChjYXBpdGFsaXplKHNpemUpKV0pXG4gIH0sIHN0YXJ0SWNvblByb3ApO1xuICB2YXIgZW5kSWNvbiA9IGVuZEljb25Qcm9wICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuZW5kSWNvbiwgY2xhc3Nlc1tcImljb25TaXplXCIuY29uY2F0KGNhcGl0YWxpemUoc2l6ZSkpXSlcbiAgfSwgZW5kSWNvblByb3ApO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uQmFzZSwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXNbdmFyaWFudF0sIGNsYXNzTmFtZSwgY29sb3IgPT09ICdpbmhlcml0JyA/IGNsYXNzZXMuY29sb3JJbmhlcml0IDogY29sb3IgIT09ICdkZWZhdWx0JyAmJiBjbGFzc2VzW1wiXCIuY29uY2F0KHZhcmlhbnQpLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBzaXplICE9PSAnbWVkaXVtJyAmJiBbY2xhc3Nlc1tcIlwiLmNvbmNhdCh2YXJpYW50LCBcIlNpemVcIikuY29uY2F0KGNhcGl0YWxpemUoc2l6ZSkpXSwgY2xhc3Nlc1tcInNpemVcIi5jb25jYXQoY2FwaXRhbGl6ZShzaXplKSldXSwgZGlzYWJsZUVsZXZhdGlvbiAmJiBjbGFzc2VzLmRpc2FibGVFbGV2YXRpb24sIGRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQsIGZ1bGxXaWR0aCAmJiBjbGFzc2VzLmZ1bGxXaWR0aCksXG4gICAgY29tcG9uZW50OiBjb21wb25lbnQsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIGZvY3VzUmlwcGxlOiAhZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmZvY3VzVmlzaWJsZSwgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZixcbiAgICB0eXBlOiB0eXBlXG4gIH0sIG90aGVyKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMubGFiZWxcbiAgfSwgc3RhcnRJY29uLCBjaGlsZHJlbiwgZW5kSWNvbikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCdXR0b24ucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGJ1dHRvbi5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBidXR0b24gd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBubyBlbGV2YXRpb24gaXMgdXNlZC5cbiAgICovXG4gIGRpc2FibGVFbGV2YXRpb246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSAga2V5Ym9hcmQgZm9jdXMgcmlwcGxlIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlRm9jdXNSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqXG4gICAqIOKaoO+4jyBXaXRob3V0IGEgcmlwcGxlIHRoZXJlIGlzIG5vIHN0eWxpbmcgZm9yIDpmb2N1cy12aXNpYmxlIGJ5IGRlZmF1bHQuIEJlIHN1cmVcbiAgICogdG8gaGlnaGxpZ2h0IHRoZSBlbGVtZW50IGJ5IGFwcGx5aW5nIHNlcGFyYXRlIHN0eWxlcyB3aXRoIHRoZSBgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lYC5cbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbGVtZW50IHBsYWNlZCBhZnRlciB0aGUgY2hpbGRyZW4uXG4gICAqL1xuICBlbmRJY29uOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBidXR0b24gd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgVVJMIHRvIGxpbmsgdG8gd2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQuXG4gICAqIElmIGRlZmluZWQsIGFuIGBhYCBlbGVtZW50IHdpbGwgYmUgdXNlZCBhcyB0aGUgcm9vdCBub2RlLlxuICAgKi9cbiAgaHJlZjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGJ1dHRvbi5cbiAgICogYHNtYWxsYCBpcyBlcXVpdmFsZW50IHRvIHRoZSBkZW5zZSBidXR0b24gc3R5bGluZy5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ2xhcmdlJywgJ21lZGl1bScsICdzbWFsbCddKSxcblxuICAvKipcbiAgICogRWxlbWVudCBwbGFjZWQgYmVmb3JlIHRoZSBjaGlsZHJlbi5cbiAgICovXG4gIHN0YXJ0SWNvbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2J1dHRvbicsICdyZXNldCcsICdzdWJtaXQnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnY29udGFpbmVkJywgJ291dGxpbmVkJywgJ3RleHQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQnV0dG9uJ1xufSkoQnV0dG9uKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBtYXJnaW46IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImJvZHkyXCJgLiAqL1xuICAgIGJvZHkyOiB0aGVtZS50eXBvZ3JhcGh5LmJvZHkyLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImJvZHkxXCJgLiAqL1xuICAgIGJvZHkxOiB0aGVtZS50eXBvZ3JhcGh5LmJvZHkxLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImNhcHRpb25cImAuICovXG4gICAgY2FwdGlvbjogdGhlbWUudHlwb2dyYXBoeS5jYXB0aW9uLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImJ1dHRvblwiYC4gKi9cbiAgICBidXR0b246IHRoZW1lLnR5cG9ncmFwaHkuYnV0dG9uLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImgxXCJgLiAqL1xuICAgIGgxOiB0aGVtZS50eXBvZ3JhcGh5LmgxLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImgyXCJgLiAqL1xuICAgIGgyOiB0aGVtZS50eXBvZ3JhcGh5LmgyLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImgzXCJgLiAqL1xuICAgIGgzOiB0aGVtZS50eXBvZ3JhcGh5LmgzLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImg0XCJgLiAqL1xuICAgIGg0OiB0aGVtZS50eXBvZ3JhcGh5Lmg0LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImg1XCJgLiAqL1xuICAgIGg1OiB0aGVtZS50eXBvZ3JhcGh5Lmg1LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImg2XCJgLiAqL1xuICAgIGg2OiB0aGVtZS50eXBvZ3JhcGh5Lmg2LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInN1YnRpdGxlMVwiYC4gKi9cbiAgICBzdWJ0aXRsZTE6IHRoZW1lLnR5cG9ncmFwaHkuc3VidGl0bGUxLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInN1YnRpdGxlMlwiYC4gKi9cbiAgICBzdWJ0aXRsZTI6IHRoZW1lLnR5cG9ncmFwaHkuc3VidGl0bGUyLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm92ZXJsaW5lXCJgLiAqL1xuICAgIG92ZXJsaW5lOiB0aGVtZS50eXBvZ3JhcGh5Lm92ZXJsaW5lLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInNyT25seVwiYC4gT25seSBhY2Nlc3NpYmxlIHRvIHNjcmVlbiByZWFkZXJzLiAqL1xuICAgIHNyT25seToge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBoZWlnaHQ6IDEsXG4gICAgICB3aWR0aDogMSxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbj1cImxlZnRcImAuICovXG4gICAgYWxpZ25MZWZ0OiB7XG4gICAgICB0ZXh0QWxpZ246ICdsZWZ0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbj1cImNlbnRlclwiYC4gKi9cbiAgICBhbGlnbkNlbnRlcjoge1xuICAgICAgdGV4dEFsaWduOiAnY2VudGVyJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbj1cInJpZ2h0XCJgLiAqL1xuICAgIGFsaWduUmlnaHQ6IHtcbiAgICAgIHRleHRBbGlnbjogJ3JpZ2h0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbj1cImp1c3RpZnlcImAuICovXG4gICAgYWxpZ25KdXN0aWZ5OiB7XG4gICAgICB0ZXh0QWxpZ246ICdqdXN0aWZ5J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBub3dyYXA9e3RydWV9YC4gKi9cbiAgICBub1dyYXA6IHtcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGd1dHRlckJvdHRvbT17dHJ1ZX1gLiAqL1xuICAgIGd1dHRlckJvdHRvbToge1xuICAgICAgbWFyZ2luQm90dG9tOiAnMC4zNWVtJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwYXJhZ3JhcGg9e3RydWV9YC4gKi9cbiAgICBwYXJhZ3JhcGg6IHtcbiAgICAgIG1hcmdpbkJvdHRvbTogMTZcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJpbmhlcml0XCJgLiAqL1xuICAgIGNvbG9ySW5oZXJpdDoge1xuICAgICAgY29sb3I6ICdpbmhlcml0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgY29sb3JQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwidGV4dFByaW1hcnlcImAuICovXG4gICAgY29sb3JUZXh0UHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwidGV4dFNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclRleHRTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiZXJyb3JcImAuICovXG4gICAgY29sb3JFcnJvcjoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNwbGF5PVwiaW5saW5lXCJgLiAqL1xuICAgIGRpc3BsYXlJbmxpbmU6IHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc3BsYXk9XCJibG9ja1wiYC4gKi9cbiAgICBkaXNwbGF5QmxvY2s6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICB9XG4gIH07XG59O1xudmFyIGRlZmF1bHRWYXJpYW50TWFwcGluZyA9IHtcbiAgaDE6ICdoMScsXG4gIGgyOiAnaDInLFxuICBoMzogJ2gzJyxcbiAgaDQ6ICdoNCcsXG4gIGg1OiAnaDUnLFxuICBoNjogJ2g2JyxcbiAgc3VidGl0bGUxOiAnaDYnLFxuICBzdWJ0aXRsZTI6ICdoNicsXG4gIGJvZHkxOiAncCcsXG4gIGJvZHkyOiAncCdcbn07XG52YXIgVHlwb2dyYXBoeSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFR5cG9ncmFwaHkocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGFsaWduID0gcHJvcHMuYWxpZ24sXG4gICAgICBhbGlnbiA9IF9wcm9wcyRhbGlnbiA9PT0gdm9pZCAwID8gJ2luaGVyaXQnIDogX3Byb3BzJGFsaWduLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAnaW5pdGlhbCcgOiBfcHJvcHMkY29sb3IsXG4gICAgICBjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBfcHJvcHMkZGlzcGxheSA9IHByb3BzLmRpc3BsYXksXG4gICAgICBkaXNwbGF5ID0gX3Byb3BzJGRpc3BsYXkgPT09IHZvaWQgMCA/ICdpbml0aWFsJyA6IF9wcm9wcyRkaXNwbGF5LFxuICAgICAgX3Byb3BzJGd1dHRlckJvdHRvbSA9IHByb3BzLmd1dHRlckJvdHRvbSxcbiAgICAgIGd1dHRlckJvdHRvbSA9IF9wcm9wcyRndXR0ZXJCb3R0b20gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGd1dHRlckJvdHRvbSxcbiAgICAgIF9wcm9wcyRub1dyYXAgPSBwcm9wcy5ub1dyYXAsXG4gICAgICBub1dyYXAgPSBfcHJvcHMkbm9XcmFwID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRub1dyYXAsXG4gICAgICBfcHJvcHMkcGFyYWdyYXBoID0gcHJvcHMucGFyYWdyYXBoLFxuICAgICAgcGFyYWdyYXBoID0gX3Byb3BzJHBhcmFncmFwaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkcGFyYWdyYXBoLFxuICAgICAgX3Byb3BzJHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgdmFyaWFudCA9IF9wcm9wcyR2YXJpYW50ID09PSB2b2lkIDAgPyAnYm9keTEnIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBfcHJvcHMkdmFyaWFudE1hcHBpbmcgPSBwcm9wcy52YXJpYW50TWFwcGluZyxcbiAgICAgIHZhcmlhbnRNYXBwaW5nID0gX3Byb3BzJHZhcmlhbnRNYXBwaW5nID09PSB2b2lkIDAgPyBkZWZhdWx0VmFyaWFudE1hcHBpbmcgOiBfcHJvcHMkdmFyaWFudE1hcHBpbmcsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYWxpZ25cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNwbGF5XCIsIFwiZ3V0dGVyQm90dG9tXCIsIFwibm9XcmFwXCIsIFwicGFyYWdyYXBoXCIsIFwidmFyaWFudFwiLCBcInZhcmlhbnRNYXBwaW5nXCJdKTtcblxuICB2YXIgQ29tcG9uZW50ID0gY29tcG9uZW50IHx8IChwYXJhZ3JhcGggPyAncCcgOiB2YXJpYW50TWFwcGluZ1t2YXJpYW50XSB8fCBkZWZhdWx0VmFyaWFudE1hcHBpbmdbdmFyaWFudF0pIHx8ICdzcGFuJztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgdmFyaWFudCAhPT0gJ2luaGVyaXQnICYmIGNsYXNzZXNbdmFyaWFudF0sIGNvbG9yICE9PSAnaW5pdGlhbCcgJiYgY2xhc3Nlc1tcImNvbG9yXCIuY29uY2F0KGNhcGl0YWxpemUoY29sb3IpKV0sIG5vV3JhcCAmJiBjbGFzc2VzLm5vV3JhcCwgZ3V0dGVyQm90dG9tICYmIGNsYXNzZXMuZ3V0dGVyQm90dG9tLCBwYXJhZ3JhcGggJiYgY2xhc3Nlcy5wYXJhZ3JhcGgsIGFsaWduICE9PSAnaW5oZXJpdCcgJiYgY2xhc3Nlc1tcImFsaWduXCIuY29uY2F0KGNhcGl0YWxpemUoYWxpZ24pKV0sIGRpc3BsYXkgIT09ICdpbml0aWFsJyAmJiBjbGFzc2VzW1wiZGlzcGxheVwiLmNvbmNhdChjYXBpdGFsaXplKGRpc3BsYXkpKV0pLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFR5cG9ncmFwaHkucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogU2V0IHRoZSB0ZXh0LWFsaWduIG9uIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBhbGlnbjogUHJvcFR5cGVzLm9uZU9mKFsnaW5oZXJpdCcsICdsZWZ0JywgJ2NlbnRlcicsICdyaWdodCcsICdqdXN0aWZ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnaW5pdGlhbCcsICdpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ3RleHRQcmltYXJ5JywgJ3RleHRTZWNvbmRhcnknLCAnZXJyb3InXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogT3ZlcnJpZGVzIHRoZSBiZWhhdmlvciBvZiB0aGUgYHZhcmlhbnRNYXBwaW5nYCBwcm9wLlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIENvbnRyb2xzIHRoZSBkaXNwbGF5IHR5cGVcbiAgICovXG4gIGRpc3BsYXk6IFByb3BUeXBlcy5vbmVPZihbJ2luaXRpYWwnLCAnYmxvY2snLCAnaW5saW5lJ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0ZXh0IHdpbGwgaGF2ZSBhIGJvdHRvbSBtYXJnaW4uXG4gICAqL1xuICBndXR0ZXJCb3R0b206IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0ZXh0IHdpbGwgbm90IHdyYXAsIGJ1dCBpbnN0ZWFkIHdpbGwgdHJ1bmNhdGUgd2l0aCBhIHRleHQgb3ZlcmZsb3cgZWxsaXBzaXMuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0ZXh0IG92ZXJmbG93IGNhbiBvbmx5IGhhcHBlbiB3aXRoIGJsb2NrIG9yIGlubGluZS1ibG9jayBsZXZlbCBlbGVtZW50c1xuICAgKiAodGhlIGVsZW1lbnQgbmVlZHMgdG8gaGF2ZSBhIHdpZHRoIGluIG9yZGVyIHRvIG92ZXJmbG93KS5cbiAgICovXG4gIG5vV3JhcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRleHQgd2lsbCBoYXZlIGEgYm90dG9tIG1hcmdpbi5cbiAgICovXG4gIHBhcmFncmFwaDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgdGhlIHRoZW1lIHR5cG9ncmFwaHkgc3R5bGVzLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnc3VidGl0bGUxJywgJ3N1YnRpdGxlMicsICdib2R5MScsICdib2R5MicsICdjYXB0aW9uJywgJ2J1dHRvbicsICdvdmVybGluZScsICdzck9ubHknLCAnaW5oZXJpdCddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCBtYXBzIHRoZSB2YXJpYW50IHByb3AgdG8gYSByYW5nZSBvZiBkaWZmZXJlbnQgSFRNTCBlbGVtZW50IHR5cGVzLlxuICAgKiBGb3IgaW5zdGFuY2UsIHN1YnRpdGxlMSB0byBgPGg2PmAuXG4gICAqIElmIHlvdSB3aXNoIHRvIGNoYW5nZSB0aGF0IG1hcHBpbmcsIHlvdSBjYW4gcHJvdmlkZSB5b3VyIG93bi5cbiAgICogQWx0ZXJuYXRpdmVseSwgeW91IGNhbiB1c2UgdGhlIGBjb21wb25lbnRgIHByb3AuXG4gICAqL1xuICB2YXJpYW50TWFwcGluZzogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUeXBvZ3JhcGh5J1xufSkoVHlwb2dyYXBoeSk7IiwiaW1wb3J0IG1ha2VTdHlsZXMgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL21ha2VTdHlsZXMnO1xyXG5pbXBvcnQgY3JlYXRlU3R5bGVzIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9jcmVhdGVTdHlsZXMnO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG52YXIgdXNlU3R5bGUgPSBtYWtlU3R5bGVzKGZ1bmN0aW9uICh0aGVtZSkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZVN0eWxlcyh7XHJcbiAgICAgICAgQmFzaWNJbmR1Y3Rpb25Db250YWluZXI6IHtcclxuICAgICAgICAgICAgYW5pbWF0aW9uOiAnJEZ1d2FGdXdhRmFkZUluJyxcclxuICAgICAgICAgICAgYW5pbWF0aW9uRHVyYXRpb246ICczcycsXHJcbiAgICAgICAgICAgIGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uOiAnZWFzZS1pbi1vdXQnLFxyXG4gICAgICAgICAgICBhbmltYXRpb25EaXJlY3Rpb246ICdhbHRlcm5hdGUnLFxyXG4gICAgICAgICAgICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogJ2luZmluaXRlJyxcclxuICAgICAgICAgICAgYm9yZGVyTGVmdDogJzFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuNTQpJyxcclxuICAgICAgICAgICAgYm9yZGVyQm90dG9tOiAnMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC41NCknLFxyXG4gICAgICAgICAgICB0cmFuc2Zvcm06ICdyb3RhdGUoLTQ1ZGVnKScsXHJcbiAgICAgICAgICAgIHdpZHRoOiAnMjRweCcsXHJcbiAgICAgICAgICAgIGhlaWdodDogJzI0cHgnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJ0BrZXlmcmFtZXMgRnV3YUZ1d2FGYWRlSW4nOiB7XHJcbiAgICAgICAgICAgIGZyb206IHtcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuMyxcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoMzBweCkgcm90YXRlKC00NWRlZyknLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0bzoge1xyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoMHB4KSByb3RhdGUoLTQ1ZGVnKScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgIH0pO1xyXG59KTtcclxuZXhwb3J0IGZ1bmN0aW9uIEJhc2ljSW5kdWN0aW9uKHByb3BzKSB7XHJcbiAgICB2YXIgY2xhc3NlcyA9IHVzZVN0eWxlKCk7XHJcbiAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGNsYXNzZXMuQmFzaWNJbmR1Y3Rpb25Db250YWluZXIgKyAoIXByb3BzLmNsYXNzTmFtZSA/ICcnIDogcHJvcHMuY2xhc3NOYW1lKSwgc3R5bGU6IHByb3BzLnN0eWxlIH0pKTtcclxufVxyXG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IG1ha2VTdHlsZXMgYXMgbWFrZVN0eWxlc1dpdGhvdXREZWZhdWx0IH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N0eWxlcyc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcblxuZnVuY3Rpb24gbWFrZVN0eWxlcyhzdHlsZXNPckNyZWF0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICByZXR1cm4gbWFrZVN0eWxlc1dpdGhvdXREZWZhdWx0KHN0eWxlc09yQ3JlYXRvciwgX2V4dGVuZHMoe1xuICAgIGRlZmF1bHRUaGVtZTogZGVmYXVsdFRoZW1lXG4gIH0sIG9wdGlvbnMpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFrZVN0eWxlczsiLCJpbXBvcnQgeyBjcmVhdGVTdHlsZXMgYXMgY3JlYXRlU3R5bGVzT3JpZ2luYWwgfSBmcm9tICdAbWF0ZXJpYWwtdWkvc3R5bGVzJzsgLy8gbGV0IHdhcm5PbmNlID0gZmFsc2U7XG4vLyBUbyByZW1vdmUgaW4gdjVcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU3R5bGVzKHN0eWxlcykge1xuICAvLyB3YXJuaW5nKFxuICAvLyAgIHdhcm5PbmNlLFxuICAvLyAgIFtcbiAgLy8gICAgICdNYXRlcmlhbC1VSTogY3JlYXRlU3R5bGVzIGZyb20gQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzIGlzIGRlcHJlY2F0ZWQuJyxcbiAgLy8gICAgICdQbGVhc2UgdXNlIEBtYXRlcmlhbC11aS9zdHlsZXMvY3JlYXRlU3R5bGVzJyxcbiAgLy8gICBdLmpvaW4oJ1xcbicpLFxuICAvLyApO1xuICAvLyB3YXJuT25jZSA9IHRydWU7XG4gIHJldHVybiBjcmVhdGVTdHlsZXNPcmlnaW5hbChzdHlsZXMpO1xufSIsImltcG9ydCB7IG1ha2VTdHlsZXMsIGNyZWF0ZVN0eWxlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcyc7XHJcbmV4cG9ydCB2YXIgR2xvYmFsU3R5bGVzID0gbWFrZVN0eWxlcyhmdW5jdGlvbiAodGhlbWUpIHtcclxuICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2g7XHJcbiAgICByZXR1cm4gY3JlYXRlU3R5bGVzKHtcclxuICAgICAgICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgIFxyXG4gICAgICAgIGJ1dHRvbiBzdHlsZXNcclxuICAgIFxyXG4gICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG4gICAgICAgIGJ1dHRvblByaW1hcnk6IHtcclxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcclxuICAgICAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5jb250cmFzdFRleHQsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBidXR0b25TZWNvbmRhcnk6IHtcclxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxyXG4gICAgICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkuY29udHJhc3RUZXh0LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICBcclxuICAgICAgICB0ZXh0IHN0eWxlc1xyXG4gICAgXHJcbiAgICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbiAgICAgICAgdGV4dFRpdGxlOiAoX2EgPSB7XHJcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5oMi5mb250U2l6ZSxcclxuICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IHRoZW1lLnR5cG9ncmFwaHkuaDIuZm9udEZhbWlseVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfYVt0aGVtZS5icmVha3BvaW50cy5kb3duKCdzbScpXSA9IHtcclxuICAgICAgICAgICAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LmgzLmZvbnRTaXplLFxyXG4gICAgICAgICAgICAgICAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5oMy5mb250RmFtaWx5LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfYSksXHJcbiAgICAgICAgdGV4dFN1YlRpdGxlOiAoX2IgPSB7XHJcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5oNC5mb250U2l6ZSxcclxuICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IHRoZW1lLnR5cG9ncmFwaHkuaDQuZm9udEZhbWlseVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfYlt0aGVtZS5icmVha3BvaW50cy5kb3duKCdzbScpXSA9IHtcclxuICAgICAgICAgICAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5Lmg1LmZvbnRTaXplLFxyXG4gICAgICAgICAgICAgICAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5oNS5mb250RmFtaWx5LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfYiksXHJcbiAgICAgICAgdGV4dENhcHRpb246IChfYyA9IHtcclxuICAgICAgICAgICAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5Lmg2LmZvbnRTaXplLFxyXG4gICAgICAgICAgICAgICAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5oNi5mb250RmFtaWx5XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9jW3RoZW1lLmJyZWFrcG9pbnRzLmRvd24oJ3NtJyldID0ge1xyXG4gICAgICAgICAgICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkuc3VidGl0bGUxLmZvbnRTaXplLFxyXG4gICAgICAgICAgICAgICAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5zdWJ0aXRsZTEuZm9udEZhbWlseSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2MpLFxyXG4gICAgICAgIHRleHRQYXJhZ3JhcGg6IChfZCA9IHtcclxuICAgICAgICAgICAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnN1YnRpdGxlMS5mb250U2l6ZSxcclxuICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IHRoZW1lLnR5cG9ncmFwaHkuc3VidGl0bGUxLmZvbnRGYW1pbHlcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2RbdGhlbWUuYnJlYWtwb2ludHMuZG93bignc20nKV0gPSB7XHJcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5zdWJ0aXRsZTIuZm9udFNpemUsXHJcbiAgICAgICAgICAgICAgICBmb250RmFtaWx5OiB0aGVtZS50eXBvZ3JhcGh5LnN1YnRpdGxlMi5mb250RmFtaWx5LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfZCksXHJcbiAgICAgICAgdGV4dFJlbWFyazogKF9lID0ge1xyXG4gICAgICAgICAgICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkuYm9keTIuZm9udFNpemUsXHJcbiAgICAgICAgICAgICAgICBmb250RmFtaWx5OiB0aGVtZS50eXBvZ3JhcGh5LmJvZHkyLmZvbnRGYW1pbHlcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2VbdGhlbWUuYnJlYWtwb2ludHMuZG93bignc20nKV0gPSB7XHJcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5jYXB0aW9uLmZvbnRTaXplLFxyXG4gICAgICAgICAgICAgICAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5jYXB0aW9uLmZvbnRGYW1pbHksXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9lKSxcclxuICAgICAgICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgIFxyXG4gICAgICAgIG1vZGFsIHN0eWxlc1xyXG4gICAgXHJcbiAgICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbiAgICAgICAgbW9kYWxCYXNpYzogKF9mID0ge1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLnBhcGVyLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZzogJzJlbScsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICcxMHB4J1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfZlt0aGVtZS5icmVha3BvaW50cy5kb3duKCdzbScpXSA9IHtcclxuICAgICAgICAgICAgICAgIHBhZGRpbmc6ICcwLjVlbScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9mKSxcclxuICAgICAgICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgIFxyXG4gICAgICAgIGNhcmQgc3R5bGVzXHJcbiAgICBcclxuICAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuICAgICAgICBjYXJkQmFzaWM6IChfZyA9IHtcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLnBhcGVyLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZzogJzJlbSdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2dbdGhlbWUuYnJlYWtwb2ludHMuZG93bignc20nKV0gPSB7XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAnMWVtJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2cpLFxyXG4gICAgICAgIGNhcmRGdWxsV2lkdGg6IHt9LFxyXG4gICAgICAgIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgXHJcbiAgICAgICAgcG9zaXRpb24gc3R5bGVzXHJcbiAgICBcclxuICAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuICAgICAgICBwb3NpdGlvbkNlbnRlcmluZzoge1xyXG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXHJcbiAgICAgICAgICAgIGZsZXhXcmFwOiAnd3JhcCcsXHJcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcclxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXHJcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcG9zaXRpb25MZWZ0aW5nOiB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcclxuICAgICAgICAgICAgZmxleFdyYXA6ICd3cmFwJyxcclxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LWVuZCcsXHJcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxyXG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxyXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHBvc2l0aW9uWENlbnRlcllCb3R0b206IHtcclxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgICAgICAgICBmbGV4V3JhcDogJ3dyYXAnLFxyXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXHJcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdmbGV4LWVuZCcsXHJcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcG9zaXRpb25YQ2VudGVyWVRvcDoge1xyXG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXHJcbiAgICAgICAgICAgIGZsZXhXcmFwOiAnd3JhcCcsXHJcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcclxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnLFxyXG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxyXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHBvc2l0aW9uRml4ZWRDZW50ZXJpbmc6IHtcclxuICAgICAgICAgICAgcG9zaXRpb246ICdmaXhlZCcsXHJcbiAgICAgICAgICAgIHRvcDogJzUwJScsXHJcbiAgICAgICAgICAgIGxlZnQ6ICc1MCUnLFxyXG4gICAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTUwJSwtNTAlKScsXHJcbiAgICAgICAgfSxcclxuICAgICAgICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgIFxyXG4gICAgICAgIHRyYW5zaXRpb24gc3R5bGVzXHJcbiAgICBcclxuICAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuICAgICAgICAnQGtleWZyYW1lcyBTaW1wbGVGYWRlSW4nOiB7XHJcbiAgICAgICAgICAgIGZyb206IHtcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRvOiB7XHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdHJhbnNpdGlvblNpbXBsZUZhZGVJbjoge1xyXG4gICAgICAgICAgICBhbmltYXRpb246ICckU2ltcGxlRmFkZUluJyxcclxuICAgICAgICAgICAgYW5pbWF0aW9uRHVyYXRpb246ICcxcycsXHJcbiAgICAgICAgICAgIGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdHJhbnNpdGlvbkZhZGVJbkRvd25QZW5kaW5nOiB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDAsXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTEwdmgpJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRyYW5zaXRpb25GYWRlSW5VcFBlbmRpbmc6IHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMCxcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgxMHZoKScsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0cmFuc2l0aW9uRmFkZUluUmlnaHRQZW5kaW5nOiB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDAsXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoMTAwdncpJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRyYW5zaXRpb25GYWRlSW5MZWZ0UGVuZGluZzoge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwLFxyXG4gICAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKC0xMDB2dyknLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdHJhbnNpdGlvbkZhZGVJblJ1bjoge1xyXG4gICAgICAgICAgICAvLyDmnKzmnaXooajnpLrjgZnjgovjgbnjgY3kvY3nva7jgbjmiLvjgZnjgIJcclxuICAgICAgICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsnb3BhY2l0eScsICd0cmFuc2Zvcm0nXSwge1xyXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmNvbXBsZXgsXHJcbiAgICAgICAgICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBvcGFjaXR5OiAxLFxyXG4gICAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDBweCknLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdHJhbnNpdGlvbkZhZGVJbkVuZDoge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxLFxyXG4gICAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDBweCknLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICBcclxuICAgICAgICBvdGhlciBzdHlsZXNcclxuICAgIFxyXG4gICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG4gICAgICAgIC8vIOOCteOCpOODiOOCs+ODs+ODhuODs+ODhOOBq+mBqeeUqOOBmeOCi+ioreWumlxyXG4gICAgICAgIGNvbnRlbnRTZWN0aW9uQ29udGFpbmVyOiAoX2ggPSB7XHJcbiAgICAgICAgICAgICAgICBtYXhXaWR0aDogdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLm1kXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9oW3RoZW1lLmJyZWFrcG9pbnRzLmRvd24oJ3NtJyldID0ge1xyXG4gICAgICAgICAgICAgICAgcGFkZGluZzogdGhlbWUuc3BhY2luZygxKSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2gpLFxyXG4gICAgICAgIC8vIGJvZHnopoHntKDnm7TkuIvjgavpgannlKjjgZnjgovjgrXjgqTjg4jlhajkvZPjgbjjga7oqK3lrppcclxuICAgICAgICByb290Q29udGFpbmVyOiB7XHJcbiAgICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcclxuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRyYXdlckNvbnRhaW5lcjoge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlcixcclxuICAgICAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdG9vbGJhcjogdGhlbWUubWl4aW5zLnRvb2xiYXIsXHJcbiAgICB9KTtcclxufSk7XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgTGlzdENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KHt9KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgTGlzdENvbnRleHQuZGlzcGxheU5hbWUgPSAnTGlzdENvbnRleHQnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBMaXN0Q29udGV4dDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgTGlzdENvbnRleHQgZnJvbSAnLi9MaXN0Q29udGV4dCc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIGxpc3RTdHlsZTogJ25vbmUnLFxuICAgIG1hcmdpbjogMCxcbiAgICBwYWRkaW5nOiAwLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZVBhZGRpbmc9e2ZhbHNlfWAuICovXG4gIHBhZGRpbmc6IHtcbiAgICBwYWRkaW5nVG9wOiA4LFxuICAgIHBhZGRpbmdCb3R0b206IDhcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGRlbnNlLiAqL1xuICBkZW5zZToge30sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBhIGBzdWJoZWFkZXJgIGlzIHByb3ZpZGVkLiAqL1xuICBzdWJoZWFkZXI6IHtcbiAgICBwYWRkaW5nVG9wOiAwXG4gIH1cbn07XG52YXIgTGlzdCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpc3QocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICd1bCcgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRlbnNlID0gcHJvcHMuZGVuc2UsXG4gICAgICBkZW5zZSA9IF9wcm9wcyRkZW5zZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGVuc2UsXG4gICAgICBfcHJvcHMkZGlzYWJsZVBhZGRpbmcgPSBwcm9wcy5kaXNhYmxlUGFkZGluZyxcbiAgICAgIGRpc2FibGVQYWRkaW5nID0gX3Byb3BzJGRpc2FibGVQYWRkaW5nID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlUGFkZGluZyxcbiAgICAgIHN1YmhlYWRlciA9IHByb3BzLnN1YmhlYWRlcixcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkZW5zZVwiLCBcImRpc2FibGVQYWRkaW5nXCIsIFwic3ViaGVhZGVyXCJdKTtcblxuICB2YXIgY29udGV4dCA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkZW5zZTogZGVuc2VcbiAgICB9O1xuICB9LCBbZGVuc2VdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpc3RDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBkZW5zZSAmJiBjbGFzc2VzLmRlbnNlLCAhZGlzYWJsZVBhZGRpbmcgJiYgY2xhc3Nlcy5wYWRkaW5nLCBzdWJoZWFkZXIgJiYgY2xhc3Nlcy5zdWJoZWFkZXIpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgc3ViaGVhZGVyLCBjaGlsZHJlbikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBMaXN0LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGNvbXBhY3QgdmVydGljYWwgcGFkZGluZyBkZXNpZ25lZCBmb3Iga2V5Ym9hcmQgYW5kIG1vdXNlIGlucHV0IHdpbGwgYmUgdXNlZCBmb3JcbiAgICogdGhlIGxpc3QgYW5kIGxpc3QgaXRlbXMuXG4gICAqIFRoZSBwcm9wIGlzIGF2YWlsYWJsZSB0byBkZXNjZW5kYW50IGNvbXBvbmVudHMgYXMgdGhlIGBkZW5zZWAgY29udGV4dC5cbiAgICovXG4gIGRlbnNlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB2ZXJ0aWNhbCBwYWRkaW5nIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBsaXN0LlxuICAgKi9cbiAgZGlzYWJsZVBhZGRpbmc6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgc3ViaGVhZGVyLCBub3JtYWxseSBgTGlzdFN1YmhlYWRlcmAuXG4gICAqL1xuICBzdWJoZWFkZXI6IFByb3BUeXBlcy5ub2RlXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUxpc3QnXG59KShMaXN0KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCBpc011aUVsZW1lbnQgZnJvbSAnLi4vdXRpbHMvaXNNdWlFbGVtZW50JztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IExpc3RDb250ZXh0IGZyb20gJy4uL0xpc3QvTGlzdENvbnRleHQnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIChub3JtYWxseSByb290KSBgY29tcG9uZW50YCBlbGVtZW50LiBNYXkgYmUgd3JhcHBlZCBieSBhIGBjb250YWluZXJgLiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgICAgcGFkZGluZ1RvcDogOCxcbiAgICAgIHBhZGRpbmdCb3R0b206IDgsXG4gICAgICAnJiRmb2N1c1Zpc2libGUnOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRcbiAgICAgIH0sXG4gICAgICAnJiRzZWxlY3RlZCwgJiRzZWxlY3RlZDpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZFxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBvcGFjaXR5OiAwLjVcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBjb250YWluZXJgIGVsZW1lbnQgaWYgYGNoaWxkcmVuYCBpbmNsdWRlcyBgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25gLiAqL1xuICAgIGNvbnRhaW5lcjoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIGBjb21wb25lbnRgJ3MgYGZvY3VzVmlzaWJsZUNsYXNzTmFtZWAgcHJvcCBpZiBgYnV0dG9uPXt0cnVlfWAuICovXG4gICAgZm9jdXNWaXNpYmxlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgY29tcG9uZW50YCBlbGVtZW50IGlmIGRlbnNlLiAqL1xuICAgIGRlbnNlOiB7XG4gICAgICBwYWRkaW5nVG9wOiA0LFxuICAgICAgcGFkZGluZ0JvdHRvbTogNFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGNvbXBvbmVudGAgZWxlbWVudCBpZiBgYWxpZ25JdGVtcz1cImZsZXgtc3RhcnRcImAuICovXG4gICAgYWxpZ25JdGVtc0ZsZXhTdGFydDoge1xuICAgICAgYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnXG4gICAgfSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSBpbm5lciBgY29tcG9uZW50YCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbm5lciBgY29tcG9uZW50YCBlbGVtZW50IGlmIGBkaXZpZGVyPXt0cnVlfWAuICovXG4gICAgZGl2aWRlcjoge1xuICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5kaXZpZGVyKSxcbiAgICAgIGJhY2tncm91bmRDbGlwOiAncGFkZGluZy1ib3gnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbm5lciBgY29tcG9uZW50YCBlbGVtZW50IGlmIGBkaXNhYmxlR3V0dGVycz17ZmFsc2V9YC4gKi9cbiAgICBndXR0ZXJzOiB7XG4gICAgICBwYWRkaW5nTGVmdDogMTYsXG4gICAgICBwYWRkaW5nUmlnaHQ6IDE2XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbm5lciBgY29tcG9uZW50YCBlbGVtZW50IGlmIGBidXR0b249e3RydWV9YC4gKi9cbiAgICBidXR0b246IHtcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYmFja2dyb3VuZC1jb2xvcicsIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gICAgICB9KSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBjb21wb25lbnRgIGVsZW1lbnQgaWYgYGNoaWxkcmVuYCBpbmNsdWRlcyBgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25gLiAqL1xuICAgIHNlY29uZGFyeUFjdGlvbjoge1xuICAgICAgLy8gQWRkIHNvbWUgc3BhY2UgdG8gYXZvaWQgY29sbGlzaW9uIGFzIGBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbmBcbiAgICAgIC8vIGlzIGFic29sdXRlbHkgcG9zaXRpb25lZC5cbiAgICAgIHBhZGRpbmdSaWdodDogNDhcbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2VsZWN0ZWQ9e3RydWV9YC4gKi9cbiAgICBzZWxlY3RlZDoge31cbiAgfTtcbn07XG52YXIgdXNlRW5oYW5jZWRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IFJlYWN0LnVzZUVmZmVjdCA6IFJlYWN0LnVzZUxheW91dEVmZmVjdDtcbi8qKlxuICogVXNlcyBhbiBhZGRpdGlvbmFsIGNvbnRhaW5lciBjb21wb25lbnQgaWYgYExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uYCBpcyB0aGUgbGFzdCBjaGlsZC5cbiAqL1xuXG52YXIgTGlzdEl0ZW0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaXN0SXRlbShwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkYWxpZ25JdGVtcyA9IHByb3BzLmFsaWduSXRlbXMsXG4gICAgICBhbGlnbkl0ZW1zID0gX3Byb3BzJGFsaWduSXRlbXMgPT09IHZvaWQgMCA/ICdjZW50ZXInIDogX3Byb3BzJGFsaWduSXRlbXMsXG4gICAgICBfcHJvcHMkYXV0b0ZvY3VzID0gcHJvcHMuYXV0b0ZvY3VzLFxuICAgICAgYXV0b0ZvY3VzID0gX3Byb3BzJGF1dG9Gb2N1cyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkYXV0b0ZvY3VzLFxuICAgICAgX3Byb3BzJGJ1dHRvbiA9IHByb3BzLmJ1dHRvbixcbiAgICAgIGJ1dHRvbiA9IF9wcm9wcyRidXR0b24gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGJ1dHRvbixcbiAgICAgIGNoaWxkcmVuUHJvcCA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb21wb25lbnRQcm9wID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgX3Byb3BzJENvbnRhaW5lckNvbXBvID0gcHJvcHMuQ29udGFpbmVyQ29tcG9uZW50LFxuICAgICAgQ29udGFpbmVyQ29tcG9uZW50ID0gX3Byb3BzJENvbnRhaW5lckNvbXBvID09PSB2b2lkIDAgPyAnbGknIDogX3Byb3BzJENvbnRhaW5lckNvbXBvLFxuICAgICAgX3Byb3BzJENvbnRhaW5lclByb3BzID0gcHJvcHMuQ29udGFpbmVyUHJvcHM7XG4gIF9wcm9wcyRDb250YWluZXJQcm9wcyA9IF9wcm9wcyRDb250YWluZXJQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkQ29udGFpbmVyUHJvcHM7XG5cbiAgdmFyIENvbnRhaW5lckNsYXNzTmFtZSA9IF9wcm9wcyRDb250YWluZXJQcm9wcy5jbGFzc05hbWUsXG4gICAgICBDb250YWluZXJQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMkQ29udGFpbmVyUHJvcHMsIFtcImNsYXNzTmFtZVwiXSksXG4gICAgICBfcHJvcHMkZGVuc2UgPSBwcm9wcy5kZW5zZSxcbiAgICAgIGRlbnNlID0gX3Byb3BzJGRlbnNlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkZW5zZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZGlzYWJsZWQgPSBfcHJvcHMkZGlzYWJsZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVkLFxuICAgICAgX3Byb3BzJGRpc2FibGVHdXR0ZXJzID0gcHJvcHMuZGlzYWJsZUd1dHRlcnMsXG4gICAgICBkaXNhYmxlR3V0dGVycyA9IF9wcm9wcyRkaXNhYmxlR3V0dGVycyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUd1dHRlcnMsXG4gICAgICBfcHJvcHMkZGl2aWRlciA9IHByb3BzLmRpdmlkZXIsXG4gICAgICBkaXZpZGVyID0gX3Byb3BzJGRpdmlkZXIgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpdmlkZXIsXG4gICAgICBmb2N1c1Zpc2libGVDbGFzc05hbWUgPSBwcm9wcy5mb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgICBfcHJvcHMkc2VsZWN0ZWQgPSBwcm9wcy5zZWxlY3RlZCxcbiAgICAgIHNlbGVjdGVkID0gX3Byb3BzJHNlbGVjdGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRzZWxlY3RlZCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhbGlnbkl0ZW1zXCIsIFwiYXV0b0ZvY3VzXCIsIFwiYnV0dG9uXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiQ29udGFpbmVyQ29tcG9uZW50XCIsIFwiQ29udGFpbmVyUHJvcHNcIiwgXCJkZW5zZVwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZUd1dHRlcnNcIiwgXCJkaXZpZGVyXCIsIFwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXCIsIFwic2VsZWN0ZWRcIl0pO1xuXG4gIHZhciBjb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChMaXN0Q29udGV4dCk7XG4gIHZhciBjaGlsZENvbnRleHQgPSB7XG4gICAgZGVuc2U6IGRlbnNlIHx8IGNvbnRleHQuZGVuc2UgfHwgZmFsc2UsXG4gICAgYWxpZ25JdGVtczogYWxpZ25JdGVtc1xuICB9O1xuICB2YXIgbGlzdEl0ZW1SZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoYXV0b0ZvY3VzKSB7XG4gICAgICBpZiAobGlzdEl0ZW1SZWYuY3VycmVudCkge1xuICAgICAgICBsaXN0SXRlbVJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IFVuYWJsZSB0byBzZXQgZm9jdXMgdG8gYSBMaXN0SXRlbSB3aG9zZSBjb21wb25lbnQgaGFzIG5vdCBiZWVuIHJlbmRlcmVkLicpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW2F1dG9Gb2N1c10pO1xuICB2YXIgY2hpbGRyZW4gPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuUHJvcCk7XG4gIHZhciBoYXNTZWNvbmRhcnlBY3Rpb24gPSBjaGlsZHJlbi5sZW5ndGggJiYgaXNNdWlFbGVtZW50KGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLCBbJ0xpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uJ10pO1xuICB2YXIgaGFuZGxlT3duUmVmID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgLy8gI1N0cmljdE1vZGUgcmVhZHlcbiAgICBsaXN0SXRlbVJlZi5jdXJyZW50ID0gUmVhY3RET00uZmluZERPTU5vZGUoaW5zdGFuY2UpO1xuICB9LCBbXSk7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGhhbmRsZU93blJlZiwgcmVmKTtcblxuICB2YXIgY29tcG9uZW50UHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBjaGlsZENvbnRleHQuZGVuc2UgJiYgY2xhc3Nlcy5kZW5zZSwgIWRpc2FibGVHdXR0ZXJzICYmIGNsYXNzZXMuZ3V0dGVycywgZGl2aWRlciAmJiBjbGFzc2VzLmRpdmlkZXIsIGRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQsIGJ1dHRvbiAmJiBjbGFzc2VzLmJ1dHRvbiwgYWxpZ25JdGVtcyAhPT0gXCJjZW50ZXJcIiAmJiBjbGFzc2VzLmFsaWduSXRlbXNGbGV4U3RhcnQsIGhhc1NlY29uZGFyeUFjdGlvbiAmJiBjbGFzc2VzLnNlY29uZGFyeUFjdGlvbiwgc2VsZWN0ZWQgJiYgY2xhc3Nlcy5zZWxlY3RlZCksXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gIH0sIG90aGVyKTtcblxuICB2YXIgQ29tcG9uZW50ID0gY29tcG9uZW50UHJvcCB8fCAnbGknO1xuXG4gIGlmIChidXR0b24pIHtcbiAgICBjb21wb25lbnRQcm9wcy5jb21wb25lbnQgPSBjb21wb25lbnRQcm9wIHx8ICdkaXYnO1xuICAgIGNvbXBvbmVudFByb3BzLmZvY3VzVmlzaWJsZUNsYXNzTmFtZSA9IGNsc3goY2xhc3Nlcy5mb2N1c1Zpc2libGUsIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSk7XG4gICAgQ29tcG9uZW50ID0gQnV0dG9uQmFzZTtcbiAgfVxuXG4gIGlmIChoYXNTZWNvbmRhcnlBY3Rpb24pIHtcbiAgICAvLyBVc2UgZGl2IGJ5IGRlZmF1bHQuXG4gICAgQ29tcG9uZW50ID0gIWNvbXBvbmVudFByb3BzLmNvbXBvbmVudCAmJiAhY29tcG9uZW50UHJvcCA/ICdkaXYnIDogQ29tcG9uZW50OyAvLyBBdm9pZCBuZXN0aW5nIG9mIGxpID4gbGkuXG5cbiAgICBpZiAoQ29udGFpbmVyQ29tcG9uZW50ID09PSAnbGknKSB7XG4gICAgICBpZiAoQ29tcG9uZW50ID09PSAnbGknKSB7XG4gICAgICAgIENvbXBvbmVudCA9ICdkaXYnO1xuICAgICAgfSBlbHNlIGlmIChjb21wb25lbnRQcm9wcy5jb21wb25lbnQgPT09ICdsaScpIHtcbiAgICAgICAgY29tcG9uZW50UHJvcHMuY29tcG9uZW50ID0gJ2Rpdic7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpc3RDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogY2hpbGRDb250ZXh0XG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGFpbmVyQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5jb250YWluZXIsIENvbnRhaW5lckNsYXNzTmFtZSksXG4gICAgICByZWY6IGhhbmRsZVJlZlxuICAgIH0sIENvbnRhaW5lclByb3BzKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBjb21wb25lbnRQcm9wcywgY2hpbGRyZW4pLCBjaGlsZHJlbi5wb3AoKSkpO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpc3RDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNoaWxkQ29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICByZWY6IGhhbmRsZVJlZlxuICB9LCBjb21wb25lbnRQcm9wcyksIGNoaWxkcmVuKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IExpc3RJdGVtLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBhbGlnbi1pdGVtc2Agc3R5bGUgcHJvcGVydHkuXG4gICAqL1xuICBhbGlnbkl0ZW1zOiBQcm9wVHlwZXMub25lT2YoWydmbGV4LXN0YXJ0JywgJ2NlbnRlciddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGlzdCBpdGVtIHdpbGwgYmUgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKiBGb2N1cyB3aWxsIGFsc28gYmUgdHJpZ2dlcmVkIGlmIHRoZSB2YWx1ZSBjaGFuZ2VzIGZyb20gZmFsc2UgdG8gdHJ1ZS5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxpc3QgaXRlbSB3aWxsIGJlIGEgYnV0dG9uICh1c2luZyBgQnV0dG9uQmFzZWApLiBQcm9wcyBpbnRlbmRlZFxuICAgKiBmb3IgYEJ1dHRvbkJhc2VgIGNhbiB0aGVuIGJlIGFwcGxpZWQgdG8gYExpc3RJdGVtYC5cbiAgICovXG4gIGJ1dHRvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuIElmIGEgYExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uYCBpcyB1c2VkIGl0IG11c3RcbiAgICogYmUgdGhlIGxhc3QgY2hpbGQuXG4gICAqL1xuICBjaGlsZHJlbjogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm5vZGUsIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBjaGlsZHJlbiA9IFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkocHJvcHMuY2hpbGRyZW4pOyAvLyBSZWFjdC5DaGlsZHJlbi50b0FycmF5KHByb3BzLmNoaWxkcmVuKS5maW5kTGFzdEluZGV4KGlzTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24pXG5cbiAgICB2YXIgc2Vjb25kYXJ5QWN0aW9uSW5kZXggPSAtMTtcblxuICAgIGZvciAodmFyIGkgPSBjaGlsZHJlbi5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG5cbiAgICAgIGlmIChpc011aUVsZW1lbnQoY2hpbGQsIFsnTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24nXSkpIHtcbiAgICAgICAgc2Vjb25kYXJ5QWN0aW9uSW5kZXggPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IC8vICBpcyBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbiB0aGUgbGFzdCBjaGlsZCBvZiBMaXN0SXRlbVxuXG5cbiAgICBpZiAoc2Vjb25kYXJ5QWN0aW9uSW5kZXggIT09IC0xICYmIHNlY29uZGFyeUFjdGlvbkluZGV4ICE9PSBjaGlsZHJlbi5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNYXRlcmlhbC1VSTogWW91IHVzZWQgYW4gZWxlbWVudCBhZnRlciBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbi4gJyArICdGb3IgTGlzdEl0ZW0gdG8gZGV0ZWN0IHRoYXQgaXQgaGFzIGEgc2Vjb25kYXJ5IGFjdGlvbiAnICsgJ3lvdSBtdXN0IHBhc3MgaXQgYXMgdGhlIGxhc3QgY2hpbGQgdG8gTGlzdEl0ZW0uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIGl0J3MgYSBgbGlgIHdoZW4gYGJ1dHRvbmAgaXMgYGZhbHNlYCBhbmQgYSBgZGl2YCB3aGVuIGBidXR0b25gIGlzIGB0cnVlYC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGFpbmVyIGNvbXBvbmVudCB1c2VkIHdoZW4gYSBgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25gIGlzIHRoZSBsYXN0IGNoaWxkLlxuICAgKi9cbiAgQ29udGFpbmVyQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIGNvbnRhaW5lciBjb21wb25lbnQgaWYgdXNlZC5cbiAgICovXG4gIENvbnRhaW5lclByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGNvbXBhY3QgdmVydGljYWwgcGFkZGluZyBkZXNpZ25lZCBmb3Iga2V5Ym9hcmQgYW5kIG1vdXNlIGlucHV0IHdpbGwgYmUgdXNlZC5cbiAgICovXG4gIGRlbnNlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGlzdCBpdGVtIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxlZnQgYW5kIHJpZ2h0IHBhZGRpbmcgaXMgcmVtb3ZlZC5cbiAgICovXG4gIGRpc2FibGVHdXR0ZXJzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIDFweCBsaWdodCBib3JkZXIgaXMgYWRkZWQgdG8gdGhlIGJvdHRvbSBvZiB0aGUgbGlzdCBpdGVtLlxuICAgKi9cbiAgZGl2aWRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVXNlIHRvIGFwcGx5IHNlbGVjdGVkIHN0eWxpbmcuXG4gICAqL1xuICBzZWxlY3RlZDogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpTGlzdEl0ZW0nXG59KShMaXN0SXRlbSk7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNNdWlFbGVtZW50KGVsZW1lbnQsIG11aU5hbWVzKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkgJiYgbXVpTmFtZXMuaW5kZXhPZihlbGVtZW50LnR5cGUubXVpTmFtZSkgIT09IC0xO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjQpLFxuICAgICAgd2lkdGg6ICcxZW0nLFxuICAgICAgaGVpZ2h0OiAnMWVtJyxcbiAgICAgIC8vIENocm9tZSBmaXggZm9yIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgyMDU0MVxuICAgICAgLy8gVG8gcmVtb3ZlIGF0IHNvbWUgcG9pbnQuXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICBmbGV4U2hyaW5rOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJhY3Rpb25cImAuICovXG4gICAgY29sb3JBY3Rpb246IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5hY3RpdmVcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJlcnJvclwiYC4gKi9cbiAgICBjb2xvckVycm9yOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiZGlzYWJsZWRcImAuICovXG4gICAgY29sb3JEaXNhYmxlZDoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZvbnRTaXplPVwiaW5oZXJpdFwiYC4gKi9cbiAgICBmb250U2l6ZUluaGVyaXQ6IHtcbiAgICAgIGZvbnRTaXplOiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZm9udFNpemU9XCJzbWFsbFwiYC4gKi9cbiAgICBmb250U2l6ZVNtYWxsOiB7XG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDIwKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb250U2l6ZT1cImxhcmdlXCJgLiAqL1xuICAgIGZvbnRTaXplTGFyZ2U6IHtcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMzYpXG4gICAgfVxuICB9O1xufTtcbnZhciBJY29uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSWNvbihwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdpbmhlcml0JyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnc3BhbicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGZvbnRTaXplID0gcHJvcHMuZm9udFNpemUsXG4gICAgICBmb250U2l6ZSA9IF9wcm9wcyRmb250U2l6ZSA9PT0gdm9pZCAwID8gJ2RlZmF1bHQnIDogX3Byb3BzJGZvbnRTaXplLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImZvbnRTaXplXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KCdtYXRlcmlhbC1pY29ucycsIGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBjb2xvciAhPT0gJ2luaGVyaXQnICYmIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBmb250U2l6ZSAhPT0gJ2RlZmF1bHQnICYmIGNsYXNzZXNbXCJmb250U2l6ZVwiLmNvbmNhdChjYXBpdGFsaXplKGZvbnRTaXplKSldKSxcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSWNvbi5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgaWNvbiBmb250IGxpZ2F0dXJlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICdhY3Rpb24nLCAnZXJyb3InLCAnZGlzYWJsZWQnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgZm9udFNpemUgYXBwbGllZCB0byB0aGUgaWNvbi4gRGVmYXVsdHMgdG8gMjRweCwgYnV0IGNhbiBiZSBjb25maWd1cmUgdG8gaW5oZXJpdCBmb250IHNpemUuXG4gICAqL1xuICBmb250U2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnaW5oZXJpdCcsICdkZWZhdWx0JywgJ3NtYWxsJywgJ2xhcmdlJ10pXG59IDogdm9pZCAwO1xuSWNvbi5tdWlOYW1lID0gJ0ljb24nO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUljb24nXG59KShJY29uKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICcuLi9UeXBvZ3JhcGh5JztcbmltcG9ydCBMaXN0Q29udGV4dCBmcm9tICcuLi9MaXN0L0xpc3RDb250ZXh0JztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgZmxleDogJzEgMSBhdXRvJyxcbiAgICBtaW5XaWR0aDogMCxcbiAgICBtYXJnaW5Ub3A6IDQsXG4gICAgbWFyZ2luQm90dG9tOiA0XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBUeXBvZ3JhcGh5YCBjb21wb25lbnRzIGlmIHByaW1hcnkgYW5kIHNlY29uZGFyeSBhcmUgc2V0LiAqL1xuICBtdWx0aWxpbmU6IHtcbiAgICBtYXJnaW5Ub3A6IDYsXG4gICAgbWFyZ2luQm90dG9tOiA2XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBUeXBvZ3JhcGh5YCBjb21wb25lbnRzIGlmIGRlbnNlLiAqL1xuICBkZW5zZToge30sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgaW5zZXQ9e3RydWV9YC4gKi9cbiAgaW5zZXQ6IHtcbiAgICBwYWRkaW5nTGVmdDogNTZcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcHJpbWFyeSBgVHlwb2dyYXBoeWAgY29tcG9uZW50LiAqL1xuICBwcmltYXJ5OiB7fSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgc2Vjb25kYXJ5IGBUeXBvZ3JhcGh5YCBjb21wb25lbnQuICovXG4gIHNlY29uZGFyeToge31cbn07XG52YXIgTGlzdEl0ZW1UZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGlzdEl0ZW1UZXh0KHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlVHlwb2dyYSA9IHByb3BzLmRpc2FibGVUeXBvZ3JhcGh5LFxuICAgICAgZGlzYWJsZVR5cG9ncmFwaHkgPSBfcHJvcHMkZGlzYWJsZVR5cG9ncmEgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVUeXBvZ3JhLFxuICAgICAgX3Byb3BzJGluc2V0ID0gcHJvcHMuaW5zZXQsXG4gICAgICBpbnNldCA9IF9wcm9wcyRpbnNldCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkaW5zZXQsXG4gICAgICBwcmltYXJ5UHJvcCA9IHByb3BzLnByaW1hcnksXG4gICAgICBwcmltYXJ5VHlwb2dyYXBoeVByb3BzID0gcHJvcHMucHJpbWFyeVR5cG9ncmFwaHlQcm9wcyxcbiAgICAgIHNlY29uZGFyeVByb3AgPSBwcm9wcy5zZWNvbmRhcnksXG4gICAgICBzZWNvbmRhcnlUeXBvZ3JhcGh5UHJvcHMgPSBwcm9wcy5zZWNvbmRhcnlUeXBvZ3JhcGh5UHJvcHMsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGlzYWJsZVR5cG9ncmFwaHlcIiwgXCJpbnNldFwiLCBcInByaW1hcnlcIiwgXCJwcmltYXJ5VHlwb2dyYXBoeVByb3BzXCIsIFwic2Vjb25kYXJ5XCIsIFwic2Vjb25kYXJ5VHlwb2dyYXBoeVByb3BzXCJdKTtcblxuICB2YXIgX1JlYWN0JHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KExpc3RDb250ZXh0KSxcbiAgICAgIGRlbnNlID0gX1JlYWN0JHVzZUNvbnRleHQuZGVuc2U7XG5cbiAgdmFyIHByaW1hcnkgPSBwcmltYXJ5UHJvcCAhPSBudWxsID8gcHJpbWFyeVByb3AgOiBjaGlsZHJlbjtcblxuICBpZiAocHJpbWFyeSAhPSBudWxsICYmIHByaW1hcnkudHlwZSAhPT0gVHlwb2dyYXBoeSAmJiAhZGlzYWJsZVR5cG9ncmFwaHkpIHtcbiAgICBwcmltYXJ5ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHlwb2dyYXBoeSwgX2V4dGVuZHMoe1xuICAgICAgdmFyaWFudDogZGVuc2UgPyAnYm9keTInIDogJ2JvZHkxJyxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5wcmltYXJ5LFxuICAgICAgY29tcG9uZW50OiBcInNwYW5cIixcbiAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIlxuICAgIH0sIHByaW1hcnlUeXBvZ3JhcGh5UHJvcHMpLCBwcmltYXJ5KTtcbiAgfVxuXG4gIHZhciBzZWNvbmRhcnkgPSBzZWNvbmRhcnlQcm9wO1xuXG4gIGlmIChzZWNvbmRhcnkgIT0gbnVsbCAmJiBzZWNvbmRhcnkudHlwZSAhPT0gVHlwb2dyYXBoeSAmJiAhZGlzYWJsZVR5cG9ncmFwaHkpIHtcbiAgICBzZWNvbmRhcnkgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUeXBvZ3JhcGh5LCBfZXh0ZW5kcyh7XG4gICAgICB2YXJpYW50OiBcImJvZHkyXCIsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuc2Vjb25kYXJ5LFxuICAgICAgY29sb3I6IFwidGV4dFNlY29uZGFyeVwiLFxuICAgICAgZGlzcGxheTogXCJibG9ja1wiXG4gICAgfSwgc2Vjb25kYXJ5VHlwb2dyYXBoeVByb3BzKSwgc2Vjb25kYXJ5KTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBkZW5zZSAmJiBjbGFzc2VzLmRlbnNlLCBpbnNldCAmJiBjbGFzc2VzLmluc2V0LCBwcmltYXJ5ICYmIHNlY29uZGFyeSAmJiBjbGFzc2VzLm11bHRpbGluZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCBwcmltYXJ5LCBzZWNvbmRhcnkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBMaXN0SXRlbVRleHQucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQWxpYXMgZm9yIHRoZSBgcHJpbWFyeWAgcHJvcC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNoaWxkcmVuIHdvbid0IGJlIHdyYXBwZWQgYnkgYSBUeXBvZ3JhcGh5IGNvbXBvbmVudC5cbiAgICogVGhpcyBjYW4gYmUgdXNlZnVsIHRvIHJlbmRlciBhbiBhbHRlcm5hdGl2ZSBUeXBvZ3JhcGh5IHZhcmlhbnQgYnkgd3JhcHBpbmdcbiAgICogdGhlIGBjaGlsZHJlbmAgKG9yIGBwcmltYXJ5YCkgdGV4dCwgYW5kIG9wdGlvbmFsIGBzZWNvbmRhcnlgIHRleHRcbiAgICogd2l0aCB0aGUgVHlwb2dyYXBoeSBjb21wb25lbnQuXG4gICAqL1xuICBkaXNhYmxlVHlwb2dyYXBoeTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNoaWxkcmVuIHdpbGwgYmUgaW5kZW50ZWQuXG4gICAqIFRoaXMgc2hvdWxkIGJlIHVzZWQgaWYgdGhlcmUgaXMgbm8gbGVmdCBhdmF0YXIgb3IgbGVmdCBpY29uLlxuICAgKi9cbiAgaW5zZXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgbWFpbiBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBwcmltYXJ5OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlc2UgcHJvcHMgd2lsbCBiZSBmb3J3YXJkZWQgdG8gdGhlIHByaW1hcnkgdHlwb2dyYXBoeSBjb21wb25lbnRcbiAgICogKGFzIGxvbmcgYXMgZGlzYWJsZVR5cG9ncmFwaHkgaXMgbm90IGB0cnVlYCkuXG4gICAqL1xuICBwcmltYXJ5VHlwb2dyYXBoeVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgc2Vjb25kYXJ5IGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIHNlY29uZGFyeTogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZXNlIHByb3BzIHdpbGwgYmUgZm9yd2FyZGVkIHRvIHRoZSBzZWNvbmRhcnkgdHlwb2dyYXBoeSBjb21wb25lbnRcbiAgICogKGFzIGxvbmcgYXMgZGlzYWJsZVR5cG9ncmFwaHkgaXMgbm90IGB0cnVlYCkuXG4gICAqL1xuICBzZWNvbmRhcnlUeXBvZ3JhcGh5UHJvcHM6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpTGlzdEl0ZW1UZXh0J1xufSkoTGlzdEl0ZW1UZXh0KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgTGlzdENvbnRleHQgZnJvbSAnLi4vTGlzdC9MaXN0Q29udGV4dCc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgbWluV2lkdGg6IDU2LFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZSxcbiAgICAgIGZsZXhTaHJpbms6IDAsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgd2hlbiB0aGUgcGFyZW50IGBMaXN0SXRlbWAgdXNlcyBgYWxpZ25JdGVtcz1cImZsZXgtc3RhcnRcImAuICovXG4gICAgYWxpZ25JdGVtc0ZsZXhTdGFydDoge1xuICAgICAgbWFyZ2luVG9wOiA4XG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogQSBzaW1wbGUgd3JhcHBlciB0byBhcHBseSBgTGlzdGAgc3R5bGVzIHRvIGFuIGBJY29uYCBvciBgU3ZnSWNvbmAuXG4gKi9cblxudmFyIExpc3RJdGVtSWNvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpc3RJdGVtSWNvbihwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICB2YXIgY29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoTGlzdENvbnRleHQpO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgY29udGV4dC5hbGlnbkl0ZW1zID09PSAnZmxleC1zdGFydCcgJiYgY2xhc3Nlcy5hbGlnbkl0ZW1zRmxleFN0YXJ0KSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBMaXN0SXRlbUljb24ucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudCwgbm9ybWFsbHkgYEljb25gLCBgU3ZnSWNvbmAsXG4gICAqIG9yIGEgYEBtYXRlcmlhbC11aS9pY29uc2AgU1ZHIGljb24gZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpTGlzdEl0ZW1JY29uJ1xufSkoTGlzdEl0ZW1JY29uKTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgZWxldmF0aW9ucyA9IHt9O1xuICB0aGVtZS5zaGFkb3dzLmZvckVhY2goZnVuY3Rpb24gKHNoYWRvdywgaW5kZXgpIHtcbiAgICBlbGV2YXRpb25zW1wiZWxldmF0aW9uXCIuY29uY2F0KGluZGV4KV0gPSB7XG4gICAgICBib3hTaGFkb3c6IHNoYWRvd1xuICAgIH07XG4gIH0pO1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmJhY2tncm91bmQucGFwZXIsXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JveC1zaGFkb3cnKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzcXVhcmU9e2ZhbHNlfWAuICovXG4gICAgcm91bmRlZDoge1xuICAgICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXNcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIG91dGxpbmVkOiB7XG4gICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmRpdmlkZXIpXG4gICAgfVxuICB9LCBlbGV2YXRpb25zKTtcbn07XG52YXIgUGFwZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQYXBlcihwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkc3F1YXJlID0gcHJvcHMuc3F1YXJlLFxuICAgICAgc3F1YXJlID0gX3Byb3BzJHNxdWFyZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkc3F1YXJlLFxuICAgICAgX3Byb3BzJGVsZXZhdGlvbiA9IHByb3BzLmVsZXZhdGlvbixcbiAgICAgIGVsZXZhdGlvbiA9IF9wcm9wcyRlbGV2YXRpb24gPT09IHZvaWQgMCA/IDEgOiBfcHJvcHMkZWxldmF0aW9uLFxuICAgICAgX3Byb3BzJHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgdmFyaWFudCA9IF9wcm9wcyR2YXJpYW50ID09PSB2b2lkIDAgPyAnZWxldmF0aW9uJyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJzcXVhcmVcIiwgXCJlbGV2YXRpb25cIiwgXCJ2YXJpYW50XCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCB2YXJpYW50ID09PSAnb3V0bGluZWQnID8gY2xhc3Nlcy5vdXRsaW5lZCA6IGNsYXNzZXNbXCJlbGV2YXRpb25cIi5jb25jYXQoZWxldmF0aW9uKV0sICFzcXVhcmUgJiYgY2xhc3Nlcy5yb3VuZGVkKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBQYXBlci5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFNoYWRvdyBkZXB0aCwgY29ycmVzcG9uZHMgdG8gYGRwYCBpbiB0aGUgc3BlYy5cbiAgICogSXQgYWNjZXB0cyB2YWx1ZXMgYmV0d2VlbiAwIGFuZCAyNCBpbmNsdXNpdmUuXG4gICAqL1xuICBlbGV2YXRpb246IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5udW1iZXIsIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgICAgZWxldmF0aW9uID0gcHJvcHMuZWxldmF0aW9uOyAvLyBpbiBjYXNlIGB3aXRoU3R5bGVzYCBmYWlscyB0byBpbmplY3Qgd2UgZG9uJ3QgbmVlZCB0aGlzIHdhcm5pbmdcblxuICAgIGlmIChjbGFzc2VzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChlbGV2YXRpb24gIT0gbnVsbCAmJiBjbGFzc2VzW1wiZWxldmF0aW9uXCIuY29uY2F0KGVsZXZhdGlvbildID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJNYXRlcmlhbC1VSTogVGhpcyBlbGV2YXRpb24gYFwiLmNvbmNhdChlbGV2YXRpb24sIFwiYCBpcyBub3QgaW1wbGVtZW50ZWQuXCIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgcm91bmRlZCBjb3JuZXJzIGFyZSBkaXNhYmxlZC5cbiAgICovXG4gIHNxdWFyZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2VsZXZhdGlvbicsICdvdXRsaW5lZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlQYXBlcidcbn0pKFBhcGVyKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBQYXBlciBmcm9tICcuLi9QYXBlcic7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgYmFja2dyb3VuZENvbG9yRGVmYXVsdCA9IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/IHRoZW1lLnBhbGV0dGUuZ3JleVsxMDBdIDogdGhlbWUucGFsZXR0ZS5ncmV5WzkwMF07XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIC8vIFByZXZlbnQgcGFkZGluZyBpc3N1ZSB3aXRoIHRoZSBNb2RhbCBhbmQgZml4ZWQgcG9zaXRpb25lZCBBcHBCYXIuXG4gICAgICB6SW5kZXg6IHRoZW1lLnpJbmRleC5hcHBCYXIsXG4gICAgICBmbGV4U2hyaW5rOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBvc2l0aW9uPVwiZml4ZWRcImAuICovXG4gICAgcG9zaXRpb25GaXhlZDoge1xuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAnYXV0bycsXG4gICAgICByaWdodDogMCxcbiAgICAgICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgICAgIC8vIFByZXZlbnQgdGhlIGFwcCBiYXIgdG8gYmUgdmlzaWJsZSBvbiBlYWNoIHByaW50ZWQgcGFnZS5cbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcG9zaXRpb249XCJhYnNvbHV0ZVwiYC4gKi9cbiAgICBwb3NpdGlvbkFic29sdXRlOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6ICdhdXRvJyxcbiAgICAgIHJpZ2h0OiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBvc2l0aW9uPVwic3RpY2t5XCJgLiAqL1xuICAgIHBvc2l0aW9uU3RpY2t5OiB7XG4gICAgICAvLyDimqDvuI8gc3RpY2t5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgSUUgMTEuXG4gICAgICBwb3NpdGlvbjogJ3N0aWNreScsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAnYXV0bycsXG4gICAgICByaWdodDogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwb3NpdGlvbj1cInN0YXRpY1wiYC4gKi9cbiAgICBwb3NpdGlvblN0YXRpYzoge1xuICAgICAgcG9zaXRpb246ICdzdGF0aWMnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBvc2l0aW9uPVwicmVsYXRpdmVcImAuICovXG4gICAgcG9zaXRpb25SZWxhdGl2ZToge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJkZWZhdWx0XCJgLiAqL1xuICAgIGNvbG9yRGVmYXVsdDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3JEZWZhdWx0LFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KGJhY2tncm91bmRDb2xvckRlZmF1bHQpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5LmNvbnRyYXN0VGV4dFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5LmNvbnRyYXN0VGV4dFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImluaGVyaXRcImAuICovXG4gICAgY29sb3JJbmhlcml0OiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwidHJhbnNwYXJlbnRcImAuICovXG4gICAgY29sb3JUcmFuc3BhcmVudDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgY29sb3I6ICdpbmhlcml0J1xuICAgIH1cbiAgfTtcbn07XG52YXIgQXBwQmFyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQXBwQmFyKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ3ByaW1hcnknIDogX3Byb3BzJGNvbG9yLFxuICAgICAgX3Byb3BzJHBvc2l0aW9uID0gcHJvcHMucG9zaXRpb24sXG4gICAgICBwb3NpdGlvbiA9IF9wcm9wcyRwb3NpdGlvbiA9PT0gdm9pZCAwID8gJ2ZpeGVkJyA6IF9wcm9wcyRwb3NpdGlvbixcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJwb3NpdGlvblwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFBhcGVyLCBfZXh0ZW5kcyh7XG4gICAgc3F1YXJlOiB0cnVlLFxuICAgIGNvbXBvbmVudDogXCJoZWFkZXJcIixcbiAgICBlbGV2YXRpb246IDQsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlc1tcInBvc2l0aW9uXCIuY29uY2F0KGNhcGl0YWxpemUocG9zaXRpb24pKV0sIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBjbGFzc05hbWUsIHBvc2l0aW9uID09PSAnZml4ZWQnICYmICdtdWktZml4ZWQnKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBBcHBCYXIucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAndHJhbnNwYXJlbnQnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBwb3NpdGlvbmluZyB0eXBlLiBUaGUgYmVoYXZpb3Igb2YgdGhlIGRpZmZlcmVudCBvcHRpb25zIGlzIGRlc2NyaWJlZFxuICAgKiBbaW4gdGhlIE1ETiB3ZWIgZG9jc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9MZWFybi9DU1MvQ1NTX2xheW91dC9Qb3NpdGlvbmluZykuXG4gICAqIE5vdGU6IGBzdGlja3lgIGlzIG5vdCB1bml2ZXJzYWxseSBzdXBwb3J0ZWQgYW5kIHdpbGwgZmFsbCBiYWNrIHRvIGBzdGF0aWNgIHdoZW4gdW5hdmFpbGFibGUuXG4gICAqL1xuICBwb3NpdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnYWJzb2x1dGUnLCAnZml4ZWQnLCAncmVsYXRpdmUnLCAnc3RhdGljJywgJ3N0aWNreSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlBcHBCYXInXG59KShBcHBCYXIpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlR3V0dGVycz17ZmFsc2V9YC4gKi9cbiAgICBndXR0ZXJzOiBfZGVmaW5lUHJvcGVydHkoe1xuICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMilcbiAgICB9LCB0aGVtZS5icmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMyksXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMylcbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJyZWd1bGFyXCJgLiAqL1xuICAgIHJlZ3VsYXI6IHRoZW1lLm1peGlucy50b29sYmFyLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImRlbnNlXCJgLiAqL1xuICAgIGRlbnNlOiB7XG4gICAgICBtaW5IZWlnaHQ6IDQ4XG4gICAgfVxuICB9O1xufTtcbnZhciBUb29sYmFyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVG9vbGJhcihwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZGlzYWJsZUd1dHRlcnMgPSBwcm9wcy5kaXNhYmxlR3V0dGVycyxcbiAgICAgIGRpc2FibGVHdXR0ZXJzID0gX3Byb3BzJGRpc2FibGVHdXR0ZXJzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlR3V0dGVycyxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ3JlZ3VsYXInIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVHdXR0ZXJzXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXNbdmFyaWFudF0sIGNsYXNzTmFtZSwgIWRpc2FibGVHdXR0ZXJzICYmIGNsYXNzZXMuZ3V0dGVycyksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVG9vbGJhci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUb29sYmFyIGNoaWxkcmVuLCB1c3VhbGx5IGEgbWl4dHVyZSBvZiBgSWNvbkJ1dHRvbmAsIGBCdXR0b25gIGFuZCBgVHlwb2dyYXBoeWAuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGRpc2FibGVzIGd1dHRlciBwYWRkaW5nLlxuICAgKi9cbiAgZGlzYWJsZUd1dHRlcnM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydyZWd1bGFyJywgJ2RlbnNlJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVRvb2xiYXInXG59KShUb29sYmFyKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgeyBmYWRlIH0gZnJvbSAnLi4vc3R5bGVzL2NvbG9yTWFuaXB1bGF0b3InO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgZmxleDogJzAgMCBhdXRvJyxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjQpLFxuICAgICAgcGFkZGluZzogMTIsXG4gICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgb3ZlcmZsb3c6ICd2aXNpYmxlJyxcbiAgICAgIC8vIEV4cGxpY2l0bHkgc2V0IHRoZSBkZWZhdWx0IHZhbHVlIHRvIHNvbHZlIGEgYnVnIG9uIElFIDExLlxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYmFja2dyb3VuZC1jb2xvcicsIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gICAgICB9KSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZWRnZT1cInN0YXJ0XCJgLiAqL1xuICAgIGVkZ2VTdGFydDoge1xuICAgICAgbWFyZ2luTGVmdDogLTEyLFxuICAgICAgJyRzaXplU21hbGwmJzoge1xuICAgICAgICBtYXJnaW5MZWZ0OiAtM1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlZGdlPVwiZW5kXCJgLiAqL1xuICAgIGVkZ2VFbmQ6IHtcbiAgICAgIG1hcmdpblJpZ2h0OiAtMTIsXG4gICAgICAnJHNpemVTbWFsbCYnOiB7XG4gICAgICAgIG1hcmdpblJpZ2h0OiAtM1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImluaGVyaXRcImAuICovXG4gICAgY29sb3JJbmhlcml0OiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNpemU9XCJzbWFsbFwiYC4gKi9cbiAgICBzaXplU21hbGw6IHtcbiAgICAgIHBhZGRpbmc6IDMsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE4KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgY2hpbGRyZW4gY29udGFpbmVyIGVsZW1lbnQuICovXG4gICAgbGFiZWw6IHtcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnaW5oZXJpdCcsXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2luaGVyaXQnXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogUmVmZXIgdG8gdGhlIFtJY29uc10oL2NvbXBvbmVudHMvaWNvbnMvKSBzZWN0aW9uIG9mIHRoZSBkb2N1bWVudGF0aW9uXG4gKiByZWdhcmRpbmcgdGhlIGF2YWlsYWJsZSBpY29uIG9wdGlvbnMuXG4gKi9cblxudmFyIEljb25CdXR0b24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBJY29uQnV0dG9uKHByb3BzLCByZWYpIHtcbiAgdmFyIF9wcm9wcyRlZGdlID0gcHJvcHMuZWRnZSxcbiAgICAgIGVkZ2UgPSBfcHJvcHMkZWRnZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZWRnZSxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdkZWZhdWx0JyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIF9wcm9wcyRkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZGlzYWJsZWQgPSBfcHJvcHMkZGlzYWJsZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVkLFxuICAgICAgX3Byb3BzJGRpc2FibGVGb2N1c1JpID0gcHJvcHMuZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgICAgZGlzYWJsZUZvY3VzUmlwcGxlID0gX3Byb3BzJGRpc2FibGVGb2N1c1JpID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlRm9jdXNSaSxcbiAgICAgIF9wcm9wcyRzaXplID0gcHJvcHMuc2l6ZSxcbiAgICAgIHNpemUgPSBfcHJvcHMkc2l6ZSA9PT0gdm9pZCAwID8gJ21lZGl1bScgOiBfcHJvcHMkc2l6ZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJlZGdlXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVGb2N1c1JpcHBsZVwiLCBcInNpemVcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChCdXR0b25CYXNlLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBjb2xvciAhPT0gJ2RlZmF1bHQnICYmIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkLCBzaXplID09PSBcInNtYWxsXCIgJiYgY2xhc3Nlc1tcInNpemVcIi5jb25jYXQoY2FwaXRhbGl6ZShzaXplKSldLCB7XG4gICAgICAnc3RhcnQnOiBjbGFzc2VzLmVkZ2VTdGFydCxcbiAgICAgICdlbmQnOiBjbGFzc2VzLmVkZ2VFbmRcbiAgICB9W2VkZ2VdKSxcbiAgICBjZW50ZXJSaXBwbGU6IHRydWUsXG4gICAgZm9jdXNSaXBwbGU6ICFkaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMubGFiZWxcbiAgfSwgY2hpbGRyZW4pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSWNvbkJ1dHRvbi5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgaWNvbiBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5ub2RlLCBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgZm91bmQgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KHByb3BzLmNoaWxkcmVuKS5zb21lKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkgJiYgY2hpbGQucHJvcHMub25DbGljaztcbiAgICB9KTtcblxuICAgIGlmIChmb3VuZCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihbJ01hdGVyaWFsLVVJOiBZb3UgYXJlIHByb3ZpZGluZyBhbiBvbkNsaWNrIGV2ZW50IGxpc3RlbmVyICcgKyAndG8gYSBjaGlsZCBvZiBhIGJ1dHRvbiBlbGVtZW50LicsICdGaXJlZm94IHdpbGwgbmV2ZXIgdHJpZ2dlciB0aGUgZXZlbnQuJywgJ1lvdSBzaG91bGQgbW92ZSB0aGUgb25DbGljayBsaXN0ZW5lciB0byB0aGUgcGFyZW50IGJ1dHRvbiBlbGVtZW50LicsICdodHRwczovL2dpdGh1Yi5jb20vbXVpLW9yZy9tYXRlcmlhbC11aS9pc3N1ZXMvMTM5NTcnXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBidXR0b24gd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgIGtleWJvYXJkIGZvY3VzIHJpcHBsZSB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZUZvY3VzUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIGVmZmVjdCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZVJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGdpdmVuLCB1c2VzIGEgbmVnYXRpdmUgbWFyZ2luIHRvIGNvdW50ZXJhY3QgdGhlIHBhZGRpbmcgb24gb25lXG4gICAqIHNpZGUgKHRoaXMgaXMgb2Z0ZW4gaGVscGZ1bCBmb3IgYWxpZ25pbmcgdGhlIGxlZnQgb3IgcmlnaHRcbiAgICogc2lkZSBvZiB0aGUgaWNvbiB3aXRoIGNvbnRlbnQgYWJvdmUgb3IgYmVsb3csIHdpdGhvdXQgcnVpbmluZyB0aGUgYm9yZGVyXG4gICAqIHNpemUgYW5kIHNoYXBlKS5cbiAgICovXG4gIGVkZ2U6IFByb3BUeXBlcy5vbmVPZihbJ3N0YXJ0JywgJ2VuZCcsIGZhbHNlXSksXG5cbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBidXR0b24uXG4gICAqIGBzbWFsbGAgaXMgZXF1aXZhbGVudCB0byB0aGUgZGVuc2UgYnV0dG9uIHN0eWxpbmcuXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2YoWydzbWFsbCcsICdtZWRpdW0nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpSWNvbkJ1dHRvbidcbn0pKEljb25CdXR0b24pOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG93bmVyRG9jdW1lbnQobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBleGFjdFByb3AsIEhUTUxFbGVtZW50VHlwZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgc2V0UmVmIGZyb20gJy4uL3V0aWxzL3NldFJlZic7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcblxuZnVuY3Rpb24gZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikge1xuICBjb250YWluZXIgPSB0eXBlb2YgY29udGFpbmVyID09PSAnZnVuY3Rpb24nID8gY29udGFpbmVyKCkgOiBjb250YWluZXI7IC8vICNTdHJpY3RNb2RlIHJlYWR5XG5cbiAgcmV0dXJuIFJlYWN0RE9NLmZpbmRET01Ob2RlKGNvbnRhaW5lcik7XG59XG5cbnZhciB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xuLyoqXG4gKiBQb3J0YWxzIHByb3ZpZGUgYSBmaXJzdC1jbGFzcyB3YXkgdG8gcmVuZGVyIGNoaWxkcmVuIGludG8gYSBET00gbm9kZVxuICogdGhhdCBleGlzdHMgb3V0c2lkZSB0aGUgRE9NIGhpZXJhcmNoeSBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAqL1xuXG52YXIgUG9ydGFsID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gUG9ydGFsKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjb250YWluZXIgPSBwcm9wcy5jb250YWluZXIsXG4gICAgICBfcHJvcHMkZGlzYWJsZVBvcnRhbCA9IHByb3BzLmRpc2FibGVQb3J0YWwsXG4gICAgICBkaXNhYmxlUG9ydGFsID0gX3Byb3BzJGRpc2FibGVQb3J0YWwgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVQb3J0YWwsXG4gICAgICBvblJlbmRlcmVkID0gcHJvcHMub25SZW5kZXJlZDtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUobnVsbCksXG4gICAgICBtb3VudE5vZGUgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRNb3VudE5vZGUgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYoIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikgPyBjaGlsZHJlbi5yZWYgOiBudWxsLCByZWYpO1xuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFkaXNhYmxlUG9ydGFsKSB7XG4gICAgICBzZXRNb3VudE5vZGUoZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikgfHwgZG9jdW1lbnQuYm9keSk7XG4gICAgfVxuICB9LCBbY29udGFpbmVyLCBkaXNhYmxlUG9ydGFsXSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAobW91bnROb2RlICYmICFkaXNhYmxlUG9ydGFsKSB7XG4gICAgICBzZXRSZWYocmVmLCBtb3VudE5vZGUpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2V0UmVmKHJlZiwgbnVsbCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0sIFtyZWYsIG1vdW50Tm9kZSwgZGlzYWJsZVBvcnRhbF0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG9uUmVuZGVyZWQgJiYgKG1vdW50Tm9kZSB8fCBkaXNhYmxlUG9ydGFsKSkge1xuICAgICAgb25SZW5kZXJlZCgpO1xuICAgIH1cbiAgfSwgW29uUmVuZGVyZWQsIG1vdW50Tm9kZSwgZGlzYWJsZVBvcnRhbF0pO1xuXG4gIGlmIChkaXNhYmxlUG9ydGFsKSB7XG4gICAgaWYgKCAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pKSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwge1xuICAgICAgICByZWY6IGhhbmRsZVJlZlxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG5cbiAgcmV0dXJuIG1vdW50Tm9kZSA/IC8qI19fUFVSRV9fKi9SZWFjdERPTS5jcmVhdGVQb3J0YWwoY2hpbGRyZW4sIG1vdW50Tm9kZSkgOiBtb3VudE5vZGU7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFBvcnRhbC5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY2hpbGRyZW4gdG8gcmVuZGVyIGludG8gdGhlIGBjb250YWluZXJgLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBBIEhUTUwgZWxlbWVudCwgY29tcG9uZW50IGluc3RhbmNlLCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLlxuICAgKiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBoYXZlIHRoZSBwb3J0YWwgY2hpbGRyZW4gYXBwZW5kZWQgdG8gaXQuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIGl0IHVzZXMgdGhlIGJvZHkgb2YgdGhlIHRvcC1sZXZlbCBkb2N1bWVudCBvYmplY3QsXG4gICAqIHNvIGl0J3Mgc2ltcGx5IGBkb2N1bWVudC5ib2R5YCBtb3N0IG9mIHRoZSB0aW1lLlxuICAgKi9cbiAgY29udGFpbmVyOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5pbnN0YW5jZU9mKFJlYWN0LkNvbXBvbmVudCksIFByb3BUeXBlcy5mdW5jXSksXG5cbiAgLyoqXG4gICAqIERpc2FibGUgdGhlIHBvcnRhbCBiZWhhdmlvci5cbiAgICogVGhlIGNoaWxkcmVuIHN0YXkgd2l0aGluIGl0J3MgcGFyZW50IERPTSBoaWVyYXJjaHkuXG4gICAqL1xuICBkaXNhYmxlUG9ydGFsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgb25jZSB0aGUgY2hpbGRyZW4gaGFzIGJlZW4gbW91bnRlZCBpbnRvIHRoZSBgY29udGFpbmVyYC5cbiAgICpcbiAgICogVGhpcyBwcm9wIHdpbGwgYmUgZGVwcmVjYXRlZCBhbmQgcmVtb3ZlZCBpbiB2NSwgdGhlIHJlZiBjYW4gYmUgdXNlZCBpbnN0ZWFkLlxuICAgKi9cbiAgb25SZW5kZXJlZDogUHJvcFR5cGVzLmZ1bmNcbn0gOiB2b2lkIDA7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBQb3J0YWxbJ3Byb3BUeXBlcycgKyAnJ10gPSBleGFjdFByb3AoUG9ydGFsLnByb3BUeXBlcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBvcnRhbDsiLCIvKipcbiAqIFNhZmUgY2hhaW5lZCBmdW5jdGlvblxuICpcbiAqIFdpbGwgb25seSBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gaWYgbmVlZGVkLFxuICogb3RoZXJ3aXNlIHdpbGwgcGFzcyBiYWNrIGV4aXN0aW5nIGZ1bmN0aW9ucyBvciBudWxsLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmN0aW9ucyB0byBjaGFpblxuICogQHJldHVybnMge2Z1bmN0aW9ufG51bGx9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUNoYWluZWRGdW5jdGlvbigpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBmdW5jKSB7XG4gICAgaWYgKGZ1bmMgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBJbnZhbGlkIEFyZ3VtZW50IFR5cGUsIG11c3Qgb25seSBwcm92aWRlIGZ1bmN0aW9ucywgdW5kZWZpbmVkLCBvciBudWxsLicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiBjaGFpbmVkRnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBhY2MuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gIH0sIGZ1bmN0aW9uICgpIHt9KTtcbn0iLCJpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgZ2V0U2Nyb2xsYmFyU2l6ZSBmcm9tICcuLi91dGlscy9nZXRTY3JvbGxiYXJTaXplJztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4uL3V0aWxzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IG93bmVyV2luZG93IGZyb20gJy4uL3V0aWxzL293bmVyV2luZG93JzsgLy8gSXMgYSB2ZXJ0aWNhbCBzY3JvbGxiYXIgZGlzcGxheWVkP1xuXG5mdW5jdGlvbiBpc092ZXJmbG93aW5nKGNvbnRhaW5lcikge1xuICB2YXIgZG9jID0gb3duZXJEb2N1bWVudChjb250YWluZXIpO1xuXG4gIGlmIChkb2MuYm9keSA9PT0gY29udGFpbmVyKSB7XG4gICAgcmV0dXJuIG93bmVyV2luZG93KGRvYykuaW5uZXJXaWR0aCA+IGRvYy5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIH1cblxuICByZXR1cm4gY29udGFpbmVyLnNjcm9sbEhlaWdodCA+IGNvbnRhaW5lci5jbGllbnRIZWlnaHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcmlhSGlkZGVuKG5vZGUsIHNob3cpIHtcbiAgaWYgKHNob3cpIHtcbiAgICBub2RlLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICB9IGVsc2Uge1xuICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFBhZGRpbmdSaWdodChub2RlKSB7XG4gIHJldHVybiBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKVsncGFkZGluZy1yaWdodCddLCAxMCkgfHwgMDtcbn1cblxuZnVuY3Rpb24gYXJpYUhpZGRlblNpYmxpbmdzKGNvbnRhaW5lciwgbW91bnROb2RlLCBjdXJyZW50Tm9kZSkge1xuICB2YXIgbm9kZXNUb0V4Y2x1ZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IFtdO1xuICB2YXIgc2hvdyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ID8gYXJndW1lbnRzWzRdIDogdW5kZWZpbmVkO1xuICB2YXIgYmxhY2tsaXN0ID0gW21vdW50Tm9kZSwgY3VycmVudE5vZGVdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkobm9kZXNUb0V4Y2x1ZGUpKTtcbiAgdmFyIGJsYWNrbGlzdFRhZ05hbWVzID0gWydURU1QTEFURScsICdTQ1JJUFQnLCAnU1RZTEUnXTtcbiAgW10uZm9yRWFjaC5jYWxsKGNvbnRhaW5lci5jaGlsZHJlbiwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBibGFja2xpc3QuaW5kZXhPZihub2RlKSA9PT0gLTEgJiYgYmxhY2tsaXN0VGFnTmFtZXMuaW5kZXhPZihub2RlLnRhZ05hbWUpID09PSAtMSkge1xuICAgICAgYXJpYUhpZGRlbihub2RlLCBzaG93KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBmaW5kSW5kZXhPZihjb250YWluZXJJbmZvLCBjYWxsYmFjaykge1xuICB2YXIgaWR4ID0gLTE7XG4gIGNvbnRhaW5lckluZm8uc29tZShmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICBpZiAoY2FsbGJhY2soaXRlbSkpIHtcbiAgICAgIGlkeCA9IGluZGV4O1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcbiAgcmV0dXJuIGlkeDtcbn1cblxuZnVuY3Rpb24gaGFuZGxlQ29udGFpbmVyKGNvbnRhaW5lckluZm8sIHByb3BzKSB7XG4gIHZhciByZXN0b3JlU3R5bGUgPSBbXTtcbiAgdmFyIHJlc3RvcmVQYWRkaW5ncyA9IFtdO1xuICB2YXIgY29udGFpbmVyID0gY29udGFpbmVySW5mby5jb250YWluZXI7XG4gIHZhciBmaXhlZE5vZGVzO1xuXG4gIGlmICghcHJvcHMuZGlzYWJsZVNjcm9sbExvY2spIHtcbiAgICBpZiAoaXNPdmVyZmxvd2luZyhjb250YWluZXIpKSB7XG4gICAgICAvLyBDb21wdXRlIHRoZSBzaXplIGJlZm9yZSBhcHBseWluZyBvdmVyZmxvdyBoaWRkZW4gdG8gYXZvaWQgYW55IHNjcm9sbCBqdW1wcy5cbiAgICAgIHZhciBzY3JvbGxiYXJTaXplID0gZ2V0U2Nyb2xsYmFyU2l6ZSgpO1xuICAgICAgcmVzdG9yZVN0eWxlLnB1c2goe1xuICAgICAgICB2YWx1ZTogY29udGFpbmVyLnN0eWxlLnBhZGRpbmdSaWdodCxcbiAgICAgICAga2V5OiAncGFkZGluZy1yaWdodCcsXG4gICAgICAgIGVsOiBjb250YWluZXJcbiAgICAgIH0pOyAvLyBVc2UgY29tcHV0ZWQgc3R5bGUsIGhlcmUgdG8gZ2V0IHRoZSByZWFsIHBhZGRpbmcgdG8gYWRkIG91ciBzY3JvbGxiYXIgd2lkdGguXG5cbiAgICAgIGNvbnRhaW5lci5zdHlsZVsncGFkZGluZy1yaWdodCddID0gXCJcIi5jb25jYXQoZ2V0UGFkZGluZ1JpZ2h0KGNvbnRhaW5lcikgKyBzY3JvbGxiYXJTaXplLCBcInB4XCIpOyAvLyAubXVpLWZpeGVkIGlzIGEgZ2xvYmFsIGhlbHBlci5cblxuICAgICAgZml4ZWROb2RlcyA9IG93bmVyRG9jdW1lbnQoY29udGFpbmVyKS5xdWVyeVNlbGVjdG9yQWxsKCcubXVpLWZpeGVkJyk7XG4gICAgICBbXS5mb3JFYWNoLmNhbGwoZml4ZWROb2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmVzdG9yZVBhZGRpbmdzLnB1c2gobm9kZS5zdHlsZS5wYWRkaW5nUmlnaHQpO1xuICAgICAgICBub2RlLnN0eWxlLnBhZGRpbmdSaWdodCA9IFwiXCIuY29uY2F0KGdldFBhZGRpbmdSaWdodChub2RlKSArIHNjcm9sbGJhclNpemUsIFwicHhcIik7XG4gICAgICB9KTtcbiAgICB9IC8vIEltcHJvdmUgR2F0c2J5IHN1cHBvcnRcbiAgICAvLyBodHRwczovL2Nzcy10cmlja3MuY29tL3NuaXBwZXRzL2Nzcy9mb3JjZS12ZXJ0aWNhbC1zY3JvbGxiYXIvXG5cblxuICAgIHZhciBwYXJlbnQgPSBjb250YWluZXIucGFyZW50RWxlbWVudDtcbiAgICB2YXIgc2Nyb2xsQ29udGFpbmVyID0gcGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCcgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUocGFyZW50KVsnb3ZlcmZsb3cteSddID09PSAnc2Nyb2xsJyA/IHBhcmVudCA6IGNvbnRhaW5lcjsgLy8gQmxvY2sgdGhlIHNjcm9sbCBldmVuIGlmIG5vIHNjcm9sbGJhciBpcyB2aXNpYmxlIHRvIGFjY291bnQgZm9yIG1vYmlsZSBrZXlib2FyZFxuICAgIC8vIHNjcmVlbnNpemUgc2hyaW5rLlxuXG4gICAgcmVzdG9yZVN0eWxlLnB1c2goe1xuICAgICAgdmFsdWU6IHNjcm9sbENvbnRhaW5lci5zdHlsZS5vdmVyZmxvdyxcbiAgICAgIGtleTogJ292ZXJmbG93JyxcbiAgICAgIGVsOiBzY3JvbGxDb250YWluZXJcbiAgICB9KTtcbiAgICBzY3JvbGxDb250YWluZXIuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgfVxuXG4gIHZhciByZXN0b3JlID0gZnVuY3Rpb24gcmVzdG9yZSgpIHtcbiAgICBpZiAoZml4ZWROb2Rlcykge1xuICAgICAgW10uZm9yRWFjaC5jYWxsKGZpeGVkTm9kZXMsIGZ1bmN0aW9uIChub2RlLCBpKSB7XG4gICAgICAgIGlmIChyZXN0b3JlUGFkZGluZ3NbaV0pIHtcbiAgICAgICAgICBub2RlLnN0eWxlLnBhZGRpbmdSaWdodCA9IHJlc3RvcmVQYWRkaW5nc1tpXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdwYWRkaW5nLXJpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlc3RvcmVTdHlsZS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgdmFsdWUgPSBfcmVmLnZhbHVlLFxuICAgICAgICAgIGVsID0gX3JlZi5lbCxcbiAgICAgICAgICBrZXkgPSBfcmVmLmtleTtcblxuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KGtleSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwuc3R5bGUucmVtb3ZlUHJvcGVydHkoa2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gcmVzdG9yZTtcbn1cblxuZnVuY3Rpb24gZ2V0SGlkZGVuU2libGluZ3MoY29udGFpbmVyKSB7XG4gIHZhciBoaWRkZW5TaWJsaW5ncyA9IFtdO1xuICBbXS5mb3JFYWNoLmNhbGwoY29udGFpbmVyLmNoaWxkcmVuLCBmdW5jdGlvbiAobm9kZSkge1xuICAgIGlmIChub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKSA9PT0gJ3RydWUnKSB7XG4gICAgICBoaWRkZW5TaWJsaW5ncy5wdXNoKG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBoaWRkZW5TaWJsaW5ncztcbn1cbi8qKlxuICogQGlnbm9yZSAtIGRvIG5vdCBkb2N1bWVudC5cbiAqXG4gKiBQcm9wZXIgc3RhdGUgbWFuYWdlbWVudCBmb3IgY29udGFpbmVycyBhbmQgdGhlIG1vZGFscyBpbiB0aG9zZSBjb250YWluZXJzLlxuICogU2ltcGxpZmllZCwgYnV0IGluc3BpcmVkIGJ5IHJlYWN0LW92ZXJsYXkncyBNb2RhbE1hbmFnZXIgY2xhc3MuXG4gKiBVc2VkIGJ5IHRoZSBNb2RhbCB0byBlbnN1cmUgcHJvcGVyIHN0eWxpbmcgb2YgY29udGFpbmVycy5cbiAqL1xuXG5cbnZhciBNb2RhbE1hbmFnZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNb2RhbE1hbmFnZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vZGFsTWFuYWdlcik7XG5cbiAgICAvLyB0aGlzLm1vZGFsc1ttb2RhbEluZGV4XSA9IG1vZGFsXG4gICAgdGhpcy5tb2RhbHMgPSBbXTsgLy8gdGhpcy5jb250YWluZXJzW2NvbnRhaW5lckluZGV4XSA9IHtcbiAgICAvLyAgIG1vZGFsczogW10sXG4gICAgLy8gICBjb250YWluZXIsXG4gICAgLy8gICByZXN0b3JlOiBudWxsLFxuICAgIC8vIH1cblxuICAgIHRoaXMuY29udGFpbmVycyA9IFtdO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE1vZGFsTWFuYWdlciwgW3tcbiAgICBrZXk6IFwiYWRkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZChtb2RhbCwgY29udGFpbmVyKSB7XG4gICAgICB2YXIgbW9kYWxJbmRleCA9IHRoaXMubW9kYWxzLmluZGV4T2YobW9kYWwpO1xuXG4gICAgICBpZiAobW9kYWxJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIG1vZGFsSW5kZXg7XG4gICAgICB9XG5cbiAgICAgIG1vZGFsSW5kZXggPSB0aGlzLm1vZGFscy5sZW5ndGg7XG4gICAgICB0aGlzLm1vZGFscy5wdXNoKG1vZGFsKTsgLy8gSWYgdGhlIG1vZGFsIHdlIGFyZSBhZGRpbmcgaXMgYWxyZWFkeSBpbiB0aGUgRE9NLlxuXG4gICAgICBpZiAobW9kYWwubW9kYWxSZWYpIHtcbiAgICAgICAgYXJpYUhpZGRlbihtb2RhbC5tb2RhbFJlZiwgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaGlkZGVuU2libGluZ05vZGVzID0gZ2V0SGlkZGVuU2libGluZ3MoY29udGFpbmVyKTtcbiAgICAgIGFyaWFIaWRkZW5TaWJsaW5ncyhjb250YWluZXIsIG1vZGFsLm1vdW50Tm9kZSwgbW9kYWwubW9kYWxSZWYsIGhpZGRlblNpYmxpbmdOb2RlcywgdHJ1ZSk7XG4gICAgICB2YXIgY29udGFpbmVySW5kZXggPSBmaW5kSW5kZXhPZih0aGlzLmNvbnRhaW5lcnMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtLmNvbnRhaW5lciA9PT0gY29udGFpbmVyO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChjb250YWluZXJJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXJzW2NvbnRhaW5lckluZGV4XS5tb2RhbHMucHVzaChtb2RhbCk7XG4gICAgICAgIHJldHVybiBtb2RhbEluZGV4O1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbnRhaW5lcnMucHVzaCh7XG4gICAgICAgIG1vZGFsczogW21vZGFsXSxcbiAgICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgICAgIHJlc3RvcmU6IG51bGwsXG4gICAgICAgIGhpZGRlblNpYmxpbmdOb2RlczogaGlkZGVuU2libGluZ05vZGVzXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtb2RhbEluZGV4O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJtb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtb3VudChtb2RhbCwgcHJvcHMpIHtcbiAgICAgIHZhciBjb250YWluZXJJbmRleCA9IGZpbmRJbmRleE9mKHRoaXMuY29udGFpbmVycywgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0ubW9kYWxzLmluZGV4T2YobW9kYWwpICE9PSAtMTtcbiAgICAgIH0pO1xuICAgICAgdmFyIGNvbnRhaW5lckluZm8gPSB0aGlzLmNvbnRhaW5lcnNbY29udGFpbmVySW5kZXhdO1xuXG4gICAgICBpZiAoIWNvbnRhaW5lckluZm8ucmVzdG9yZSkge1xuICAgICAgICBjb250YWluZXJJbmZvLnJlc3RvcmUgPSBoYW5kbGVDb250YWluZXIoY29udGFpbmVySW5mbywgcHJvcHMpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW1vdmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKG1vZGFsKSB7XG4gICAgICB2YXIgbW9kYWxJbmRleCA9IHRoaXMubW9kYWxzLmluZGV4T2YobW9kYWwpO1xuXG4gICAgICBpZiAobW9kYWxJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIG1vZGFsSW5kZXg7XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250YWluZXJJbmRleCA9IGZpbmRJbmRleE9mKHRoaXMuY29udGFpbmVycywgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0ubW9kYWxzLmluZGV4T2YobW9kYWwpICE9PSAtMTtcbiAgICAgIH0pO1xuICAgICAgdmFyIGNvbnRhaW5lckluZm8gPSB0aGlzLmNvbnRhaW5lcnNbY29udGFpbmVySW5kZXhdO1xuICAgICAgY29udGFpbmVySW5mby5tb2RhbHMuc3BsaWNlKGNvbnRhaW5lckluZm8ubW9kYWxzLmluZGV4T2YobW9kYWwpLCAxKTtcbiAgICAgIHRoaXMubW9kYWxzLnNwbGljZShtb2RhbEluZGV4LCAxKTsgLy8gSWYgdGhhdCB3YXMgdGhlIGxhc3QgbW9kYWwgaW4gYSBjb250YWluZXIsIGNsZWFuIHVwIHRoZSBjb250YWluZXIuXG5cbiAgICAgIGlmIChjb250YWluZXJJbmZvLm1vZGFscy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgLy8gVGhlIG1vZGFsIG1pZ2h0IGJlIGNsb3NlZCBiZWZvcmUgaXQgaGFkIHRoZSBjaGFuY2UgdG8gYmUgbW91bnRlZCBpbiB0aGUgRE9NLlxuICAgICAgICBpZiAoY29udGFpbmVySW5mby5yZXN0b3JlKSB7XG4gICAgICAgICAgY29udGFpbmVySW5mby5yZXN0b3JlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9kYWwubW9kYWxSZWYpIHtcbiAgICAgICAgICAvLyBJbiBjYXNlIHRoZSBtb2RhbCB3YXNuJ3QgaW4gdGhlIERPTSB5ZXQuXG4gICAgICAgICAgYXJpYUhpZGRlbihtb2RhbC5tb2RhbFJlZiwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBhcmlhSGlkZGVuU2libGluZ3MoY29udGFpbmVySW5mby5jb250YWluZXIsIG1vZGFsLm1vdW50Tm9kZSwgbW9kYWwubW9kYWxSZWYsIGNvbnRhaW5lckluZm8uaGlkZGVuU2libGluZ05vZGVzLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuY29udGFpbmVycy5zcGxpY2UoY29udGFpbmVySW5kZXgsIDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT3RoZXJ3aXNlIG1ha2Ugc3VyZSB0aGUgbmV4dCB0b3AgbW9kYWwgaXMgdmlzaWJsZSB0byBhIHNjcmVlbiByZWFkZXIuXG4gICAgICAgIHZhciBuZXh0VG9wID0gY29udGFpbmVySW5mby5tb2RhbHNbY29udGFpbmVySW5mby5tb2RhbHMubGVuZ3RoIC0gMV07IC8vIGFzIHNvb24gYXMgYSBtb2RhbCBpcyBhZGRpbmcgaXRzIG1vZGFsUmVmIGlzIHVuZGVmaW5lZC4gaXQgY2FuJ3Qgc2V0XG4gICAgICAgIC8vIGFyaWEtaGlkZGVuIGJlY2F1c2UgdGhlIGRvbSBlbGVtZW50IGRvZXNuJ3QgZXhpc3QgZWl0aGVyXG4gICAgICAgIC8vIHdoZW4gbW9kYWwgd2FzIHVubW91bnRlZCBiZWZvcmUgbW9kYWxSZWYgZ2V0cyBudWxsXG5cbiAgICAgICAgaWYgKG5leHRUb3AubW9kYWxSZWYpIHtcbiAgICAgICAgICBhcmlhSGlkZGVuKG5leHRUb3AubW9kYWxSZWYsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbW9kYWxJbmRleDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNUb3BNb2RhbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc1RvcE1vZGFsKG1vZGFsKSB7XG4gICAgICByZXR1cm4gdGhpcy5tb2RhbHMubGVuZ3RoID4gMCAmJiB0aGlzLm1vZGFsc1t0aGlzLm1vZGFscy5sZW5ndGggLSAxXSA9PT0gbW9kYWw7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1vZGFsTWFuYWdlcjtcbn0oKTtcblxuZXhwb3J0IHsgTW9kYWxNYW5hZ2VyIGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuL293bmVyRG9jdW1lbnQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3duZXJXaW5kb3cobm9kZSkge1xuICB2YXIgZG9jID0gb3duZXJEb2N1bWVudChub2RlKTtcbiAgcmV0dXJuIGRvYy5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG59IiwiLy8gQSBjaGFuZ2Ugb2YgdGhlIGJyb3dzZXIgem9vbSBjaGFuZ2UgdGhlIHNjcm9sbGJhciBzaXplLlxuLy8gQ3JlZGl0IGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iLzNmZmUzYTVkODJmNmY1NjFiODJmZjc4ZDgyYjMyYTdkMTRhZWQ1NTgvanMvc3JjL21vZGFsLmpzI0w1MTItTDUxOVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U2Nyb2xsYmFyU2l6ZSgpIHtcbiAgdmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBzY3JvbGxEaXYuc3R5bGUud2lkdGggPSAnOTlweCc7XG4gIHNjcm9sbERpdi5zdHlsZS5oZWlnaHQgPSAnOTlweCc7XG4gIHNjcm9sbERpdi5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gIHNjcm9sbERpdi5zdHlsZS50b3AgPSAnLTk5OTlweCc7XG4gIHNjcm9sbERpdi5zdHlsZS5vdmVyZmxvdyA9ICdzY3JvbGwnO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcm9sbERpdik7XG4gIHZhciBzY3JvbGxiYXJTaXplID0gc2Nyb2xsRGl2Lm9mZnNldFdpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoO1xuICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcm9sbERpdik7XG4gIHJldHVybiBzY3JvbGxiYXJTaXplO1xufSIsIi8qIGVzbGludC1kaXNhYmxlIGNvbnNpc3RlbnQtcmV0dXJuLCBqc3gtYTExeS9uby1ub25pbnRlcmFjdGl2ZS10YWJpbmRleCwgY2FtZWxjYXNlICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4uL3V0aWxzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgeyBleGFjdFByb3AgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuLyoqXG4gKiBVdGlsaXR5IGNvbXBvbmVudCB0aGF0IGxvY2tzIGZvY3VzIGluc2lkZSB0aGUgY29tcG9uZW50LlxuICovXG5cbmZ1bmN0aW9uIFVuc3RhYmxlX1RyYXBGb2N1cyhwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRkaXNhYmxlQXV0b0ZvYyA9IHByb3BzLmRpc2FibGVBdXRvRm9jdXMsXG4gICAgICBkaXNhYmxlQXV0b0ZvY3VzID0gX3Byb3BzJGRpc2FibGVBdXRvRm9jID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlQXV0b0ZvYyxcbiAgICAgIF9wcm9wcyRkaXNhYmxlRW5mb3JjZSA9IHByb3BzLmRpc2FibGVFbmZvcmNlRm9jdXMsXG4gICAgICBkaXNhYmxlRW5mb3JjZUZvY3VzID0gX3Byb3BzJGRpc2FibGVFbmZvcmNlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlRW5mb3JjZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlUmVzdG9yZSA9IHByb3BzLmRpc2FibGVSZXN0b3JlRm9jdXMsXG4gICAgICBkaXNhYmxlUmVzdG9yZUZvY3VzID0gX3Byb3BzJGRpc2FibGVSZXN0b3JlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlUmVzdG9yZSxcbiAgICAgIGdldERvYyA9IHByb3BzLmdldERvYyxcbiAgICAgIGlzRW5hYmxlZCA9IHByb3BzLmlzRW5hYmxlZCxcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuO1xuICB2YXIgaWdub3JlTmV4dEVuZm9yY2VGb2N1cyA9IFJlYWN0LnVzZVJlZigpO1xuICB2YXIgc2VudGluZWxTdGFydCA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIHNlbnRpbmVsRW5kID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgbm9kZVRvUmVzdG9yZSA9IFJlYWN0LnVzZVJlZigpO1xuICB2YXIgcm9vdFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTsgLy8gY2FuIGJlIHJlbW92ZWQgb25jZSB3ZSBkcm9wIHN1cHBvcnQgZm9yIG5vbiByZWYgZm9yd2FyZGluZyBjbGFzcyBjb21wb25lbnRzXG5cbiAgdmFyIGhhbmRsZU93blJlZiA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIC8vICNTdHJpY3RNb2RlIHJlYWR5XG4gICAgcm9vdFJlZi5jdXJyZW50ID0gUmVhY3RET00uZmluZERPTU5vZGUoaW5zdGFuY2UpO1xuICB9LCBbXSk7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGNoaWxkcmVuLnJlZiwgaGFuZGxlT3duUmVmKTtcbiAgdmFyIHByZXZPcGVuUmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcHJldk9wZW5SZWYuY3VycmVudCA9IG9wZW47XG4gIH0sIFtvcGVuXSk7XG5cbiAgaWYgKCFwcmV2T3BlblJlZi5jdXJyZW50ICYmIG9wZW4gJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBXQVJOSU5HOiBQb3RlbnRpYWxseSB1bnNhZmUgaW4gY29uY3VycmVudCBtb2RlLlxuICAgIC8vIFRoZSB3YXkgdGhlIHJlYWQgb24gYG5vZGVUb1Jlc3RvcmVgIGlzIHNldHVwIGNvdWxkIG1ha2UgdGhpcyBhY3R1YWxseSBzYWZlLlxuICAgIC8vIFNheSB3ZSByZW5kZXIgYG9wZW49e2ZhbHNlfWAgLT4gYG9wZW49e3RydWV9YCBidXQgbmV2ZXIgY29tbWl0LlxuICAgIC8vIFdlIGhhdmUgbm93IHdyaXR0ZW4gYSBzdGF0ZSB0aGF0IHdhc24ndCBjb21taXR0ZWQuIEJ1dCBubyBjb21taXR0ZWQgZWZmZWN0XG4gICAgLy8gd2lsbCByZWFkIHRoaXMgd3JvbmcgdmFsdWUuIFdlIG9ubHkgcmVhZCBmcm9tIGBub2RlVG9SZXN0b3JlYCBpbiBlZmZlY3RzXG4gICAgLy8gdGhhdCB3ZXJlIGNvbW1pdHRlZCBvbiBgb3Blbj17dHJ1ZX1gXG4gICAgLy8gV0FSTklORzogUHJldmVudHMgdGhlIGluc3RhbmNlIGZyb20gYmVpbmcgZ2FyYmFnZSBjb2xsZWN0ZWQuIFNob3VsZCBvbmx5XG4gICAgLy8gaG9sZCBhIHdlYWsgcmVmLlxuICAgIG5vZGVUb1Jlc3RvcmUuY3VycmVudCA9IGdldERvYygpLmFjdGl2ZUVsZW1lbnQ7XG4gIH1cblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghb3Blbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkb2MgPSBvd25lckRvY3VtZW50KHJvb3RSZWYuY3VycmVudCk7IC8vIFdlIG1pZ2h0IHJlbmRlciBhbiBlbXB0eSBjaGlsZC5cblxuICAgIGlmICghZGlzYWJsZUF1dG9Gb2N1cyAmJiByb290UmVmLmN1cnJlbnQgJiYgIXJvb3RSZWYuY3VycmVudC5jb250YWlucyhkb2MuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgIGlmICghcm9vdFJlZi5jdXJyZW50Lmhhc0F0dHJpYnV0ZSgndGFiSW5kZXgnKSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogVGhlIG1vZGFsIGNvbnRlbnQgbm9kZSBkb2VzIG5vdCBhY2NlcHQgZm9jdXMuJywgJ0ZvciB0aGUgYmVuZWZpdCBvZiBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCAnICsgJ3RoZSB0YWJJbmRleCBvZiB0aGUgbm9kZSBpcyBiZWluZyBzZXQgdG8gXCItMVwiLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJvb3RSZWYuY3VycmVudC5zZXRBdHRyaWJ1dGUoJ3RhYkluZGV4JywgLTEpO1xuICAgICAgfVxuXG4gICAgICByb290UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG5cbiAgICB2YXIgY29udGFpbiA9IGZ1bmN0aW9uIGNvbnRhaW4oKSB7XG4gICAgICB2YXIgcm9vdEVsZW1lbnQgPSByb290UmVmLmN1cnJlbnQ7IC8vIENsZWFudXAgZnVuY3Rpb25zIGFyZSBleGVjdXRlZCBsYXppbHkgaW4gUmVhY3QgMTcuXG4gICAgICAvLyBDb250YWluIGNhbiBiZSBjYWxsZWQgYmV0d2VlbiB0aGUgY29tcG9uZW50IGJlaW5nIHVubW91bnRlZCBhbmQgaXRzIGNsZWFudXAgZnVuY3Rpb24gYmVpbmcgcnVuLlxuXG4gICAgICBpZiAocm9vdEVsZW1lbnQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWRvYy5oYXNGb2N1cygpIHx8IGRpc2FibGVFbmZvcmNlRm9jdXMgfHwgIWlzRW5hYmxlZCgpIHx8IGlnbm9yZU5leHRFbmZvcmNlRm9jdXMuY3VycmVudCkge1xuICAgICAgICBpZ25vcmVOZXh0RW5mb3JjZUZvY3VzLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocm9vdFJlZi5jdXJyZW50ICYmICFyb290UmVmLmN1cnJlbnQuY29udGFpbnMoZG9jLmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgIHJvb3RSZWYuY3VycmVudC5mb2N1cygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgbG9vcEZvY3VzID0gZnVuY3Rpb24gbG9vcEZvY3VzKGV2ZW50KSB7XG4gICAgICAvLyA5ID0gVGFiXG4gICAgICBpZiAoZGlzYWJsZUVuZm9yY2VGb2N1cyB8fCAhaXNFbmFibGVkKCkgfHwgZXZlbnQua2V5Q29kZSAhPT0gOSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIE1ha2Ugc3VyZSB0aGUgbmV4dCB0YWIgc3RhcnRzIGZyb20gdGhlIHJpZ2h0IHBsYWNlLlxuXG5cbiAgICAgIGlmIChkb2MuYWN0aXZlRWxlbWVudCA9PT0gcm9vdFJlZi5jdXJyZW50KSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gaWdub3JlIHRoZSBuZXh0IGNvbnRhaW4gYXNcbiAgICAgICAgLy8gaXQgd2lsbCB0cnkgdG8gbW92ZSB0aGUgZm9jdXMgYmFjayB0byB0aGUgcm9vdFJlZiBlbGVtZW50LlxuICAgICAgICBpZ25vcmVOZXh0RW5mb3JjZUZvY3VzLmN1cnJlbnQgPSB0cnVlO1xuXG4gICAgICAgIGlmIChldmVudC5zaGlmdEtleSkge1xuICAgICAgICAgIHNlbnRpbmVsRW5kLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZW50aW5lbFN0YXJ0LmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBjb250YWluLCB0cnVlKTtcbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGxvb3BGb2N1cywgdHJ1ZSk7IC8vIFdpdGggRWRnZSwgU2FmYXJpIGFuZCBGaXJlZm94LCBubyBmb2N1cyByZWxhdGVkIGV2ZW50cyBhcmUgZmlyZWQgd2hlbiB0aGUgZm9jdXNlZCBhcmVhIHN0b3BzIGJlaW5nIGEgZm9jdXNlZCBhcmVhXG4gICAgLy8gZS5nLiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01NTk1NjEuXG4gICAgLy9cbiAgICAvLyBUaGUgd2hhdHdnIHNwZWMgZGVmaW5lcyBob3cgdGhlIGJyb3dzZXIgc2hvdWxkIGJlaGF2ZSBidXQgZG9lcyBub3QgZXhwbGljaXRseSBtZW50aW9uIGFueSBldmVudHM6XG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW50ZXJhY3Rpb24uaHRtbCNmb2N1cy1maXh1cC1ydWxlLlxuXG4gICAgdmFyIGludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgY29udGFpbigpO1xuICAgIH0sIDUwKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gICAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBjb250YWluLCB0cnVlKTtcbiAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgbG9vcEZvY3VzLCB0cnVlKTsgLy8gcmVzdG9yZUxhc3RGb2N1cygpXG5cbiAgICAgIGlmICghZGlzYWJsZVJlc3RvcmVGb2N1cykge1xuICAgICAgICAvLyBJbiBJRSAxMSBpdCBpcyBwb3NzaWJsZSBmb3IgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCB0byBiZSBudWxsIHJlc3VsdGluZ1xuICAgICAgICAvLyBpbiBub2RlVG9SZXN0b3JlLmN1cnJlbnQgYmVpbmcgbnVsbC5cbiAgICAgICAgLy8gTm90IGFsbCBlbGVtZW50cyBpbiBJRSAxMSBoYXZlIGEgZm9jdXMgbWV0aG9kLlxuICAgICAgICAvLyBPbmNlIElFIDExIHN1cHBvcnQgaXMgZHJvcHBlZCB0aGUgZm9jdXMoKSBjYWxsIGNhbiBiZSB1bmNvbmRpdGlvbmFsLlxuICAgICAgICBpZiAobm9kZVRvUmVzdG9yZS5jdXJyZW50ICYmIG5vZGVUb1Jlc3RvcmUuY3VycmVudC5mb2N1cykge1xuICAgICAgICAgIG5vZGVUb1Jlc3RvcmUuY3VycmVudC5mb2N1cygpO1xuICAgICAgICB9XG5cbiAgICAgICAgbm9kZVRvUmVzdG9yZS5jdXJyZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbZGlzYWJsZUF1dG9Gb2N1cywgZGlzYWJsZUVuZm9yY2VGb2N1cywgZGlzYWJsZVJlc3RvcmVGb2N1cywgaXNFbmFibGVkLCBvcGVuXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIHRhYkluZGV4OiAwLFxuICAgIHJlZjogc2VudGluZWxTdGFydCxcbiAgICBcImRhdGEtdGVzdFwiOiBcInNlbnRpbmVsU3RhcnRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwge1xuICAgIHJlZjogaGFuZGxlUmVmXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgdGFiSW5kZXg6IDAsXG4gICAgcmVmOiBzZW50aW5lbEVuZCxcbiAgICBcImRhdGEtdGVzdFwiOiBcInNlbnRpbmVsRW5kXCJcbiAgfSkpO1xufVxuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVbnN0YWJsZV9UcmFwRm9jdXMucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQSBzaW5nbGUgY2hpbGQgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0cmFwIGZvY3VzIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgc2hpZnQgZm9jdXMgdG8gaXRzZWxmIHdoZW4gaXQgb3BlbnMsIGFuZFxuICAgKiByZXBsYWNlIGl0IHRvIHRoZSBsYXN0IGZvY3VzZWQgZWxlbWVudCB3aGVuIGl0IGNsb3Nlcy5cbiAgICogVGhpcyBhbHNvIHdvcmtzIGNvcnJlY3RseSB3aXRoIGFueSB0cmFwIGZvY3VzIGNoaWxkcmVuIHRoYXQgaGF2ZSB0aGUgYGRpc2FibGVBdXRvRm9jdXNgIHByb3AuXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYHRydWVgIGFzIGl0IG1ha2VzIHRoZSB0cmFwIGZvY3VzIGxlc3NcbiAgICogYWNjZXNzaWJsZSB0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBsaWtlIHNjcmVlbiByZWFkZXJzLlxuICAgKi9cbiAgZGlzYWJsZUF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRyYXAgZm9jdXMgd2lsbCBub3QgcHJldmVudCBmb2N1cyBmcm9tIGxlYXZpbmcgdGhlIHRyYXAgZm9jdXMgd2hpbGUgb3Blbi5cbiAgICpcbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBgdHJ1ZWAgYXMgaXQgbWFrZXMgdGhlIHRyYXAgZm9jdXMgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBkaXNhYmxlRW5mb3JjZUZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdHJhcCBmb2N1cyB3aWxsIG5vdCByZXN0b3JlIGZvY3VzIHRvIHByZXZpb3VzbHkgZm9jdXNlZCBlbGVtZW50IG9uY2VcbiAgICogdHJhcCBmb2N1cyBpcyBoaWRkZW4uXG4gICAqL1xuICBkaXNhYmxlUmVzdG9yZUZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBkb2N1bWVudCB0byBjb25zaWRlci5cbiAgICogV2UgdXNlIGl0IHRvIGltcGxlbWVudCB0aGUgcmVzdG9yZSBmb2N1cyBiZXR3ZWVuIGRpZmZlcmVudCBicm93c2VyIGRvY3VtZW50cy5cbiAgICovXG4gIGdldERvYzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogRG8gd2Ugc3RpbGwgd2FudCB0byBlbmZvcmNlIHRoZSBmb2N1cz9cbiAgICogVGhpcyBwcm9wIGhlbHBzIG5lc3RpbmcgVHJhcEZvY3VzIGVsZW1lbnRzLlxuICAgKi9cbiAgaXNFbmFibGVkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGZvY3VzIHdpbGwgYmUgbG9ja2VkLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZFxufSA6IHZvaWQgMDtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIFVuc3RhYmxlX1RyYXBGb2N1c1sncHJvcFR5cGVzJyArICcnXSA9IGV4YWN0UHJvcChVbnN0YWJsZV9UcmFwRm9jdXMucHJvcFR5cGVzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgVW5zdGFibGVfVHJhcEZvY3VzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIHpJbmRleDogLTEsXG4gICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgcmlnaHQ6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC41KScsXG4gICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCdcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBpbnZpc2libGU9e3RydWV9YC4gKi9cbiAgaW52aXNpYmxlOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gIH1cbn07XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxudmFyIFNpbXBsZUJhY2tkcm9wID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU2ltcGxlQmFja2Ryb3AocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGludmlzaWJsZSA9IHByb3BzLmludmlzaWJsZSxcbiAgICAgIGludmlzaWJsZSA9IF9wcm9wcyRpbnZpc2libGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGludmlzaWJsZSxcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImludmlzaWJsZVwiLCBcIm9wZW5cIl0pO1xuXG4gIHJldHVybiBvcGVuID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciwge1xuICAgIHN0eWxlOiBfZXh0ZW5kcyh7fSwgc3R5bGVzLnJvb3QsIGludmlzaWJsZSA/IHN0eWxlcy5pbnZpc2libGUgOiB7fSwgb3RoZXIuc3R5bGUpXG4gIH0pKSA6IG51bGw7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNpbXBsZUJhY2tkcm9wLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGlzIGludmlzaWJsZS5cbiAgICogSXQgY2FuIGJlIHVzZWQgd2hlbiByZW5kZXJpbmcgYSBwb3BvdmVyIG9yIGEgY3VzdG9tIHNlbGVjdCBjb21wb25lbnQuXG4gICAqL1xuICBpbnZpc2libGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYWNrZHJvcCBpcyBvcGVuLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFNpbXBsZUJhY2tkcm9wOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZ2V0VGhlbWVQcm9wcywgdXNlVGhlbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvc3R5bGVzJztcbmltcG9ydCB7IGVsZW1lbnRBY2NlcHRpbmdSZWYsIEhUTUxFbGVtZW50VHlwZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuLi91dGlscy9vd25lckRvY3VtZW50JztcbmltcG9ydCBQb3J0YWwgZnJvbSAnLi4vUG9ydGFsJztcbmltcG9ydCBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gZnJvbSAnLi4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHVzZUV2ZW50Q2FsbGJhY2sgZnJvbSAnLi4vdXRpbHMvdXNlRXZlbnRDYWxsYmFjayc7XG5pbXBvcnQgekluZGV4IGZyb20gJy4uL3N0eWxlcy96SW5kZXgnO1xuaW1wb3J0IE1vZGFsTWFuYWdlciwgeyBhcmlhSGlkZGVuIH0gZnJvbSAnLi9Nb2RhbE1hbmFnZXInO1xuaW1wb3J0IFRyYXBGb2N1cyBmcm9tICcuLi9VbnN0YWJsZV9UcmFwRm9jdXMnO1xuaW1wb3J0IFNpbXBsZUJhY2tkcm9wIGZyb20gJy4vU2ltcGxlQmFja2Ryb3AnO1xuXG5mdW5jdGlvbiBnZXRDb250YWluZXIoY29udGFpbmVyKSB7XG4gIGNvbnRhaW5lciA9IHR5cGVvZiBjb250YWluZXIgPT09ICdmdW5jdGlvbicgPyBjb250YWluZXIoKSA6IGNvbnRhaW5lcjtcbiAgcmV0dXJuIFJlYWN0RE9NLmZpbmRET01Ob2RlKGNvbnRhaW5lcik7XG59XG5cbmZ1bmN0aW9uIGdldEhhc1RyYW5zaXRpb24ocHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzLmNoaWxkcmVuID8gcHJvcHMuY2hpbGRyZW4ucHJvcHMuaGFzT3duUHJvcGVydHkoJ2luJykgOiBmYWxzZTtcbn0gLy8gQSBtb2RhbCBtYW5hZ2VyIHVzZWQgdG8gdHJhY2sgYW5kIG1hbmFnZSB0aGUgc3RhdGUgb2Ygb3BlbiBNb2RhbHMuXG4vLyBNb2RhbHMgZG9uJ3Qgb3BlbiBvbiB0aGUgc2VydmVyIHNvIHRoaXMgd29uJ3QgY29uZmxpY3Qgd2l0aCBjb25jdXJyZW50IHJlcXVlc3RzLlxuXG5cbnZhciBkZWZhdWx0TWFuYWdlciA9IG5ldyBNb2RhbE1hbmFnZXIoKTtcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgIHpJbmRleDogdGhlbWUuekluZGV4Lm1vZGFsLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGBNb2RhbGAgaGFzIGV4aXRlZC4gKi9cbiAgICBoaWRkZW46IHtcbiAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogTW9kYWwgaXMgYSBsb3dlci1sZXZlbCBjb25zdHJ1Y3QgdGhhdCBpcyBsZXZlcmFnZWQgYnkgdGhlIGZvbGxvd2luZyBjb21wb25lbnRzOlxuICpcbiAqIC0gW0RpYWxvZ10oL2FwaS9kaWFsb2cvKVxuICogLSBbRHJhd2VyXSgvYXBpL2RyYXdlci8pXG4gKiAtIFtNZW51XSgvYXBpL21lbnUvKVxuICogLSBbUG9wb3Zlcl0oL2FwaS9wb3BvdmVyLylcbiAqXG4gKiBJZiB5b3UgYXJlIGNyZWF0aW5nIGEgbW9kYWwgZGlhbG9nLCB5b3UgcHJvYmFibHkgd2FudCB0byB1c2UgdGhlIFtEaWFsb2ddKC9hcGkvZGlhbG9nLykgY29tcG9uZW50XG4gKiByYXRoZXIgdGhhbiBkaXJlY3RseSB1c2luZyBNb2RhbC5cbiAqXG4gKiBUaGlzIGNvbXBvbmVudCBzaGFyZXMgbWFueSBjb25jZXB0cyB3aXRoIFtyZWFjdC1vdmVybGF5c10oaHR0cHM6Ly9yZWFjdC1ib290c3RyYXAuZ2l0aHViLmlvL3JlYWN0LW92ZXJsYXlzLyNtb2RhbHMpLlxuICovXG5cbnZhciBNb2RhbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE1vZGFsKGluUHJvcHMsIHJlZikge1xuICB2YXIgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICB2YXIgcHJvcHMgPSBnZXRUaGVtZVByb3BzKHtcbiAgICBuYW1lOiAnTXVpTW9kYWwnLFxuICAgIHByb3BzOiBfZXh0ZW5kcyh7fSwgaW5Qcm9wcyksXG4gICAgdGhlbWU6IHRoZW1lXG4gIH0pO1xuXG4gIHZhciBfcHJvcHMkQmFja2Ryb3BDb21wb24gPSBwcm9wcy5CYWNrZHJvcENvbXBvbmVudCxcbiAgICAgIEJhY2tkcm9wQ29tcG9uZW50ID0gX3Byb3BzJEJhY2tkcm9wQ29tcG9uID09PSB2b2lkIDAgPyBTaW1wbGVCYWNrZHJvcCA6IF9wcm9wcyRCYWNrZHJvcENvbXBvbixcbiAgICAgIEJhY2tkcm9wUHJvcHMgPSBwcm9wcy5CYWNrZHJvcFByb3BzLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRjbG9zZUFmdGVyVHJhbiA9IHByb3BzLmNsb3NlQWZ0ZXJUcmFuc2l0aW9uLFxuICAgICAgY2xvc2VBZnRlclRyYW5zaXRpb24gPSBfcHJvcHMkY2xvc2VBZnRlclRyYW4gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGNsb3NlQWZ0ZXJUcmFuLFxuICAgICAgY29udGFpbmVyID0gcHJvcHMuY29udGFpbmVyLFxuICAgICAgX3Byb3BzJGRpc2FibGVBdXRvRm9jID0gcHJvcHMuZGlzYWJsZUF1dG9Gb2N1cyxcbiAgICAgIGRpc2FibGVBdXRvRm9jdXMgPSBfcHJvcHMkZGlzYWJsZUF1dG9Gb2MgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVBdXRvRm9jLFxuICAgICAgX3Byb3BzJGRpc2FibGVCYWNrZHJvID0gcHJvcHMuZGlzYWJsZUJhY2tkcm9wQ2xpY2ssXG4gICAgICBkaXNhYmxlQmFja2Ryb3BDbGljayA9IF9wcm9wcyRkaXNhYmxlQmFja2RybyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUJhY2tkcm8sXG4gICAgICBfcHJvcHMkZGlzYWJsZUVuZm9yY2UgPSBwcm9wcy5kaXNhYmxlRW5mb3JjZUZvY3VzLFxuICAgICAgZGlzYWJsZUVuZm9yY2VGb2N1cyA9IF9wcm9wcyRkaXNhYmxlRW5mb3JjZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUVuZm9yY2UsXG4gICAgICBfcHJvcHMkZGlzYWJsZUVzY2FwZUsgPSBwcm9wcy5kaXNhYmxlRXNjYXBlS2V5RG93bixcbiAgICAgIGRpc2FibGVFc2NhcGVLZXlEb3duID0gX3Byb3BzJGRpc2FibGVFc2NhcGVLID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlRXNjYXBlSyxcbiAgICAgIF9wcm9wcyRkaXNhYmxlUG9ydGFsID0gcHJvcHMuZGlzYWJsZVBvcnRhbCxcbiAgICAgIGRpc2FibGVQb3J0YWwgPSBfcHJvcHMkZGlzYWJsZVBvcnRhbCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVBvcnRhbCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlUmVzdG9yZSA9IHByb3BzLmRpc2FibGVSZXN0b3JlRm9jdXMsXG4gICAgICBkaXNhYmxlUmVzdG9yZUZvY3VzID0gX3Byb3BzJGRpc2FibGVSZXN0b3JlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlUmVzdG9yZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlU2Nyb2xsTCA9IHByb3BzLmRpc2FibGVTY3JvbGxMb2NrLFxuICAgICAgZGlzYWJsZVNjcm9sbExvY2sgPSBfcHJvcHMkZGlzYWJsZVNjcm9sbEwgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVTY3JvbGxMLFxuICAgICAgX3Byb3BzJGhpZGVCYWNrZHJvcCA9IHByb3BzLmhpZGVCYWNrZHJvcCxcbiAgICAgIGhpZGVCYWNrZHJvcCA9IF9wcm9wcyRoaWRlQmFja2Ryb3AgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGhpZGVCYWNrZHJvcCxcbiAgICAgIF9wcm9wcyRrZWVwTW91bnRlZCA9IHByb3BzLmtlZXBNb3VudGVkLFxuICAgICAga2VlcE1vdW50ZWQgPSBfcHJvcHMka2VlcE1vdW50ZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGtlZXBNb3VudGVkLFxuICAgICAgX3Byb3BzJG1hbmFnZXIgPSBwcm9wcy5tYW5hZ2VyLFxuICAgICAgbWFuYWdlciA9IF9wcm9wcyRtYW5hZ2VyID09PSB2b2lkIDAgPyBkZWZhdWx0TWFuYWdlciA6IF9wcm9wcyRtYW5hZ2VyLFxuICAgICAgb25CYWNrZHJvcENsaWNrID0gcHJvcHMub25CYWNrZHJvcENsaWNrLFxuICAgICAgb25DbG9zZSA9IHByb3BzLm9uQ2xvc2UsXG4gICAgICBvbkVzY2FwZUtleURvd24gPSBwcm9wcy5vbkVzY2FwZUtleURvd24sXG4gICAgICBvblJlbmRlcmVkID0gcHJvcHMub25SZW5kZXJlZCxcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcIkJhY2tkcm9wQ29tcG9uZW50XCIsIFwiQmFja2Ryb3BQcm9wc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xvc2VBZnRlclRyYW5zaXRpb25cIiwgXCJjb250YWluZXJcIiwgXCJkaXNhYmxlQXV0b0ZvY3VzXCIsIFwiZGlzYWJsZUJhY2tkcm9wQ2xpY2tcIiwgXCJkaXNhYmxlRW5mb3JjZUZvY3VzXCIsIFwiZGlzYWJsZUVzY2FwZUtleURvd25cIiwgXCJkaXNhYmxlUG9ydGFsXCIsIFwiZGlzYWJsZVJlc3RvcmVGb2N1c1wiLCBcImRpc2FibGVTY3JvbGxMb2NrXCIsIFwiaGlkZUJhY2tkcm9wXCIsIFwia2VlcE1vdW50ZWRcIiwgXCJtYW5hZ2VyXCIsIFwib25CYWNrZHJvcENsaWNrXCIsIFwib25DbG9zZVwiLCBcIm9uRXNjYXBlS2V5RG93blwiLCBcIm9uUmVuZGVyZWRcIiwgXCJvcGVuXCJdKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUodHJ1ZSksXG4gICAgICBleGl0ZWQgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRFeGl0ZWQgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIG1vZGFsID0gUmVhY3QudXNlUmVmKHt9KTtcbiAgdmFyIG1vdW50Tm9kZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIG1vZGFsUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihtb2RhbFJlZiwgcmVmKTtcbiAgdmFyIGhhc1RyYW5zaXRpb24gPSBnZXRIYXNUcmFuc2l0aW9uKHByb3BzKTtcblxuICB2YXIgZ2V0RG9jID0gZnVuY3Rpb24gZ2V0RG9jKCkge1xuICAgIHJldHVybiBvd25lckRvY3VtZW50KG1vdW50Tm9kZVJlZi5jdXJyZW50KTtcbiAgfTtcblxuICB2YXIgZ2V0TW9kYWwgPSBmdW5jdGlvbiBnZXRNb2RhbCgpIHtcbiAgICBtb2RhbC5jdXJyZW50Lm1vZGFsUmVmID0gbW9kYWxSZWYuY3VycmVudDtcbiAgICBtb2RhbC5jdXJyZW50Lm1vdW50Tm9kZSA9IG1vdW50Tm9kZVJlZi5jdXJyZW50O1xuICAgIHJldHVybiBtb2RhbC5jdXJyZW50O1xuICB9O1xuXG4gIHZhciBoYW5kbGVNb3VudGVkID0gZnVuY3Rpb24gaGFuZGxlTW91bnRlZCgpIHtcbiAgICBtYW5hZ2VyLm1vdW50KGdldE1vZGFsKCksIHtcbiAgICAgIGRpc2FibGVTY3JvbGxMb2NrOiBkaXNhYmxlU2Nyb2xsTG9ja1xuICAgIH0pOyAvLyBGaXggYSBidWcgb24gQ2hyb21lIHdoZXJlIHRoZSBzY3JvbGwgaXNuJ3QgaW5pdGlhbGx5IDAuXG5cbiAgICBtb2RhbFJlZi5jdXJyZW50LnNjcm9sbFRvcCA9IDA7XG4gIH07XG5cbiAgdmFyIGhhbmRsZU9wZW4gPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzb2x2ZWRDb250YWluZXIgPSBnZXRDb250YWluZXIoY29udGFpbmVyKSB8fCBnZXREb2MoKS5ib2R5O1xuICAgIG1hbmFnZXIuYWRkKGdldE1vZGFsKCksIHJlc29sdmVkQ29udGFpbmVyKTsgLy8gVGhlIGVsZW1lbnQgd2FzIGFscmVhZHkgbW91bnRlZC5cblxuICAgIGlmIChtb2RhbFJlZi5jdXJyZW50KSB7XG4gICAgICBoYW5kbGVNb3VudGVkKCk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGlzVG9wTW9kYWwgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG1hbmFnZXIuaXNUb3BNb2RhbChnZXRNb2RhbCgpKTtcbiAgfSwgW21hbmFnZXJdKTtcbiAgdmFyIGhhbmRsZVBvcnRhbFJlZiA9IHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBtb3VudE5vZGVSZWYuY3VycmVudCA9IG5vZGU7XG5cbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAob25SZW5kZXJlZCkge1xuICAgICAgb25SZW5kZXJlZCgpO1xuICAgIH1cblxuICAgIGlmIChvcGVuICYmIGlzVG9wTW9kYWwoKSkge1xuICAgICAgaGFuZGxlTW91bnRlZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcmlhSGlkZGVuKG1vZGFsUmVmLmN1cnJlbnQsIHRydWUpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBoYW5kbGVDbG9zZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBtYW5hZ2VyLnJlbW92ZShnZXRNb2RhbCgpKTtcbiAgfSwgW21hbmFnZXJdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaGFuZGxlQ2xvc2UoKTtcbiAgICB9O1xuICB9LCBbaGFuZGxlQ2xvc2VdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAob3Blbikge1xuICAgICAgaGFuZGxlT3BlbigpO1xuICAgIH0gZWxzZSBpZiAoIWhhc1RyYW5zaXRpb24gfHwgIWNsb3NlQWZ0ZXJUcmFuc2l0aW9uKSB7XG4gICAgICBoYW5kbGVDbG9zZSgpO1xuICAgIH1cbiAgfSwgW29wZW4sIGhhbmRsZUNsb3NlLCBoYXNUcmFuc2l0aW9uLCBjbG9zZUFmdGVyVHJhbnNpdGlvbiwgaGFuZGxlT3Blbl0pO1xuXG4gIGlmICgha2VlcE1vdW50ZWQgJiYgIW9wZW4gJiYgKCFoYXNUcmFuc2l0aW9uIHx8IGV4aXRlZCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBoYW5kbGVFbnRlciA9IGZ1bmN0aW9uIGhhbmRsZUVudGVyKCkge1xuICAgIHNldEV4aXRlZChmYWxzZSk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uIGhhbmRsZUV4aXRlZCgpIHtcbiAgICBzZXRFeGl0ZWQodHJ1ZSk7XG5cbiAgICBpZiAoY2xvc2VBZnRlclRyYW5zaXRpb24pIHtcbiAgICAgIGhhbmRsZUNsb3NlKCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVCYWNrZHJvcENsaWNrID0gZnVuY3Rpb24gaGFuZGxlQmFja2Ryb3BDbGljayhldmVudCkge1xuICAgIGlmIChldmVudC50YXJnZXQgIT09IGV2ZW50LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAob25CYWNrZHJvcENsaWNrKSB7XG4gICAgICBvbkJhY2tkcm9wQ2xpY2soZXZlbnQpO1xuICAgIH1cblxuICAgIGlmICghZGlzYWJsZUJhY2tkcm9wQ2xpY2sgJiYgb25DbG9zZSkge1xuICAgICAgb25DbG9zZShldmVudCwgJ2JhY2tkcm9wQ2xpY2snKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gICAgLy8gVGhlIGhhbmRsZXIgZG9lc24ndCB0YWtlIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgaW50byBhY2NvdW50OlxuICAgIC8vXG4gICAgLy8gZXZlbnQucHJldmVudERlZmF1bHQoKSBpcyBtZWFudCB0byBzdG9wIGRlZmF1bHQgYmVoYXZpb3VycyBsaWtlXG4gICAgLy8gY2xpY2tpbmcgYSBjaGVja2JveCB0byBjaGVjayBpdCwgaGl0dGluZyBhIGJ1dHRvbiB0byBzdWJtaXQgYSBmb3JtLFxuICAgIC8vIGFuZCBoaXR0aW5nIGxlZnQgYXJyb3cgdG8gbW92ZSB0aGUgY3Vyc29yIGluIGEgdGV4dCBpbnB1dCBldGMuXG4gICAgLy8gT25seSBzcGVjaWFsIEhUTUwgZWxlbWVudHMgaGF2ZSB0aGVzZSBkZWZhdWx0IGJlaGF2aW9ycy5cbiAgICBpZiAoZXZlbnQua2V5ICE9PSAnRXNjYXBlJyB8fCAhaXNUb3BNb2RhbCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9uRXNjYXBlS2V5RG93bikge1xuICAgICAgb25Fc2NhcGVLZXlEb3duKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoIWRpc2FibGVFc2NhcGVLZXlEb3duKSB7XG4gICAgICAvLyBTd2FsbG93IHRoZSBldmVudCwgaW4gY2FzZSBzb21lb25lIGlzIGxpc3RlbmluZyBmb3IgdGhlIGVzY2FwZSBrZXkgb24gdGhlIGJvZHkuXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgICAgb25DbG9zZShldmVudCwgJ2VzY2FwZUtleURvd24nKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIGlubGluZVN0eWxlID0gc3R5bGVzKHRoZW1lIHx8IHtcbiAgICB6SW5kZXg6IHpJbmRleFxuICB9KTtcbiAgdmFyIGNoaWxkUHJvcHMgPSB7fTtcblxuICBpZiAoY2hpbGRyZW4ucHJvcHMudGFiSW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgIGNoaWxkUHJvcHMudGFiSW5kZXggPSBjaGlsZHJlbi5wcm9wcy50YWJJbmRleCB8fCAnLTEnO1xuICB9IC8vIEl0J3MgYSBUcmFuc2l0aW9uIGxpa2UgY29tcG9uZW50XG5cblxuICBpZiAoaGFzVHJhbnNpdGlvbikge1xuICAgIGNoaWxkUHJvcHMub25FbnRlciA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihoYW5kbGVFbnRlciwgY2hpbGRyZW4ucHJvcHMub25FbnRlcik7XG4gICAgY2hpbGRQcm9wcy5vbkV4aXRlZCA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihoYW5kbGVFeGl0ZWQsIGNoaWxkcmVuLnByb3BzLm9uRXhpdGVkKTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChQb3J0YWwsIHtcbiAgICByZWY6IGhhbmRsZVBvcnRhbFJlZixcbiAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICBkaXNhYmxlUG9ydGFsOiBkaXNhYmxlUG9ydGFsXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICByZWY6IGhhbmRsZVJlZixcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgcm9sZTogXCJwcmVzZW50YXRpb25cIlxuICB9LCBvdGhlciwge1xuICAgIHN0eWxlOiBfZXh0ZW5kcyh7fSwgaW5saW5lU3R5bGUucm9vdCwgIW9wZW4gJiYgZXhpdGVkID8gaW5saW5lU3R5bGUuaGlkZGVuIDoge30sIG90aGVyLnN0eWxlKVxuICB9KSwgaGlkZUJhY2tkcm9wID8gbnVsbCA6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEJhY2tkcm9wQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgb3Blbjogb3BlbixcbiAgICBvbkNsaWNrOiBoYW5kbGVCYWNrZHJvcENsaWNrXG4gIH0sIEJhY2tkcm9wUHJvcHMpKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhcEZvY3VzLCB7XG4gICAgZGlzYWJsZUVuZm9yY2VGb2N1czogZGlzYWJsZUVuZm9yY2VGb2N1cyxcbiAgICBkaXNhYmxlQXV0b0ZvY3VzOiBkaXNhYmxlQXV0b0ZvY3VzLFxuICAgIGRpc2FibGVSZXN0b3JlRm9jdXM6IGRpc2FibGVSZXN0b3JlRm9jdXMsXG4gICAgZ2V0RG9jOiBnZXREb2MsXG4gICAgaXNFbmFibGVkOiBpc1RvcE1vZGFsLFxuICAgIG9wZW46IG9wZW5cbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgY2hpbGRQcm9wcykpKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE1vZGFsLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEEgYmFja2Ryb3AgY29tcG9uZW50LiBUaGlzIHByb3AgZW5hYmxlcyBjdXN0b20gYmFja2Ryb3AgcmVuZGVyaW5nLlxuICAgKi9cbiAgQmFja2Ryb3BDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BCYWNrZHJvcGBdKC9hcGkvYmFja2Ryb3AvKSBlbGVtZW50LlxuICAgKi9cbiAgQmFja2Ryb3BQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQSBzaW5nbGUgY2hpbGQgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IGVsZW1lbnRBY2NlcHRpbmdSZWYuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogV2hlbiBzZXQgdG8gdHJ1ZSB0aGUgTW9kYWwgd2FpdHMgdW50aWwgYSBuZXN0ZWQgVHJhbnNpdGlvbiBpcyBjb21wbGV0ZWQgYmVmb3JlIGNsb3NpbmcuXG4gICAqL1xuICBjbG9zZUFmdGVyVHJhbnNpdGlvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgSFRNTCBlbGVtZW50LCBjb21wb25lbnQgaW5zdGFuY2UsIG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBlaXRoZXIuXG4gICAqIFRoZSBgY29udGFpbmVyYCB3aWxsIGhhdmUgdGhlIHBvcnRhbCBjaGlsZHJlbiBhcHBlbmRlZCB0byBpdC5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgaXQgdXNlcyB0aGUgYm9keSBvZiB0aGUgdG9wLWxldmVsIGRvY3VtZW50IG9iamVjdCxcbiAgICogc28gaXQncyBzaW1wbHkgYGRvY3VtZW50LmJvZHlgIG1vc3Qgb2YgdGhlIHRpbWUuXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmluc3RhbmNlT2YoUmVhY3QuQ29tcG9uZW50KSwgUHJvcFR5cGVzLmZ1bmNdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgd2lsbCBub3QgYXV0b21hdGljYWxseSBzaGlmdCBmb2N1cyB0byBpdHNlbGYgd2hlbiBpdCBvcGVucywgYW5kXG4gICAqIHJlcGxhY2UgaXQgdG8gdGhlIGxhc3QgZm9jdXNlZCBlbGVtZW50IHdoZW4gaXQgY2xvc2VzLlxuICAgKiBUaGlzIGFsc28gd29ya3MgY29ycmVjdGx5IHdpdGggYW55IG1vZGFsIGNoaWxkcmVuIHRoYXQgaGF2ZSB0aGUgYGRpc2FibGVBdXRvRm9jdXNgIHByb3AuXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYHRydWVgIGFzIGl0IG1ha2VzIHRoZSBtb2RhbCBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICovXG4gIGRpc2FibGVBdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGNsaWNraW5nIHRoZSBiYWNrZHJvcCB3aWxsIG5vdCBmaXJlIGBvbkNsb3NlYC5cbiAgICovXG4gIGRpc2FibGVCYWNrZHJvcENsaWNrOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgd2lsbCBub3QgcHJldmVudCBmb2N1cyBmcm9tIGxlYXZpbmcgdGhlIG1vZGFsIHdoaWxlIG9wZW4uXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYHRydWVgIGFzIGl0IG1ha2VzIHRoZSBtb2RhbCBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICovXG4gIGRpc2FibGVFbmZvcmNlRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGhpdHRpbmcgZXNjYXBlIHdpbGwgbm90IGZpcmUgYG9uQ2xvc2VgLlxuICAgKi9cbiAgZGlzYWJsZUVzY2FwZUtleURvd246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEaXNhYmxlIHRoZSBwb3J0YWwgYmVoYXZpb3IuXG4gICAqIFRoZSBjaGlsZHJlbiBzdGF5IHdpdGhpbiBpdCdzIHBhcmVudCBET00gaGllcmFyY2h5LlxuICAgKi9cbiAgZGlzYWJsZVBvcnRhbDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgbm90IHJlc3RvcmUgZm9jdXMgdG8gcHJldmlvdXNseSBmb2N1c2VkIGVsZW1lbnQgb25jZVxuICAgKiBtb2RhbCBpcyBoaWRkZW4uXG4gICAqL1xuICBkaXNhYmxlUmVzdG9yZUZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRGlzYWJsZSB0aGUgc2Nyb2xsIGxvY2sgYmVoYXZpb3IuXG4gICAqL1xuICBkaXNhYmxlU2Nyb2xsTG9jazogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGlzIG5vdCByZW5kZXJlZC5cbiAgICovXG4gIGhpZGVCYWNrZHJvcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEFsd2F5cyBrZWVwIHRoZSBjaGlsZHJlbiBpbiB0aGUgRE9NLlxuICAgKiBUaGlzIHByb3AgY2FuIGJlIHVzZWZ1bCBpbiBTRU8gc2l0dWF0aW9uIG9yXG4gICAqIHdoZW4geW91IHdhbnQgdG8gbWF4aW1pemUgdGhlIHJlc3BvbnNpdmVuZXNzIG9mIHRoZSBNb2RhbC5cbiAgICovXG4gIGtlZXBNb3VudGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgbWFuYWdlcjogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYmFja2Ryb3AgaXMgY2xpY2tlZC5cbiAgICovXG4gIG9uQmFja2Ryb3BDbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqIFRoZSBgcmVhc29uYCBwYXJhbWV0ZXIgY2FuIG9wdGlvbmFsbHkgYmUgdXNlZCB0byBjb250cm9sIHRoZSByZXNwb25zZSB0byBgb25DbG9zZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBDYW4gYmU6IGBcImVzY2FwZUtleURvd25cImAsIGBcImJhY2tkcm9wQ2xpY2tcImAuXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgZXNjYXBlIGtleSBpcyBwcmVzc2VkLFxuICAgKiBgZGlzYWJsZUVzY2FwZUtleURvd25gIGlzIGZhbHNlIGFuZCB0aGUgbW9kYWwgaXMgaW4gZm9jdXMuXG4gICAqL1xuICBvbkVzY2FwZUtleURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBvbmNlIHRoZSBjaGlsZHJlbiBoYXMgYmVlbiBtb3VudGVkIGludG8gdGhlIGBjb250YWluZXJgLlxuICAgKiBJdCBzaWduYWxzIHRoYXQgdGhlIGBvcGVuPXt0cnVlfWAgcHJvcCB0b29rIGVmZmVjdC5cbiAgICpcbiAgICogVGhpcyBwcm9wIHdpbGwgYmUgZGVwcmVjYXRlZCBhbmQgcmVtb3ZlZCBpbiB2NSwgdGhlIHJlZiBjYW4gYmUgdXNlZCBpbnN0ZWFkLlxuICAgKi9cbiAgb25SZW5kZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIGlzIG9wZW4uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTW9kYWw7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY29uZmlnIGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IHRpbWVvdXRzU2hhcGUgfSBmcm9tICcuL3V0aWxzL1Byb3BUeXBlcyc7XG5pbXBvcnQgVHJhbnNpdGlvbkdyb3VwQ29udGV4dCBmcm9tICcuL1RyYW5zaXRpb25Hcm91cENvbnRleHQnO1xuZXhwb3J0IHZhciBVTk1PVU5URUQgPSAndW5tb3VudGVkJztcbmV4cG9ydCB2YXIgRVhJVEVEID0gJ2V4aXRlZCc7XG5leHBvcnQgdmFyIEVOVEVSSU5HID0gJ2VudGVyaW5nJztcbmV4cG9ydCB2YXIgRU5URVJFRCA9ICdlbnRlcmVkJztcbmV4cG9ydCB2YXIgRVhJVElORyA9ICdleGl0aW5nJztcbi8qKlxuICogVGhlIFRyYW5zaXRpb24gY29tcG9uZW50IGxldHMgeW91IGRlc2NyaWJlIGEgdHJhbnNpdGlvbiBmcm9tIG9uZSBjb21wb25lbnRcbiAqIHN0YXRlIHRvIGFub3RoZXIgX292ZXIgdGltZV8gd2l0aCBhIHNpbXBsZSBkZWNsYXJhdGl2ZSBBUEkuIE1vc3QgY29tbW9ubHlcbiAqIGl0J3MgdXNlZCB0byBhbmltYXRlIHRoZSBtb3VudGluZyBhbmQgdW5tb3VudGluZyBvZiBhIGNvbXBvbmVudCwgYnV0IGNhbiBhbHNvXG4gKiBiZSB1c2VkIHRvIGRlc2NyaWJlIGluLXBsYWNlIHRyYW5zaXRpb24gc3RhdGVzIGFzIHdlbGwuXG4gKlxuICogLS0tXG4gKlxuICogKipOb3RlKio6IGBUcmFuc2l0aW9uYCBpcyBhIHBsYXRmb3JtLWFnbm9zdGljIGJhc2UgY29tcG9uZW50LiBJZiB5b3UncmUgdXNpbmdcbiAqIHRyYW5zaXRpb25zIGluIENTUywgeW91J2xsIHByb2JhYmx5IHdhbnQgdG8gdXNlXG4gKiBbYENTU1RyYW5zaXRpb25gXShodHRwczovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Nzcy10cmFuc2l0aW9uKVxuICogaW5zdGVhZC4gSXQgaW5oZXJpdHMgYWxsIHRoZSBmZWF0dXJlcyBvZiBgVHJhbnNpdGlvbmAsIGJ1dCBjb250YWluc1xuICogYWRkaXRpb25hbCBmZWF0dXJlcyBuZWNlc3NhcnkgdG8gcGxheSBuaWNlIHdpdGggQ1NTIHRyYW5zaXRpb25zIChoZW5jZSB0aGVcbiAqIG5hbWUgb2YgdGhlIGNvbXBvbmVudCkuXG4gKlxuICogLS0tXG4gKlxuICogQnkgZGVmYXVsdCB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBkb2VzIG5vdCBhbHRlciB0aGUgYmVoYXZpb3Igb2YgdGhlXG4gKiBjb21wb25lbnQgaXQgcmVuZGVycywgaXQgb25seSB0cmFja3MgXCJlbnRlclwiIGFuZCBcImV4aXRcIiBzdGF0ZXMgZm9yIHRoZVxuICogY29tcG9uZW50cy4gSXQncyB1cCB0byB5b3UgdG8gZ2l2ZSBtZWFuaW5nIGFuZCBlZmZlY3QgdG8gdGhvc2Ugc3RhdGVzLiBGb3JcbiAqIGV4YW1wbGUgd2UgY2FuIGFkZCBzdHlsZXMgdG8gYSBjb21wb25lbnQgd2hlbiBpdCBlbnRlcnMgb3IgZXhpdHM6XG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG4gKlxuICogY29uc3QgZHVyYXRpb24gPSAzMDA7XG4gKlxuICogY29uc3QgZGVmYXVsdFN0eWxlID0ge1xuICogICB0cmFuc2l0aW9uOiBgb3BhY2l0eSAke2R1cmF0aW9ufW1zIGVhc2UtaW4tb3V0YCxcbiAqICAgb3BhY2l0eTogMCxcbiAqIH1cbiAqXG4gKiBjb25zdCB0cmFuc2l0aW9uU3R5bGVzID0ge1xuICogICBlbnRlcmluZzogeyBvcGFjaXR5OiAxIH0sXG4gKiAgIGVudGVyZWQ6ICB7IG9wYWNpdHk6IDEgfSxcbiAqICAgZXhpdGluZzogIHsgb3BhY2l0eTogMCB9LFxuICogICBleGl0ZWQ6ICB7IG9wYWNpdHk6IDAgfSxcbiAqIH07XG4gKlxuICogY29uc3QgRmFkZSA9ICh7IGluOiBpblByb3AgfSkgPT4gKFxuICogICA8VHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXtkdXJhdGlvbn0+XG4gKiAgICAge3N0YXRlID0+IChcbiAqICAgICAgIDxkaXYgc3R5bGU9e3tcbiAqICAgICAgICAgLi4uZGVmYXVsdFN0eWxlLFxuICogICAgICAgICAuLi50cmFuc2l0aW9uU3R5bGVzW3N0YXRlXVxuICogICAgICAgfX0+XG4gKiAgICAgICAgIEknbSBhIGZhZGUgVHJhbnNpdGlvbiFcbiAqICAgICAgIDwvZGl2PlxuICogICAgICl9XG4gKiAgIDwvVHJhbnNpdGlvbj5cbiAqICk7XG4gKiBgYGBcbiAqXG4gKiBUaGVyZSBhcmUgNCBtYWluIHN0YXRlcyBhIFRyYW5zaXRpb24gY2FuIGJlIGluOlxuICogIC0gYCdlbnRlcmluZydgXG4gKiAgLSBgJ2VudGVyZWQnYFxuICogIC0gYCdleGl0aW5nJ2BcbiAqICAtIGAnZXhpdGVkJ2BcbiAqXG4gKiBUcmFuc2l0aW9uIHN0YXRlIGlzIHRvZ2dsZWQgdmlhIHRoZSBgaW5gIHByb3AuIFdoZW4gYHRydWVgIHRoZSBjb21wb25lbnRcbiAqIGJlZ2lucyB0aGUgXCJFbnRlclwiIHN0YWdlLiBEdXJpbmcgdGhpcyBzdGFnZSwgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IGZyb21cbiAqIGl0cyBjdXJyZW50IHRyYW5zaXRpb24gc3RhdGUsIHRvIGAnZW50ZXJpbmcnYCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZVxuICogdHJhbnNpdGlvbiBhbmQgdGhlbiB0byB0aGUgYCdlbnRlcmVkJ2Agc3RhZ2Ugb25jZSBpdCdzIGNvbXBsZXRlLiBMZXQncyB0YWtlXG4gKiB0aGUgZm9sbG93aW5nIGV4YW1wbGUgKHdlJ2xsIHVzZSB0aGVcbiAqIFt1c2VTdGF0ZV0oaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2hvb2tzLXJlZmVyZW5jZS5odG1sI3VzZXN0YXRlKSBob29rKTpcbiAqXG4gKiBgYGBqc3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgW2luUHJvcCwgc2V0SW5Qcm9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17NTAwfT5cbiAqICAgICAgICAge3N0YXRlID0+IChcbiAqICAgICAgICAgICAvLyAuLi5cbiAqICAgICAgICAgKX1cbiAqICAgICAgIDwvVHJhbnNpdGlvbj5cbiAqICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gc2V0SW5Qcm9wKHRydWUpfT5cbiAqICAgICAgICAgQ2xpY2sgdG8gRW50ZXJcbiAqICAgICAgIDwvYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfVxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IHRvIHRoZSBgJ2VudGVyaW5nJ2Agc3RhdGVcbiAqIGFuZCBzdGF5IHRoZXJlIGZvciA1MDBtcyAodGhlIHZhbHVlIG9mIGB0aW1lb3V0YCkgYmVmb3JlIGl0IGZpbmFsbHkgc3dpdGNoZXNcbiAqIHRvIGAnZW50ZXJlZCdgLlxuICpcbiAqIFdoZW4gYGluYCBpcyBgZmFsc2VgIHRoZSBzYW1lIHRoaW5nIGhhcHBlbnMgZXhjZXB0IHRoZSBzdGF0ZSBtb3ZlcyBmcm9tXG4gKiBgJ2V4aXRpbmcnYCB0byBgJ2V4aXRlZCdgLlxuICovXG5cbnZhciBUcmFuc2l0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb24ocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICB2YXIgcGFyZW50R3JvdXAgPSBjb250ZXh0OyAvLyBJbiB0aGUgY29udGV4dCBvZiBhIFRyYW5zaXRpb25Hcm91cCBhbGwgZW50ZXJzIGFyZSByZWFsbHkgYXBwZWFyc1xuXG4gICAgdmFyIGFwcGVhciA9IHBhcmVudEdyb3VwICYmICFwYXJlbnRHcm91cC5pc01vdW50aW5nID8gcHJvcHMuZW50ZXIgOiBwcm9wcy5hcHBlYXI7XG4gICAgdmFyIGluaXRpYWxTdGF0dXM7XG4gICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcm9wcy5pbikge1xuICAgICAgaWYgKGFwcGVhcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBFTlRFUklORztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFTlRFUkVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvcHMudW5tb3VudE9uRXhpdCB8fCBwcm9wcy5tb3VudE9uRW50ZXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IFVOTU9VTlRFRDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzdGF0dXM6IGluaXRpYWxTdGF0dXNcbiAgICB9O1xuICAgIF90aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgVHJhbnNpdGlvbi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoX3JlZiwgcHJldlN0YXRlKSB7XG4gICAgdmFyIG5leHRJbiA9IF9yZWYuaW47XG5cbiAgICBpZiAobmV4dEluICYmIHByZXZTdGF0ZS5zdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0gLy8gZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUocHJldlByb3BzKSB7XG4gIC8vICAgbGV0IG5leHRTdGF0dXMgPSBudWxsXG4gIC8vICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAvLyAgICAgY29uc3QgeyBzdGF0dXMgfSA9IHRoaXMuc3RhdGVcbiAgLy8gICAgIGlmICh0aGlzLnByb3BzLmluKSB7XG4gIC8vICAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAvLyAgICAgICAgIG5leHRTdGF0dXMgPSBFTlRFUklOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9IGVsc2Uge1xuICAvLyAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyAgIHJldHVybiB7IG5leHRTdGF0dXMgfVxuICAvLyB9XG4gIDtcblxuICB2YXIgX3Byb3RvID0gVHJhbnNpdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy51cGRhdGVTdGF0dXModHJ1ZSwgdGhpcy5hcHBlYXJTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIG5leHRTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAgICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkge1xuICAgICAgICAgIG5leHRTdGF0dXMgPSBFWElUSU5HO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVTdGF0dXMoZmFsc2UsIG5leHRTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFRpbWVvdXRzID0gZnVuY3Rpb24gZ2V0VGltZW91dHMoKSB7XG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzLnByb3BzLnRpbWVvdXQ7XG4gICAgdmFyIGV4aXQsIGVudGVyLCBhcHBlYXI7XG4gICAgZXhpdCA9IGVudGVyID0gYXBwZWFyID0gdGltZW91dDtcblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwgJiYgdHlwZW9mIHRpbWVvdXQgIT09ICdudW1iZXInKSB7XG4gICAgICBleGl0ID0gdGltZW91dC5leGl0O1xuICAgICAgZW50ZXIgPSB0aW1lb3V0LmVudGVyOyAvLyBUT0RPOiByZW1vdmUgZmFsbGJhY2sgZm9yIG5leHQgbWFqb3JcblxuICAgICAgYXBwZWFyID0gdGltZW91dC5hcHBlYXIgIT09IHVuZGVmaW5lZCA/IHRpbWVvdXQuYXBwZWFyIDogZW50ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGV4aXQ6IGV4aXQsXG4gICAgICBlbnRlcjogZW50ZXIsXG4gICAgICBhcHBlYXI6IGFwcGVhclxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZVN0YXR1cyA9IGZ1bmN0aW9uIHVwZGF0ZVN0YXR1cyhtb3VudGluZywgbmV4dFN0YXR1cykge1xuICAgIGlmIChtb3VudGluZyA9PT0gdm9pZCAwKSB7XG4gICAgICBtb3VudGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChuZXh0U3RhdHVzICE9PSBudWxsKSB7XG4gICAgICAvLyBuZXh0U3RhdHVzIHdpbGwgYWx3YXlzIGJlIEVOVEVSSU5HIG9yIEVYSVRJTkcuXG4gICAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuXG4gICAgICBpZiAobmV4dFN0YXR1cyA9PT0gRU5URVJJTkcpIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRW50ZXIobW91bnRpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRXhpdCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy51bm1vdW50T25FeGl0ICYmIHRoaXMuc3RhdGUuc3RhdHVzID09PSBFWElURUQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IFVOTU9VTlRFRFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRW50ZXIgPSBmdW5jdGlvbiBwZXJmb3JtRW50ZXIobW91bnRpbmcpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBlbnRlciA9IHRoaXMucHJvcHMuZW50ZXI7XG4gICAgdmFyIGFwcGVhcmluZyA9IHRoaXMuY29udGV4dCA/IHRoaXMuY29udGV4dC5pc01vdW50aW5nIDogbW91bnRpbmc7XG5cbiAgICB2YXIgX3JlZjIgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyBbYXBwZWFyaW5nXSA6IFtSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKSwgYXBwZWFyaW5nXSxcbiAgICAgICAgbWF5YmVOb2RlID0gX3JlZjJbMF0sXG4gICAgICAgIG1heWJlQXBwZWFyaW5nID0gX3JlZjJbMV07XG5cbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7XG4gICAgdmFyIGVudGVyVGltZW91dCA9IGFwcGVhcmluZyA/IHRpbWVvdXRzLmFwcGVhciA6IHRpbWVvdXRzLmVudGVyOyAvLyBubyBlbnRlciBhbmltYXRpb24gc2tpcCByaWdodCB0byBFTlRFUkVEXG4gICAgLy8gaWYgd2UgYXJlIG1vdW50aW5nIGFuZCBydW5uaW5nIHRoaXMgaXQgbWVhbnMgYXBwZWFyIF9tdXN0XyBiZSBzZXRcblxuICAgIGlmICghbW91bnRpbmcgJiYgIWVudGVyIHx8IGNvbmZpZy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChtYXliZU5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkVudGVyKG1heWJlTm9kZSwgbWF5YmVBcHBlYXJpbmcpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRU5URVJJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIucHJvcHMub25FbnRlcmluZyhtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcblxuICAgICAgX3RoaXMyLm9uVHJhbnNpdGlvbkVuZChlbnRlclRpbWVvdXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIucHJvcHMub25FbnRlcmVkKG1heWJlTm9kZSwgbWF5YmVBcHBlYXJpbmcpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRXhpdCA9IGZ1bmN0aW9uIHBlcmZvcm1FeGl0KCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIGV4aXQgPSB0aGlzLnByb3BzLmV4aXQ7XG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBtYXliZU5vZGUgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyB1bmRlZmluZWQgOiBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTsgLy8gbm8gZXhpdCBhbmltYXRpb24gc2tpcCByaWdodCB0byBFWElURURcblxuICAgIGlmICghZXhpdCB8fCBjb25maWcuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG1heWJlTm9kZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uRXhpdChtYXliZU5vZGUpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRVhJVElOR1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRpbmcobWF5YmVOb2RlKTtcblxuICAgICAgX3RoaXMzLm9uVHJhbnNpdGlvbkVuZCh0aW1lb3V0cy5leGl0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczMucHJvcHMub25FeGl0ZWQobWF5YmVOb2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY2FuY2VsTmV4dENhbGxiYWNrID0gZnVuY3Rpb24gY2FuY2VsTmV4dENhbGxiYWNrKCkge1xuICAgIGlmICh0aGlzLm5leHRDYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsKCk7XG4gICAgICB0aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zYWZlU2V0U3RhdGUgPSBmdW5jdGlvbiBzYWZlU2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjaykge1xuICAgIC8vIFRoaXMgc2hvdWxkbid0IGJlIG5lY2Vzc2FyeSwgYnV0IHRoZXJlIGFyZSB3ZWlyZCByYWNlIGNvbmRpdGlvbnMgd2l0aFxuICAgIC8vIHNldFN0YXRlIGNhbGxiYWNrcyBhbmQgdW5tb3VudGluZyBpbiB0ZXN0aW5nLCBzbyBhbHdheXMgbWFrZSBzdXJlIHRoYXRcbiAgICAvLyB3ZSBjYW4gY2FuY2VsIGFueSBwZW5kaW5nIHNldFN0YXRlIGNhbGxiYWNrcyBhZnRlciB3ZSB1bm1vdW50LlxuICAgIGNhbGxiYWNrID0gdGhpcy5zZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spO1xuICAgIHRoaXMuc2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgX3Byb3RvLnNldE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIHNldE5leHRDYWxsYmFjayhjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgdmFyIGFjdGl2ZSA9IHRydWU7XG5cbiAgICB0aGlzLm5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXM0Lm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgICAgIGNhbGxiYWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLm5leHRDYWxsYmFjaztcbiAgfTtcblxuICBfcHJvdG8ub25UcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKHRpbWVvdXQsIGhhbmRsZXIpIHtcbiAgICB0aGlzLnNldE5leHRDYWxsYmFjayhoYW5kbGVyKTtcbiAgICB2YXIgbm9kZSA9IHRoaXMucHJvcHMubm9kZVJlZiA/IHRoaXMucHJvcHMubm9kZVJlZi5jdXJyZW50IDogUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7XG4gICAgdmFyIGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIgPSB0aW1lb3V0ID09IG51bGwgJiYgIXRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXI7XG5cbiAgICBpZiAoIW5vZGUgfHwgZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lcikge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgIHZhciBfcmVmMyA9IHRoaXMucHJvcHMubm9kZVJlZiA/IFt0aGlzLm5leHRDYWxsYmFja10gOiBbbm9kZSwgdGhpcy5uZXh0Q2FsbGJhY2tdLFxuICAgICAgICAgIG1heWJlTm9kZSA9IF9yZWYzWzBdLFxuICAgICAgICAgIG1heWJlTmV4dENhbGxiYWNrID0gX3JlZjNbMV07XG5cbiAgICAgIHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIobWF5YmVOb2RlLCBtYXliZU5leHRDYWxsYmFjayk7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgdGltZW91dCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgaWYgKHN0YXR1cyA9PT0gVU5NT1VOVEVEKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBfaW4gPSBfdGhpcyRwcm9wcy5pbixcbiAgICAgICAgX21vdW50T25FbnRlciA9IF90aGlzJHByb3BzLm1vdW50T25FbnRlcixcbiAgICAgICAgX3VubW91bnRPbkV4aXQgPSBfdGhpcyRwcm9wcy51bm1vdW50T25FeGl0LFxuICAgICAgICBfYXBwZWFyID0gX3RoaXMkcHJvcHMuYXBwZWFyLFxuICAgICAgICBfZW50ZXIgPSBfdGhpcyRwcm9wcy5lbnRlcixcbiAgICAgICAgX2V4aXQgPSBfdGhpcyRwcm9wcy5leGl0LFxuICAgICAgICBfdGltZW91dCA9IF90aGlzJHByb3BzLnRpbWVvdXQsXG4gICAgICAgIF9hZGRFbmRMaXN0ZW5lciA9IF90aGlzJHByb3BzLmFkZEVuZExpc3RlbmVyLFxuICAgICAgICBfb25FbnRlciA9IF90aGlzJHByb3BzLm9uRW50ZXIsXG4gICAgICAgIF9vbkVudGVyaW5nID0gX3RoaXMkcHJvcHMub25FbnRlcmluZyxcbiAgICAgICAgX29uRW50ZXJlZCA9IF90aGlzJHByb3BzLm9uRW50ZXJlZCxcbiAgICAgICAgX29uRXhpdCA9IF90aGlzJHByb3BzLm9uRXhpdCxcbiAgICAgICAgX29uRXhpdGluZyA9IF90aGlzJHByb3BzLm9uRXhpdGluZyxcbiAgICAgICAgX29uRXhpdGVkID0gX3RoaXMkcHJvcHMub25FeGl0ZWQsXG4gICAgICAgIF9ub2RlUmVmID0gX3RoaXMkcHJvcHMubm9kZVJlZixcbiAgICAgICAgY2hpbGRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImluXCIsIFwibW91bnRPbkVudGVyXCIsIFwidW5tb3VudE9uRXhpdFwiLCBcImFwcGVhclwiLCBcImVudGVyXCIsIFwiZXhpdFwiLCBcInRpbWVvdXRcIiwgXCJhZGRFbmRMaXN0ZW5lclwiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FbnRlcmVkXCIsIFwib25FeGl0XCIsIFwib25FeGl0aW5nXCIsIFwib25FeGl0ZWRcIiwgXCJub2RlUmVmXCJdKTtcblxuICAgIHJldHVybiAoXG4gICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAvLyBhbGxvd3MgZm9yIG5lc3RlZCBUcmFuc2l0aW9uc1xuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBudWxsXG4gICAgICB9LCB0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicgPyBjaGlsZHJlbihzdGF0dXMsIGNoaWxkUHJvcHMpIDogUmVhY3QuY2xvbmVFbGVtZW50KFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pLCBjaGlsZFByb3BzKSlcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uLmNvbnRleHRUeXBlID0gVHJhbnNpdGlvbkdyb3VwQ29udGV4dDtcblRyYW5zaXRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQSBSZWFjdCByZWZlcmVuY2UgdG8gRE9NIGVsZW1lbnQgdGhhdCBuZWVkIHRvIHRyYW5zaXRpb246XG4gICAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81MTEyNzEzMC80NjcxOTMyXG4gICAqXG4gICAqICAgLSBXaGVuIGBub2RlUmVmYCBwcm9wIGlzIHVzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkIHRvIGNhbGxiYWNrIGZ1bmN0aW9uc1xuICAgKiAgICAgIChlLmcuIGBvbkVudGVyYCkgYmVjYXVzZSB1c2VyIGFscmVhZHkgaGFzIGRpcmVjdCBhY2Nlc3MgdG8gdGhlIG5vZGUuXG4gICAqICAgLSBXaGVuIGNoYW5naW5nIGBrZXlgIHByb3Agb2YgYFRyYW5zaXRpb25gIGluIGEgYFRyYW5zaXRpb25Hcm91cGAgYSBuZXdcbiAgICogICAgIGBub2RlUmVmYCBuZWVkIHRvIGJlIHByb3ZpZGVkIHRvIGBUcmFuc2l0aW9uYCB3aXRoIGNoYW5nZWQgYGtleWAgcHJvcFxuICAgKiAgICAgKHNlZVxuICAgKiAgICAgW3Rlc3QvQ1NTVHJhbnNpdGlvbi10ZXN0LmpzXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Jsb2IvMTM0MzVmODk3YjNhYjcxZjZlMTlkNzI0ZjE0NTU5NmY1OTEwNTgxYy90ZXN0L0NTU1RyYW5zaXRpb24tdGVzdC5qcyNMMzYyLUw0MzcpKS5cbiAgICovXG4gIG5vZGVSZWY6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogdHlwZW9mIEVsZW1lbnQgPT09ICd1bmRlZmluZWQnID8gUHJvcFR5cGVzLmFueSA6IFByb3BUeXBlcy5pbnN0YW5jZU9mKEVsZW1lbnQpXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBIGBmdW5jdGlvbmAgY2hpbGQgY2FuIGJlIHVzZWQgaW5zdGVhZCBvZiBhIFJlYWN0IGVsZW1lbnQuIFRoaXMgZnVuY3Rpb24gaXNcbiAgICogY2FsbGVkIHdpdGggdGhlIGN1cnJlbnQgdHJhbnNpdGlvbiBzdGF0dXMgKGAnZW50ZXJpbmcnYCwgYCdlbnRlcmVkJ2AsXG4gICAqIGAnZXhpdGluZydgLCBgJ2V4aXRlZCdgKSwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gYXBwbHkgY29udGV4dFxuICAgKiBzcGVjaWZpYyBwcm9wcyB0byBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIDxUcmFuc2l0aW9uIGluPXt0aGlzLnN0YXRlLmlufSB0aW1lb3V0PXsxNTB9PlxuICAgKiAgIHtzdGF0ZSA9PiAoXG4gICAqICAgICA8TXlDb21wb25lbnQgY2xhc3NOYW1lPXtgZmFkZSBmYWRlLSR7c3RhdGV9YH0gLz5cbiAgICogICApfVxuICAgKiA8L1RyYW5zaXRpb24+XG4gICAqIGBgYFxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsIFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRdKS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBTaG93IHRoZSBjb21wb25lbnQ7IHRyaWdnZXJzIHRoZSBlbnRlciBvciBleGl0IHN0YXRlc1xuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IHRoZSBjaGlsZCBjb21wb25lbnQgaXMgbW91bnRlZCBpbW1lZGlhdGVseSBhbG9uZyB3aXRoXG4gICAqIHRoZSBwYXJlbnQgYFRyYW5zaXRpb25gIGNvbXBvbmVudC4gSWYgeW91IHdhbnQgdG8gXCJsYXp5IG1vdW50XCIgdGhlIGNvbXBvbmVudCBvbiB0aGVcbiAgICogZmlyc3QgYGluPXt0cnVlfWAgeW91IGNhbiBzZXQgYG1vdW50T25FbnRlcmAuIEFmdGVyIHRoZSBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIHRoZSBjb21wb25lbnQgd2lsbCBzdGF5XG4gICAqIG1vdW50ZWQsIGV2ZW4gb24gXCJleGl0ZWRcIiwgdW5sZXNzIHlvdSBhbHNvIHNwZWNpZnkgYHVubW91bnRPbkV4aXRgLlxuICAgKi9cbiAgbW91bnRPbkVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IHN0YXlzIG1vdW50ZWQgYWZ0ZXIgaXQgcmVhY2hlcyB0aGUgYCdleGl0ZWQnYCBzdGF0ZS5cbiAgICogU2V0IGB1bm1vdW50T25FeGl0YCBpZiB5b3UnZCBwcmVmZXIgdG8gdW5tb3VudCB0aGUgY29tcG9uZW50IGFmdGVyIGl0IGZpbmlzaGVzIGV4aXRpbmcuXG4gICAqL1xuICB1bm1vdW50T25FeGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGRvZXMgbm90IHBlcmZvcm0gdGhlIGVudGVyIHRyYW5zaXRpb24gd2hlblxuICAgKiBpdCBmaXJzdCBtb3VudHMsIHJlZ2FyZGxlc3Mgb2YgdGhlIHZhbHVlIG9mIGBpbmAuIElmIHlvdSB3YW50IHRoaXNcbiAgICogYmVoYXZpb3IsIHNldCBib3RoIGBhcHBlYXJgIGFuZCBgaW5gIHRvIGB0cnVlYC5cbiAgICpcbiAgICogPiAqKk5vdGUqKjogdGhlcmUgYXJlIG5vIHNwZWNpYWwgYXBwZWFyIHN0YXRlcyBsaWtlIGBhcHBlYXJpbmdgL2BhcHBlYXJlZGAsIHRoaXMgcHJvcFxuICAgKiA+IG9ubHkgYWRkcyBhbiBhZGRpdGlvbmFsIGVudGVyIHRyYW5zaXRpb24uIEhvd2V2ZXIsIGluIHRoZVxuICAgKiA+IGA8Q1NTVHJhbnNpdGlvbj5gIGNvbXBvbmVudCB0aGF0IGZpcnN0IGVudGVyIHRyYW5zaXRpb24gZG9lcyByZXN1bHQgaW5cbiAgICogPiBhZGRpdGlvbmFsIGAuYXBwZWFyLSpgIGNsYXNzZXMsIHRoYXQgd2F5IHlvdSBjYW4gY2hvb3NlIHRvIHN0eWxlIGl0XG4gICAqID4gZGlmZmVyZW50bHkuXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBlbnRlciB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZXhpdCB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogUmVxdWlyZWQgdW5sZXNzIGBhZGRFbmRMaXN0ZW5lcmAgaXMgcHJvdmlkZWQuXG4gICAqXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnM6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXs1MDB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBvciBpbmRpdmlkdWFsbHk6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXt7XG4gICAqICBhcHBlYXI6IDUwMCxcbiAgICogIGVudGVyOiAzMDAsXG4gICAqICBleGl0OiA1MDAsXG4gICAqIH19XG4gICAqIGBgYFxuICAgKlxuICAgKiAtIGBhcHBlYXJgIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSBvZiBgZW50ZXJgXG4gICAqIC0gYGVudGVyYCBkZWZhdWx0cyB0byBgMGBcbiAgICogLSBgZXhpdGAgZGVmYXVsdHMgdG8gYDBgXG4gICAqXG4gICAqIEB0eXBlIHtudW1iZXIgfCB7IGVudGVyPzogbnVtYmVyLCBleGl0PzogbnVtYmVyLCBhcHBlYXI/OiBudW1iZXIgfX1cbiAgICovXG4gIHRpbWVvdXQ6IGZ1bmN0aW9uIHRpbWVvdXQocHJvcHMpIHtcbiAgICB2YXIgcHQgPSB0aW1lb3V0c1NoYXBlO1xuICAgIGlmICghcHJvcHMuYWRkRW5kTGlzdGVuZXIpIHB0ID0gcHQuaXNSZXF1aXJlZDtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBwdC5hcHBseSh2b2lkIDAsIFtwcm9wc10uY29uY2F0KGFyZ3MpKTtcbiAgfSxcblxuICAvKipcbiAgICogQWRkIGEgY3VzdG9tIHRyYW5zaXRpb24gZW5kIHRyaWdnZXIuIENhbGxlZCB3aXRoIHRoZSB0cmFuc2l0aW9uaW5nXG4gICAqIERPTSBub2RlIGFuZCBhIGBkb25lYCBjYWxsYmFjay4gQWxsb3dzIGZvciBtb3JlIGZpbmUgZ3JhaW5lZCB0cmFuc2l0aW9uIGVuZFxuICAgKiBsb2dpYy4gVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIGFkZEVuZExpc3RlbmVyPXsobm9kZSwgZG9uZSkgPT4ge1xuICAgKiAgIC8vIHVzZSB0aGUgY3NzIHRyYW5zaXRpb25lbmQgZXZlbnQgdG8gbWFyayB0aGUgZmluaXNoIG9mIGEgdHJhbnNpdGlvblxuICAgKiAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGRvbmUsIGZhbHNlKTtcbiAgICogfX1cbiAgICogYGBgXG4gICAqL1xuICBhZGRFbmRMaXN0ZW5lcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyZWRcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0ZWRcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jXG59IDoge307IC8vIE5hbWUgdGhlIGZ1bmN0aW9uIHNvIGl0IGlzIGNsZWFyZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cblRyYW5zaXRpb24uZGVmYXVsdFByb3BzID0ge1xuICBpbjogZmFsc2UsXG4gIG1vdW50T25FbnRlcjogZmFsc2UsXG4gIHVubW91bnRPbkV4aXQ6IGZhbHNlLFxuICBhcHBlYXI6IGZhbHNlLFxuICBlbnRlcjogdHJ1ZSxcbiAgZXhpdDogdHJ1ZSxcbiAgb25FbnRlcjogbm9vcCxcbiAgb25FbnRlcmluZzogbm9vcCxcbiAgb25FbnRlcmVkOiBub29wLFxuICBvbkV4aXQ6IG5vb3AsXG4gIG9uRXhpdGluZzogbm9vcCxcbiAgb25FeGl0ZWQ6IG5vb3Bcbn07XG5UcmFuc2l0aW9uLlVOTU9VTlRFRCA9IFVOTU9VTlRFRDtcblRyYW5zaXRpb24uRVhJVEVEID0gRVhJVEVEO1xuVHJhbnNpdGlvbi5FTlRFUklORyA9IEVOVEVSSU5HO1xuVHJhbnNpdGlvbi5FTlRFUkVEID0gRU5URVJFRDtcblRyYW5zaXRpb24uRVhJVElORyA9IEVYSVRJTkc7XG5leHBvcnQgZGVmYXVsdCBUcmFuc2l0aW9uOyIsImltcG9ydCB7IHVzZVRoZW1lIGFzIHVzZVRoZW1lV2l0aG91dERlZmF1bHQgfSBmcm9tICdAbWF0ZXJpYWwtdWkvc3R5bGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICB2YXIgdGhlbWUgPSB1c2VUaGVtZVdpdGhvdXREZWZhdWx0KCkgfHwgZGVmYXVsdFRoZW1lO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRGVidWdWYWx1ZSh0aGVtZSk7XG4gIH1cblxuICByZXR1cm4gdGhlbWU7XG59IiwiZXhwb3J0IHZhciByZWZsb3cgPSBmdW5jdGlvbiByZWZsb3cobm9kZSkge1xuICByZXR1cm4gbm9kZS5zY3JvbGxUb3A7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zaXRpb25Qcm9wcyhwcm9wcywgb3B0aW9ucykge1xuICB2YXIgdGltZW91dCA9IHByb3BzLnRpbWVvdXQsXG4gICAgICBfcHJvcHMkc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgIHN0eWxlID0gX3Byb3BzJHN0eWxlID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRzdHlsZTtcbiAgcmV0dXJuIHtcbiAgICBkdXJhdGlvbjogc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uIHx8IHR5cGVvZiB0aW1lb3V0ID09PSAnbnVtYmVyJyA/IHRpbWVvdXQgOiB0aW1lb3V0W29wdGlvbnMubW9kZV0gfHwgMCxcbiAgICBkZWxheTogc3R5bGUudHJhbnNpdGlvbkRlbGF5XG4gIH07XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IHsgZHVyYXRpb24gfSBmcm9tICcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5pbXBvcnQgeyByZWZsb3csIGdldFRyYW5zaXRpb25Qcm9wcyB9IGZyb20gJy4uL3RyYW5zaXRpb25zL3V0aWxzJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xudmFyIHN0eWxlcyA9IHtcbiAgZW50ZXJpbmc6IHtcbiAgICBvcGFjaXR5OiAxXG4gIH0sXG4gIGVudGVyZWQ6IHtcbiAgICBvcGFjaXR5OiAxXG4gIH1cbn07XG52YXIgZGVmYXVsdFRpbWVvdXQgPSB7XG4gIGVudGVyOiBkdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgZXhpdDogZHVyYXRpb24ubGVhdmluZ1NjcmVlblxufTtcbi8qKlxuICogVGhlIEZhZGUgdHJhbnNpdGlvbiBpcyB1c2VkIGJ5IHRoZSBbTW9kYWxdKC9jb21wb25lbnRzL21vZGFsLykgY29tcG9uZW50LlxuICogSXQgdXNlcyBbcmVhY3QtdHJhbnNpdGlvbi1ncm91cF0oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cCkgaW50ZXJuYWxseS5cbiAqL1xuXG52YXIgRmFkZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEZhZGUocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRkaXNhYmxlU3RyaWN0TSA9IHByb3BzLmRpc2FibGVTdHJpY3RNb2RlQ29tcGF0LFxuICAgICAgZGlzYWJsZVN0cmljdE1vZGVDb21wYXQgPSBfcHJvcHMkZGlzYWJsZVN0cmljdE0gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVTdHJpY3RNLFxuICAgICAgaW5Qcm9wID0gcHJvcHMuaW4sXG4gICAgICBvbkVudGVyID0gcHJvcHMub25FbnRlcixcbiAgICAgIG9uRW50ZXJlZCA9IHByb3BzLm9uRW50ZXJlZCxcbiAgICAgIG9uRW50ZXJpbmcgPSBwcm9wcy5vbkVudGVyaW5nLFxuICAgICAgb25FeGl0ID0gcHJvcHMub25FeGl0LFxuICAgICAgb25FeGl0ZWQgPSBwcm9wcy5vbkV4aXRlZCxcbiAgICAgIG9uRXhpdGluZyA9IHByb3BzLm9uRXhpdGluZyxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPSBwcm9wcy5UcmFuc2l0aW9uQ29tcG9uZW50LFxuICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IF9wcm9wcyRUcmFuc2l0aW9uQ29tcCA9PT0gdm9pZCAwID8gVHJhbnNpdGlvbiA6IF9wcm9wcyRUcmFuc2l0aW9uQ29tcCxcbiAgICAgIF9wcm9wcyR0aW1lb3V0ID0gcHJvcHMudGltZW91dCxcbiAgICAgIHRpbWVvdXQgPSBfcHJvcHMkdGltZW91dCA9PT0gdm9pZCAwID8gZGVmYXVsdFRpbWVvdXQgOiBfcHJvcHMkdGltZW91dCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImRpc2FibGVTdHJpY3RNb2RlQ29tcGF0XCIsIFwiaW5cIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmVkXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGVkXCIsIFwib25FeGl0aW5nXCIsIFwic3R5bGVcIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCIsIFwidGltZW91dFwiXSk7XG5cbiAgdmFyIHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgdmFyIGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPSB0aGVtZS51bnN0YWJsZV9zdHJpY3RNb2RlICYmICFkaXNhYmxlU3RyaWN0TW9kZUNvbXBhdDtcbiAgdmFyIG5vZGVSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBmb3JlaWduUmVmID0gdXNlRm9ya1JlZihjaGlsZHJlbi5yZWYsIHJlZik7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPyBub2RlUmVmIDogdW5kZWZpbmVkLCBmb3JlaWduUmVmKTtcblxuICB2YXIgbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uIG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5vZGVPckFwcGVhcmluZywgbWF5YmVBcHBlYXJpbmcpIHtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3JlZiA9IGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPyBbbm9kZVJlZi5jdXJyZW50LCBub2RlT3JBcHBlYXJpbmddIDogW25vZGVPckFwcGVhcmluZywgbWF5YmVBcHBlYXJpbmddLFxuICAgICAgICAgICAgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSxcbiAgICAgICAgICAgIG5vZGUgPSBfcmVmMlswXSxcbiAgICAgICAgICAgIGlzQXBwZWFyaW5nID0gX3JlZjJbMV07IC8vIG9uRW50ZXJYeHggYW5kIG9uRXhpdFh4eCBjYWxsYmFja3MgaGF2ZSBhIGRpZmZlcmVudCBhcmd1bWVudHMubGVuZ3RoIHZhbHVlLlxuXG5cbiAgICAgICAgaWYgKGlzQXBwZWFyaW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjYWxsYmFjayhub2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsYmFjayhub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBoYW5kbGVFbnRlcmluZyA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FbnRlcmluZyk7XG4gIHZhciBoYW5kbGVFbnRlciA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soZnVuY3Rpb24gKG5vZGUsIGlzQXBwZWFyaW5nKSB7XG4gICAgcmVmbG93KG5vZGUpOyAvLyBTbyB0aGUgYW5pbWF0aW9uIGFsd2F5cyBzdGFydCBmcm9tIHRoZSBzdGFydC5cblxuICAgIHZhciB0cmFuc2l0aW9uUHJvcHMgPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgdGltZW91dDogdGltZW91dFxuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdlbnRlcidcbiAgICB9KTtcbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB0cmFuc2l0aW9uUHJvcHMpO1xuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHRyYW5zaXRpb25Qcm9wcyk7XG5cbiAgICBpZiAob25FbnRlcikge1xuICAgICAgb25FbnRlcihub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZUVudGVyZWQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRW50ZXJlZCk7XG4gIHZhciBoYW5kbGVFeGl0aW5nID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkV4aXRpbmcpO1xuICB2YXIgaGFuZGxlRXhpdCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB2YXIgdHJhbnNpdGlvblByb3BzID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHRpbWVvdXQ6IHRpbWVvdXRcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZXhpdCdcbiAgICB9KTtcbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB0cmFuc2l0aW9uUHJvcHMpO1xuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHRyYW5zaXRpb25Qcm9wcyk7XG5cbiAgICBpZiAob25FeGl0KSB7XG4gICAgICBvbkV4aXQobm9kZSk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZUV4aXRlZCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FeGl0ZWQpO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGFwcGVhcjogdHJ1ZSxcbiAgICBpbjogaW5Qcm9wLFxuICAgIG5vZGVSZWY6IGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPyBub2RlUmVmIDogdW5kZWZpbmVkLFxuICAgIG9uRW50ZXI6IGhhbmRsZUVudGVyLFxuICAgIG9uRW50ZXJlZDogaGFuZGxlRW50ZXJlZCxcbiAgICBvbkVudGVyaW5nOiBoYW5kbGVFbnRlcmluZyxcbiAgICBvbkV4aXQ6IGhhbmRsZUV4aXQsXG4gICAgb25FeGl0ZWQ6IGhhbmRsZUV4aXRlZCxcbiAgICBvbkV4aXRpbmc6IGhhbmRsZUV4aXRpbmcsXG4gICAgdGltZW91dDogdGltZW91dFxuICB9LCBvdGhlciksIGZ1bmN0aW9uIChzdGF0ZSwgY2hpbGRQcm9wcykge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBfZXh0ZW5kcyh7XG4gICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICB2aXNpYmlsaXR5OiBzdGF0ZSA9PT0gJ2V4aXRlZCcgJiYgIWluUHJvcCA/ICdoaWRkZW4nIDogdW5kZWZpbmVkXG4gICAgICB9LCBzdHlsZXNbc3RhdGVdLCBzdHlsZSwgY2hpbGRyZW4ucHJvcHMuc3R5bGUpLFxuICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICB9LCBjaGlsZFByb3BzKSk7XG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGYWRlLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudCxcblxuICAvKipcbiAgICogRW5hYmxlIHRoaXMgcHJvcCBpZiB5b3UgZW5jb3VudGVyICdGdW5jdGlvbiBjb21wb25lbnRzIGNhbm5vdCBiZSBnaXZlbiByZWZzJyxcbiAgICogdXNlIGB1bnN0YWJsZV9jcmVhdGVTdHJpY3RNb2RlVGhlbWVgLFxuICAgKiBhbmQgY2FuJ3QgZm9yd2FyZCB0aGUgcmVmIGluIHRoZSBjaGlsZCBjb21wb25lbnQuXG4gICAqL1xuICBkaXNhYmxlU3RyaWN0TW9kZUNvbXBhdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4uXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqL1xuICB0aW1lb3V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBGYWRlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBGYWRlIGZyb20gJy4uL0ZhZGUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICAvLyBJbXByb3ZlIHNjcm9sbGFibGUgZGlhbG9nIHN1cHBvcnQuXG4gICAgekluZGV4OiAtMSxcbiAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuNSknLFxuICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgaW52aXNpYmxlPXt0cnVlfWAuICovXG4gIGludmlzaWJsZToge1xuICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICB9XG59O1xudmFyIEJhY2tkcm9wID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQmFja2Ryb3AocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGludmlzaWJsZSA9IHByb3BzLmludmlzaWJsZSxcbiAgICAgIGludmlzaWJsZSA9IF9wcm9wcyRpbnZpc2libGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGludmlzaWJsZSxcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gcHJvcHMudHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgX3Byb3BzJFRyYW5zaXRpb25Db21wID0gcHJvcHMuVHJhbnNpdGlvbkNvbXBvbmVudCxcbiAgICAgIFRyYW5zaXRpb25Db21wb25lbnQgPSBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPT09IHZvaWQgMCA/IEZhZGUgOiBfcHJvcHMkVHJhbnNpdGlvbkNvbXAsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiaW52aXNpYmxlXCIsIFwib3BlblwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgaW46IG9wZW4sXG4gICAgdGltZW91dDogdHJhbnNpdGlvbkR1cmF0aW9uXG4gIH0sIG90aGVyKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgaW52aXNpYmxlICYmIGNsYXNzZXMuaW52aXNpYmxlKSxcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgcmVmOiByZWZcbiAgfSwgY2hpbGRyZW4pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQmFja2Ryb3AucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGlzIGludmlzaWJsZS5cbiAgICogSXQgY2FuIGJlIHVzZWQgd2hlbiByZW5kZXJpbmcgYSBwb3BvdmVyIG9yIGEgY3VzdG9tIHNlbGVjdCBjb21wb25lbnQuXG4gICAqL1xuICBpbnZpc2libGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYWNrZHJvcCBpcyBvcGVuLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlCYWNrZHJvcCdcbn0pKEJhY2tkcm9wKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBkZWJvdW5jZSBmcm9tICcuLi91dGlscy9kZWJvdW5jZSc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5pbXBvcnQgeyBlbGVtZW50QWNjZXB0aW5nUmVmIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5pbXBvcnQgeyBkdXJhdGlvbiB9IGZyb20gJy4uL3N0eWxlcy90cmFuc2l0aW9ucyc7XG5pbXBvcnQgeyByZWZsb3csIGdldFRyYW5zaXRpb25Qcm9wcyB9IGZyb20gJy4uL3RyYW5zaXRpb25zL3V0aWxzJzsgLy8gVHJhbnNsYXRlIHRoZSBub2RlIHNvIGhlIGNhbid0IGJlIHNlZW4gb24gdGhlIHNjcmVlbi5cbi8vIExhdGVyLCB3ZSBnb25uYSB0cmFuc2xhdGUgYmFjayB0aGUgbm9kZSB0byBoaXMgb3JpZ2luYWwgbG9jYXRpb25cbi8vIHdpdGggYG5vbmVgLmBcblxuZnVuY3Rpb24gZ2V0VHJhbnNsYXRlVmFsdWUoZGlyZWN0aW9uLCBub2RlKSB7XG4gIHZhciByZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHRyYW5zZm9ybTtcblxuICBpZiAobm9kZS5mYWtlVHJhbnNmb3JtKSB7XG4gICAgdHJhbnNmb3JtID0gbm9kZS5mYWtlVHJhbnNmb3JtO1xuICB9IGVsc2Uge1xuICAgIHZhciBjb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgdHJhbnNmb3JtID0gY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCctd2Via2l0LXRyYW5zZm9ybScpIHx8IGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgndHJhbnNmb3JtJyk7XG4gIH1cblxuICB2YXIgb2Zmc2V0WCA9IDA7XG4gIHZhciBvZmZzZXRZID0gMDtcblxuICBpZiAodHJhbnNmb3JtICYmIHRyYW5zZm9ybSAhPT0gJ25vbmUnICYmIHR5cGVvZiB0cmFuc2Zvcm0gPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHRyYW5zZm9ybVZhbHVlcyA9IHRyYW5zZm9ybS5zcGxpdCgnKCcpWzFdLnNwbGl0KCcpJylbMF0uc3BsaXQoJywnKTtcbiAgICBvZmZzZXRYID0gcGFyc2VJbnQodHJhbnNmb3JtVmFsdWVzWzRdLCAxMCk7XG4gICAgb2Zmc2V0WSA9IHBhcnNlSW50KHRyYW5zZm9ybVZhbHVlc1s1XSwgMTApO1xuICB9XG5cbiAgaWYgKGRpcmVjdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgcmV0dXJuIFwidHJhbnNsYXRlWChcIi5jb25jYXQod2luZG93LmlubmVyV2lkdGgsIFwicHgpIHRyYW5zbGF0ZVgoXCIpLmNvbmNhdChvZmZzZXRYIC0gcmVjdC5sZWZ0LCBcInB4KVwiKTtcbiAgfVxuXG4gIGlmIChkaXJlY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICByZXR1cm4gXCJ0cmFuc2xhdGVYKC1cIi5jb25jYXQocmVjdC5sZWZ0ICsgcmVjdC53aWR0aCAtIG9mZnNldFgsIFwicHgpXCIpO1xuICB9XG5cbiAgaWYgKGRpcmVjdGlvbiA9PT0gJ3VwJykge1xuICAgIHJldHVybiBcInRyYW5zbGF0ZVkoXCIuY29uY2F0KHdpbmRvdy5pbm5lckhlaWdodCwgXCJweCkgdHJhbnNsYXRlWShcIikuY29uY2F0KG9mZnNldFkgLSByZWN0LnRvcCwgXCJweClcIik7XG4gIH0gLy8gZGlyZWN0aW9uID09PSAnZG93bidcblxuXG4gIHJldHVybiBcInRyYW5zbGF0ZVkoLVwiLmNvbmNhdChyZWN0LnRvcCArIHJlY3QuaGVpZ2h0IC0gb2Zmc2V0WSwgXCJweClcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRUcmFuc2xhdGVWYWx1ZShkaXJlY3Rpb24sIG5vZGUpIHtcbiAgdmFyIHRyYW5zZm9ybSA9IGdldFRyYW5zbGF0ZVZhbHVlKGRpcmVjdGlvbiwgbm9kZSk7XG5cbiAgaWYgKHRyYW5zZm9ybSkge1xuICAgIG5vZGUuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgIG5vZGUuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICB9XG59XG52YXIgZGVmYXVsdFRpbWVvdXQgPSB7XG4gIGVudGVyOiBkdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgZXhpdDogZHVyYXRpb24ubGVhdmluZ1NjcmVlblxufTtcbi8qKlxuICogVGhlIFNsaWRlIHRyYW5zaXRpb24gaXMgdXNlZCBieSB0aGUgW0RyYXdlcl0oL2NvbXBvbmVudHMvZHJhd2Vycy8pIGNvbXBvbmVudC5cbiAqIEl0IHVzZXMgW3JlYWN0LXRyYW5zaXRpb24tZ3JvdXBdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXApIGludGVybmFsbHkuXG4gKi9cblxudmFyIFNsaWRlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU2xpZGUocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRkaXJlY3Rpb24gPSBwcm9wcy5kaXJlY3Rpb24sXG4gICAgICBkaXJlY3Rpb24gPSBfcHJvcHMkZGlyZWN0aW9uID09PSB2b2lkIDAgPyAnZG93bicgOiBfcHJvcHMkZGlyZWN0aW9uLFxuICAgICAgaW5Qcm9wID0gcHJvcHMuaW4sXG4gICAgICBvbkVudGVyID0gcHJvcHMub25FbnRlcixcbiAgICAgIG9uRW50ZXJlZCA9IHByb3BzLm9uRW50ZXJlZCxcbiAgICAgIG9uRW50ZXJpbmcgPSBwcm9wcy5vbkVudGVyaW5nLFxuICAgICAgb25FeGl0ID0gcHJvcHMub25FeGl0LFxuICAgICAgb25FeGl0ZWQgPSBwcm9wcy5vbkV4aXRlZCxcbiAgICAgIG9uRXhpdGluZyA9IHByb3BzLm9uRXhpdGluZyxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICBfcHJvcHMkdGltZW91dCA9IHByb3BzLnRpbWVvdXQsXG4gICAgICB0aW1lb3V0ID0gX3Byb3BzJHRpbWVvdXQgPT09IHZvaWQgMCA/IGRlZmF1bHRUaW1lb3V0IDogX3Byb3BzJHRpbWVvdXQsXG4gICAgICBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPSBwcm9wcy5UcmFuc2l0aW9uQ29tcG9uZW50LFxuICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IF9wcm9wcyRUcmFuc2l0aW9uQ29tcCA9PT0gdm9pZCAwID8gVHJhbnNpdGlvbiA6IF9wcm9wcyRUcmFuc2l0aW9uQ29tcCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImRpcmVjdGlvblwiLCBcImluXCIsIFwib25FbnRlclwiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRW50ZXJpbmdcIiwgXCJvbkV4aXRcIiwgXCJvbkV4aXRlZFwiLCBcIm9uRXhpdGluZ1wiLCBcInN0eWxlXCIsIFwidGltZW91dFwiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIl0pO1xuXG4gIHZhciB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIHZhciBjaGlsZHJlblJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgLyoqXG4gICAqIHVzZWQgaW4gY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7IHJlZjogaGFuZGxlUmVmIH0pXG4gICAqL1xuXG4gIHZhciBoYW5kbGVPd25SZWYgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgIGNoaWxkcmVuUmVmLmN1cnJlbnQgPSBSZWFjdERPTS5maW5kRE9NTm9kZShpbnN0YW5jZSk7XG4gIH0sIFtdKTtcbiAgdmFyIGhhbmRsZVJlZkludGVybWVkaWFyeSA9IHVzZUZvcmtSZWYoY2hpbGRyZW4ucmVmLCBoYW5kbGVPd25SZWYpO1xuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihoYW5kbGVSZWZJbnRlcm1lZGlhcnksIHJlZik7XG5cbiAgdmFyIG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpc0FwcGVhcmluZykge1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIC8vIG9uRW50ZXJYeHggYW5kIG9uRXhpdFh4eCBjYWxsYmFja3MgaGF2ZSBhIGRpZmZlcmVudCBhcmd1bWVudHMubGVuZ3RoIHZhbHVlLlxuICAgICAgICBpZiAoaXNBcHBlYXJpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNhbGxiYWNrKGNoaWxkcmVuUmVmLmN1cnJlbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbGxiYWNrKGNoaWxkcmVuUmVmLmN1cnJlbnQsIGlzQXBwZWFyaW5nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgdmFyIGhhbmRsZUVudGVyID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhmdW5jdGlvbiAobm9kZSwgaXNBcHBlYXJpbmcpIHtcbiAgICBzZXRUcmFuc2xhdGVWYWx1ZShkaXJlY3Rpb24sIG5vZGUpO1xuICAgIHJlZmxvdyhub2RlKTtcblxuICAgIGlmIChvbkVudGVyKSB7XG4gICAgICBvbkVudGVyKG5vZGUsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgaGFuZGxlRW50ZXJpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKGZ1bmN0aW9uIChub2RlLCBpc0FwcGVhcmluZykge1xuICAgIHZhciB0cmFuc2l0aW9uUHJvcHMgPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgdGltZW91dDogdGltZW91dCxcbiAgICAgIHN0eWxlOiBzdHlsZVxuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdlbnRlcidcbiAgICB9KTtcbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJy13ZWJraXQtdHJhbnNmb3JtJywgX2V4dGVuZHMoe30sIHRyYW5zaXRpb25Qcm9wcywge1xuICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgIH0pKTtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIF9leHRlbmRzKHt9LCB0cmFuc2l0aW9uUHJvcHMsIHtcbiAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICB9KSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgbm9kZS5zdHlsZS50cmFuc2Zvcm0gPSAnbm9uZSc7XG5cbiAgICBpZiAob25FbnRlcmluZykge1xuICAgICAgb25FbnRlcmluZyhub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZUVudGVyZWQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRW50ZXJlZCk7XG4gIHZhciBoYW5kbGVFeGl0aW5nID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkV4aXRpbmcpO1xuICB2YXIgaGFuZGxlRXhpdCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB2YXIgdHJhbnNpdGlvblByb3BzID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHRpbWVvdXQ6IHRpbWVvdXQsXG4gICAgICBzdHlsZTogc3R5bGVcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZXhpdCdcbiAgICB9KTtcbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJy13ZWJraXQtdHJhbnNmb3JtJywgX2V4dGVuZHMoe30sIHRyYW5zaXRpb25Qcm9wcywge1xuICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuc2hhcnBcbiAgICB9KSk7XG4gICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCBfZXh0ZW5kcyh7fSwgdHJhbnNpdGlvblByb3BzLCB7XG4gICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5zaGFycFxuICAgIH0pKTtcbiAgICBzZXRUcmFuc2xhdGVWYWx1ZShkaXJlY3Rpb24sIG5vZGUpO1xuXG4gICAgaWYgKG9uRXhpdCkge1xuICAgICAgb25FeGl0KG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBoYW5kbGVFeGl0ZWQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgLy8gTm8gbmVlZCBmb3IgdHJhbnNpdGlvbnMgd2hlbiB0aGUgY29tcG9uZW50IGlzIGhpZGRlblxuICAgIG5vZGUuc3R5bGUud2Via2l0VHJhbnNpdGlvbiA9ICcnO1xuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9ICcnO1xuXG4gICAgaWYgKG9uRXhpdGVkKSB7XG4gICAgICBvbkV4aXRlZChub2RlKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgdXBkYXRlUG9zaXRpb24gPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNoaWxkcmVuUmVmLmN1cnJlbnQpIHtcbiAgICAgIHNldFRyYW5zbGF0ZVZhbHVlKGRpcmVjdGlvbiwgY2hpbGRyZW5SZWYuY3VycmVudCk7XG4gICAgfVxuICB9LCBbZGlyZWN0aW9uXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgLy8gU2tpcCBjb25maWd1cmF0aW9uIHdoZXJlIHRoZSBwb3NpdGlvbiBpcyBzY3JlZW4gc2l6ZSBpbnZhcmlhbnQuXG4gICAgaWYgKGluUHJvcCB8fCBkaXJlY3Rpb24gPT09ICdkb3duJyB8fCBkaXJlY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdmFyIGhhbmRsZVJlc2l6ZSA9IGRlYm91bmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChjaGlsZHJlblJlZi5jdXJyZW50KSB7XG4gICAgICAgIHNldFRyYW5zbGF0ZVZhbHVlKGRpcmVjdGlvbiwgY2hpbGRyZW5SZWYuY3VycmVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGhhbmRsZVJlc2l6ZS5jbGVhcigpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgfTtcbiAgfSwgW2RpcmVjdGlvbiwgaW5Qcm9wXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFpblByb3ApIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gdXBkYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZHJhd2VyIHdoZW4gdGhlIGRpcmVjdGlvbiBjaGFuZ2UgYW5kXG4gICAgICAvLyB3aGVuIGl0J3MgaGlkZGVuLlxuICAgICAgdXBkYXRlUG9zaXRpb24oKTtcbiAgICB9XG4gIH0sIFtpblByb3AsIHVwZGF0ZVBvc2l0aW9uXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgbm9kZVJlZjogY2hpbGRyZW5SZWYsXG4gICAgb25FbnRlcjogaGFuZGxlRW50ZXIsXG4gICAgb25FbnRlcmVkOiBoYW5kbGVFbnRlcmVkLFxuICAgIG9uRW50ZXJpbmc6IGhhbmRsZUVudGVyaW5nLFxuICAgIG9uRXhpdDogaGFuZGxlRXhpdCxcbiAgICBvbkV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgIG9uRXhpdGluZzogaGFuZGxlRXhpdGluZyxcbiAgICBhcHBlYXI6IHRydWUsXG4gICAgaW46IGluUHJvcCxcbiAgICB0aW1lb3V0OiB0aW1lb3V0XG4gIH0sIG90aGVyKSwgZnVuY3Rpb24gKHN0YXRlLCBjaGlsZFByb3BzKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIF9leHRlbmRzKHtcbiAgICAgIHJlZjogaGFuZGxlUmVmLFxuICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgdmlzaWJpbGl0eTogc3RhdGUgPT09ICdleGl0ZWQnICYmICFpblByb3AgPyAnaGlkZGVuJyA6IHVuZGVmaW5lZFxuICAgICAgfSwgc3R5bGUsIGNoaWxkcmVuLnByb3BzLnN0eWxlKVxuICAgIH0sIGNoaWxkUHJvcHMpKTtcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNsaWRlLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBlbGVtZW50QWNjZXB0aW5nUmVmLFxuXG4gIC8qKlxuICAgKiBEaXJlY3Rpb24gdGhlIGNoaWxkIG5vZGUgd2lsbCBlbnRlciBmcm9tLlxuICAgKi9cbiAgZGlyZWN0aW9uOiBQcm9wVHlwZXMub25lT2YoWydkb3duJywgJ2xlZnQnLCAncmlnaHQnLCAndXAnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBhbmltYXRpb24uXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqL1xuICB0aW1lb3V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTbGlkZTsiLCIvLyBDb3JyZXNwb25kcyB0byAxMCBmcmFtZXMgYXQgNjAgSHouXG4vLyBBIGZldyBieXRlcyBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL2RlYm91bmNlIGlzIH4zIGtCIGFuZCBkZWJvdW5jZSB+MzAwIEIuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWJvdW5jZShmdW5jKSB7XG4gIHZhciB3YWl0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxNjY7XG4gIHZhciB0aW1lb3V0O1xuXG4gIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtdGhpc1xuICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uIGxhdGVyKCkge1xuICAgICAgZnVuYy5hcHBseSh0aGF0LCBhcmdzKTtcbiAgICB9O1xuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgfVxuXG4gIGRlYm91bmNlZC5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gIH07XG5cbiAgcmV0dXJuIGRlYm91bmNlZDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vTW9kYWwnO1xuaW1wb3J0IEJhY2tkcm9wIGZyb20gJy4uL0JhY2tkcm9wJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBTbGlkZSBmcm9tICcuLi9TbGlkZSc7XG5pbXBvcnQgUGFwZXIgZnJvbSAnLi4vUGFwZXInO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgeyBkdXJhdGlvbiB9IGZyb20gJy4uL3N0eWxlcy90cmFuc2l0aW9ucyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJwZXJtYW5lbnQgb3IgcGVyc2lzdGVudFwiYC4gKi9cbiAgICBkb2NrZWQ6IHtcbiAgICAgIGZsZXg6ICcwIDAgYXV0bydcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50LiAqL1xuICAgIHBhcGVyOiB7XG4gICAgICBvdmVyZmxvd1k6ICdhdXRvJyxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBmbGV4OiAnMSAwIGF1dG8nLFxuICAgICAgekluZGV4OiB0aGVtZS56SW5kZXguZHJhd2VyLFxuICAgICAgV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmc6ICd0b3VjaCcsXG4gICAgICAvLyBBZGQgaU9TIG1vbWVudHVtIHNjcm9sbGluZy5cbiAgICAgIC8vIHRlbXBvcmFyeSBzdHlsZVxuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICB0b3A6IDAsXG4gICAgICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICAgICAgLy8gQXQgc29tZSBwb2ludCwgaXQgd291bGQgYmUgYmV0dGVyIHRvIGtlZXAgaXQgZm9yIGtleWJvYXJkIHVzZXJzLlxuICAgICAgLy8gOmZvY3VzLXJpbmcgQ1NTIHBzZXVkby1jbGFzcyB3aWxsIGhlbHAuXG4gICAgICBvdXRsaW5lOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgYW5jaG9yPVwibGVmdFwiYC4gKi9cbiAgICBwYXBlckFuY2hvckxlZnQ6IHtcbiAgICAgIGxlZnQ6IDAsXG4gICAgICByaWdodDogJ2F1dG8nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgYW5jaG9yPVwicmlnaHRcImAuICovXG4gICAgcGFwZXJBbmNob3JSaWdodDoge1xuICAgICAgbGVmdDogJ2F1dG8nLFxuICAgICAgcmlnaHQ6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50IGlmIGBhbmNob3I9XCJ0b3BcImAuICovXG4gICAgcGFwZXJBbmNob3JUb3A6IHtcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBib3R0b206ICdhdXRvJyxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgICBtYXhIZWlnaHQ6ICcxMDAlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQgaWYgYGFuY2hvcj1cImJvdHRvbVwiYC4gKi9cbiAgICBwYXBlckFuY2hvckJvdHRvbToge1xuICAgICAgdG9wOiAnYXV0bycsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgIG1heEhlaWdodDogJzEwMCUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgYW5jaG9yPVwibGVmdFwiYCBhbmQgYHZhcmlhbnRgIGlzIG5vdCBcInRlbXBvcmFyeVwiLiAqL1xuICAgIHBhcGVyQW5jaG9yRG9ja2VkTGVmdDoge1xuICAgICAgYm9yZGVyUmlnaHQ6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmRpdmlkZXIpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgYW5jaG9yPVwidG9wXCJgIGFuZCBgdmFyaWFudGAgaXMgbm90IFwidGVtcG9yYXJ5XCIuICovXG4gICAgcGFwZXJBbmNob3JEb2NrZWRUb3A6IHtcbiAgICAgIGJvcmRlckJvdHRvbTogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuZGl2aWRlcilcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50IGlmIGBhbmNob3I9XCJyaWdodFwiYCBhbmQgYHZhcmlhbnRgIGlzIG5vdCBcInRlbXBvcmFyeVwiLiAqL1xuICAgIHBhcGVyQW5jaG9yRG9ja2VkUmlnaHQ6IHtcbiAgICAgIGJvcmRlckxlZnQ6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmRpdmlkZXIpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgYW5jaG9yPVwiYm90dG9tXCJgIGFuZCBgdmFyaWFudGAgaXMgbm90IFwidGVtcG9yYXJ5XCIuICovXG4gICAgcGFwZXJBbmNob3JEb2NrZWRCb3R0b206IHtcbiAgICAgIGJvcmRlclRvcDogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuZGl2aWRlcilcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBNb2RhbGAgY29tcG9uZW50LiAqL1xuICAgIG1vZGFsOiB7fVxuICB9O1xufTtcbnZhciBvcHBvc2l0ZURpcmVjdGlvbiA9IHtcbiAgbGVmdDogJ3JpZ2h0JyxcbiAgcmlnaHQ6ICdsZWZ0JyxcbiAgdG9wOiAnZG93bicsXG4gIGJvdHRvbTogJ3VwJ1xufTtcbmV4cG9ydCBmdW5jdGlvbiBpc0hvcml6b250YWwoYW5jaG9yKSB7XG4gIHJldHVybiBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGFuY2hvcikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEFuY2hvcih0aGVtZSwgYW5jaG9yKSB7XG4gIHJldHVybiB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnICYmIGlzSG9yaXpvbnRhbChhbmNob3IpID8gb3Bwb3NpdGVEaXJlY3Rpb25bYW5jaG9yXSA6IGFuY2hvcjtcbn1cbnZhciBkZWZhdWx0VHJhbnNpdGlvbkR1cmF0aW9uID0ge1xuICBlbnRlcjogZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gIGV4aXQ6IGR1cmF0aW9uLmxlYXZpbmdTY3JlZW5cbn07XG4vKipcbiAqIFRoZSBwcm9wcyBvZiB0aGUgW01vZGFsXSgvYXBpL21vZGFsLykgY29tcG9uZW50IGFyZSBhdmFpbGFibGVcbiAqIHdoZW4gYHZhcmlhbnQ9XCJ0ZW1wb3JhcnlcImAgaXMgc2V0LlxuICovXG5cbnZhciBEcmF3ZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBEcmF3ZXIocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGFuY2hvciA9IHByb3BzLmFuY2hvcixcbiAgICAgIGFuY2hvclByb3AgPSBfcHJvcHMkYW5jaG9yID09PSB2b2lkIDAgPyAnbGVmdCcgOiBfcHJvcHMkYW5jaG9yLFxuICAgICAgQmFja2Ryb3BQcm9wcyA9IHByb3BzLkJhY2tkcm9wUHJvcHMsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkZWxldmF0aW9uID0gcHJvcHMuZWxldmF0aW9uLFxuICAgICAgZWxldmF0aW9uID0gX3Byb3BzJGVsZXZhdGlvbiA9PT0gdm9pZCAwID8gMTYgOiBfcHJvcHMkZWxldmF0aW9uLFxuICAgICAgX3Byb3BzJE1vZGFsUHJvcHMgPSBwcm9wcy5Nb2RhbFByb3BzO1xuICBfcHJvcHMkTW9kYWxQcm9wcyA9IF9wcm9wcyRNb2RhbFByb3BzID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRNb2RhbFByb3BzO1xuXG4gIHZhciBCYWNrZHJvcFByb3BzUHJvcCA9IF9wcm9wcyRNb2RhbFByb3BzLkJhY2tkcm9wUHJvcHMsXG4gICAgICBNb2RhbFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcyRNb2RhbFByb3BzLCBbXCJCYWNrZHJvcFByb3BzXCJdKSxcbiAgICAgIG9uQ2xvc2UgPSBwcm9wcy5vbkNsb3NlLFxuICAgICAgX3Byb3BzJG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgb3BlbiA9IF9wcm9wcyRvcGVuID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRvcGVuLFxuICAgICAgX3Byb3BzJFBhcGVyUHJvcHMgPSBwcm9wcy5QYXBlclByb3BzLFxuICAgICAgUGFwZXJQcm9wcyA9IF9wcm9wcyRQYXBlclByb3BzID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRQYXBlclByb3BzLFxuICAgICAgU2xpZGVQcm9wcyA9IHByb3BzLlNsaWRlUHJvcHMsXG4gICAgICBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPSBwcm9wcy5UcmFuc2l0aW9uQ29tcG9uZW50LFxuICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IF9wcm9wcyRUcmFuc2l0aW9uQ29tcCA9PT0gdm9pZCAwID8gU2xpZGUgOiBfcHJvcHMkVHJhbnNpdGlvbkNvbXAsXG4gICAgICBfcHJvcHMkdHJhbnNpdGlvbkR1cmEgPSBwcm9wcy50cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBfcHJvcHMkdHJhbnNpdGlvbkR1cmEgPT09IHZvaWQgMCA/IGRlZmF1bHRUcmFuc2l0aW9uRHVyYXRpb24gOiBfcHJvcHMkdHJhbnNpdGlvbkR1cmEsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICd0ZW1wb3JhcnknIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYW5jaG9yXCIsIFwiQmFja2Ryb3BQcm9wc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImVsZXZhdGlvblwiLCBcIk1vZGFsUHJvcHNcIiwgXCJvbkNsb3NlXCIsIFwib3BlblwiLCBcIlBhcGVyUHJvcHNcIiwgXCJTbGlkZVByb3BzXCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciB0aGVtZSA9IHVzZVRoZW1lKCk7IC8vIExldCdzIGFzc3VtZSB0aGF0IHRoZSBEcmF3ZXIgd2lsbCBhbHdheXMgYmUgcmVuZGVyZWQgb24gdXNlciBzcGFjZS5cbiAgLy8gV2UgdXNlIHRoaXMgc3RhdGUgaXMgb3JkZXIgdG8gc2tpcCB0aGUgYXBwZWFyIHRyYW5zaXRpb24gZHVyaW5nIHRoZVxuICAvLyBpbml0aWFsIG1vdW50IG9mIHRoZSBjb21wb25lbnQuXG5cbiAgdmFyIG1vdW50ZWQgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIG1vdW50ZWQuY3VycmVudCA9IHRydWU7XG4gIH0sIFtdKTtcbiAgdmFyIGFuY2hvciA9IGdldEFuY2hvcih0aGVtZSwgYW5jaG9yUHJvcCk7XG4gIHZhciBkcmF3ZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChQYXBlciwgX2V4dGVuZHMoe1xuICAgIGVsZXZhdGlvbjogdmFyaWFudCA9PT0gJ3RlbXBvcmFyeScgPyBlbGV2YXRpb24gOiAwLFxuICAgIHNxdWFyZTogdHJ1ZVxuICB9LCBQYXBlclByb3BzLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucGFwZXIsIGNsYXNzZXNbXCJwYXBlckFuY2hvclwiLmNvbmNhdChjYXBpdGFsaXplKGFuY2hvcikpXSwgUGFwZXJQcm9wcy5jbGFzc05hbWUsIHZhcmlhbnQgIT09ICd0ZW1wb3JhcnknICYmIGNsYXNzZXNbXCJwYXBlckFuY2hvckRvY2tlZFwiLmNvbmNhdChjYXBpdGFsaXplKGFuY2hvcikpXSlcbiAgfSksIGNoaWxkcmVuKTtcblxuICBpZiAodmFyaWFudCA9PT0gJ3Blcm1hbmVudCcpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlcy5kb2NrZWQsIGNsYXNzTmFtZSksXG4gICAgICByZWY6IHJlZlxuICAgIH0sIG90aGVyKSwgZHJhd2VyKTtcbiAgfVxuXG4gIHZhciBzbGlkaW5nRHJhd2VyID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGluOiBvcGVuLFxuICAgIGRpcmVjdGlvbjogb3Bwb3NpdGVEaXJlY3Rpb25bYW5jaG9yXSxcbiAgICB0aW1lb3V0OiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgYXBwZWFyOiBtb3VudGVkLmN1cnJlbnRcbiAgfSwgU2xpZGVQcm9wcyksIGRyYXdlcik7XG5cbiAgaWYgKHZhcmlhbnQgPT09ICdwZXJzaXN0ZW50Jykge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzLmRvY2tlZCwgY2xhc3NOYW1lKSxcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgb3RoZXIpLCBzbGlkaW5nRHJhd2VyKTtcbiAgfSAvLyB2YXJpYW50ID09PSB0ZW1wb3JhcnlcblxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChNb2RhbCwgX2V4dGVuZHMoe1xuICAgIEJhY2tkcm9wUHJvcHM6IF9leHRlbmRzKHt9LCBCYWNrZHJvcFByb3BzLCBCYWNrZHJvcFByb3BzUHJvcCwge1xuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiB0cmFuc2l0aW9uRHVyYXRpb25cbiAgICB9KSxcbiAgICBCYWNrZHJvcENvbXBvbmVudDogQmFja2Ryb3AsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlcy5tb2RhbCwgY2xhc3NOYW1lKSxcbiAgICBvcGVuOiBvcGVuLFxuICAgIG9uQ2xvc2U6IG9uQ2xvc2UsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIsIE1vZGFsUHJvcHMpLCBzbGlkaW5nRHJhd2VyKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRHJhd2VyLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFNpZGUgZnJvbSB3aGljaCB0aGUgZHJhd2VyIHdpbGwgYXBwZWFyLlxuICAgKi9cbiAgYW5jaG9yOiBQcm9wVHlwZXMub25lT2YoWydib3R0b20nLCAnbGVmdCcsICdyaWdodCcsICd0b3AnXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIEJhY2tkcm9wUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50cyBvZiB0aGUgZHJhd2VyLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGVsZXZhdGlvbiBvZiB0aGUgZHJhd2VyLlxuICAgKi9cbiAgZWxldmF0aW9uOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYE1vZGFsYF0oL2FwaS9tb2RhbC8pIGVsZW1lbnQuXG4gICAqL1xuICBNb2RhbFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgZHJhd2VyIGlzIG9wZW4uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BQYXBlcmBdKC9hcGkvcGFwZXIvKSBlbGVtZW50LlxuICAgKi9cbiAgUGFwZXJQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BTbGlkZWBdKC9hcGkvc2xpZGUvKSBlbGVtZW50LlxuICAgKi9cbiAgU2xpZGVQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKSxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsncGVybWFuZW50JywgJ3BlcnNpc3RlbnQnLCAndGVtcG9yYXJ5J10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aURyYXdlcicsXG4gIGZsaXA6IGZhbHNlXG59KShEcmF3ZXIpOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBleGFjdFByb3AgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xudmFyIHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbi8qKlxuICogTm9Tc3IgcHVycG9zZWx5IHJlbW92ZXMgY29tcG9uZW50cyBmcm9tIHRoZSBzdWJqZWN0IG9mIFNlcnZlciBTaWRlIFJlbmRlcmluZyAoU1NSKS5cbiAqXG4gKiBUaGlzIGNvbXBvbmVudCBjYW4gYmUgdXNlZnVsIGluIGEgdmFyaWV0eSBvZiBzaXR1YXRpb25zOlxuICogLSBFc2NhcGUgaGF0Y2ggZm9yIGJyb2tlbiBkZXBlbmRlbmNpZXMgbm90IHN1cHBvcnRpbmcgU1NSLlxuICogLSBJbXByb3ZlIHRoZSB0aW1lLXRvLWZpcnN0IHBhaW50IG9uIHRoZSBjbGllbnQgYnkgb25seSByZW5kZXJpbmcgYWJvdmUgdGhlIGZvbGQuXG4gKiAtIFJlZHVjZSB0aGUgcmVuZGVyaW5nIHRpbWUgb24gdGhlIHNlcnZlci5cbiAqIC0gVW5kZXIgdG9vIGhlYXZ5IHNlcnZlciBsb2FkLCB5b3UgY2FuIHR1cm4gb24gc2VydmljZSBkZWdyYWRhdGlvbi5cbiAqL1xuXG5mdW5jdGlvbiBOb1Nzcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRkZWZlciA9IHByb3BzLmRlZmVyLFxuICAgICAgZGVmZXIgPSBfcHJvcHMkZGVmZXIgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRlZmVyLFxuICAgICAgX3Byb3BzJGZhbGxiYWNrID0gcHJvcHMuZmFsbGJhY2ssXG4gICAgICBmYWxsYmFjayA9IF9wcm9wcyRmYWxsYmFjayA9PT0gdm9pZCAwID8gbnVsbCA6IF9wcm9wcyRmYWxsYmFjaztcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgbW91bnRlZFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0TW91bnRlZFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHVzZUVuaGFuY2VkRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWRlZmVyKSB7XG4gICAgICBzZXRNb3VudGVkU3RhdGUodHJ1ZSk7XG4gICAgfVxuICB9LCBbZGVmZXJdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZGVmZXIpIHtcbiAgICAgIHNldE1vdW50ZWRTdGF0ZSh0cnVlKTtcbiAgICB9XG4gIH0sIFtkZWZlcl0pOyAvLyBXZSBuZWVkIHRoZSBGcmFnbWVudCBoZXJlIHRvIGZvcmNlIHJlYWN0LWRvY2dlbiB0byByZWNvZ25pc2UgTm9Tc3IgYXMgYSBjb21wb25lbnQuXG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBtb3VudGVkU3RhdGUgPyBjaGlsZHJlbiA6IGZhbGxiYWNrKTtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTm9Tc3IucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogWW91IGNhbiB3cmFwIGEgbm9kZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgbm90IG9ubHkgcHJldmVudCBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gICAqIEl0IHdpbGwgYWxzbyBkZWZlciB0aGUgcmVuZGVyaW5nIG9mIHRoZSBjaGlsZHJlbiBpbnRvIGEgZGlmZmVyZW50IHNjcmVlbiBmcmFtZS5cbiAgICovXG4gIGRlZmVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGZhbGxiYWNrIGNvbnRlbnQgdG8gZGlzcGxheS5cbiAgICovXG4gIGZhbGxiYWNrOiBQcm9wVHlwZXMubm9kZVxufSA6IHZvaWQgMDtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIE5vU3NyWydwcm9wVHlwZXMnICsgJyddID0gZXhhY3RQcm9wKE5vU3NyLnByb3BUeXBlcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5vU3NyOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB7IGlzSG9yaXpvbnRhbCB9IGZyb20gJy4uL0RyYXdlci9EcmF3ZXInO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIHpJbmRleDogdGhlbWUuekluZGV4LmRyYXdlciAtIDFcbiAgICB9LFxuICAgIGFuY2hvckxlZnQ6IHtcbiAgICAgIHJpZ2h0OiAnYXV0bydcbiAgICB9LFxuICAgIGFuY2hvclJpZ2h0OiB7XG4gICAgICBsZWZ0OiAnYXV0bycsXG4gICAgICByaWdodDogMFxuICAgIH0sXG4gICAgYW5jaG9yVG9wOiB7XG4gICAgICBib3R0b206ICdhdXRvJyxcbiAgICAgIHJpZ2h0OiAwXG4gICAgfSxcbiAgICBhbmNob3JCb3R0b206IHtcbiAgICAgIHRvcDogJ2F1dG8nLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgcmlnaHQ6IDBcbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbnZhciBTd2lwZUFyZWEgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTd2lwZUFyZWEocHJvcHMsIHJlZikge1xuICB2YXIgYW5jaG9yID0gcHJvcHMuYW5jaG9yLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICB3aWR0aCA9IHByb3BzLndpZHRoLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFuY2hvclwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJ3aWR0aFwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzW1wiYW5jaG9yXCIuY29uY2F0KGNhcGl0YWxpemUoYW5jaG9yKSldLCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmLFxuICAgIHN0eWxlOiBfZGVmaW5lUHJvcGVydHkoe30sIGlzSG9yaXpvbnRhbChhbmNob3IpID8gJ3dpZHRoJyA6ICdoZWlnaHQnLCB3aWR0aClcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3dpcGVBcmVhLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFNpZGUgb24gd2hpY2ggdG8gYXR0YWNoIHRoZSBkaXNjb3ZlcnkgYXJlYS5cbiAgICovXG4gIGFuY2hvcjogUHJvcFR5cGVzLm9uZU9mKFsnbGVmdCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJ10pLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgd2lkdGggb2YgdGhlIGxlZnQgbW9zdCAob3IgcmlnaHQgbW9zdCkgYXJlYSBpbiBwaXhlbHMgd2hlcmUgdGhlXG4gICAqIGRyYXdlciBjYW4gYmUgc3dpcGVkIG9wZW4gZnJvbS5cbiAgICovXG4gIHdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnUHJpdmF0ZVN3aXBlQXJlYSdcbn0pKFN3aXBlQXJlYSk7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZiB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgeyBnZXRUaGVtZVByb3BzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N0eWxlcyc7XG5pbXBvcnQgRHJhd2VyLCB7IGdldEFuY2hvciwgaXNIb3Jpem9udGFsIH0gZnJvbSAnLi4vRHJhd2VyL0RyYXdlcic7XG5pbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuLi91dGlscy9vd25lckRvY3VtZW50JztcbmltcG9ydCB1c2VFdmVudENhbGxiYWNrIGZyb20gJy4uL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2snO1xuaW1wb3J0IHsgZHVyYXRpb24gfSBmcm9tICcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5pbXBvcnQgeyBnZXRUcmFuc2l0aW9uUHJvcHMgfSBmcm9tICcuLi90cmFuc2l0aW9ucy91dGlscyc7XG5pbXBvcnQgTm9Tc3IgZnJvbSAnLi4vTm9Tc3InO1xuaW1wb3J0IFN3aXBlQXJlYSBmcm9tICcuL1N3aXBlQXJlYSc7IC8vIFRoaXMgdmFsdWUgaXMgY2xvc2VkIHRvIHdoYXQgYnJvd3NlcnMgYXJlIHVzaW5nIGludGVybmFsbHkgdG9cbi8vIHRyaWdnZXIgYSBuYXRpdmUgc2Nyb2xsLlxuXG52YXIgVU5DRVJUQUlOVFlfVEhSRVNIT0xEID0gMzsgLy8gcHhcbi8vIFdlIGNhbiBvbmx5IGhhdmUgb25lIG5vZGUgYXQgdGhlIHRpbWUgY2xhaW1pbmcgb3duZXJzaGlwIGZvciBoYW5kbGluZyB0aGUgc3dpcGUuXG4vLyBPdGhlcndpc2UsIHRoZSBVWCB3b3VsZCBiZSBjb25mdXNpbmcuXG4vLyBUaGF0J3Mgd2h5IHdlIHVzZSBhIHNpbmdsZXRvbiBoZXJlLlxuXG52YXIgbm9kZVRoYXRDbGFpbWVkVGhlU3dpcGUgPSBudWxsOyAvLyBFeHBvcnRlZCBmb3IgdGVzdCBwdXJwb3Nlcy5cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0KCkge1xuICBub2RlVGhhdENsYWltZWRUaGVTd2lwZSA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUN1cnJlbnRYKGFuY2hvciwgdG91Y2hlcykge1xuICByZXR1cm4gYW5jaG9yID09PSAncmlnaHQnID8gZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aCAtIHRvdWNoZXNbMF0ucGFnZVggOiB0b3VjaGVzWzBdLnBhZ2VYO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVDdXJyZW50WShhbmNob3IsIHRvdWNoZXMpIHtcbiAgcmV0dXJuIGFuY2hvciA9PT0gJ2JvdHRvbScgPyB3aW5kb3cuaW5uZXJIZWlnaHQgLSB0b3VjaGVzWzBdLmNsaWVudFkgOiB0b3VjaGVzWzBdLmNsaWVudFk7XG59XG5cbmZ1bmN0aW9uIGdldE1heFRyYW5zbGF0ZShob3Jpem9udGFsU3dpcGUsIHBhcGVySW5zdGFuY2UpIHtcbiAgcmV0dXJuIGhvcml6b250YWxTd2lwZSA/IHBhcGVySW5zdGFuY2UuY2xpZW50V2lkdGggOiBwYXBlckluc3RhbmNlLmNsaWVudEhlaWdodDtcbn1cblxuZnVuY3Rpb24gZ2V0VHJhbnNsYXRlKGN1cnJlbnRUcmFuc2xhdGUsIHN0YXJ0TG9jYXRpb24sIG9wZW4sIG1heFRyYW5zbGF0ZSkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgob3BlbiA/IHN0YXJ0TG9jYXRpb24gLSBjdXJyZW50VHJhbnNsYXRlIDogbWF4VHJhbnNsYXRlICsgc3RhcnRMb2NhdGlvbiAtIGN1cnJlbnRUcmFuc2xhdGUsIDApLCBtYXhUcmFuc2xhdGUpO1xufVxuXG5mdW5jdGlvbiBnZXREb21UcmVlU2hhcGVzKGVsZW1lbnQsIHJvb3ROb2RlKSB7XG4gIC8vIEFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vb2xpdmllcnRhc3NpbmFyaS9yZWFjdC1zd2lwZWFibGUtdmlld3MvYmxvYi83NjY2ZGUxZGJhMjUzYjg5NjkxMWFkZjI3OTBjZTUxNDY3NjcwODU2L3BhY2thZ2VzL3JlYWN0LXN3aXBlYWJsZS12aWV3cy9zcmMvU3dpcGVhYmxlVmlld3MuanMjTDEyOVxuICB2YXIgZG9tVHJlZVNoYXBlcyA9IFtdO1xuXG4gIHdoaWxlIChlbGVtZW50ICYmIGVsZW1lbnQgIT09IHJvb3ROb2RlKSB7XG4gICAgdmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG5cbiAgICBpZiAoIC8vIElnbm9yZSB0aGUgc2Nyb2xsIGNoaWxkcmVuIGlmIHRoZSBlbGVtZW50IGlzIGFic29sdXRlIHBvc2l0aW9uZWQuXG4gICAgc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgncG9zaXRpb24nKSA9PT0gJ2Fic29sdXRlJyB8fCAvLyBJZ25vcmUgdGhlIHNjcm9sbCBjaGlsZHJlbiBpZiB0aGUgZWxlbWVudCBoYXMgYW4gb3ZlcmZsb3dYIGhpZGRlblxuICAgIHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ292ZXJmbG93LXgnKSA9PT0gJ2hpZGRlbicpIHtcbiAgICAgIGRvbVRyZWVTaGFwZXMgPSBbXTtcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnQuY2xpZW50V2lkdGggPiAwICYmIGVsZW1lbnQuc2Nyb2xsV2lkdGggPiBlbGVtZW50LmNsaWVudFdpZHRoIHx8IGVsZW1lbnQuY2xpZW50SGVpZ2h0ID4gMCAmJiBlbGVtZW50LnNjcm9sbEhlaWdodCA+IGVsZW1lbnQuY2xpZW50SGVpZ2h0KSB7XG4gICAgICAvLyBJZ25vcmUgdGhlIG5vZGVzIHRoYXQgaGF2ZSBubyB3aWR0aC5cbiAgICAgIC8vIEtlZXAgZWxlbWVudHMgd2l0aCBhIHNjcm9sbFxuICAgICAgZG9tVHJlZVNoYXBlcy5wdXNoKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gZG9tVHJlZVNoYXBlcztcbn1cblxuZnVuY3Rpb24gZmluZE5hdGl2ZUhhbmRsZXIoX3JlZikge1xuICB2YXIgZG9tVHJlZVNoYXBlcyA9IF9yZWYuZG9tVHJlZVNoYXBlcyxcbiAgICAgIHN0YXJ0ID0gX3JlZi5zdGFydCxcbiAgICAgIGN1cnJlbnQgPSBfcmVmLmN1cnJlbnQsXG4gICAgICBhbmNob3IgPSBfcmVmLmFuY2hvcjtcbiAgLy8gQWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9vbGl2aWVydGFzc2luYXJpL3JlYWN0LXN3aXBlYWJsZS12aWV3cy9ibG9iLzc2NjZkZTFkYmEyNTNiODk2OTExYWRmMjc5MGNlNTE0Njc2NzA4NTYvcGFja2FnZXMvcmVhY3Qtc3dpcGVhYmxlLXZpZXdzL3NyYy9Td2lwZWFibGVWaWV3cy5qcyNMMTc1XG4gIHZhciBheGlzUHJvcGVydGllcyA9IHtcbiAgICBzY3JvbGxQb3NpdGlvbjoge1xuICAgICAgeDogJ3Njcm9sbExlZnQnLFxuICAgICAgeTogJ3Njcm9sbFRvcCdcbiAgICB9LFxuICAgIHNjcm9sbExlbmd0aDoge1xuICAgICAgeDogJ3Njcm9sbFdpZHRoJyxcbiAgICAgIHk6ICdzY3JvbGxIZWlnaHQnXG4gICAgfSxcbiAgICBjbGllbnRMZW5ndGg6IHtcbiAgICAgIHg6ICdjbGllbnRXaWR0aCcsXG4gICAgICB5OiAnY2xpZW50SGVpZ2h0J1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGRvbVRyZWVTaGFwZXMuc29tZShmdW5jdGlvbiAoc2hhcGUpIHtcbiAgICAvLyBEZXRlcm1pbmUgaWYgd2UgYXJlIGdvaW5nIGJhY2t3YXJkIG9yIGZvcndhcmQuXG4gICAgdmFyIGdvaW5nRm9yd2FyZCA9IGN1cnJlbnQgPj0gc3RhcnQ7XG5cbiAgICBpZiAoYW5jaG9yID09PSAndG9wJyB8fCBhbmNob3IgPT09ICdsZWZ0Jykge1xuICAgICAgZ29pbmdGb3J3YXJkID0gIWdvaW5nRm9yd2FyZDtcbiAgICB9XG5cbiAgICB2YXIgYXhpcyA9IGFuY2hvciA9PT0gJ2xlZnQnIHx8IGFuY2hvciA9PT0gJ3JpZ2h0JyA/ICd4JyA6ICd5JztcbiAgICB2YXIgc2Nyb2xsUG9zaXRpb24gPSBzaGFwZVtheGlzUHJvcGVydGllcy5zY3JvbGxQb3NpdGlvbltheGlzXV07XG4gICAgdmFyIGFyZU5vdEF0U3RhcnQgPSBzY3JvbGxQb3NpdGlvbiA+IDA7XG4gICAgdmFyIGFyZU5vdEF0RW5kID0gc2Nyb2xsUG9zaXRpb24gKyBzaGFwZVtheGlzUHJvcGVydGllcy5jbGllbnRMZW5ndGhbYXhpc11dIDwgc2hhcGVbYXhpc1Byb3BlcnRpZXMuc2Nyb2xsTGVuZ3RoW2F4aXNdXTtcblxuICAgIGlmIChnb2luZ0ZvcndhcmQgJiYgYXJlTm90QXRFbmQgfHwgIWdvaW5nRm9yd2FyZCAmJiBhcmVOb3RBdFN0YXJ0KSB7XG4gICAgICByZXR1cm4gc2hhcGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0pO1xufVxuXG52YXIgaU9TID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgL2lQYWR8aVBob25lfGlQb2QvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG52YXIgdHJhbnNpdGlvbkR1cmF0aW9uRGVmYXVsdCA9IHtcbiAgZW50ZXI6IGR1cmF0aW9uLmVudGVyaW5nU2NyZWVuLFxuICBleGl0OiBkdXJhdGlvbi5sZWF2aW5nU2NyZWVuXG59O1xudmFyIHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyBSZWFjdC51c2VMYXlvdXRFZmZlY3QgOiBSZWFjdC51c2VFZmZlY3Q7XG52YXIgU3dpcGVhYmxlRHJhd2VyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU3dpcGVhYmxlRHJhd2VyKGluUHJvcHMsIHJlZikge1xuICB2YXIgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICB2YXIgcHJvcHMgPSBnZXRUaGVtZVByb3BzKHtcbiAgICBuYW1lOiAnTXVpU3dpcGVhYmxlRHJhd2VyJyxcbiAgICBwcm9wczogX2V4dGVuZHMoe30sIGluUHJvcHMpLFxuICAgIHRoZW1lOiB0aGVtZVxuICB9KTtcbiAgdmFyIF9wcm9wcyRhbmNob3IgPSBwcm9wcy5hbmNob3IsXG4gICAgICBhbmNob3IgPSBfcHJvcHMkYW5jaG9yID09PSB2b2lkIDAgPyAnbGVmdCcgOiBfcHJvcHMkYW5jaG9yLFxuICAgICAgX3Byb3BzJGRpc2FibGVCYWNrZHJvID0gcHJvcHMuZGlzYWJsZUJhY2tkcm9wVHJhbnNpdGlvbixcbiAgICAgIGRpc2FibGVCYWNrZHJvcFRyYW5zaXRpb24gPSBfcHJvcHMkZGlzYWJsZUJhY2tkcm8gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVCYWNrZHJvLFxuICAgICAgX3Byb3BzJGRpc2FibGVEaXNjb3ZlID0gcHJvcHMuZGlzYWJsZURpc2NvdmVyeSxcbiAgICAgIGRpc2FibGVEaXNjb3ZlcnkgPSBfcHJvcHMkZGlzYWJsZURpc2NvdmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVEaXNjb3ZlLFxuICAgICAgX3Byb3BzJGRpc2FibGVTd2lwZVRvID0gcHJvcHMuZGlzYWJsZVN3aXBlVG9PcGVuLFxuICAgICAgZGlzYWJsZVN3aXBlVG9PcGVuID0gX3Byb3BzJGRpc2FibGVTd2lwZVRvID09PSB2b2lkIDAgPyBpT1MgOiBfcHJvcHMkZGlzYWJsZVN3aXBlVG8sXG4gICAgICBoaWRlQmFja2Ryb3AgPSBwcm9wcy5oaWRlQmFja2Ryb3AsXG4gICAgICBfcHJvcHMkaHlzdGVyZXNpcyA9IHByb3BzLmh5c3RlcmVzaXMsXG4gICAgICBoeXN0ZXJlc2lzID0gX3Byb3BzJGh5c3RlcmVzaXMgPT09IHZvaWQgMCA/IDAuNTIgOiBfcHJvcHMkaHlzdGVyZXNpcyxcbiAgICAgIF9wcm9wcyRtaW5GbGluZ1ZlbG9jaSA9IHByb3BzLm1pbkZsaW5nVmVsb2NpdHksXG4gICAgICBtaW5GbGluZ1ZlbG9jaXR5ID0gX3Byb3BzJG1pbkZsaW5nVmVsb2NpID09PSB2b2lkIDAgPyA0NTAgOiBfcHJvcHMkbWluRmxpbmdWZWxvY2ksXG4gICAgICBfcHJvcHMkTW9kYWxQcm9wcyA9IHByb3BzLk1vZGFsUHJvcHM7XG4gIF9wcm9wcyRNb2RhbFByb3BzID0gX3Byb3BzJE1vZGFsUHJvcHMgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJE1vZGFsUHJvcHM7XG5cbiAgdmFyIEJhY2tkcm9wUHJvcHMgPSBfcHJvcHMkTW9kYWxQcm9wcy5CYWNrZHJvcFByb3BzLFxuICAgICAgTW9kYWxQcm9wc1Byb3AgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzJE1vZGFsUHJvcHMsIFtcIkJhY2tkcm9wUHJvcHNcIl0pLFxuICAgICAgb25DbG9zZSA9IHByb3BzLm9uQ2xvc2UsXG4gICAgICBvbk9wZW4gPSBwcm9wcy5vbk9wZW4sXG4gICAgICBvcGVuID0gcHJvcHMub3BlbixcbiAgICAgIF9wcm9wcyRQYXBlclByb3BzID0gcHJvcHMuUGFwZXJQcm9wcyxcbiAgICAgIFBhcGVyUHJvcHMgPSBfcHJvcHMkUGFwZXJQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkUGFwZXJQcm9wcyxcbiAgICAgIFN3aXBlQXJlYVByb3BzID0gcHJvcHMuU3dpcGVBcmVhUHJvcHMsXG4gICAgICBfcHJvcHMkc3dpcGVBcmVhV2lkdGggPSBwcm9wcy5zd2lwZUFyZWFXaWR0aCxcbiAgICAgIHN3aXBlQXJlYVdpZHRoID0gX3Byb3BzJHN3aXBlQXJlYVdpZHRoID09PSB2b2lkIDAgPyAyMCA6IF9wcm9wcyRzd2lwZUFyZWFXaWR0aCxcbiAgICAgIF9wcm9wcyR0cmFuc2l0aW9uRHVyYSA9IHByb3BzLnRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IF9wcm9wcyR0cmFuc2l0aW9uRHVyYSA9PT0gdm9pZCAwID8gdHJhbnNpdGlvbkR1cmF0aW9uRGVmYXVsdCA6IF9wcm9wcyR0cmFuc2l0aW9uRHVyYSxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ3RlbXBvcmFyeScgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhbmNob3JcIiwgXCJkaXNhYmxlQmFja2Ryb3BUcmFuc2l0aW9uXCIsIFwiZGlzYWJsZURpc2NvdmVyeVwiLCBcImRpc2FibGVTd2lwZVRvT3BlblwiLCBcImhpZGVCYWNrZHJvcFwiLCBcImh5c3RlcmVzaXNcIiwgXCJtaW5GbGluZ1ZlbG9jaXR5XCIsIFwiTW9kYWxQcm9wc1wiLCBcIm9uQ2xvc2VcIiwgXCJvbk9wZW5cIiwgXCJvcGVuXCIsIFwiUGFwZXJQcm9wc1wiLCBcIlN3aXBlQXJlYVByb3BzXCIsIFwic3dpcGVBcmVhV2lkdGhcIiwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgbWF5YmVTd2lwaW5nID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0TWF5YmVTd2lwaW5nID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciBzd2lwZUluc3RhbmNlID0gUmVhY3QudXNlUmVmKHtcbiAgICBpc1N3aXBpbmc6IG51bGxcbiAgfSk7XG4gIHZhciBzd2lwZUFyZWFSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIGJhY2tkcm9wUmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIHZhciBwYXBlclJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICB2YXIgdG91Y2hEZXRlY3RlZCA9IFJlYWN0LnVzZVJlZihmYWxzZSk7IC8vIFJlZiBmb3IgdHJhbnNpdGlvbiBkdXJhdGlvbiBiYXNlZCBvbiAvIHRvIG1hdGNoIHN3aXBlIHNwZWVkXG5cbiAgdmFyIGNhbGN1bGF0ZWREdXJhdGlvblJlZiA9IFJlYWN0LnVzZVJlZigpOyAvLyBVc2UgYSByZWYgc28gdGhlIG9wZW4gdmFsdWUgdXNlZCBpcyBhbHdheXMgdXAgdG8gZGF0ZSBpbnNpZGUgdXNlQ2FsbGJhY2suXG5cbiAgdXNlRW5oYW5jZWRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGNhbGN1bGF0ZWREdXJhdGlvblJlZi5jdXJyZW50ID0gbnVsbDtcbiAgfSwgW29wZW5dKTtcbiAgdmFyIHNldFBvc2l0aW9uID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHRyYW5zbGF0ZSkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgX29wdGlvbnMkbW9kZSA9IG9wdGlvbnMubW9kZSxcbiAgICAgICAgbW9kZSA9IF9vcHRpb25zJG1vZGUgPT09IHZvaWQgMCA/IG51bGwgOiBfb3B0aW9ucyRtb2RlLFxuICAgICAgICBfb3B0aW9ucyRjaGFuZ2VUcmFuc2kgPSBvcHRpb25zLmNoYW5nZVRyYW5zaXRpb24sXG4gICAgICAgIGNoYW5nZVRyYW5zaXRpb24gPSBfb3B0aW9ucyRjaGFuZ2VUcmFuc2kgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRjaGFuZ2VUcmFuc2k7XG4gICAgdmFyIGFuY2hvclJ0bCA9IGdldEFuY2hvcih0aGVtZSwgYW5jaG9yKTtcbiAgICB2YXIgcnRsVHJhbnNsYXRlTXVsdGlwbGllciA9IFsncmlnaHQnLCAnYm90dG9tJ10uaW5kZXhPZihhbmNob3JSdGwpICE9PSAtMSA/IDEgOiAtMTtcbiAgICB2YXIgaG9yaXpvbnRhbFN3aXBlID0gaXNIb3Jpem9udGFsKGFuY2hvcik7XG4gICAgdmFyIHRyYW5zZm9ybSA9IGhvcml6b250YWxTd2lwZSA/IFwidHJhbnNsYXRlKFwiLmNvbmNhdChydGxUcmFuc2xhdGVNdWx0aXBsaWVyICogdHJhbnNsYXRlLCBcInB4LCAwKVwiKSA6IFwidHJhbnNsYXRlKDAsIFwiLmNvbmNhdChydGxUcmFuc2xhdGVNdWx0aXBsaWVyICogdHJhbnNsYXRlLCBcInB4KVwiKTtcbiAgICB2YXIgZHJhd2VyU3R5bGUgPSBwYXBlclJlZi5jdXJyZW50LnN0eWxlO1xuICAgIGRyYXdlclN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICBkcmF3ZXJTdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgdmFyIHRyYW5zaXRpb24gPSAnJztcblxuICAgIGlmIChtb2RlKSB7XG4gICAgICB0cmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdhbGwnLCBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgICB0aW1lb3V0OiB0cmFuc2l0aW9uRHVyYXRpb25cbiAgICAgIH0sIHtcbiAgICAgICAgbW9kZTogbW9kZVxuICAgICAgfSkpO1xuICAgIH1cblxuICAgIGlmIChjaGFuZ2VUcmFuc2l0aW9uKSB7XG4gICAgICBkcmF3ZXJTdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdHJhbnNpdGlvbjtcbiAgICAgIGRyYXdlclN0eWxlLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uO1xuICAgIH1cblxuICAgIGlmICghZGlzYWJsZUJhY2tkcm9wVHJhbnNpdGlvbiAmJiAhaGlkZUJhY2tkcm9wKSB7XG4gICAgICB2YXIgYmFja2Ryb3BTdHlsZSA9IGJhY2tkcm9wUmVmLmN1cnJlbnQuc3R5bGU7XG4gICAgICBiYWNrZHJvcFN0eWxlLm9wYWNpdHkgPSAxIC0gdHJhbnNsYXRlIC8gZ2V0TWF4VHJhbnNsYXRlKGhvcml6b250YWxTd2lwZSwgcGFwZXJSZWYuY3VycmVudCk7XG5cbiAgICAgIGlmIChjaGFuZ2VUcmFuc2l0aW9uKSB7XG4gICAgICAgIGJhY2tkcm9wU3R5bGUud2Via2l0VHJhbnNpdGlvbiA9IHRyYW5zaXRpb247XG4gICAgICAgIGJhY2tkcm9wU3R5bGUudHJhbnNpdGlvbiA9IHRyYW5zaXRpb247XG4gICAgICB9XG4gICAgfVxuICB9LCBbYW5jaG9yLCBkaXNhYmxlQmFja2Ryb3BUcmFuc2l0aW9uLCBoaWRlQmFja2Ryb3AsIHRoZW1lLCB0cmFuc2l0aW9uRHVyYXRpb25dKTtcbiAgdmFyIGhhbmRsZUJvZHlUb3VjaEVuZCA9IHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKCF0b3VjaERldGVjdGVkLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBub2RlVGhhdENsYWltZWRUaGVTd2lwZSA9IG51bGw7XG4gICAgdG91Y2hEZXRlY3RlZC5jdXJyZW50ID0gZmFsc2U7XG4gICAgc2V0TWF5YmVTd2lwaW5nKGZhbHNlKTsgLy8gVGhlIHN3aXBlIHdhc24ndCBzdGFydGVkLlxuXG4gICAgaWYgKCFzd2lwZUluc3RhbmNlLmN1cnJlbnQuaXNTd2lwaW5nKSB7XG4gICAgICBzd2lwZUluc3RhbmNlLmN1cnJlbnQuaXNTd2lwaW5nID0gbnVsbDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzd2lwZUluc3RhbmNlLmN1cnJlbnQuaXNTd2lwaW5nID0gbnVsbDtcbiAgICB2YXIgYW5jaG9yUnRsID0gZ2V0QW5jaG9yKHRoZW1lLCBhbmNob3IpO1xuICAgIHZhciBob3Jpem9udGFsID0gaXNIb3Jpem9udGFsKGFuY2hvcik7XG4gICAgdmFyIGN1cnJlbnQ7XG5cbiAgICBpZiAoaG9yaXpvbnRhbCkge1xuICAgICAgY3VycmVudCA9IGNhbGN1bGF0ZUN1cnJlbnRYKGFuY2hvclJ0bCwgZXZlbnQuY2hhbmdlZFRvdWNoZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50ID0gY2FsY3VsYXRlQ3VycmVudFkoYW5jaG9yUnRsLCBldmVudC5jaGFuZ2VkVG91Y2hlcyk7XG4gICAgfVxuXG4gICAgdmFyIHN0YXJ0TG9jYXRpb24gPSBob3Jpem9udGFsID8gc3dpcGVJbnN0YW5jZS5jdXJyZW50LnN0YXJ0WCA6IHN3aXBlSW5zdGFuY2UuY3VycmVudC5zdGFydFk7XG4gICAgdmFyIG1heFRyYW5zbGF0ZSA9IGdldE1heFRyYW5zbGF0ZShob3Jpem9udGFsLCBwYXBlclJlZi5jdXJyZW50KTtcbiAgICB2YXIgY3VycmVudFRyYW5zbGF0ZSA9IGdldFRyYW5zbGF0ZShjdXJyZW50LCBzdGFydExvY2F0aW9uLCBvcGVuLCBtYXhUcmFuc2xhdGUpO1xuICAgIHZhciB0cmFuc2xhdGVSYXRpbyA9IGN1cnJlbnRUcmFuc2xhdGUgLyBtYXhUcmFuc2xhdGU7XG5cbiAgICBpZiAoTWF0aC5hYnMoc3dpcGVJbnN0YW5jZS5jdXJyZW50LnZlbG9jaXR5KSA+IG1pbkZsaW5nVmVsb2NpdHkpIHtcbiAgICAgIC8vIENhbGN1bGF0ZSB0cmFuc2l0aW9uIGR1cmF0aW9uIHRvIG1hdGNoIHN3aXBlIHNwZWVkXG4gICAgICBjYWxjdWxhdGVkRHVyYXRpb25SZWYuY3VycmVudCA9IE1hdGguYWJzKChtYXhUcmFuc2xhdGUgLSBjdXJyZW50VHJhbnNsYXRlKSAvIHN3aXBlSW5zdGFuY2UuY3VycmVudC52ZWxvY2l0eSkgKiAxMDAwO1xuICAgIH1cblxuICAgIGlmIChvcGVuKSB7XG4gICAgICBpZiAoc3dpcGVJbnN0YW5jZS5jdXJyZW50LnZlbG9jaXR5ID4gbWluRmxpbmdWZWxvY2l0eSB8fCB0cmFuc2xhdGVSYXRpbyA+IGh5c3RlcmVzaXMpIHtcbiAgICAgICAgb25DbG9zZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmVzZXQgdGhlIHBvc2l0aW9uLCB0aGUgc3dpcGUgd2FzIGFib3J0ZWQuXG4gICAgICAgIHNldFBvc2l0aW9uKDAsIHtcbiAgICAgICAgICBtb2RlOiAnZXhpdCdcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVJbnN0YW5jZS5jdXJyZW50LnZlbG9jaXR5IDwgLW1pbkZsaW5nVmVsb2NpdHkgfHwgMSAtIHRyYW5zbGF0ZVJhdGlvID4gaHlzdGVyZXNpcykge1xuICAgICAgb25PcGVuKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlc2V0IHRoZSBwb3NpdGlvbiwgdGhlIHN3aXBlIHdhcyBhYm9ydGVkLlxuICAgICAgc2V0UG9zaXRpb24oZ2V0TWF4VHJhbnNsYXRlKGhvcml6b250YWwsIHBhcGVyUmVmLmN1cnJlbnQpLCB7XG4gICAgICAgIG1vZGU6ICdlbnRlcidcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHZhciBoYW5kbGVCb2R5VG91Y2hNb3ZlID0gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyB0aGUgcmVmIG1heSBiZSBudWxsIHdoZW4gYSBwYXJlbnQgY29tcG9uZW50IHVwZGF0ZXMgd2hpbGUgc3dpcGluZ1xuICAgIGlmICghcGFwZXJSZWYuY3VycmVudCB8fCAhdG91Y2hEZXRlY3RlZC5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBXZSBhcmUgbm90IHN1cHBvc2VkIHRvIGhhbmRsZSB0aGlzIHRvdWNoIG1vdmUgYmVjYXVzZSB0aGUgc3dpcGUgd2FzIHN0YXJ0ZWQgaW4gYSBzY3JvbGxhYmxlIGNvbnRhaW5lciBpbiB0aGUgZHJhd2VyXG5cblxuICAgIGlmIChub2RlVGhhdENsYWltZWRUaGVTd2lwZSAhPSBudWxsICYmIG5vZGVUaGF0Q2xhaW1lZFRoZVN3aXBlICE9PSBzd2lwZUluc3RhbmNlLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgYW5jaG9yUnRsID0gZ2V0QW5jaG9yKHRoZW1lLCBhbmNob3IpO1xuICAgIHZhciBob3Jpem9udGFsU3dpcGUgPSBpc0hvcml6b250YWwoYW5jaG9yKTtcbiAgICB2YXIgY3VycmVudFggPSBjYWxjdWxhdGVDdXJyZW50WChhbmNob3JSdGwsIGV2ZW50LnRvdWNoZXMpO1xuICAgIHZhciBjdXJyZW50WSA9IGNhbGN1bGF0ZUN1cnJlbnRZKGFuY2hvclJ0bCwgZXZlbnQudG91Y2hlcyk7XG5cbiAgICBpZiAob3BlbiAmJiBwYXBlclJlZi5jdXJyZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkgJiYgbm9kZVRoYXRDbGFpbWVkVGhlU3dpcGUgPT0gbnVsbCkge1xuICAgICAgdmFyIGRvbVRyZWVTaGFwZXMgPSBnZXREb21UcmVlU2hhcGVzKGV2ZW50LnRhcmdldCwgcGFwZXJSZWYuY3VycmVudCk7XG4gICAgICB2YXIgbmF0aXZlSGFuZGxlciA9IGZpbmROYXRpdmVIYW5kbGVyKHtcbiAgICAgICAgZG9tVHJlZVNoYXBlczogZG9tVHJlZVNoYXBlcyxcbiAgICAgICAgc3RhcnQ6IGhvcml6b250YWxTd2lwZSA/IHN3aXBlSW5zdGFuY2UuY3VycmVudC5zdGFydFggOiBzd2lwZUluc3RhbmNlLmN1cnJlbnQuc3RhcnRZLFxuICAgICAgICBjdXJyZW50OiBob3Jpem9udGFsU3dpcGUgPyBjdXJyZW50WCA6IGN1cnJlbnRZLFxuICAgICAgICBhbmNob3I6IGFuY2hvclxuICAgICAgfSk7XG5cbiAgICAgIGlmIChuYXRpdmVIYW5kbGVyKSB7XG4gICAgICAgIG5vZGVUaGF0Q2xhaW1lZFRoZVN3aXBlID0gbmF0aXZlSGFuZGxlcjtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBub2RlVGhhdENsYWltZWRUaGVTd2lwZSA9IHN3aXBlSW5zdGFuY2UuY3VycmVudDtcbiAgICB9IC8vIFdlIGRvbid0IGtub3cgeWV0LlxuXG5cbiAgICBpZiAoc3dpcGVJbnN0YW5jZS5jdXJyZW50LmlzU3dpcGluZyA9PSBudWxsKSB7XG4gICAgICB2YXIgZHggPSBNYXRoLmFicyhjdXJyZW50WCAtIHN3aXBlSW5zdGFuY2UuY3VycmVudC5zdGFydFgpO1xuICAgICAgdmFyIGR5ID0gTWF0aC5hYnMoY3VycmVudFkgLSBzd2lwZUluc3RhbmNlLmN1cnJlbnQuc3RhcnRZKTsgLy8gV2UgYXJlIGxpa2VseSB0byBiZSBzd2lwaW5nLCBsZXQncyBwcmV2ZW50IHRoZSBzY3JvbGwgZXZlbnQgb24gaU9TLlxuXG4gICAgICBpZiAoZHggPiBkeSkge1xuICAgICAgICBpZiAoZXZlbnQuY2FuY2VsYWJsZSkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGRlZmluaXRlbHlTd2lwaW5nID0gaG9yaXpvbnRhbFN3aXBlID8gZHggPiBkeSAmJiBkeCA+IFVOQ0VSVEFJTlRZX1RIUkVTSE9MRCA6IGR5ID4gZHggJiYgZHkgPiBVTkNFUlRBSU5UWV9USFJFU0hPTEQ7XG5cbiAgICAgIGlmIChkZWZpbml0ZWx5U3dpcGluZyA9PT0gdHJ1ZSB8fCAoaG9yaXpvbnRhbFN3aXBlID8gZHkgPiBVTkNFUlRBSU5UWV9USFJFU0hPTEQgOiBkeCA+IFVOQ0VSVEFJTlRZX1RIUkVTSE9MRCkpIHtcbiAgICAgICAgc3dpcGVJbnN0YW5jZS5jdXJyZW50LmlzU3dpcGluZyA9IGRlZmluaXRlbHlTd2lwaW5nO1xuXG4gICAgICAgIGlmICghZGVmaW5pdGVseVN3aXBpbmcpIHtcbiAgICAgICAgICBoYW5kbGVCb2R5VG91Y2hFbmQoZXZlbnQpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBTaGlmdCB0aGUgc3RhcnRpbmcgcG9pbnQuXG5cblxuICAgICAgICBzd2lwZUluc3RhbmNlLmN1cnJlbnQuc3RhcnRYID0gY3VycmVudFg7XG4gICAgICAgIHN3aXBlSW5zdGFuY2UuY3VycmVudC5zdGFydFkgPSBjdXJyZW50WTsgLy8gQ29tcGVuc2F0ZSBmb3IgdGhlIHBhcnQgb2YgdGhlIGRyYXdlciBkaXNwbGF5ZWQgb24gdG91Y2ggc3RhcnQuXG5cbiAgICAgICAgaWYgKCFkaXNhYmxlRGlzY292ZXJ5ICYmICFvcGVuKSB7XG4gICAgICAgICAgaWYgKGhvcml6b250YWxTd2lwZSkge1xuICAgICAgICAgICAgc3dpcGVJbnN0YW5jZS5jdXJyZW50LnN0YXJ0WCAtPSBzd2lwZUFyZWFXaWR0aDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3dpcGVJbnN0YW5jZS5jdXJyZW50LnN0YXJ0WSAtPSBzd2lwZUFyZWFXaWR0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXN3aXBlSW5zdGFuY2UuY3VycmVudC5pc1N3aXBpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbWF4VHJhbnNsYXRlID0gZ2V0TWF4VHJhbnNsYXRlKGhvcml6b250YWxTd2lwZSwgcGFwZXJSZWYuY3VycmVudCk7XG4gICAgdmFyIHN0YXJ0TG9jYXRpb24gPSBob3Jpem9udGFsU3dpcGUgPyBzd2lwZUluc3RhbmNlLmN1cnJlbnQuc3RhcnRYIDogc3dpcGVJbnN0YW5jZS5jdXJyZW50LnN0YXJ0WTtcblxuICAgIGlmIChvcGVuICYmICFzd2lwZUluc3RhbmNlLmN1cnJlbnQucGFwZXJIaXQpIHtcbiAgICAgIHN0YXJ0TG9jYXRpb24gPSBNYXRoLm1pbihzdGFydExvY2F0aW9uLCBtYXhUcmFuc2xhdGUpO1xuICAgIH1cblxuICAgIHZhciB0cmFuc2xhdGUgPSBnZXRUcmFuc2xhdGUoaG9yaXpvbnRhbFN3aXBlID8gY3VycmVudFggOiBjdXJyZW50WSwgc3RhcnRMb2NhdGlvbiwgb3BlbiwgbWF4VHJhbnNsYXRlKTtcblxuICAgIGlmIChvcGVuKSB7XG4gICAgICBpZiAoIXN3aXBlSW5zdGFuY2UuY3VycmVudC5wYXBlckhpdCkge1xuICAgICAgICB2YXIgcGFwZXJIaXQgPSBob3Jpem9udGFsU3dpcGUgPyBjdXJyZW50WCA8IG1heFRyYW5zbGF0ZSA6IGN1cnJlbnRZIDwgbWF4VHJhbnNsYXRlO1xuXG4gICAgICAgIGlmIChwYXBlckhpdCkge1xuICAgICAgICAgIHN3aXBlSW5zdGFuY2UuY3VycmVudC5wYXBlckhpdCA9IHRydWU7XG4gICAgICAgICAgc3dpcGVJbnN0YW5jZS5jdXJyZW50LnN0YXJ0WCA9IGN1cnJlbnRYO1xuICAgICAgICAgIHN3aXBlSW5zdGFuY2UuY3VycmVudC5zdGFydFkgPSBjdXJyZW50WTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRlID09PSAwKSB7XG4gICAgICAgIHN3aXBlSW5zdGFuY2UuY3VycmVudC5zdGFydFggPSBjdXJyZW50WDtcbiAgICAgICAgc3dpcGVJbnN0YW5jZS5jdXJyZW50LnN0YXJ0WSA9IGN1cnJlbnRZO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzd2lwZUluc3RhbmNlLmN1cnJlbnQubGFzdFRyYW5zbGF0ZSA9PT0gbnVsbCkge1xuICAgICAgc3dpcGVJbnN0YW5jZS5jdXJyZW50Lmxhc3RUcmFuc2xhdGUgPSB0cmFuc2xhdGU7XG4gICAgICBzd2lwZUluc3RhbmNlLmN1cnJlbnQubGFzdFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKSArIDE7XG4gICAgfVxuXG4gICAgdmFyIHZlbG9jaXR5ID0gKHRyYW5zbGF0ZSAtIHN3aXBlSW5zdGFuY2UuY3VycmVudC5sYXN0VHJhbnNsYXRlKSAvIChwZXJmb3JtYW5jZS5ub3coKSAtIHN3aXBlSW5zdGFuY2UuY3VycmVudC5sYXN0VGltZSkgKiAxZTM7IC8vIExvdyBQYXNzIGZpbHRlci5cblxuICAgIHN3aXBlSW5zdGFuY2UuY3VycmVudC52ZWxvY2l0eSA9IHN3aXBlSW5zdGFuY2UuY3VycmVudC52ZWxvY2l0eSAqIDAuNCArIHZlbG9jaXR5ICogMC42O1xuICAgIHN3aXBlSW5zdGFuY2UuY3VycmVudC5sYXN0VHJhbnNsYXRlID0gdHJhbnNsYXRlO1xuICAgIHN3aXBlSW5zdGFuY2UuY3VycmVudC5sYXN0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpOyAvLyBXZSBhcmUgc3dpcGluZywgbGV0J3MgcHJldmVudCB0aGUgc2Nyb2xsIGV2ZW50IG9uIGlPUy5cblxuICAgIGlmIChldmVudC5jYW5jZWxhYmxlKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHNldFBvc2l0aW9uKHRyYW5zbGF0ZSk7XG4gIH0pO1xuICB2YXIgaGFuZGxlQm9keVRvdWNoU3RhcnQgPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIFdlIGFyZSBub3Qgc3VwcG9zZWQgdG8gaGFuZGxlIHRoaXMgdG91Y2ggbW92ZS5cbiAgICAvLyBFeGFtcGxlIG9mIHVzZSBjYXNlOiBpZ25vcmUgdGhlIGV2ZW50IGlmIHRoZXJlIGlzIGEgU2xpZGVyLlxuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBXZSBjYW4gb25seSBoYXZlIG9uZSBub2RlIGF0IHRoZSB0aW1lIGNsYWltaW5nIG93bmVyc2hpcCBmb3IgaGFuZGxpbmcgdGhlIHN3aXBlLlxuXG5cbiAgICBpZiAoZXZlbnQubXVpSGFuZGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gQXQgbGVhc3Qgb25lIGVsZW1lbnQgY2xvZ3MgdGhlIGRyYXdlciBpbnRlcmFjdGlvbiB6b25lLlxuXG5cbiAgICBpZiAob3BlbiAmJiAhYmFja2Ryb3BSZWYuY3VycmVudC5jb250YWlucyhldmVudC50YXJnZXQpICYmICFwYXBlclJlZi5jdXJyZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgYW5jaG9yUnRsID0gZ2V0QW5jaG9yKHRoZW1lLCBhbmNob3IpO1xuICAgIHZhciBob3Jpem9udGFsU3dpcGUgPSBpc0hvcml6b250YWwoYW5jaG9yKTtcbiAgICB2YXIgY3VycmVudFggPSBjYWxjdWxhdGVDdXJyZW50WChhbmNob3JSdGwsIGV2ZW50LnRvdWNoZXMpO1xuICAgIHZhciBjdXJyZW50WSA9IGNhbGN1bGF0ZUN1cnJlbnRZKGFuY2hvclJ0bCwgZXZlbnQudG91Y2hlcyk7XG5cbiAgICBpZiAoIW9wZW4pIHtcbiAgICAgIGlmIChkaXNhYmxlU3dpcGVUb09wZW4gfHwgZXZlbnQudGFyZ2V0ICE9PSBzd2lwZUFyZWFSZWYuY3VycmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChob3Jpem9udGFsU3dpcGUpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRYID4gc3dpcGVBcmVhV2lkdGgpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudFkgPiBzd2lwZUFyZWFXaWR0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgZXZlbnQubXVpSGFuZGxlZCA9IHRydWU7XG4gICAgbm9kZVRoYXRDbGFpbWVkVGhlU3dpcGUgPSBudWxsO1xuICAgIHN3aXBlSW5zdGFuY2UuY3VycmVudC5zdGFydFggPSBjdXJyZW50WDtcbiAgICBzd2lwZUluc3RhbmNlLmN1cnJlbnQuc3RhcnRZID0gY3VycmVudFk7XG4gICAgc2V0TWF5YmVTd2lwaW5nKHRydWUpO1xuXG4gICAgaWYgKCFvcGVuICYmIHBhcGVyUmVmLmN1cnJlbnQpIHtcbiAgICAgIC8vIFRoZSByZWYgbWF5IGJlIG51bGwgd2hlbiBhIHBhcmVudCBjb21wb25lbnQgdXBkYXRlcyB3aGlsZSBzd2lwaW5nLlxuICAgICAgc2V0UG9zaXRpb24oZ2V0TWF4VHJhbnNsYXRlKGhvcml6b250YWxTd2lwZSwgcGFwZXJSZWYuY3VycmVudCkgKyAoZGlzYWJsZURpc2NvdmVyeSA/IDIwIDogLXN3aXBlQXJlYVdpZHRoKSwge1xuICAgICAgICBjaGFuZ2VUcmFuc2l0aW9uOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3dpcGVJbnN0YW5jZS5jdXJyZW50LnZlbG9jaXR5ID0gMDtcbiAgICBzd2lwZUluc3RhbmNlLmN1cnJlbnQubGFzdFRpbWUgPSBudWxsO1xuICAgIHN3aXBlSW5zdGFuY2UuY3VycmVudC5sYXN0VHJhbnNsYXRlID0gbnVsbDtcbiAgICBzd2lwZUluc3RhbmNlLmN1cnJlbnQucGFwZXJIaXQgPSBmYWxzZTtcbiAgICB0b3VjaERldGVjdGVkLmN1cnJlbnQgPSB0cnVlO1xuICB9KTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodmFyaWFudCA9PT0gJ3RlbXBvcmFyeScpIHtcbiAgICAgIHZhciBkb2MgPSBvd25lckRvY3VtZW50KHBhcGVyUmVmLmN1cnJlbnQpO1xuICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVCb2R5VG91Y2hTdGFydCk7XG4gICAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgaGFuZGxlQm9keVRvdWNoTW92ZSwge1xuICAgICAgICBwYXNzaXZlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBoYW5kbGVCb2R5VG91Y2hFbmQpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVCb2R5VG91Y2hTdGFydCk7XG4gICAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBoYW5kbGVCb2R5VG91Y2hNb3ZlLCB7XG4gICAgICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGhhbmRsZUJvZHlUb3VjaEVuZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0sIFt2YXJpYW50LCBoYW5kbGVCb2R5VG91Y2hTdGFydCwgaGFuZGxlQm9keVRvdWNoTW92ZSwgaGFuZGxlQm9keVRvdWNoRW5kXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gcmVsZWFzZSB0aGUgbG9jay5cbiAgICAgIGlmIChub2RlVGhhdENsYWltZWRUaGVTd2lwZSA9PT0gc3dpcGVJbnN0YW5jZS5jdXJyZW50KSB7XG4gICAgICAgIG5vZGVUaGF0Q2xhaW1lZFRoZVN3aXBlID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFvcGVuKSB7XG4gICAgICBzZXRNYXliZVN3aXBpbmcoZmFsc2UpO1xuICAgIH1cbiAgfSwgW29wZW5dKTtcbiAgdmFyIGhhbmRsZUJhY2tkcm9wUmVmID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgLy8gI1N0cmljdE1vZGUgcmVhZHlcbiAgICBiYWNrZHJvcFJlZi5jdXJyZW50ID0gUmVhY3RET00uZmluZERPTU5vZGUoaW5zdGFuY2UpO1xuICB9LCBbXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRHJhd2VyLCBfZXh0ZW5kcyh7XG4gICAgb3BlbjogdmFyaWFudCA9PT0gJ3RlbXBvcmFyeScgJiYgbWF5YmVTd2lwaW5nID8gdHJ1ZSA6IG9wZW4sXG4gICAgdmFyaWFudDogdmFyaWFudCxcbiAgICBNb2RhbFByb3BzOiBfZXh0ZW5kcyh7XG4gICAgICBCYWNrZHJvcFByb3BzOiBfZXh0ZW5kcyh7fSwgQmFja2Ryb3BQcm9wcywge1xuICAgICAgICByZWY6IGhhbmRsZUJhY2tkcm9wUmVmXG4gICAgICB9KVxuICAgIH0sIE1vZGFsUHJvcHNQcm9wKSxcbiAgICBQYXBlclByb3BzOiBfZXh0ZW5kcyh7fSwgUGFwZXJQcm9wcywge1xuICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgcG9pbnRlckV2ZW50czogdmFyaWFudCA9PT0gJ3RlbXBvcmFyeScgJiYgIW9wZW4gPyAnbm9uZScgOiAnJ1xuICAgICAgfSwgUGFwZXJQcm9wcy5zdHlsZSksXG4gICAgICByZWY6IHBhcGVyUmVmXG4gICAgfSksXG4gICAgYW5jaG9yOiBhbmNob3IsXG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uOiBjYWxjdWxhdGVkRHVyYXRpb25SZWYuY3VycmVudCB8fCB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgb25DbG9zZTogb25DbG9zZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpLCAhZGlzYWJsZVN3aXBlVG9PcGVuICYmIHZhcmlhbnQgPT09ICd0ZW1wb3JhcnknICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE5vU3NyLCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTd2lwZUFyZWEsIF9leHRlbmRzKHtcbiAgICBhbmNob3I6IGFuY2hvcixcbiAgICByZWY6IHN3aXBlQXJlYVJlZixcbiAgICB3aWR0aDogc3dpcGVBcmVhV2lkdGhcbiAgfSwgU3dpcGVBcmVhUHJvcHMpKSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTd2lwZWFibGVEcmF3ZXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgYW5jaG9yOiBQcm9wVHlwZXMub25lT2YoWydsZWZ0JywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIERpc2FibGUgdGhlIGJhY2tkcm9wIHRyYW5zaXRpb24uXG4gICAqIFRoaXMgY2FuIGltcHJvdmUgdGhlIEZQUyBvbiBsb3ctZW5kIGRldmljZXMuXG4gICAqL1xuICBkaXNhYmxlQmFja2Ryb3BUcmFuc2l0aW9uOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0b3VjaGluZyB0aGUgc2NyZWVuIG5lYXIgdGhlIGVkZ2Ugb2YgdGhlIGRyYXdlciB3aWxsIG5vdCBzbGlkZSBpbiB0aGUgZHJhd2VyIGEgYml0XG4gICAqIHRvIHByb21vdGUgYWNjaWRlbnRhbCBkaXNjb3Zlcnkgb2YgdGhlIHN3aXBlIGdlc3R1cmUuXG4gICAqL1xuICBkaXNhYmxlRGlzY292ZXJ5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBzd2lwZSB0byBvcGVuIGlzIGRpc2FibGVkLiBUaGlzIGlzIHVzZWZ1bCBpbiBicm93c2VycyB3aGVyZSBzd2lwaW5nIHRyaWdnZXJzXG4gICAqIG5hdmlnYXRpb24gYWN0aW9ucy4gU3dpcGUgdG8gb3BlbiBpcyBkaXNhYmxlZCBvbiBpT1MgYnJvd3NlcnMgYnkgZGVmYXVsdC5cbiAgICovXG4gIGRpc2FibGVTd2lwZVRvT3BlbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGhpZGVCYWNrZHJvcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEFmZmVjdHMgaG93IGZhciB0aGUgZHJhd2VyIG11c3QgYmUgb3BlbmVkL2Nsb3NlZCB0byBjaGFuZ2UgaGlzIHN0YXRlLlxuICAgKiBTcGVjaWZpZWQgYXMgcGVyY2VudCAoMC0xKSBvZiB0aGUgd2lkdGggb2YgdGhlIGRyYXdlclxuICAgKi9cbiAgaHlzdGVyZXNpczogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogRGVmaW5lcywgZnJvbSB3aGljaCAoYXZlcmFnZSkgdmVsb2NpdHkgb24sIHRoZSBzd2lwZSBpc1xuICAgKiBkZWZpbmVkIGFzIGNvbXBsZXRlIGFsdGhvdWdoIGh5c3RlcmVzaXMgaXNuJ3QgcmVhY2hlZC5cbiAgICogR29vZCB0aHJlc2hvbGQgaXMgYmV0d2VlbiAyNTAgLSAxMDAwIHB4L3NcbiAgICovXG4gIG1pbkZsaW5nVmVsb2NpdHk6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIE1vZGFsUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgQmFja2Ryb3BQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGNvbXBvbmVudDogZWxlbWVudFR5cGVBY2NlcHRpbmdSZWZcbiAgICB9KVxuICB9KSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIG9wZW5lZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKi9cbiAgb25PcGVuOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBkcmF3ZXIgaXMgb3Blbi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIFBhcGVyUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY29tcG9uZW50OiBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZixcbiAgICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdFxuICB9KSxcblxuICAvKipcbiAgICogVGhlIGVsZW1lbnQgaXMgdXNlZCB0byBpbnRlcmNlcHQgdGhlIHRvdWNoIGV2ZW50cyBvbiB0aGUgZWRnZS5cbiAgICovXG4gIFN3aXBlQXJlYVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgd2lkdGggb2YgdGhlIGxlZnQgbW9zdCAob3IgcmlnaHQgbW9zdCkgYXJlYSBpbiBwaXhlbHMgd2hlcmUgdGhlXG4gICAqIGRyYXdlciBjYW4gYmUgc3dpcGVkIG9wZW4gZnJvbS5cbiAgICovXG4gIHN3aXBlQXJlYVdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICovXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3Blcm1hbmVudCcsICdwZXJzaXN0ZW50JywgJ3RlbXBvcmFyeSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFN3aXBlYWJsZURyYXdlcjsiLCIvKipcclxuICog44Oa44O844K46YG356e75pmC44Gu44OR44K544KS5a6a576pXHJcbiAqL1xyXG52YXIgUm91dGVyUGF0aCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFJvdXRlclBhdGgoKSB7XHJcbiAgICB9XHJcbiAgICBSb3V0ZXJQYXRoLlJPT1QgPSAnL2luZGV4JztcclxuICAgIFJvdXRlclBhdGguU0lHTklOID0gJy9zaWduX2luJztcclxuICAgIFJvdXRlclBhdGguU0lHTlVQID0gJy9zaWduX3VwJztcclxuICAgIFJvdXRlclBhdGguUFJJVkFDWV9QT0xJQ1kgPSAnL3ByaXZhY3lwb2xpY3lfcGFnZSc7XHJcbiAgICBSb3V0ZXJQYXRoLlRFUk1TX1BPTElDWSA9ICcvdGVybXNfcGFnZSc7XHJcbiAgICBSb3V0ZXJQYXRoLk1ZUEFHRSA9ICcvbXlfcGFnZSc7XHJcbiAgICBSb3V0ZXJQYXRoLk1FTUJFUl9SRUdJU1QgPSAnL21lbWJlcl9yZWdpc3QnO1xyXG4gICAgUm91dGVyUGF0aC5SRU1PVkVfQUNDT1VOVCA9ICcvcmVtb3ZlX3BhZ2UnO1xyXG4gICAgcmV0dXJuIFJvdXRlclBhdGg7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IFJvdXRlclBhdGggfTtcclxuIiwiaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVHlwb2dyYXBoeSc7XHJcbmltcG9ydCBMaXN0IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0xpc3QnO1xyXG5pbXBvcnQgTGlzdEl0ZW0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvTGlzdEl0ZW0nO1xyXG5pbXBvcnQgSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9JY29uJztcclxuaW1wb3J0IExpc3RJdGVtVGV4dCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9MaXN0SXRlbVRleHQnO1xyXG5pbXBvcnQgTGlzdEl0ZW1JY29uIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0xpc3RJdGVtSWNvbic7XHJcbmltcG9ydCB1c2VUaGVtZSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvdXNlVGhlbWUnO1xyXG5pbXBvcnQgQXBwQmFyIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0FwcEJhcic7XHJcbmltcG9ydCBUb29sYmFyIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1Rvb2xiYXInO1xyXG5pbXBvcnQgSWNvbkJ1dHRvbiBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9JY29uQnV0dG9uJztcclxuaW1wb3J0IFN3aXBlYWJsZURyYXdlciBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9Td2lwZWFibGVEcmF3ZXInO1xyXG5pbXBvcnQgUmVhY3QsIHsgRnJhZ21lbnQsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XHJcbmltcG9ydCB7IEdsb2JhbFN0eWxlcyB9IGZyb20gJy4uL1N0eWxlcy9nbG9iYWxDbHN4JztcclxuaW1wb3J0IHsgUm91dGVyUGF0aCB9IGZyb20gJy4uL0RhdGFTdHJ1Y3R1cmUvUm91dGVyUGF0aCc7XHJcbi8vIEdsb2JhbOWApFxyXG52YXIgU0lURV9USVRMRSA9ICdTLVN1cG9ydCc7XHJcbnZhciBTSURFX0JBUl9QQUdFUyA9IGZ1bmN0aW9uIChwcm9wcykge1xyXG4gICAgdmFyIGJhc2VQYWdlcyA9IFtcclxuICAgICAgICB7IG5hbWU6ICfjg4jjg4Pjg5fjg5rjg7zjgrgnLCBocmVmOiBSb3V0ZXJQYXRoLlJPT1QsIGljb246ICdob21lJyB9LFxyXG4gICAgICAgIHsgbmFtZTogJ+OBlOWIqeeUqOimj+e0hCcsIGhyZWY6IFJvdXRlclBhdGguVEVSTVNfUE9MSUNZLCBpY29uOiAnYXNzaWdubWVudCcgfSxcclxuICAgICAgICB7IG5hbWU6ICfjg5fjg6njgqTjg5Djgrfjg7zjg53jg6rjgrfjg7wnLCBocmVmOiBSb3V0ZXJQYXRoLlBSSVZBQ1lfUE9MSUNZLCBpY29uOiAncHJpdmFjeV90aXAnIH0sXHJcbiAgICBdO1xyXG4gICAgaWYgKHByb3BzLmlzTG9naW5lZCkge1xyXG4gICAgICAgIGJhc2VQYWdlcy5wdXNoKHsgbmFtZTogJ+ODnuOCpOODmuODvOOCuCcsIGhyZWY6IFJvdXRlclBhdGguTVlQQUdFLCBpY29uOiAncGVyc29uJyB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGJhc2VQYWdlcy5wdXNoKHsgbmFtZTogJ+S8muWToeeZu+mMsicsIGhyZWY6IFJvdXRlclBhdGguU0lHTlVQLCBpY29uOiAnaG93X3RvX3JlZycgfSk7XHJcbiAgICAgICAgYmFzZVBhZ2VzLnB1c2goeyBuYW1lOiAn44Ot44Kw44Kk44OzJywgaHJlZjogUm91dGVyUGF0aC5TSUdOSU4sIGljb246ICdwZXJzb24nIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGJhc2VQYWdlcztcclxufTtcclxuLyoqIEhlYWRlciBhbmQgRHJhd2VyIGNvbXBvbmVudC4gRHJhd2VyIGNvbnRlbnRzIGlzIGRlZmluZWQgaW5uZXIgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIEhlYWRlckFuZERyYXdlcihwcm9wcykge1xyXG4gICAgdmFyIGhpc3RvcnkgPSB1c2VIaXN0b3J5KCk7XHJcbiAgICB2YXIgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xyXG4gICAgdmFyIGNsc3ggPSBHbG9iYWxTdHlsZXMoKTtcclxuICAgIHZhciB0aGVtZSA9IHVzZVRoZW1lKCk7XHJcbiAgICB2YXIgX2EgPSB1c2VTdGF0ZShmYWxzZSksIGFuY2hvciA9IF9hWzBdLCBzZXRBbmNob3IgPSBfYVsxXTtcclxuICAgIHZhciBfYiA9IHVzZVN0YXRlKGZhbHNlKSwgbG9naW5lZCA9IF9iWzBdLCBzZXRMb2dpbmVkID0gX2JbMV07XHJcbiAgICB2YXIgbWVudUh1bmRsZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNldEFuY2hvcighYW5jaG9yKTsgfTtcclxuICAgIHZhciBvcGVuSHVuZGxlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gc2V0QW5jaG9yKHRydWUpOyB9O1xyXG4gICAgdmFyIGNsb3NlSHVuZGxlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gc2V0QW5jaG9yKGZhbHNlKTsgfTtcclxuICAgIHZhciBsb2dPdXRIdW5kbGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaGlzdG9yeS5wdXNoKFJvdXRlclBhdGguUk9PVCk7XHJcbiAgICB9O1xyXG4gICAgdmFyIGFwcEJhckNzcyA9IHByb3BzLmNvbG9yID09PSAnd2hpdGUnXHJcbiAgICAgICAgPyB7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICdyZ2JhKDI1NSwyNTUsMjU1LDAuNyknLFxyXG4gICAgICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksXHJcbiAgICAgICAgfVxyXG4gICAgICAgIDoge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxyXG4gICAgICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5LmNvbnRyYXN0VGV4dCxcclxuICAgICAgICB9O1xyXG4gICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLFxyXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQXBwQmFyLCB7IHBvc2l0aW9uOiAnZml4ZWQnLCBzdHlsZTogYXBwQmFyQ3NzIH0sXHJcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVG9vbGJhciwgbnVsbCxcclxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBzdHlsZTogeyBmbGV4R3JvdzogMSB9IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUeXBvZ3JhcGh5LCB7IGNvbG9yOiAnaW5oZXJpdCcsIGNsYXNzTmFtZTogY2xzeC50ZXh0U3ViVGl0bGUsIG9uQ2xpY2s6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGhpc3RvcnkucHVzaCgnLycpOyB9IH0sIFNJVEVfVElUTEUpKSxcclxuICAgICAgICAgICAgICAgIGxvZ2luZWQgJiYgKFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbkJ1dHRvbiwgeyBjb2xvcjogJ2luaGVyaXQnLCBvbkNsaWNrOiBsb2dPdXRIdW5kbGUgfSxcclxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEljb24sIG51bGwsIFwibG9nb3V0XCIpKSksXHJcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEljb25CdXR0b24sIHsgY29sb3I6ICdpbmhlcml0Jywgb25DbGljazogbWVudUh1bmRsZSB9LFxyXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbiwgbnVsbCwgXCJtZW51XCIpKSkpLFxyXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU3dpcGVhYmxlRHJhd2VyLCB7IGFuY2hvcjogJ3RvcCcsIG9wZW46IGFuY2hvciwgb25PcGVuOiBvcGVuSHVuZGxlLCBvbkNsb3NlOiBjbG9zZUh1bmRsZSB9LFxyXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KExpc3QsIG51bGwsIFNJREVfQkFSX1BBR0VTKHsgaXNMb2dpbmVkOiBsb2dpbmVkIH0pXHJcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLmhyZWYgIT09IGxvY2F0aW9uLnBhdGhuYW1lOyB9KVxyXG4gICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHsgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KExpc3RJdGVtLCB7IGtleTogaW5kZXgsIGJ1dHRvbjogdHJ1ZSwgb25DbGljazogZnVuY3Rpb24gKCkgeyByZXR1cm4gaGlzdG9yeS5wdXNoKGl0ZW0uaHJlZik7IH0sIHN0eWxlOiB7IHdpZHRoOiAnMTAwJScgfSB9LFxyXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChMaXN0SXRlbUljb24sIG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJY29uLCB7IGNvbG9yOiAnaW5oZXJpdCcgfSwgaXRlbS5pY29uKSksXHJcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KExpc3RJdGVtVGV4dCwgeyBjb2xvcjogJ2luaGVyaXQnLCBwcmltYXJ5OiBpdGVtLm5hbWUsIHN0eWxlOiB7IHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZyg2KSB9IH0pKSk7IH0pKSkpKTtcclxufVxyXG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgeyBmYWRlIH0gZnJvbSAnLi4vc3R5bGVzL2NvbG9yTWFuaXB1bGF0b3InO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGhlaWdodDogMSxcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIC8vIFJlc2V0IGJyb3dzZXIgZGVmYXVsdCBzdHlsZS5cbiAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgZmxleFNocmluazogMCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5kaXZpZGVyXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFic29sdXRlPXt0cnVlfWAuICovXG4gICAgYWJzb2x1dGU6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImluc2V0XCJgLiAqL1xuICAgIGluc2V0OiB7XG4gICAgICBtYXJnaW5MZWZ0OiA3MlxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBsaWdodD17dHJ1ZX1gLiAqL1xuICAgIGxpZ2h0OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5kaXZpZGVyLCAwLjA4KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwibWlkZGxlXCJgLiAqL1xuICAgIG1pZGRsZToge1xuICAgICAgbWFyZ2luTGVmdDogdGhlbWUuc3BhY2luZygyKSxcbiAgICAgIG1hcmdpblJpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG9yaWVudGF0aW9uPVwidmVydGljYWxcImAuICovXG4gICAgdmVydGljYWw6IHtcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgd2lkdGg6IDFcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZmxleEl0ZW09e3RydWV9YC4gKi9cbiAgICBmbGV4SXRlbToge1xuICAgICAgYWxpZ25TZWxmOiAnc3RyZXRjaCcsXG4gICAgICBoZWlnaHQ6ICdhdXRvJ1xuICAgIH1cbiAgfTtcbn07XG52YXIgRGl2aWRlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIERpdmlkZXIocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGFic29sdXRlID0gcHJvcHMuYWJzb2x1dGUsXG4gICAgICBhYnNvbHV0ZSA9IF9wcm9wcyRhYnNvbHV0ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkYWJzb2x1dGUsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnaHInIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRmbGV4SXRlbSA9IHByb3BzLmZsZXhJdGVtLFxuICAgICAgZmxleEl0ZW0gPSBfcHJvcHMkZmxleEl0ZW0gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZsZXhJdGVtLFxuICAgICAgX3Byb3BzJGxpZ2h0ID0gcHJvcHMubGlnaHQsXG4gICAgICBsaWdodCA9IF9wcm9wcyRsaWdodCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbGlnaHQsXG4gICAgICBfcHJvcHMkb3JpZW50YXRpb24gPSBwcm9wcy5vcmllbnRhdGlvbixcbiAgICAgIG9yaWVudGF0aW9uID0gX3Byb3BzJG9yaWVudGF0aW9uID09PSB2b2lkIDAgPyAnaG9yaXpvbnRhbCcgOiBfcHJvcHMkb3JpZW50YXRpb24sXG4gICAgICBfcHJvcHMkcm9sZSA9IHByb3BzLnJvbGUsXG4gICAgICByb2xlID0gX3Byb3BzJHJvbGUgPT09IHZvaWQgMCA/IENvbXBvbmVudCAhPT0gJ2hyJyA/ICdzZXBhcmF0b3InIDogdW5kZWZpbmVkIDogX3Byb3BzJHJvbGUsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdmdWxsV2lkdGgnIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYWJzb2x1dGVcIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZmxleEl0ZW1cIiwgXCJsaWdodFwiLCBcIm9yaWVudGF0aW9uXCIsIFwicm9sZVwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIHZhcmlhbnQgIT09ICdmdWxsV2lkdGgnICYmIGNsYXNzZXNbdmFyaWFudF0sIGFic29sdXRlICYmIGNsYXNzZXMuYWJzb2x1dGUsIGZsZXhJdGVtICYmIGNsYXNzZXMuZmxleEl0ZW0sIGxpZ2h0ICYmIGNsYXNzZXMubGlnaHQsIG9yaWVudGF0aW9uID09PSAndmVydGljYWwnICYmIGNsYXNzZXMudmVydGljYWwpLFxuICAgIHJvbGU6IHJvbGUsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRGl2aWRlci5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBYnNvbHV0ZWx5IHBvc2l0aW9uIHRoZSBlbGVtZW50LlxuICAgKi9cbiAgYWJzb2x1dGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIHZlcnRpY2FsIGRpdmlkZXIgd2lsbCBoYXZlIHRoZSBjb3JyZWN0IGhlaWdodCB3aGVuIHVzZWQgaW4gZmxleCBjb250YWluZXIuXG4gICAqIChCeSBkZWZhdWx0LCBhIHZlcnRpY2FsIGRpdmlkZXIgd2lsbCBoYXZlIGEgY2FsY3VsYXRlZCBoZWlnaHQgb2YgYDBweGAgaWYgaXQgaXMgdGhlIGNoaWxkIG9mIGEgZmxleCBjb250YWluZXIuKVxuICAgKi9cbiAgZmxleEl0ZW06IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBkaXZpZGVyIHdpbGwgaGF2ZSBhIGxpZ2h0ZXIgY29sb3IuXG4gICAqL1xuICBsaWdodDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBkaXZpZGVyIG9yaWVudGF0aW9uLlxuICAgKi9cbiAgb3JpZW50YXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2hvcml6b250YWwnLCAndmVydGljYWwnXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJvbGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2Z1bGxXaWR0aCcsICdpbnNldCcsICdtaWRkbGUnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRGl2aWRlcidcbn0pKERpdmlkZXIpOyIsImltcG9ydCBSZWFjdCwgeyBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVHlwb2dyYXBoeSc7XHJcbmltcG9ydCBEaXZpZGVyIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0RpdmlkZXInO1xyXG5pbXBvcnQgeyBHbG9iYWxTdHlsZXMgfSBmcm9tICcuLi9TdHlsZXMvZ2xvYmFsQ2xzeCc7XHJcbi8qKlxyXG4gKiDmnKzjgrXjgqTjg4jjga5Gb290ZXLjgpLlrprnvqnjgZnjgotcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBTaXRlRm9vdGVyKCkge1xyXG4gICAgdmFyIGNsc3ggPSBHbG9iYWxTdHlsZXMoKTtcclxuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgc3R5bGU6IHsgaGVpZ2h0OiAnM2VtJyB9IH0pLFxyXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGl2aWRlciwgbnVsbCksXHJcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUeXBvZ3JhcGh5LCB7IGFsaWduOiAncmlnaHQnLCBjb2xvcjogJ3RleHRTZWNvbmRhcnknLCBzdHlsZTogeyBtYXJnaW5Ub3A6ICczZW0nLCBtYXJnaW5Cb3R0b206ICcxZW0nIH0sIGNsYXNzTmFtZTogY2xzeC50ZXh0UGFyYWdyYXBoIH0sIFwic2FtcGxlXCIpLFxyXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHlwb2dyYXBoeSwgeyBhbGlnbjogJ3JpZ2h0JywgY29sb3I6ICd0ZXh0U2Vjb25kYXJ5Jywgc3R5bGU6IHsgbWFyZ2luVG9wOiAnM2VtJywgbWFyZ2luQm90dG9tOiAnMWVtJyB9LCBjbGFzc05hbWU6IGNsc3gudGV4dFBhcmFncmFwaCB9LCBcInNhbXBsZS5jby5sdGRcIiksXHJcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHN0eWxlOiB7IGhlaWdodDogJzNlbScgfSB9KSkpO1xyXG59XHJcbiIsImltcG9ydCBDb250YWluZXIgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQ29udGFpbmVyJztcclxuaW1wb3J0IHVzZVRoZW1lIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy91c2VUaGVtZSc7XHJcbmltcG9ydCBSZWFjdCwgeyBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgY2xzeCB9IGZyb20gJ3JlYWN0LXV0aWxpdGllcyc7XHJcbmltcG9ydCB7IEdsb2JhbFN0eWxlcyB9IGZyb20gJy4uL1N0eWxlcy9nbG9iYWxDbHN4JztcclxuaW1wb3J0IHsgSGVhZGVyQW5kRHJhd2VyIH0gZnJvbSAnLi9IZWFkZXJBbmREcmF3ZXInO1xyXG5pbXBvcnQgeyBTaXRlRm9vdGVyIH0gZnJvbSAnLi9TaXRlRm9vdGVyJztcclxuLyoqXHJcbiAqIFJvb3QgYm9keSBvZiBlYWNoIHBhZ2VcclxuICovXHJcbmV4cG9ydCB2YXIgUGFnZVJvb3QgPSBmdW5jdGlvbiAocHJvcHMpIHtcclxuICAgIHZhciBnQ2xhc3NlcyA9IEdsb2JhbFN0eWxlcygpO1xyXG4gICAgdmFyIHRoZW1lID0gdXNlVGhlbWUoKTtcclxuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEhlYWRlckFuZERyYXdlciwgeyBjb2xvcjogJ3ByaW1hcnknIH0pLFxyXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGFpbmVyLCB7IGNsYXNzTmFtZTogY2xzeC5qb2luKHByb3BzLmNsYXNzTmFtZSwgZ0NsYXNzZXMuY29udGVudFNlY3Rpb25Db250YWluZXIpIH0sXHJcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGdDbGFzc2VzLnRvb2xiYXIgfSksXHJcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBzdHlsZTogeyBtYXJnaW5Ub3A6IHRoZW1lLnNwYWNpbmcoMykgfSB9KSxcclxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCwgcHJvcHMuY2hpbGRyZW4pKSxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFNpdGVGb290ZXIsIG51bGwpKSk7XHJcbn07XHJcbi8qKlxyXG4gKiBSb290IGJvZHkgb2YgZWFjaCBwYWdlXHJcbiAqL1xyXG5leHBvcnQgdmFyIFBhZ2VSb290Tm9Db250YWluZXIgPSBmdW5jdGlvbiAocHJvcHMpIHtcclxuICAgIHZhciB0aGVtZSA9IHVzZVRoZW1lKCk7XHJcbiAgICB2YXIgY2xzeCA9IEdsb2JhbFN0eWxlcygpO1xyXG4gICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLFxyXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSGVhZGVyQW5kRHJhd2VyLCB7IGNvbG9yOiAnd2hpdGUnIH0pLFxyXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGNsc3gudG9vbGJhciB9KSxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgc3R5bGU6IHsgbWFyZ2luVG9wOiB0aGVtZS5zcGFjaW5nKDMpIH0gfSksXHJcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCwgcHJvcHMuY2hpbGRyZW4pLFxyXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2l0ZUZvb3RlciwgbnVsbCkpKTtcclxufTtcclxuIiwiZXhwb3J0IHZhciBDYXJkQXJncyA9IHtcclxuICAgIHRvcDoge1xyXG4gICAgICAgIHRpdGxlOiAnc2FtcGxlIHNpdGUnLFxyXG4gICAgICAgIG1zZ3MxOiAnc2FtcGxlIG1lc3NhZ2UnLFxyXG4gICAgICAgIG1zZ3MyOiAnc2FtcGxlIG1lc3NhZ2UgZGVzY3JpcHRpb24nLFxyXG4gICAgICAgIGJnSW1hZ2U6ICdodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vcHcvQUN0Qy0zZGx5ZGFadGZZcDRidmxROE5oWmhvWTdXOTJMS3hBM3hTSkRKd0hlcTNiTnV5RXRwaGdHVWx0dktCN0dBcjZHTDZPazQzdDdxN003dmEybUZQQ1FrU3FTSGd4MHlzdG5wV1F5X0tBZlVGOF92d2lBcS1laUoxc0ZSRmVFa0hBRmxNb2t5T0xHa3RlRVBVREY1QkFuZ2snLFxyXG4gICAgfSxcclxuICAgIGRlc2NzOiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aXRsZTogJ3NhbXBsZSBzaXRlJyxcclxuICAgICAgICAgICAgbXNnczE6ICdzYW1wbGUgbWVzc2FnZScsXHJcbiAgICAgICAgICAgIGJnSW1hZ2U6ICdodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vcHcvQUN0Qy0zZDJFTjFRMVJheTlJYjlhMmJMQV91QzdOZ3E1aFdrRm5Wa0RzYWxITnQ0Y2NMVXV4Q3I5RkFQcHQ0cm5hQTNZMjhoWUFEcDZUVmk5eXpLS2thdzVsT0VXT2FZaHUwVVczZDdoVDdnaU1jZlhnaXM0anl6M1NDZXRzaUdQWWt4aUVTb2p3U3BBc1MwcHNzdXlVa2d1VzgnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aXRsZTogJ3NhbXBsZSBzaXRlJyxcclxuICAgICAgICAgICAgbXNnczE6ICdzYW1wbGUgbWVzc2FnZScsXHJcbiAgICAgICAgICAgIGJnSW1hZ2U6ICdodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vcHcvQUN0Qy0zZm4xYmNrNTZlY0pVR0N5Q2hSQ1AyenB6VVNIUVZzZHNwM2laNUZMeGUtWVhmUHhZakhNTkN1c0c4SWQ3b2pyVTRfS1VNbnFnMjVfN0NNY09ORFdqUnJoajJwbmZRMjdEbUl3YkNvQ2pDRUZaLVg0c1lUbTF1aDlvanljNHY2OERtRWNjb2U5dndnSWVvRUlnMEVKZmcnLFxyXG4gICAgICAgIH0sXHJcbiAgICBdLFxyXG59O1xyXG4iLCJpbXBvcnQgeyBtYWtlU3R5bGVzLCBjcmVhdGVTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xyXG5leHBvcnQgdmFyIHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoZnVuY3Rpb24gKHRoZW1lKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlU3R5bGVzKHtcclxuICAgICAgICBJbkltYWdlVGl0bGVUZXh0OiB7XHJcbiAgICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXHJcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6IHRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodEJvbGQsXHJcbiAgICAgICAgICAgIGNvbG9yOiAnaW5oZXJpdCcsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBJbkltYWdlU3ViVGl0bGVUZXh0OiB7XHJcbiAgICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXHJcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6IHRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodEJvbGQsXHJcbiAgICAgICAgICAgIGNvbG9yOiAnaW5oZXJpdCcsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBJbkltYWdlUGFyYWdyYXBoVGV4dDoge1xyXG4gICAgICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxyXG4gICAgICAgICAgICBmb250V2VpZ2h0OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHRCb2xkLFxyXG4gICAgICAgICAgICBtYXhXaWR0aDogdGhlbWUuYnJlYWtwb2ludHMud2lkdGgoJ3NtJyksXHJcbiAgICAgICAgICAgIGNvbG9yOiAnaW5oZXJpdCcsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBDYXJkQ29udGFpbmVyOiB7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnY292ZXInLFxyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246ICdjZW50ZXInLFxyXG4gICAgICAgICAgICBjb2xvcjogJyNmZmYnLFxyXG4gICAgICAgICAgICBoZWlnaHQ6ICc2MHZoJyxcclxuICAgICAgICAgICAgd2lkdGg6ICdpbmhlcml0JyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIEluZHVjYXRpb246IHtcclxuICAgICAgICAgICAgaGVpZ2h0OiAnMzB2aCcsXHJcbiAgICAgICAgICAgIG1hcmdpblRvcDogJzV2aCcsXHJcbiAgICAgICAgfSxcclxuICAgIH0pO1xyXG59KTtcclxuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IFBhcGVyIGZyb20gJy4uL1BhcGVyJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gIH1cbn07XG52YXIgQ2FyZCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIENhcmQocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkcmFpc2VkID0gcHJvcHMucmFpc2VkLFxuICAgICAgcmFpc2VkID0gX3Byb3BzJHJhaXNlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkcmFpc2VkLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJyYWlzZWRcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChQYXBlciwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgZWxldmF0aW9uOiByYWlzZWQgPyA4IDogMSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDYXJkLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjYXJkIHdpbGwgdXNlIHJhaXNlZCBzdHlsaW5nLlxuICAgKi9cbiAgcmFpc2VkOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlDYXJkJ1xufSkoQ2FyZCk7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgR2xvYmFsU3R5bGVzIH0gZnJvbSAnLi4vU3R5bGVzL2dsb2JhbENsc3gnO1xyXG4vKiog6KaB57Sg44GM55S76Z2i5YaF44Gr5YWl44Gj44Gf44GL5ZCm44GL44KS5Yik5a6a44GZ44KLICovXHJcbnZhciBwb3NpdGlvblN0YXR1cyA9IGZ1bmN0aW9uIChub3csIGJvdHRvbSwgb2Zmc2V0VG9wKSB7XHJcbiAgICBpZiAob2Zmc2V0VG9wID4gYm90dG9tKSB7XHJcbiAgICAgICAgcmV0dXJuICd1cCc7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChvZmZzZXRUb3AgLSAxMDAgPCBib3R0b20gJiYgb2Zmc2V0VG9wIC0gMTAwIDwgbm93KSB7XHJcbiAgICAgICAgcmV0dXJuICdkb3duJztcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiAnaW4nO1xyXG4gICAgfVxyXG59O1xyXG5leHBvcnQgdmFyIEZhZGUgPSBmdW5jdGlvbiAoX2EpIHtcclxuICAgIHZhciBub3dIZWlnaHQgPSBfYS5ub3dIZWlnaHQsIGNoaWxkcmVuID0gX2EuY2hpbGRyZW4sIHRyYW5zaXRpb25UeXBlID0gX2EudHJhbnNpdGlvblR5cGU7XHJcbiAgICB2YXIgcmVmID0gdXNlUmVmKG51bGwpO1xyXG4gICAgdmFyIGNsc3ggPSBHbG9iYWxTdHlsZXMoKTtcclxuICAgIHZhciBfYiA9IHVzZVN0YXRlKGZhbHNlKSwgZmlyc3QgPSBfYlswXSwgc2V0Rmlyc3QgPSBfYlsxXTtcclxuICAgIHZhciBfYyA9IHVzZVN0YXRlKHRyYW5zaXRpb25UeXBlKSwgY2xzeE5hbWUgPSBfY1swXSwgc2V0Q2xzeE5hbWUgPSBfY1sxXTtcclxuICAgIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGlmICghZmlyc3QpIHtcclxuICAgICAgICAgICAgdmFyIGJvdHRvbSA9IG5vd0hlaWdodCArIHdpbmRvdy5pbm5lckhlaWdodCAvIDEuMztcclxuICAgICAgICAgICAgdmFyIG9mZnNldFRvcCA9IChfYSA9IHJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eub2Zmc2V0VG9wO1xyXG4gICAgICAgICAgICBpZiAob2Zmc2V0VG9wICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdGF0dXNfMSA9IHBvc2l0aW9uU3RhdHVzKG5vd0hlaWdodCwgYm90dG9tLCBvZmZzZXRUb3ApO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1c18xID09PSAndXAnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlyc3QgPyBzZXRDbHN4TmFtZShjbHN4LnRyYW5zaXRpb25GYWRlSW5FbmQpIDogc2V0Q2xzeE5hbWUodHJhbnNpdGlvblR5cGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0Rmlyc3QodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0Q2xzeE5hbWUoY2xzeC50cmFuc2l0aW9uRmFkZUluUnVuKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sIFtub3dIZWlnaHRdKTtcclxuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHJlZjogcmVmLCBjbGFzc05hbWU6IGNsc3hOYW1lIH0sIGNoaWxkcmVuKSk7XHJcbn07XHJcbiIsImltcG9ydCBSZWFjdCwgeyBGcmFnbWVudCwgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IENvbnRhaW5lciBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9Db250YWluZXInO1xyXG5pbXBvcnQgR3JpZCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9HcmlkJztcclxuaW1wb3J0IEJ1dHRvbiBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9CdXR0b24nO1xyXG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL3VzZVRoZW1lJztcclxuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVHlwb2dyYXBoeSc7XHJcbmltcG9ydCB1c2VNZWRpYVF1ZXJ5IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3VzZU1lZGlhUXVlcnknO1xyXG5pbXBvcnQgeyB1c2VIaXN0b3J5IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7IEJhc2ljSW5kdWN0aW9uIH0gZnJvbSAnLi4vLi4vQ29tcG9uZW50cy9JbmR1Y3Rpb24nO1xyXG5pbXBvcnQgeyBQYWdlUm9vdE5vQ29udGFpbmVyIH0gZnJvbSAnLi4vLi4vT3JnYW5pc21zL1BhZ2VSb290JztcclxuaW1wb3J0IHsgR2xvYmFsU3R5bGVzIH0gZnJvbSAnLi4vLi4vU3R5bGVzL2dsb2JhbENsc3gnO1xyXG5pbXBvcnQgeyBDYXJkQXJncyB9IGZyb20gJy4vUHJvZHVjdFBhZ2VEYXRhJztcclxuaW1wb3J0IHsgdXNlU3R5bGVzIH0gZnJvbSAnLi9Qcm9kdWN0UGFnZUNzcyc7XHJcbmltcG9ydCBDYXJkIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0NhcmQnO1xyXG5pbXBvcnQgeyBGYWRlIH0gZnJvbSAnLi4vLi4vQ29tcG9uZW50cy9GYWRlJztcclxuaW1wb3J0IHsgUm91dGVyUGF0aCB9IGZyb20gJy4uLy4uL0RhdGFTdHJ1Y3R1cmUvUm91dGVyUGF0aCc7XHJcbmltcG9ydCB7IGNsc3ggfSBmcm9tICdyZWFjdC11dGlsaXRpZXMnO1xyXG5pbXBvcnQgeyBUb29scyB9IGZyb20gJ3RzLXV0aWxpdGllcyc7XHJcbmV4cG9ydCB2YXIgUHJvZHVjdFBhZ2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZ0NsYXNzZXMgPSBHbG9iYWxTdHlsZXMoKTtcclxuICAgIHZhciBsQ2xhc3NlcyA9IHVzZVN0eWxlcygpO1xyXG4gICAgdmFyIHRoZW1lID0gdXNlVGhlbWUoKTtcclxuICAgIHZhciBoaXN0b3J5ID0gdXNlSGlzdG9yeSgpO1xyXG4gICAgdmFyIG1hdGNoZXMgPSB1c2VNZWRpYVF1ZXJ5KHRoZW1lLmJyZWFrcG9pbnRzLmRvd24oJ3NtJykpO1xyXG4gICAgdmFyIF9hID0gdXNlU3RhdGUoMCksIHBvc2l0aW9uID0gX2FbMF0sIHNldFBvc2l0aW9uID0gX2FbMV07XHJcbiAgICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBtb3VudGVkID0gdHJ1ZTtcclxuICAgICAgICB2YXIgb25TY3JvbGwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChtb3VudGVkKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRQb3NpdGlvbihNYXRoLm1heCh3aW5kb3cucGFnZVlPZmZzZXQsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AsIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBzY3JvbGwgPSBUb29scy50aHJvdHRsZShvblNjcm9sbCwgMTAwKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzY3JvbGwpO1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIG9uU2Nyb2xsKTtcclxuICAgICAgICAgICAgbW91bnRlZCA9IGZhbHNlO1xyXG4gICAgICAgIH07XHJcbiAgICB9LCBbXSk7XHJcbiAgICB2YXIgdG9TZWFyY2hQYWdlSGFuZGxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGhpc3RvcnkucHVzaChSb3V0ZXJQYXRoLk1ZUEFHRSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFBhZ2VSb290Tm9Db250YWluZXIsIG51bGwsXHJcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChDb250YWluZXIsIHsgbWF4V2lkdGg6ICdsZycgfSxcclxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChGYWRlLCB7IG5vd0hlaWdodDogcG9zaXRpb24sIHRyYW5zaXRpb25UeXBlOiBnQ2xhc3Nlcy50cmFuc2l0aW9uRmFkZUluVXBQZW5kaW5nIH0sXHJcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KENhcmQsIHsgY2xhc3NOYW1lOiBjbHN4LmpvaW4oZ0NsYXNzZXMucG9zaXRpb25DZW50ZXJpbmcsIGdDbGFzc2VzLmNhcmRCYXNpYywgbENsYXNzZXMuQ2FyZENvbnRhaW5lciksIHN0eWxlOiB7IGJhY2tncm91bmRJbWFnZTogXCJ1cmwoXCIgKyBDYXJkQXJncy50b3AuYmdJbWFnZSArIFwiKVwiIH0gfSxcclxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEdyaWQsIHsgY29udGFpbmVyOiB0cnVlLCBqdXN0aWZ5OiAnY2VudGVyJywgYWxpZ25JdGVtczogJ3N0cmV0Y2gnLCBzcGFjaW5nOiAzLCBzdHlsZTogeyBoZWlnaHQ6ICcxMDAlJyB9IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR3JpZCwgeyBpdGVtOiB0cnVlLCB4czogMTIsIG1kOiA2IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBjbHN4LmJvb2xTd2l0Y2gobWF0Y2hlcywgZ0NsYXNzZXMucG9zaXRpb25YQ2VudGVyWUJvdHRvbSwgZ0NsYXNzZXMucG9zaXRpb25DZW50ZXJpbmcpIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUeXBvZ3JhcGh5LCB7IGNvbXBvbmVudDogJ2gxJywgY2xhc3NOYW1lOiBjbHN4LmpvaW4oZ0NsYXNzZXMudGV4dFRpdGxlLCBsQ2xhc3Nlcy5JbkltYWdlVGl0bGVUZXh0KSB9LCBDYXJkQXJncy50b3AudGl0bGUpKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR3JpZCwgeyBpdGVtOiB0cnVlLCB4czogMTIsIG1kOiA2IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBjbHN4LmJvb2xTd2l0Y2gobWF0Y2hlcywgZ0NsYXNzZXMucG9zaXRpb25YQ2VudGVyWVRvcCwgZ0NsYXNzZXMucG9zaXRpb25DZW50ZXJpbmcpIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFR5cG9ncmFwaHksIHsgY29tcG9uZW50OiAnaDInLCBjbGFzc05hbWU6IGNsc3guam9pbihnQ2xhc3Nlcy50ZXh0U3ViVGl0bGUsIGxDbGFzc2VzLkluSW1hZ2VTdWJUaXRsZVRleHQpIH0sIENhcmRBcmdzLnRvcC5tc2dzMSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHlwb2dyYXBoeSwgeyBjbGFzc05hbWU6IGNsc3guam9pbihnQ2xhc3Nlcy50ZXh0Q2FwdGlvbiwgbENsYXNzZXMuSW5JbWFnZVBhcmFncmFwaFRleHQpIH0sIENhcmRBcmdzLnRvcC5tc2dzMikpKSkpKSksXHJcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGNsc3guam9pbihnQ2xhc3Nlcy5wb3NpdGlvblhDZW50ZXJZVG9wLCBsQ2xhc3Nlcy5JbmR1Y2F0aW9uKSB9LFxyXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChCYXNpY0luZHVjdGlvbiwgbnVsbCkpLFxyXG4gICAgICAgICAgICBDYXJkQXJncy5kZXNjcy5tYXAoZnVuY3Rpb24gKGFyZ3MsIGluZGV4KSB7IHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChGcmFnbWVudCwgeyBrZXk6IGluZGV4IH0sXHJcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEZhZGUsIHsgbm93SGVpZ2h0OiBwb3NpdGlvbiwgdHJhbnNpdGlvblR5cGU6IGNsc3guYm9vbFN3aXRjaChpbmRleCArICgxMCAlIDIpID09PSAwLCBnQ2xhc3Nlcy50cmFuc2l0aW9uRmFkZUluUmlnaHRQZW5kaW5nLCBnQ2xhc3Nlcy50cmFuc2l0aW9uRmFkZUluTGVmdFBlbmRpbmcpIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHN0eWxlOiB7IGRpc3BsYXk6ICdmbGV4JywgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsIHdpZHRoOiAnaW5oZXJpdCcgfSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KENhcmQsIHsgY2xhc3NOYW1lOiBjbHN4LmpvaW4oZ0NsYXNzZXMucG9zaXRpb25DZW50ZXJpbmcsIGdDbGFzc2VzLmNhcmRCYXNpYywgbENsYXNzZXMuQ2FyZENvbnRhaW5lciksIHN0eWxlOiB7IGJhY2tncm91bmRJbWFnZTogXCJ1cmwoXCIgKyBhcmdzLmJnSW1hZ2UgKyBcIilcIiB9IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEdyaWQsIHsgY29udGFpbmVyOiB0cnVlLCBqdXN0aWZ5OiAnY2VudGVyJywgYWxpZ25JdGVtczogJ3N0cmV0Y2gnLCBzcGFjaW5nOiAzLCBzdHlsZTogeyBoZWlnaHQ6ICdpbmhlcml0JScgfSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR3JpZCwgeyBpdGVtOiB0cnVlLCB4czogMTIsIG1kOiA2IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGNsc3guYm9vbFN3aXRjaChtYXRjaGVzLCBnQ2xhc3Nlcy5wb3NpdGlvblhDZW50ZXJZQm90dG9tLCBnQ2xhc3Nlcy5wb3NpdGlvbkNlbnRlcmluZykgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHlwb2dyYXBoeSwgeyBjb21wb25lbnQ6ICdoMicsIGNsYXNzTmFtZTogY2xzeC5qb2luKGdDbGFzc2VzLnRleHRTdWJUaXRsZSwgbENsYXNzZXMuSW5JbWFnZVN1YlRpdGxlVGV4dCkgfSwgYXJncy50aXRsZSkpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEdyaWQsIHsgaXRlbTogdHJ1ZSwgeHM6IDEyLCBtZDogNiB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBjbHN4LmJvb2xTd2l0Y2gobWF0Y2hlcywgZ0NsYXNzZXMucG9zaXRpb25YQ2VudGVyWVRvcCwgZ0NsYXNzZXMucG9zaXRpb25DZW50ZXJpbmcpIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUeXBvZ3JhcGh5LCB7IGNsYXNzTmFtZTogY2xzeC5qb2luKGdDbGFzc2VzLnRleHRDYXB0aW9uLCBsQ2xhc3Nlcy5JbkltYWdlUGFyYWdyYXBoVGV4dCkgfSwgYXJncy5tc2dzMSkpKSkpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogY2xzeC5qb2luKGdDbGFzc2VzLnBvc2l0aW9uWENlbnRlcllUb3AsIGxDbGFzc2VzLkluZHVjYXRpb24pIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEJhc2ljSW5kdWN0aW9uLCBudWxsKSkpKSkpOyB9KSxcclxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHN0eWxlOiB7IGhlaWdodDogJzQwdmgnIH0gfSxcclxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGdDbGFzc2VzLnBvc2l0aW9uQ2VudGVyaW5nIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChGYWRlLCB7IG5vd0hlaWdodDogcG9zaXRpb24sIHRyYW5zaXRpb25UeXBlOiBnQ2xhc3Nlcy50cmFuc2l0aW9uRmFkZUluVXBQZW5kaW5nIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHlwb2dyYXBoeSwgeyBjb21wb25lbnQ6ICdoMicsIGNvbG9yOiAncHJpbWFyeScsIGFsaWduOiAnY2VudGVyJywgY2xhc3NOYW1lOiBnQ2xhc3Nlcy50ZXh0U3ViVGl0bGUgfSwgXCJcXHU3NTNCXFx1OTc2MlxcdTkwNzdcXHU3OUZCXFx1MzBFMVxcdTMwQzNcXHUzMEJCXFx1MzBGQ1xcdTMwQjhcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBzdHlsZTogeyBoZWlnaHQ6ICczZW0nIH0gfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uLCB7IGNsYXNzTmFtZTogZ0NsYXNzZXMuYnV0dG9uUHJpbWFyeSwgc2l6ZTogJ2xhcmdlJywgdHlwZTogJ2J1dHRvbicsIHZhcmlhbnQ6ICdjb250YWluZWQnLCBmdWxsV2lkdGg6IHRydWUsIG9uQ2xpY2s6IHRvU2VhcmNoUGFnZUhhbmRsZSB9LCBcIlxcdTc1M0JcXHU5NzYyXFx1OTA3N1xcdTc5RkJcXHUzMERDXFx1MzBCRlxcdTMwRjNcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBzdHlsZTogeyBoZWlnaHQ6ICcyMHZoJyB9IH0pKSkpKSkpO1xyXG59O1xyXG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldFRoZW1lUHJvcHMsIHVzZVRoZW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N0eWxlcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VNZWRpYVF1ZXJ5KHF1ZXJ5SW5wdXQpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICB2YXIgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICB2YXIgcHJvcHMgPSBnZXRUaGVtZVByb3BzKHtcbiAgICB0aGVtZTogdGhlbWUsXG4gICAgbmFtZTogJ011aVVzZU1lZGlhUXVlcnknLFxuICAgIHByb3BzOiB7fVxuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgcXVlcnlJbnB1dCA9PT0gJ2Z1bmN0aW9uJyAmJiB0aGVtZSA9PT0gbnVsbCkge1xuICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBUaGUgYHF1ZXJ5YCBhcmd1bWVudCBwcm92aWRlZCBpcyBpbnZhbGlkLicsICdZb3UgYXJlIHByb3ZpZGluZyBhIGZ1bmN0aW9uIHdpdGhvdXQgYSB0aGVtZSBpbiB0aGUgY29udGV4dC4nLCAnT25lIG9mIHRoZSBwYXJlbnQgZWxlbWVudHMgbmVlZHMgdG8gdXNlIGEgVGhlbWVQcm92aWRlci4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHF1ZXJ5ID0gdHlwZW9mIHF1ZXJ5SW5wdXQgPT09ICdmdW5jdGlvbicgPyBxdWVyeUlucHV0KHRoZW1lKSA6IHF1ZXJ5SW5wdXQ7XG4gIHF1ZXJ5ID0gcXVlcnkucmVwbGFjZSgvXkBtZWRpYSggPykvbSwgJycpOyAvLyBXYWl0IGZvciBqc2RvbSB0byBzdXBwb3J0IHRoZSBtYXRjaCBtZWRpYSBmZWF0dXJlLlxuICAvLyBBbGwgdGhlIGJyb3dzZXJzIE1hdGVyaWFsLVVJIHN1cHBvcnQgaGF2ZSB0aGlzIGJ1aWx0LWluLlxuICAvLyBUaGlzIGRlZmVuc2l2ZSBjaGVjayBpcyBoZXJlIGZvciBzaW1wbGljaXR5LlxuICAvLyBNb3N0IG9mIHRoZSB0aW1lLCB0aGUgbWF0Y2ggbWVkaWEgbG9naWMgaXNuJ3QgY2VudHJhbCB0byBwZW9wbGUgdGVzdHMuXG5cbiAgdmFyIHN1cHBvcnRNYXRjaE1lZGlhID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5tYXRjaE1lZGlhICE9PSAndW5kZWZpbmVkJztcblxuICB2YXIgX3Byb3BzJG9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIG9wdGlvbnMpLFxuICAgICAgX3Byb3BzJG9wdGlvbnMkZGVmYXVsID0gX3Byb3BzJG9wdGlvbnMuZGVmYXVsdE1hdGNoZXMsXG4gICAgICBkZWZhdWx0TWF0Y2hlcyA9IF9wcm9wcyRvcHRpb25zJGRlZmF1bCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkb3B0aW9ucyRkZWZhdWwsXG4gICAgICBfcHJvcHMkb3B0aW9ucyRtYXRjaE0gPSBfcHJvcHMkb3B0aW9ucy5tYXRjaE1lZGlhLFxuICAgICAgbWF0Y2hNZWRpYSA9IF9wcm9wcyRvcHRpb25zJG1hdGNoTSA9PT0gdm9pZCAwID8gc3VwcG9ydE1hdGNoTWVkaWEgPyB3aW5kb3cubWF0Y2hNZWRpYSA6IG51bGwgOiBfcHJvcHMkb3B0aW9ucyRtYXRjaE0sXG4gICAgICBfcHJvcHMkb3B0aW9ucyRub1NzciA9IF9wcm9wcyRvcHRpb25zLm5vU3NyLFxuICAgICAgbm9Tc3IgPSBfcHJvcHMkb3B0aW9ucyRub1NzciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkb3B0aW9ucyRub1NzcixcbiAgICAgIF9wcm9wcyRvcHRpb25zJHNzck1hdCA9IF9wcm9wcyRvcHRpb25zLnNzck1hdGNoTWVkaWEsXG4gICAgICBzc3JNYXRjaE1lZGlhID0gX3Byb3BzJG9wdGlvbnMkc3NyTWF0ID09PSB2b2lkIDAgPyBudWxsIDogX3Byb3BzJG9wdGlvbnMkc3NyTWF0O1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG5vU3NyICYmIHN1cHBvcnRNYXRjaE1lZGlhKSB7XG4gICAgICByZXR1cm4gbWF0Y2hNZWRpYShxdWVyeSkubWF0Y2hlcztcbiAgICB9XG5cbiAgICBpZiAoc3NyTWF0Y2hNZWRpYSkge1xuICAgICAgcmV0dXJuIHNzck1hdGNoTWVkaWEocXVlcnkpLm1hdGNoZXM7XG4gICAgfSAvLyBPbmNlIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZCwgd2UgcmVseSBvbiB0aGVcbiAgICAvLyBldmVudCBsaXN0ZW5lcnMgdG8gcmV0dXJuIHRoZSBjb3JyZWN0IG1hdGNoZXMgdmFsdWUuXG5cblxuICAgIHJldHVybiBkZWZhdWx0TWF0Y2hlcztcbiAgfSksXG4gICAgICBtYXRjaCA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldE1hdGNoID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFjdGl2ZSA9IHRydWU7XG5cbiAgICBpZiAoIXN1cHBvcnRNYXRjaE1lZGlhKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHZhciBxdWVyeUxpc3QgPSBtYXRjaE1lZGlhKHF1ZXJ5KTtcblxuICAgIHZhciB1cGRhdGVNYXRjaCA9IGZ1bmN0aW9uIHVwZGF0ZU1hdGNoKCkge1xuICAgICAgLy8gV29ya2Fyb3VuZCBTYWZhcmkgd3JvbmcgaW1wbGVtZW50YXRpb24gb2YgbWF0Y2hNZWRpYVxuICAgICAgLy8gVE9ETyBjYW4gd2UgcmVtb3ZlIGl0P1xuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL211aS1vcmcvbWF0ZXJpYWwtdWkvcHVsbC8xNzMxNSNpc3N1ZWNvbW1lbnQtNTI4Mjg2Njc3XG4gICAgICBpZiAoYWN0aXZlKSB7XG4gICAgICAgIHNldE1hdGNoKHF1ZXJ5TGlzdC5tYXRjaGVzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdXBkYXRlTWF0Y2goKTtcbiAgICBxdWVyeUxpc3QuYWRkTGlzdGVuZXIodXBkYXRlTWF0Y2gpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICAgIHF1ZXJ5TGlzdC5yZW1vdmVMaXN0ZW5lcih1cGRhdGVNYXRjaCk7XG4gICAgfTtcbiAgfSwgW3F1ZXJ5LCBtYXRjaE1lZGlhLCBzdXBwb3J0TWF0Y2hNZWRpYV0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRGVidWdWYWx1ZSh7XG4gICAgICBxdWVyeTogcXVlcnksXG4gICAgICBtYXRjaDogbWF0Y2hcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBtYXRjaDtcbn0iLCJpbXBvcnQgVHlwb2dyYXBoeSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UeXBvZ3JhcGh5JztcclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgR2xvYmFsU3R5bGVzIH0gZnJvbSAnLi4vLi4vU3R5bGVzL2dsb2JhbENsc3gnO1xyXG5pbXBvcnQgeyBQYWdlUm9vdCB9IGZyb20gJy4uLy4uL09yZ2FuaXNtcy9QYWdlUm9vdCc7XHJcbmltcG9ydCB7IFJvdXRlclBhdGggfSBmcm9tICcuLi8uLi9EYXRhU3RydWN0dXJlL1JvdXRlclBhdGgnO1xyXG5pbXBvcnQgeyB1c2VIaXN0b3J5IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmV4cG9ydCBmdW5jdGlvbiBTaWduSW5TY3JlZW4oKSB7XHJcbiAgICB2YXIgY2xzeCA9IEdsb2JhbFN0eWxlcygpO1xyXG4gICAgdmFyIGhpc3RvcnkgPSB1c2VIaXN0b3J5KCk7XHJcbiAgICB2YXIgU2lnbkluQ2FsbEJhY2tIdW5kbGUgPSBmdW5jdGlvbiAoYXV0aFJlc3VsdCkge1xyXG4gICAgICAgIGlmIChhdXRoUmVzdWx0LmFkZGl0aW9uYWxVc2VySW5mby5pc05ld1VzZXIpIHtcclxuICAgICAgICAgICAgYWxlcnQoJ+S8muWToeeZu+mMsuOBjOOBleOCjOOBpuOBhOOBquOBhOeCuuOAgeeZu+mMsuODmuODvOOCuOOBuOmBt+enu+iHtOOBl+OBvuOBmScpO1xyXG4gICAgICAgICAgICBoaXN0b3J5LnB1c2goUm91dGVyUGF0aC5NRU1CRVJfUkVHSVNUKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGhpc3RvcnkucHVzaChSb3V0ZXJQYXRoLk1ZUEFHRSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChQYWdlUm9vdCwgbnVsbCxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBjbHN4LnBvc2l0aW9uQ2VudGVyaW5nLCBzdHlsZTogeyBoZWlnaHQ6ICc2MHZoJyB9IH0sXHJcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbnVsbCxcclxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHlwb2dyYXBoeSwgeyBjb21wb25lbnQ6ICdoMicsIGFsaWduOiAnY2VudGVyJywgY29sb3I6ICdpbmhlcml0JywgY2xhc3NOYW1lOiBjbHN4LnRleHRTdWJUaXRsZSwgc3R5bGU6IHsgZm9udFdlaWdodDogJ2JvbGQnLCB3aWR0aDogJzEwMCUnIH0gfSwgXCJcXHUzMEVEXFx1MzBCMFxcdTMwQTRcXHUzMEYzXCIpLFxyXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUeXBvZ3JhcGh5LCB7IGFsaWduOiAnY2VudGVyJywgY29sb3I6ICd0ZXh0U2Vjb25kYXJ5JywgY2xhc3NOYW1lOiBjbHN4LnRleHRQYXJhZ3JhcGggfSwgXCJcXHUzMEVEXFx1MzBCMFxcdTMwQTRcXHUzMEYzXFx1NjVCOVxcdTZDRDVcXHUzMDkyXFx1OTA3OFxcdTYyOUVcXHUzMDU3XFx1MzA2NlxcdTRFMEJcXHUzMDU1XFx1MzA0NFwiKSkpKSk7XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVHlwb2dyYXBoeSc7XHJcbmltcG9ydCBHcmlkIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0dyaWQnO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0J1dHRvbic7XHJcbmltcG9ydCBDYXJkIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0NhcmQnO1xyXG5pbXBvcnQgeyBQYWdlUm9vdCB9IGZyb20gJy4uLy4uLy4uL09yZ2FuaXNtcy9QYWdlUm9vdCc7XHJcbmltcG9ydCB7IEdsb2JhbFN0eWxlcyB9IGZyb20gJy4uLy4uLy4uL1N0eWxlcy9nbG9iYWxDbHN4JztcclxuaW1wb3J0IHsgdXNlSGlzdG9yeSB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5pbXBvcnQgeyBjbHN4IH0gZnJvbSAncmVhY3QtdXRpbGl0aWVzJztcclxuZXhwb3J0IGZ1bmN0aW9uIFByaXZhY3lQb2xpY3lQYWdlKCkge1xyXG4gICAgdmFyIGdDbGFzc2VzID0gR2xvYmFsU3R5bGVzKCk7XHJcbiAgICB2YXIgaGlzdG9yeSA9IHVzZUhpc3RvcnkoKTtcclxuICAgIHZhciBjbGlja0h1bmRsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBoaXN0b3J5LmdvQmFjaygpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChQYWdlUm9vdCwgbnVsbCxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KENhcmQsIHsgY2xhc3NOYW1lOiBjbHN4LmpvaW4oZ0NsYXNzZXMuY2FyZEJhc2ljKSB9LFxyXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEdyaWQsIHsgY29udGFpbmVyOiB0cnVlLCBkaXJlY3Rpb246ICdjb2x1bW4nLCBqdXN0aWZ5OiAnY2VudGVyJywgYWxpZ25JdGVtczogJ3N0cmV0Y2gnLCBzcGFjaW5nOiAzIH0sXHJcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEdyaWQsIHsgaXRlbTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBzdHlsZTogeyBoZWlnaHQ6ICcyZW0nIH0gfSksXHJcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUeXBvZ3JhcGh5LCB7IGFsaWduOiAnY2VudGVyJywgY29sb3I6ICdpbmhlcml0JywgY2xhc3NOYW1lOiBnQ2xhc3Nlcy50ZXh0U3ViVGl0bGUsIHN0eWxlOiB7IGZvbnRXZWlnaHQ6ICdib2xkJyB9IH0sIFwiXFx1MzBEN1xcdTMwRTlcXHUzMEE0XFx1MzBEMFxcdTMwQjdcXHUzMEZDXFx1MzBERFxcdTMwRUFcXHUzMEI3XFx1MzBGQ1wiKSksXHJcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEdyaWQsIHsgaXRlbTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGdDbGFzc2VzLnBvc2l0aW9uQ2VudGVyaW5nIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uLCB7IHR5cGU6ICdidXR0b24nLCBzaXplOiAnc21hbGwnLCBjbGFzc05hbWU6IGdDbGFzc2VzLmJ1dHRvblByaW1hcnksIHN0eWxlOiB7IHdpZHRoOiAnNjB2dycgfSwgb25DbGljazogY2xpY2tIdW5kbGUgfSwgXCJcXHU2MjNCXFx1MzA4QlwiKSkpKSkpKTtcclxufVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UeXBvZ3JhcGh5JztcclxuaW1wb3J0IEdyaWQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvR3JpZCc7XHJcbmltcG9ydCBCdXR0b24gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uJztcclxuaW1wb3J0IENhcmQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQ2FyZCc7XHJcbmltcG9ydCB7IFBhZ2VSb290IH0gZnJvbSAnLi4vLi4vLi4vT3JnYW5pc21zL1BhZ2VSb290JztcclxuaW1wb3J0IHsgR2xvYmFsU3R5bGVzIH0gZnJvbSAnLi4vLi4vLi4vU3R5bGVzL2dsb2JhbENsc3gnO1xyXG5pbXBvcnQgeyB1c2VIaXN0b3J5IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7IGNsc3ggfSBmcm9tICdyZWFjdC11dGlsaXRpZXMnO1xyXG5leHBvcnQgZnVuY3Rpb24gVGVybXNQYWdlKCkge1xyXG4gICAgdmFyIGdDbGFzc2VzID0gR2xvYmFsU3R5bGVzKCk7XHJcbiAgICB2YXIgaGlzdG9yeSA9IHVzZUhpc3RvcnkoKTtcclxuICAgIHZhciBjbGlja0h1bmRsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBoaXN0b3J5LmdvQmFjaygpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChQYWdlUm9vdCwgbnVsbCxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KENhcmQsIHsgY2xhc3NOYW1lOiBjbHN4LmpvaW4oZ0NsYXNzZXMuY2FyZEJhc2ljKSB9LFxyXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEdyaWQsIHsgY29udGFpbmVyOiB0cnVlLCBkaXJlY3Rpb246ICdjb2x1bW4nLCBqdXN0aWZ5OiAnY2VudGVyJywgYWxpZ25JdGVtczogJ3N0cmV0Y2gnLCBzcGFjaW5nOiAzIH0sXHJcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEdyaWQsIHsgaXRlbTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBzdHlsZTogeyBoZWlnaHQ6ICcyZW0nIH0gfSksXHJcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUeXBvZ3JhcGh5LCB7IGFsaWduOiAnY2VudGVyJywgY29sb3I6ICdpbmhlcml0JywgY2xhc3NOYW1lOiBnQ2xhc3Nlcy50ZXh0U3ViVGl0bGUsIHN0eWxlOiB7IGZvbnRXZWlnaHQ6ICdib2xkJyB9IH0sIFwiXFx1NTIyOVxcdTc1MjhcXHU4OThGXFx1N0QwNFwiKSksXHJcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEdyaWQsIHsgaXRlbTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGdDbGFzc2VzLnBvc2l0aW9uQ2VudGVyaW5nIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uLCB7IHR5cGU6ICdidXR0b24nLCBzaXplOiAnc21hbGwnLCBjbGFzc05hbWU6IGdDbGFzc2VzLmJ1dHRvblByaW1hcnksIHN0eWxlOiB7IHdpZHRoOiAnNjB2dycgfSwgb25DbGljazogY2xpY2tIdW5kbGUgfSwgXCJcXHU2MjNCXFx1MzA4QlwiKSkpKSkpKTtcclxufVxyXG4iLCJpbXBvcnQgVHlwb2dyYXBoeSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvVHlwb2dyYXBoeVwiO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBHbG9iYWxTdHlsZXMgfSBmcm9tICcuLi8uLi9TdHlsZXMvZ2xvYmFsQ2xzeCc7XHJcbmltcG9ydCB7IFBhZ2VSb290IH0gZnJvbSAnLi4vLi4vT3JnYW5pc21zL1BhZ2VSb290JztcclxuaW1wb3J0IHsgUm91dGVyUGF0aCB9IGZyb20gJy4uLy4uL0RhdGFTdHJ1Y3R1cmUvUm91dGVyUGF0aCc7XHJcbmltcG9ydCB7IHVzZUhpc3RvcnkgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcclxuZXhwb3J0IGZ1bmN0aW9uIFNpZ25VcFNjcmVlbigpIHtcclxuICAgIHZhciBjbHN4ID0gR2xvYmFsU3R5bGVzKCk7XHJcbiAgICB2YXIgaGlzdG9yeSA9IHVzZUhpc3RvcnkoKTtcclxuICAgIHZhciBTaWduVXBDYWxsQmFja0h1bmRsZSA9IGZ1bmN0aW9uIChhdXRoUmVzdWx0KSB7XHJcbiAgICAgICAgaWYgKGF1dGhSZXN1bHQuYWRkaXRpb25hbFVzZXJJbmZvLmlzTmV3VXNlcikge1xyXG4gICAgICAgICAgICBoaXN0b3J5LnB1c2goUm91dGVyUGF0aC5NRU1CRVJfUkVHSVNUKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGFsZXJ0KCfml6LjgavkvJrlk6HnmbvpjLLmuIjjga7ngrrjgIHjg57jgqTjg5rjg7zjgrjjgbjpgbfnp7voh7TjgZfjgb7jgZknKTtcclxuICAgICAgICAgICAgaGlzdG9yeS5wdXNoKFJvdXRlclBhdGguTVlQQUdFKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFBhZ2VSb290LCBudWxsLFxyXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGNsc3gucG9zaXRpb25DZW50ZXJpbmcsIHN0eWxlOiB7IGhlaWdodDogJzYwdmgnIH0gfSxcclxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBudWxsLFxyXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUeXBvZ3JhcGh5LCB7IGNvbXBvbmVudDogJ2gyJywgYWxpZ246ICdjZW50ZXInLCBjb2xvcjogJ2luaGVyaXQnLCBjbGFzc05hbWU6IGNsc3gudGV4dFN1YlRpdGxlLCBzdHlsZTogeyBmb250V2VpZ2h0OiAnYm9sZCcsIHdpZHRoOiAnMTAwJScgfSB9LCBcIlxcdTRGMUFcXHU1NEUxXFx1NzY3QlxcdTkzMzJcIiksXHJcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFR5cG9ncmFwaHksIHsgYWxpZ246ICdjZW50ZXInLCBjb2xvcjogJ3RleHRTZWNvbmRhcnknLCBjbGFzc05hbWU6IGNsc3gudGV4dFBhcmFncmFwaCB9LCBcIlxcdTMwQTJcXHUzMEFCXFx1MzBBNlxcdTMwRjNcXHUzMEM4XFx1MzA2RVxcdTc2N0JcXHU5MzMyXFx1NjVCOVxcdTZDRDVcXHUzMDkyXFx1OTA3OFxcdTYyOUVcXHU0RTBCXFx1MzA1NVxcdTMwNDRcIikpKSkpO1xyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgVGFibGVDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCgpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUYWJsZUNvbnRleHQuZGlzcGxheU5hbWUgPSAnVGFibGVDb250ZXh0Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgVGFibGVDb250ZXh0OyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBUYWJsZUNvbnRleHQgZnJvbSAnLi9UYWJsZUNvbnRleHQnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGRpc3BsYXk6ICd0YWJsZScsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgYm9yZGVyQ29sbGFwc2U6ICdjb2xsYXBzZScsXG4gICAgICBib3JkZXJTcGFjaW5nOiAwLFxuICAgICAgJyYgY2FwdGlvbic6IF9leHRlbmRzKHt9LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkyLCB7XG4gICAgICAgIHBhZGRpbmc6IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5LFxuICAgICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICAgICAgY2FwdGlvblNpZGU6ICdib3R0b20nXG4gICAgICB9KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzdGlja3lIZWFkZXI9e3RydWV9YC4gKi9cbiAgICBzdGlja3lIZWFkZXI6IHtcbiAgICAgIGJvcmRlckNvbGxhcHNlOiAnc2VwYXJhdGUnXG4gICAgfVxuICB9O1xufTtcbnZhciBkZWZhdWx0Q29tcG9uZW50ID0gJ3RhYmxlJztcbnZhciBUYWJsZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRhYmxlKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/IGRlZmF1bHRDb21wb25lbnQgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJHBhZGRpbmcgPSBwcm9wcy5wYWRkaW5nLFxuICAgICAgcGFkZGluZyA9IF9wcm9wcyRwYWRkaW5nID09PSB2b2lkIDAgPyAnZGVmYXVsdCcgOiBfcHJvcHMkcGFkZGluZyxcbiAgICAgIF9wcm9wcyRzaXplID0gcHJvcHMuc2l6ZSxcbiAgICAgIHNpemUgPSBfcHJvcHMkc2l6ZSA9PT0gdm9pZCAwID8gJ21lZGl1bScgOiBfcHJvcHMkc2l6ZSxcbiAgICAgIF9wcm9wcyRzdGlja3lIZWFkZXIgPSBwcm9wcy5zdGlja3lIZWFkZXIsXG4gICAgICBzdGlja3lIZWFkZXIgPSBfcHJvcHMkc3RpY2t5SGVhZGVyID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRzdGlja3lIZWFkZXIsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcInBhZGRpbmdcIiwgXCJzaXplXCIsIFwic3RpY2t5SGVhZGVyXCJdKTtcblxuICB2YXIgdGFibGUgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGFkZGluZzogcGFkZGluZyxcbiAgICAgIHNpemU6IHNpemUsXG4gICAgICBzdGlja3lIZWFkZXI6IHN0aWNreUhlYWRlclxuICAgIH07XG4gIH0sIFtwYWRkaW5nLCBzaXplLCBzdGlja3lIZWFkZXJdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRhYmxlQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB0YWJsZVxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICByb2xlOiBDb21wb25lbnQgPT09IGRlZmF1bHRDb21wb25lbnQgPyBudWxsIDogJ3RhYmxlJyxcbiAgICByZWY6IHJlZixcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIHN0aWNreUhlYWRlciAmJiBjbGFzc2VzLnN0aWNreUhlYWRlcilcbiAgfSwgb3RoZXIpKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRhYmxlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSB0YWJsZSwgbm9ybWFsbHkgYFRhYmxlSGVhZGAgYW5kIGBUYWJsZUJvZHlgLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBBbGxvd3MgVGFibGVDZWxscyB0byBpbmhlcml0IHBhZGRpbmcgb2YgdGhlIFRhYmxlLlxuICAgKi9cbiAgcGFkZGluZzogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdjaGVja2JveCcsICdub25lJ10pLFxuXG4gIC8qKlxuICAgKiBBbGxvd3MgVGFibGVDZWxscyB0byBpbmhlcml0IHNpemUgb2YgdGhlIFRhYmxlLlxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnc21hbGwnLCAnbWVkaXVtJ10pLFxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGhlYWRlciBzdGlja3kuXG4gICAqXG4gICAqIOKaoO+4jyBJdCBkb2Vzbid0IHdvcmsgd2l0aCBJRSAxMS5cbiAgICovXG4gIHN0aWNreUhlYWRlcjogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpVGFibGUnXG59KShUYWJsZSk7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbnZhciBUYWJsZWx2bDJDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCgpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUYWJsZWx2bDJDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1RhYmxlbHZsMkNvbnRleHQnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBUYWJsZWx2bDJDb250ZXh0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBUYWJsZWx2bDJDb250ZXh0IGZyb20gJy4uL1RhYmxlL1RhYmxlbHZsMkNvbnRleHQnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBkaXNwbGF5OiAndGFibGUtcm93LWdyb3VwJ1xuICB9XG59O1xudmFyIHRhYmxlbHZsMiA9IHtcbiAgdmFyaWFudDogJ2JvZHknXG59O1xudmFyIGRlZmF1bHRDb21wb25lbnQgPSAndGJvZHknO1xudmFyIFRhYmxlQm9keSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRhYmxlQm9keShwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyBkZWZhdWx0Q29tcG9uZW50IDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGFibGVsdmwyQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB0YWJsZWx2bDJcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZixcbiAgICByb2xlOiBDb21wb25lbnQgPT09IGRlZmF1bHRDb21wb25lbnQgPyBudWxsIDogJ3Jvd2dyb3VwJ1xuICB9LCBvdGhlcikpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVGFibGVCb2R5LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQsIG5vcm1hbGx5IGBUYWJsZVJvd2AuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVRhYmxlQm9keSdcbn0pKFRhYmxlQm9keSk7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgeyBkYXJrZW4sIGZhZGUsIGxpZ2h0ZW4gfSBmcm9tICcuLi9zdHlsZXMvY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgVGFibGVDb250ZXh0IGZyb20gJy4uL1RhYmxlL1RhYmxlQ29udGV4dCc7XG5pbXBvcnQgVGFibGVsdmwyQ29udGV4dCBmcm9tICcuLi9UYWJsZS9UYWJsZWx2bDJDb250ZXh0JztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiBfZXh0ZW5kcyh7fSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5Miwge1xuICAgICAgZGlzcGxheTogJ3RhYmxlLWNlbGwnLFxuICAgICAgdmVydGljYWxBbGlnbjogJ2luaGVyaXQnLFxuICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgYSByZW5kZXJpbmcgYnVnIHdpdGggc3Bhbm5lZCBjb2x1bW5zIGluIENocm9tZSA2Mi4wLlxuICAgICAgLy8gUmVtb3ZlcyB0aGUgYWxwaGEgKHNldHMgaXQgdG8gMSksIGFuZCBsaWdodGVucyBvciBkYXJrZW5zIHRoZSB0aGVtZSBjb2xvci5cbiAgICAgIGJvcmRlckJvdHRvbTogXCIxcHggc29saWRcXG4gICAgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/IGxpZ2h0ZW4oZmFkZSh0aGVtZS5wYWxldHRlLmRpdmlkZXIsIDEpLCAwLjg4KSA6IGRhcmtlbihmYWRlKHRoZW1lLnBhbGV0dGUuZGl2aWRlciwgMSksIDAuNjgpKSxcbiAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgICAgcGFkZGluZzogMTZcbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoZWFkXCJgIG9yIGBjb250ZXh0LnRhYmxlLmhlYWRgLiAqL1xuICAgIGhlYWQ6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICAgIGxpbmVIZWlnaHQ6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgyNCksXG4gICAgICBmb250V2VpZ2h0OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHRNZWRpdW1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImJvZHlcImAgb3IgYGNvbnRleHQudGFibGUuYm9keWAuICovXG4gICAgYm9keToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJmb290ZXJcImAgb3IgYGNvbnRleHQudGFibGUuZm9vdGVyYC4gKi9cbiAgICBmb290ZXI6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5LFxuICAgICAgbGluZUhlaWdodDogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDIxKSxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTIpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNpemU9XCJzbWFsbFwiYC4gKi9cbiAgICBzaXplU21hbGw6IHtcbiAgICAgIHBhZGRpbmc6ICc2cHggMjRweCA2cHggMTZweCcsXG4gICAgICAnJjpsYXN0LWNoaWxkJzoge1xuICAgICAgICBwYWRkaW5nUmlnaHQ6IDE2XG4gICAgICB9LFxuICAgICAgJyYkcGFkZGluZ0NoZWNrYm94Jzoge1xuICAgICAgICB3aWR0aDogMjQsXG4gICAgICAgIC8vIHByZXZlbnQgdGhlIGNoZWNrYm94IGNvbHVtbiBmcm9tIGdyb3dpbmdcbiAgICAgICAgcGFkZGluZzogJzAgMTJweCAwIDE2cHgnLFxuICAgICAgICAnJjpsYXN0LWNoaWxkJzoge1xuICAgICAgICAgIHBhZGRpbmdMZWZ0OiAxMixcbiAgICAgICAgICBwYWRkaW5nUmlnaHQ6IDE2XG4gICAgICAgIH0sXG4gICAgICAgICcmID4gKic6IHtcbiAgICAgICAgICBwYWRkaW5nOiAwXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcGFkZGluZz1cImNoZWNrYm94XCJgLiAqL1xuICAgIHBhZGRpbmdDaGVja2JveDoge1xuICAgICAgd2lkdGg6IDQ4LFxuICAgICAgLy8gcHJldmVudCB0aGUgY2hlY2tib3ggY29sdW1uIGZyb20gZ3Jvd2luZ1xuICAgICAgcGFkZGluZzogJzAgMCAwIDRweCcsXG4gICAgICAnJjpsYXN0LWNoaWxkJzoge1xuICAgICAgICBwYWRkaW5nTGVmdDogMCxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiA0XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBhZGRpbmc9XCJub25lXCJgLiAqL1xuICAgIHBhZGRpbmdOb25lOiB7XG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgJyY6bGFzdC1jaGlsZCc6IHtcbiAgICAgICAgcGFkZGluZzogMFxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbj1cImxlZnRcImAuICovXG4gICAgYWxpZ25MZWZ0OiB7XG4gICAgICB0ZXh0QWxpZ246ICdsZWZ0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbj1cImNlbnRlclwiYC4gKi9cbiAgICBhbGlnbkNlbnRlcjoge1xuICAgICAgdGV4dEFsaWduOiAnY2VudGVyJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbj1cInJpZ2h0XCJgLiAqL1xuICAgIGFsaWduUmlnaHQ6IHtcbiAgICAgIHRleHRBbGlnbjogJ3JpZ2h0JyxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdyb3ctcmV2ZXJzZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ249XCJqdXN0aWZ5XCJgLiAqL1xuICAgIGFsaWduSnVzdGlmeToge1xuICAgICAgdGV4dEFsaWduOiAnanVzdGlmeSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29udGV4dC50YWJsZS5zdGlja3lIZWFkZXI9e3RydWV9YC4gKi9cbiAgICBzdGlja3lIZWFkZXI6IHtcbiAgICAgIHBvc2l0aW9uOiAnc3RpY2t5JyxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB6SW5kZXg6IDIsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5kZWZhdWx0XG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogVGhlIGNvbXBvbmVudCByZW5kZXJzIGEgYDx0aD5gIGVsZW1lbnQgd2hlbiB0aGUgcGFyZW50IGNvbnRleHQgaXMgYSBoZWFkZXJcbiAqIG9yIG90aGVyd2lzZSBhIGA8dGQ+YCBlbGVtZW50LlxuICovXG5cbnZhciBUYWJsZUNlbGwgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUYWJsZUNlbGwocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGFsaWduID0gcHJvcHMuYWxpZ24sXG4gICAgICBhbGlnbiA9IF9wcm9wcyRhbGlnbiA9PT0gdm9pZCAwID8gJ2luaGVyaXQnIDogX3Byb3BzJGFsaWduLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBwYWRkaW5nUHJvcCA9IHByb3BzLnBhZGRpbmcsXG4gICAgICBzY29wZVByb3AgPSBwcm9wcy5zY29wZSxcbiAgICAgIHNpemVQcm9wID0gcHJvcHMuc2l6ZSxcbiAgICAgIHNvcnREaXJlY3Rpb24gPSBwcm9wcy5zb3J0RGlyZWN0aW9uLFxuICAgICAgdmFyaWFudFByb3AgPSBwcm9wcy52YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFsaWduXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcInBhZGRpbmdcIiwgXCJzY29wZVwiLCBcInNpemVcIiwgXCJzb3J0RGlyZWN0aW9uXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIHRhYmxlID0gUmVhY3QudXNlQ29udGV4dChUYWJsZUNvbnRleHQpO1xuICB2YXIgdGFibGVsdmwyID0gUmVhY3QudXNlQ29udGV4dChUYWJsZWx2bDJDb250ZXh0KTtcbiAgdmFyIGlzSGVhZENlbGwgPSB0YWJsZWx2bDIgJiYgdGFibGVsdmwyLnZhcmlhbnQgPT09ICdoZWFkJztcbiAgdmFyIHJvbGU7XG4gIHZhciBDb21wb25lbnQ7XG5cbiAgaWYgKGNvbXBvbmVudCkge1xuICAgIENvbXBvbmVudCA9IGNvbXBvbmVudDtcbiAgICByb2xlID0gaXNIZWFkQ2VsbCA/ICdjb2x1bW5oZWFkZXInIDogJ2NlbGwnO1xuICB9IGVsc2Uge1xuICAgIENvbXBvbmVudCA9IGlzSGVhZENlbGwgPyAndGgnIDogJ3RkJztcbiAgfVxuXG4gIHZhciBzY29wZSA9IHNjb3BlUHJvcDtcblxuICBpZiAoIXNjb3BlICYmIGlzSGVhZENlbGwpIHtcbiAgICBzY29wZSA9ICdjb2wnO1xuICB9XG5cbiAgdmFyIHBhZGRpbmcgPSBwYWRkaW5nUHJvcCB8fCAodGFibGUgJiYgdGFibGUucGFkZGluZyA/IHRhYmxlLnBhZGRpbmcgOiAnZGVmYXVsdCcpO1xuICB2YXIgc2l6ZSA9IHNpemVQcm9wIHx8ICh0YWJsZSAmJiB0YWJsZS5zaXplID8gdGFibGUuc2l6ZSA6ICdtZWRpdW0nKTtcbiAgdmFyIHZhcmlhbnQgPSB2YXJpYW50UHJvcCB8fCB0YWJsZWx2bDIgJiYgdGFibGVsdmwyLnZhcmlhbnQ7XG4gIHZhciBhcmlhU29ydCA9IG51bGw7XG5cbiAgaWYgKHNvcnREaXJlY3Rpb24pIHtcbiAgICBhcmlhU29ydCA9IHNvcnREaXJlY3Rpb24gPT09ICdhc2MnID8gJ2FzY2VuZGluZycgOiAnZGVzY2VuZGluZyc7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgcmVmOiByZWYsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlc1t2YXJpYW50XSwgY2xhc3NOYW1lLCBhbGlnbiAhPT0gJ2luaGVyaXQnICYmIGNsYXNzZXNbXCJhbGlnblwiLmNvbmNhdChjYXBpdGFsaXplKGFsaWduKSldLCBwYWRkaW5nICE9PSAnZGVmYXVsdCcgJiYgY2xhc3Nlc1tcInBhZGRpbmdcIi5jb25jYXQoY2FwaXRhbGl6ZShwYWRkaW5nKSldLCBzaXplICE9PSAnbWVkaXVtJyAmJiBjbGFzc2VzW1wic2l6ZVwiLmNvbmNhdChjYXBpdGFsaXplKHNpemUpKV0sIHZhcmlhbnQgPT09ICdoZWFkJyAmJiB0YWJsZSAmJiB0YWJsZS5zdGlja3lIZWFkZXIgJiYgY2xhc3Nlcy5zdGlja3lIZWFkZXIpLFxuICAgIFwiYXJpYS1zb3J0XCI6IGFyaWFTb3J0LFxuICAgIHJvbGU6IHJvbGUsXG4gICAgc2NvcGU6IHNjb3BlXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRhYmxlQ2VsbC5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHRleHQtYWxpZ24gb24gdGhlIHRhYmxlIGNlbGwgY29udGVudC5cbiAgICpcbiAgICogTW9uZXRhcnkgb3IgZ2VuZXJhbGx5IG51bWJlciBmaWVsZHMgKipzaG91bGQgYmUgcmlnaHQgYWxpZ25lZCoqIGFzIHRoYXQgYWxsb3dzXG4gICAqIHlvdSB0byBhZGQgdGhlbSB1cCBxdWlja2x5IGluIHlvdXIgaGVhZCB3aXRob3V0IGhhdmluZyB0byB3b3JyeSBhYm91dCBkZWNpbWFscy5cbiAgICovXG4gIGFsaWduOiBQcm9wVHlwZXMub25lT2YoWydjZW50ZXInLCAnaW5oZXJpdCcsICdqdXN0aWZ5JywgJ2xlZnQnLCAncmlnaHQnXSksXG5cbiAgLyoqXG4gICAqIFRoZSB0YWJsZSBjZWxsIGNvbnRlbnRzLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHBhZGRpbmcgYXBwbGllZCB0byB0aGUgY2VsbC5cbiAgICogQnkgZGVmYXVsdCwgdGhlIFRhYmxlIHBhcmVudCBjb21wb25lbnQgc2V0IHRoZSB2YWx1ZSAoYGRlZmF1bHRgKS5cbiAgICovXG4gIHBhZGRpbmc6IFByb3BUeXBlcy5vbmVPZihbJ2NoZWNrYm94JywgJ2RlZmF1bHQnLCAnbm9uZSddKSxcblxuICAvKipcbiAgICogU2V0IHNjb3BlIGF0dHJpYnV0ZS5cbiAgICovXG4gIHNjb3BlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBTcGVjaWZ5IHRoZSBzaXplIG9mIHRoZSBjZWxsLlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgVGFibGUgcGFyZW50IGNvbXBvbmVudCBzZXQgdGhlIHZhbHVlIChgbWVkaXVtYCkuXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2YoWydtZWRpdW0nLCAnc21hbGwnXSksXG5cbiAgLyoqXG4gICAqIFNldCBhcmlhLXNvcnQgZGlyZWN0aW9uLlxuICAgKi9cbiAgc29ydERpcmVjdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnYXNjJywgJ2Rlc2MnLCBmYWxzZV0pLFxuXG4gIC8qKlxuICAgKiBTcGVjaWZ5IHRoZSBjZWxsIHR5cGUuXG4gICAqIEJ5IGRlZmF1bHQsIHRoZSBUYWJsZUhlYWQsIFRhYmxlQm9keSBvciBUYWJsZUZvb3RlciBwYXJlbnQgY29tcG9uZW50IHNldCB0aGUgdmFsdWUuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydib2R5JywgJ2Zvb3RlcicsICdoZWFkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVRhYmxlQ2VsbCdcbn0pKFRhYmxlQ2VsbCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIG92ZXJmbG93WDogJ2F1dG8nXG4gIH1cbn07XG52YXIgVGFibGVDb250YWluZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUYWJsZUNvbnRhaW5lcihwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIHJlZjogcmVmLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVGFibGVDb250YWluZXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIHRhYmxlIGl0c2VsZiwgbm9ybWFsbHkgYDxUYWJsZSAvPmBcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuZWxlbWVudFR5cGVcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpVGFibGVDb250YWluZXInXG59KShUYWJsZUNvbnRhaW5lcik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IFRhYmxlbHZsMkNvbnRleHQgZnJvbSAnLi4vVGFibGUvVGFibGVsdmwyQ29udGV4dCc7XG5pbXBvcnQgeyBmYWRlIH0gZnJvbSAnLi4vc3R5bGVzL2NvbG9yTWFuaXB1bGF0b3InO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGNvbG9yOiAnaW5oZXJpdCcsXG4gICAgICBkaXNwbGF5OiAndGFibGUtcm93JyxcbiAgICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAgICAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgICAgIG91dGxpbmU6IDAsXG4gICAgICAnJiRob3Zlcjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3ZlclxuICAgICAgfSxcbiAgICAgICcmJHNlbGVjdGVkLCAmJHNlbGVjdGVkOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5KVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzZWxlY3RlZD17dHJ1ZX1gLiAqL1xuICAgIHNlbGVjdGVkOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGhvdmVyPXt0cnVlfWAuICovXG4gICAgaG92ZXI6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0YWJsZSB2YXJpYW50PVwiaGVhZFwiLiAqL1xuICAgIGhlYWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0YWJsZSB2YXJpYW50PVwiZm9vdGVyXCIuICovXG4gICAgZm9vdGVyOiB7fVxuICB9O1xufTtcbnZhciBkZWZhdWx0Q29tcG9uZW50ID0gJ3RyJztcbi8qKlxuICogV2lsbCBhdXRvbWF0aWNhbGx5IHNldCBkeW5hbWljIHJvdyBoZWlnaHRcbiAqIGJhc2VkIG9uIHRoZSBtYXRlcmlhbCB0YWJsZSBlbGVtZW50IHBhcmVudCAoaGVhZCwgYm9keSwgZXRjKS5cbiAqL1xuXG52YXIgVGFibGVSb3cgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUYWJsZVJvdyhwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyBkZWZhdWx0Q29tcG9uZW50IDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRob3ZlciA9IHByb3BzLmhvdmVyLFxuICAgICAgaG92ZXIgPSBfcHJvcHMkaG92ZXIgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGhvdmVyLFxuICAgICAgX3Byb3BzJHNlbGVjdGVkID0gcHJvcHMuc2VsZWN0ZWQsXG4gICAgICBzZWxlY3RlZCA9IF9wcm9wcyRzZWxlY3RlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkc2VsZWN0ZWQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImhvdmVyXCIsIFwic2VsZWN0ZWRcIl0pO1xuXG4gIHZhciB0YWJsZWx2bDIgPSBSZWFjdC51c2VDb250ZXh0KFRhYmxlbHZsMkNvbnRleHQpO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgcmVmOiByZWYsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCB0YWJsZWx2bDIgJiYge1xuICAgICAgJ2hlYWQnOiBjbGFzc2VzLmhlYWQsXG4gICAgICAnZm9vdGVyJzogY2xhc3Nlcy5mb290ZXJcbiAgICB9W3RhYmxlbHZsMi52YXJpYW50XSwgaG92ZXIgJiYgY2xhc3Nlcy5ob3Zlciwgc2VsZWN0ZWQgJiYgY2xhc3Nlcy5zZWxlY3RlZCksXG4gICAgcm9sZTogQ29tcG9uZW50ID09PSBkZWZhdWx0Q29tcG9uZW50ID8gbnVsbCA6ICdyb3cnXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRhYmxlUm93LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFNob3VsZCBiZSB2YWxpZCA8dHI+IGNoaWxkcmVuIHN1Y2ggYXMgYFRhYmxlQ2VsbGAuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0YWJsZSByb3cgd2lsbCBzaGFkZSBvbiBob3Zlci5cbiAgICovXG4gIGhvdmVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGFibGUgcm93IHdpbGwgaGF2ZSB0aGUgc2VsZWN0ZWQgc2hhZGluZy5cbiAgICovXG4gIHNlbGVjdGVkOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUYWJsZVJvdydcbn0pKFRhYmxlUm93KTsiLCJpbXBvcnQgUGFwZXIgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvUGFwZXInO1xyXG5pbXBvcnQgVGFibGUgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVGFibGUnO1xyXG5pbXBvcnQgVGFibGVCb2R5IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1RhYmxlQm9keSc7XHJcbmltcG9ydCBUYWJsZUNlbGwgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVGFibGVDZWxsJztcclxuaW1wb3J0IFRhYmxlQ29udGFpbmVyIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1RhYmxlQ29udGFpbmVyJztcclxuaW1wb3J0IFRhYmxlUm93IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1RhYmxlUm93JztcclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuLyoqIOWfuuacrOOBruODhuODvOODluODq+OCkueUn+aIkOOBmeOCiyAqL1xyXG5leHBvcnQgdmFyIEJhc2VUYWJsZSA9IGZ1bmN0aW9uIChwcm9wcykge1xyXG4gICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFRhYmxlQ29udGFpbmVyLCB7IGNvbXBvbmVudDogUGFwZXIgfSxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFRhYmxlLCBudWxsLFxyXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFRhYmxlQm9keSwgbnVsbCwgcHJvcHMudGFibGVEYXRhLm1hcChmdW5jdGlvbiAocm93LCBpbmRleCkgeyByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFibGVSb3csIHsga2V5OiBpbmRleCB9LCByb3cubWFwKGZ1bmN0aW9uIChjZWxsKSB7IHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChUYWJsZUNlbGwsIHsgY29sb3I6ICdwcmltYXJ5JywgYWxpZ246ICdjZW50ZXInLCBjb21wb25lbnQ6ICd0aCcsIHNjb3BlOiAncm93JyB9LCBjZWxsKSk7IH0pKSk7IH0pKSkpKTtcclxufTtcclxuLyoqIOODhuODvOODluODq+OCkueUn+aIkOOBmeOCiyAqL1xyXG5leHBvcnQgdmFyIFR3b0NvbHVtbldpdGhUaXRsZSA9IGZ1bmN0aW9uIChfYSkge1xyXG4gICAgdmFyIGRhdGEgPSBfYS5kYXRhO1xyXG4gICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFRhYmxlQ29udGFpbmVyLCB7IGNvbXBvbmVudDogUGFwZXIgfSxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFRhYmxlLCBudWxsLFxyXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFRhYmxlQm9keSwgbnVsbCwgZGF0YS5tYXAoZnVuY3Rpb24gKHJvdykgeyByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFibGVSb3csIHsga2V5OiByb3cubmFtZSB9LFxyXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUYWJsZUNlbGwsIHsgY29sb3I6ICdwcmltYXJ5JywgYWxpZ246ICdjZW50ZXInLCBjb21wb25lbnQ6ICd0aCcsIHNjb3BlOiAncm93JyB9LCByb3cubmFtZSksXHJcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFRhYmxlQ2VsbCwgeyBhbGlnbjogJ2xlZnQnLCBjb21wb25lbnQ6ICd0aCcsIHNjb3BlOiAncm93JyB9LCByb3cudmFsdWUpKSk7IH0pKSkpKTtcclxufTtcclxuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG52YXIgU0laRSA9IDQ0O1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJzdGF0aWNcImAuICovXG4gICAgc3RhdGljOiB7XG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJpbmRldGVybWluYXRlXCJgLiAqL1xuICAgIGluZGV0ZXJtaW5hdGU6IHtcbiAgICAgIGFuaW1hdGlvbjogJyRjaXJjdWxhci1yb3RhdGUgMS40cyBsaW5lYXIgaW5maW5pdGUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJkZXRlcm1pbmF0ZVwiYC4gKi9cbiAgICBkZXRlcm1pbmF0ZToge1xuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgY29sb3JQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgc3ZnYCBlbGVtZW50LiAqL1xuICAgIHN2Zzoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyAvLyBLZWVwcyB0aGUgcHJvZ3Jlc3MgY2VudGVyZWRcblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGNpcmNsZWAgc3ZnIHBhdGguICovXG4gICAgY2lyY2xlOiB7XG4gICAgICBzdHJva2U6ICdjdXJyZW50Q29sb3InIC8vIFVzZSBidXR0IHRvIGZvbGxvdyB0aGUgc3BlY2lmaWNhdGlvbiwgYnkgY2hhbmNlLCBpdCdzIGFscmVhZHkgdGhlIGRlZmF1bHQgQ1NTIHZhbHVlLlxuICAgICAgLy8gc3Ryb2tlTGluZWNhcDogJ2J1dHQnLFxuXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgY2lyY2xlYCBzdmcgcGF0aCBpZiBgdmFyaWFudD1cInN0YXRpY1wiYC4gKi9cbiAgICBjaXJjbGVTdGF0aWM6IHtcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnc3Ryb2tlLWRhc2hvZmZzZXQnKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGNpcmNsZWAgc3ZnIHBhdGggaWYgYHZhcmlhbnQ9XCJpbmRldGVybWluYXRlXCJgLiAqL1xuICAgIGNpcmNsZUluZGV0ZXJtaW5hdGU6IHtcbiAgICAgIGFuaW1hdGlvbjogJyRjaXJjdWxhci1kYXNoIDEuNHMgZWFzZS1pbi1vdXQgaW5maW5pdGUnLFxuICAgICAgLy8gU29tZSBkZWZhdWx0IHZhbHVlIHRoYXQgbG9va3MgZmluZSB3YWl0aW5nIGZvciB0aGUgYW5pbWF0aW9uIHRvIGtpY2tzIGluLlxuICAgICAgc3Ryb2tlRGFzaGFycmF5OiAnODBweCwgMjAwcHgnLFxuICAgICAgc3Ryb2tlRGFzaG9mZnNldDogJzBweCcgLy8gQWRkIHRoZSB1bml0IHRvIGZpeCBhIEVkZ2UgMTYgYW5kIGJlbG93IGJ1Zy5cblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGNpcmNsZWAgc3ZnIHBhdGggaWYgYHZhcmlhbnQ9XCJkZXRlcm1pbmF0ZVwiYC4gKi9cbiAgICBjaXJjbGVEZXRlcm1pbmF0ZToge1xuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdzdHJva2UtZGFzaG9mZnNldCcpXG4gICAgfSxcbiAgICAnQGtleWZyYW1lcyBjaXJjdWxhci1yb3RhdGUnOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIC8vIEZpeCBJRSAxMSB3b2JibHlcbiAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnNTAlIDUwJSdcbiAgICAgIH0sXG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlKDM2MGRlZyknXG4gICAgICB9XG4gICAgfSxcbiAgICAnQGtleWZyYW1lcyBjaXJjdWxhci1kYXNoJzoge1xuICAgICAgJzAlJzoge1xuICAgICAgICBzdHJva2VEYXNoYXJyYXk6ICcxcHgsIDIwMHB4JyxcbiAgICAgICAgc3Ryb2tlRGFzaG9mZnNldDogJzBweCdcbiAgICAgIH0sXG4gICAgICAnNTAlJzoge1xuICAgICAgICBzdHJva2VEYXNoYXJyYXk6ICcxMDBweCwgMjAwcHgnLFxuICAgICAgICBzdHJva2VEYXNob2Zmc2V0OiAnLTE1cHgnXG4gICAgICB9LFxuICAgICAgJzEwMCUnOiB7XG4gICAgICAgIHN0cm9rZURhc2hhcnJheTogJzEwMHB4LCAyMDBweCcsXG4gICAgICAgIHN0cm9rZURhc2hvZmZzZXQ6ICctMTI1cHgnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgY2lyY2xlYCBzdmcgcGF0aCBpZiBgZGlzYWJsZVNocmluaz17dHJ1ZX1gLiAqL1xuICAgIGNpcmNsZURpc2FibGVTaHJpbms6IHtcbiAgICAgIGFuaW1hdGlvbjogJ25vbmUnXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogIyMgQVJJQVxuICpcbiAqIElmIHRoZSBwcm9ncmVzcyBiYXIgaXMgZGVzY3JpYmluZyB0aGUgbG9hZGluZyBwcm9ncmVzcyBvZiBhIHBhcnRpY3VsYXIgcmVnaW9uIG9mIGEgcGFnZSxcbiAqIHlvdSBzaG91bGQgdXNlIGBhcmlhLWRlc2NyaWJlZGJ5YCB0byBwb2ludCB0byB0aGUgcHJvZ3Jlc3MgYmFyLCBhbmQgc2V0IHRoZSBgYXJpYS1idXN5YFxuICogYXR0cmlidXRlIHRvIGB0cnVlYCBvbiB0aGF0IHJlZ2lvbiB1bnRpbCBpdCBoYXMgZmluaXNoZWQgbG9hZGluZy5cbiAqL1xuXG52YXIgQ2lyY3VsYXJQcm9ncmVzcyA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIENpcmN1bGFyUHJvZ3Jlc3MocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAncHJpbWFyeScgOiBfcHJvcHMkY29sb3IsXG4gICAgICBfcHJvcHMkZGlzYWJsZVNocmluayA9IHByb3BzLmRpc2FibGVTaHJpbmssXG4gICAgICBkaXNhYmxlU2hyaW5rID0gX3Byb3BzJGRpc2FibGVTaHJpbmsgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVTaHJpbmssXG4gICAgICBfcHJvcHMkc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgICBzaXplID0gX3Byb3BzJHNpemUgPT09IHZvaWQgMCA/IDQwIDogX3Byb3BzJHNpemUsXG4gICAgICBzdHlsZSA9IHByb3BzLnN0eWxlLFxuICAgICAgX3Byb3BzJHRoaWNrbmVzcyA9IHByb3BzLnRoaWNrbmVzcyxcbiAgICAgIHRoaWNrbmVzcyA9IF9wcm9wcyR0aGlja25lc3MgPT09IHZvaWQgMCA/IDMuNiA6IF9wcm9wcyR0aGlja25lc3MsXG4gICAgICBfcHJvcHMkdmFsdWUgPSBwcm9wcy52YWx1ZSxcbiAgICAgIHZhbHVlID0gX3Byb3BzJHZhbHVlID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJHZhbHVlLFxuICAgICAgX3Byb3BzJHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgdmFyaWFudCA9IF9wcm9wcyR2YXJpYW50ID09PSB2b2lkIDAgPyAnaW5kZXRlcm1pbmF0ZScgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJkaXNhYmxlU2hyaW5rXCIsIFwic2l6ZVwiLCBcInN0eWxlXCIsIFwidGhpY2tuZXNzXCIsIFwidmFsdWVcIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgY2lyY2xlU3R5bGUgPSB7fTtcbiAgdmFyIHJvb3RTdHlsZSA9IHt9O1xuICB2YXIgcm9vdFByb3BzID0ge307XG5cbiAgaWYgKHZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZScgfHwgdmFyaWFudCA9PT0gJ3N0YXRpYycpIHtcbiAgICB2YXIgY2lyY3VtZmVyZW5jZSA9IDIgKiBNYXRoLlBJICogKChTSVpFIC0gdGhpY2tuZXNzKSAvIDIpO1xuICAgIGNpcmNsZVN0eWxlLnN0cm9rZURhc2hhcnJheSA9IGNpcmN1bWZlcmVuY2UudG9GaXhlZCgzKTtcbiAgICByb290UHJvcHNbJ2FyaWEtdmFsdWVub3cnXSA9IE1hdGgucm91bmQodmFsdWUpO1xuICAgIGNpcmNsZVN0eWxlLnN0cm9rZURhc2hvZmZzZXQgPSBcIlwiLmNvbmNhdCgoKDEwMCAtIHZhbHVlKSAvIDEwMCAqIGNpcmN1bWZlcmVuY2UpLnRvRml4ZWQoMyksIFwicHhcIik7XG4gICAgcm9vdFN0eWxlLnRyYW5zZm9ybSA9ICdyb3RhdGUoLTkwZGVnKSc7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgY29sb3IgIT09ICdpbmhlcml0JyAmJiBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoY2FwaXRhbGl6ZShjb2xvcikpXSwge1xuICAgICAgJ2RldGVybWluYXRlJzogY2xhc3Nlcy5kZXRlcm1pbmF0ZSxcbiAgICAgICdpbmRldGVybWluYXRlJzogY2xhc3Nlcy5pbmRldGVybWluYXRlLFxuICAgICAgJ3N0YXRpYyc6IGNsYXNzZXMuc3RhdGljXG4gICAgfVt2YXJpYW50XSksXG4gICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgIHdpZHRoOiBzaXplLFxuICAgICAgaGVpZ2h0OiBzaXplXG4gICAgfSwgcm9vdFN0eWxlLCBzdHlsZSksXG4gICAgcmVmOiByZWYsXG4gICAgcm9sZTogXCJwcm9ncmVzc2JhclwiXG4gIH0sIHJvb3RQcm9wcywgb3RoZXIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInN2Z1wiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnN2ZyxcbiAgICB2aWV3Qm94OiBcIlwiLmNvbmNhdChTSVpFIC8gMiwgXCIgXCIpLmNvbmNhdChTSVpFIC8gMiwgXCIgXCIpLmNvbmNhdChTSVpFLCBcIiBcIikuY29uY2F0KFNJWkUpXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5jaXJjbGUsIGRpc2FibGVTaHJpbmsgJiYgY2xhc3Nlcy5jaXJjbGVEaXNhYmxlU2hyaW5rLCB7XG4gICAgICAnZGV0ZXJtaW5hdGUnOiBjbGFzc2VzLmNpcmNsZURldGVybWluYXRlLFxuICAgICAgJ2luZGV0ZXJtaW5hdGUnOiBjbGFzc2VzLmNpcmNsZUluZGV0ZXJtaW5hdGUsXG4gICAgICAnc3RhdGljJzogY2xhc3Nlcy5jaXJjbGVTdGF0aWNcbiAgICB9W3ZhcmlhbnRdKSxcbiAgICBzdHlsZTogY2lyY2xlU3R5bGUsXG4gICAgY3g6IFNJWkUsXG4gICAgY3k6IFNJWkUsXG4gICAgcjogKFNJWkUgLSB0aGlja25lc3MpIC8gMixcbiAgICBmaWxsOiBcIm5vbmVcIixcbiAgICBzdHJva2VXaWR0aDogdGhpY2tuZXNzXG4gIH0pKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENpcmN1bGFyUHJvZ3Jlc3MucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzaHJpbmsgYW5pbWF0aW9uIGlzIGRpc2FibGVkLlxuICAgKiBUaGlzIG9ubHkgd29ya3MgaWYgdmFyaWFudCBpcyBgaW5kZXRlcm1pbmF0ZWAuXG4gICAqL1xuICBkaXNhYmxlU2hyaW5rOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMuYm9vbCwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgaWYgKHByb3BzLmRpc2FibGVTaHJpbmsgJiYgcHJvcHMudmFyaWFudCAmJiBwcm9wcy52YXJpYW50ICE9PSAnaW5kZXRlcm1pbmF0ZScpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hdGVyaWFsLVVJOiBZb3UgaGF2ZSBwcm92aWRlZCB0aGUgYGRpc2FibGVTaHJpbmtgIHByb3AgJyArICd3aXRoIGEgdmFyaWFudCBvdGhlciB0aGFuIGBpbmRldGVybWluYXRlYC4gVGhpcyB3aWxsIGhhdmUgbm8gZWZmZWN0LicpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KSxcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGNpcmNsZS5cbiAgICogSWYgdXNpbmcgYSBudW1iZXIsIHRoZSBwaXhlbCB1bml0IGlzIGFzc3VtZWQuXG4gICAqIElmIHVzaW5nIGEgc3RyaW5nLCB5b3UgbmVlZCB0byBwcm92aWRlIHRoZSBDU1MgdW5pdCwgZS5nICczcmVtJy5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSB0aGlja25lc3Mgb2YgdGhlIGNpcmNsZS5cbiAgICovXG4gIHRoaWNrbmVzczogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBwcm9ncmVzcyBpbmRpY2F0b3IgZm9yIHRoZSBkZXRlcm1pbmF0ZSB2YXJpYW50LlxuICAgKiBWYWx1ZSBiZXR3ZWVuIDAgYW5kIDEwMC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIFVzZSBpbmRldGVybWluYXRlIHdoZW4gdGhlcmUgaXMgbm8gcHJvZ3Jlc3MgdmFsdWUuXG4gICAqL1xuICB2YXJpYW50OiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMub25lT2YoWydkZXRlcm1pbmF0ZScsICdpbmRldGVybWluYXRlJywgJ3N0YXRpYyddKSwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIHZhcmlhbnQgPSBwcm9wcy52YXJpYW50O1xuXG4gICAgaWYgKHZhcmlhbnQgPT09ICdzdGF0aWMnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01hdGVyaWFsLVVJOiBgdmFyaWFudD1cInN0YXRpY1wiYCB3YXMgZGVwcmVjYXRlZC4gVXNlIGB2YXJpYW50PVwiZGV0ZXJtaW5hdGVcImAgaW5zdGVhZC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQ2lyY3VsYXJQcm9ncmVzcycsXG4gIGZsaXA6IGZhbHNlXG59KShDaXJjdWxhclByb2dyZXNzKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgQ2lyY3VsYXJQcm9ncmVzcyBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9DaXJjdWxhclByb2dyZXNzJztcclxuaW1wb3J0IHsgR2xvYmFsU3R5bGVzIH0gZnJvbSAnLi4vU3R5bGVzL2dsb2JhbENsc3gnO1xyXG4vKiogTG9hZOS4reOAgWluZGV4OTk5OeOBq+ihqOekuuOBl+OAgeODpuODvOOCtuODvOOBruaTjeS9nOOCkuatouOCgeOCiyAqL1xyXG5leHBvcnQgZnVuY3Rpb24gTG9hZGluZ0NpcmNsZShwcm9wcykge1xyXG4gICAgdmFyIGNsc3ggPSBHbG9iYWxTdHlsZXMoKTtcclxuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBudWxsLCBwcm9wcy5sb2FkRmxhZyA/IChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBjbHN4LnBvc2l0aW9uRml4ZWRDZW50ZXJpbmcsIHN0eWxlOiB7XHJcbiAgICAgICAgICAgIHpJbmRleDogOTk5NSxcclxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpJyxcclxuICAgICAgICAgICAgd2lkdGg6ICcxMDB2dycsXHJcbiAgICAgICAgICAgIGhlaWdodDogJzEwMHZoJyxcclxuICAgICAgICB9IH0sXHJcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogY2xzeC5wb3NpdGlvbkZpeGVkQ2VudGVyaW5nIH0sXHJcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2lyY3VsYXJQcm9ncmVzcywgeyBjb2xvcjogJ3ByaW1hcnknLCBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgIHpJbmRleDogOTk5OSxcclxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxyXG4gICAgICAgICAgICAgICAgfSB9KSkpKSA6IChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwpKSkpO1xyXG59XHJcbiIsInZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcclxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufTtcclxuaW1wb3J0IENvbnRhaW5lciBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9Db250YWluZXInO1xyXG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UeXBvZ3JhcGh5JztcclxuaW1wb3J0IEJ1dHRvbiBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9CdXR0b24nO1xyXG5pbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgVHdvQ29sdW1uV2l0aFRpdGxlIH0gZnJvbSAnLi4vLi4vQ29tcG9uZW50cy9UYWJsZSc7XHJcbmltcG9ydCB7IFBhZ2VSb290IH0gZnJvbSAnLi4vLi4vT3JnYW5pc21zL1BhZ2VSb290JztcclxuaW1wb3J0IHsgR2xvYmFsU3R5bGVzIH0gZnJvbSAnLi4vLi4vU3R5bGVzL2dsb2JhbENsc3gnO1xyXG5pbXBvcnQgeyB1c2VIaXN0b3J5IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7IFJvdXRlclBhdGggfSBmcm9tICcuLi8uLi9EYXRhU3RydWN0dXJlL1JvdXRlclBhdGgnO1xyXG5pbXBvcnQgeyBMb2FkaW5nQ2lyY2xlIH0gZnJvbSAnLi4vLi4vT3JnYW5pc21zL0xvYWRDaXJjbGUnO1xyXG5pbXBvcnQgeyBNb2xkaW5nIH0gZnJvbSAndHMtdXRpbGl0aWVzJztcclxuZXhwb3J0IGZ1bmN0aW9uIE15UGFnZSgpIHtcclxuICAgIHZhciBnQ2xhc3NlcyA9IEdsb2JhbFN0eWxlcygpO1xyXG4gICAgdmFyIGhpc3RvcnkgPSB1c2VIaXN0b3J5KCk7XHJcbiAgICB2YXIgX2EgPSB1c2VTdGF0ZSh1bmRlZmluZWQpLCBzbmFwc2hvdCA9IF9hWzBdLCBzZXRTbmFwc2hvdCA9IF9hWzFdO1xyXG4gICAgdmFyIF9iID0gUmVhY3QudXNlU3RhdGUodHJ1ZSksIGxvYWQgPSBfYlswXSwgc2V0TG9hZCA9IF9iWzFdO1xyXG4gICAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgbW91bnRlZCA9IHRydWU7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbW91bnRlZCA9IGZhbHNlO1xyXG4gICAgICAgIH07XHJcbiAgICB9LCBbXSk7XHJcbiAgICAvLyDjg63jg7zjg4nkuK1cclxuICAgIGlmIChzbmFwc2hvdCA9PT0gdW5kZWZpbmVkIHx8IHNuYXBzaG90ID09PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFBhZ2VSb290LCBudWxsLFxyXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KExvYWRpbmdDaXJjbGUsIHsgbG9hZEZsYWc6IGxvYWQgfSkpKTtcclxuICAgIH1cclxuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChQYWdlUm9vdCwgbnVsbCxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFR5cG9ncmFwaHksIHsgYWxpZ246ICdjZW50ZXInLCBjbGFzc05hbWU6IGdDbGFzc2VzLnRleHRDYXB0aW9uLCBzdHlsZTogeyBtYXJnaW46ICcxZW0nIH0gfSwgXCJcXHUzMERFXFx1MzBBNFxcdTMwREFcXHUzMEZDXFx1MzBCOFwiKSxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRhaW5lciwgeyBtYXhXaWR0aDogJ21kJyB9LFxyXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFR3b0NvbHVtbldpdGhUaXRsZSwgX19hc3NpZ24oe30sIHtcclxuICAgICAgICAgICAgICAgIGRhdGE6IFtcclxuICAgICAgICAgICAgICAgICAgICB7IG5hbWU6ICfmsI/lkI0nLCB2YWx1ZTogc25hcHNob3QubGFzdE5hbWUgKyBcIiBcIiArIHNuYXBzaG90LmZpcnN0TmFtZSB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsgbmFtZTogJ+ODoeODvOODqycsIHZhbHVlOiBzbmFwc2hvdC5lbWFpbCB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsgbmFtZTogJ+mbu+ipseeVquWPtycsIHZhbHVlOiBzbmFwc2hvdC5waG9uZSB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsgbmFtZTogJ+e1hOe5lOWQjeensCcsIHZhbHVlOiBzbmFwc2hvdC5vcmdhbml6ZU5hbWUgfSxcclxuICAgICAgICAgICAgICAgICAgICB7IG5hbWU6ICfos4fmnKzph5HpoY0nLCB2YWx1ZTogTW9sZGluZy50bzNEaWdpdE51bShOdW1iZXIoc25hcHNob3QuY2FwaXRhbCkpICsgJyDlhoYnIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiAn5Ym15qWt5bm05bqmJywgdmFsdWU6IE1vbGRpbmcudG8zRGlnaXROdW0oTnVtYmVyKHNuYXBzaG90LmVzdGFibGlzaGVkWWVhcikpICsgJyDlubQnIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiAn5b6T5qWt5ZOh5pWwJywgdmFsdWU6IE1vbGRpbmcudG8zRGlnaXROdW0oTnVtYmVyKHNuYXBzaG90LmVtcGxveWVlc0NvdW50KSkgKyAnIOS6uicgfSxcclxuICAgICAgICAgICAgICAgICAgICB7IG5hbWU6ICfpg73pgZPlupznnIwnLCB2YWx1ZTogc25hcHNob3QucHJlZmVjdHVyZXMgfSxcclxuICAgICAgICAgICAgICAgICAgICB7IG5hbWU6ICfmpa3nqK4nLCB2YWx1ZTogc25hcHNob3QuaW5kdXN0cnkgfSxcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIH0pKSxcclxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHN0eWxlOiB7IHdpZHRoOiAnMTAwJScgfSwgY2xhc3NOYW1lOiBnQ2xhc3Nlcy5wb3NpdGlvbkxlZnRpbmcgfSxcclxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uLCB7IHNpemU6ICdzbWFsbCcsIHN0eWxlOiB7IG1hcmdpbjogJzFlbScgfSwgY2xhc3NOYW1lOiBnQ2xhc3Nlcy5idXR0b25QcmltYXJ5LCBvbkNsaWNrOiBmdW5jdGlvbiAoXykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoaXN0b3J5LnB1c2goUm91dGVyUGF0aC5NRU1CRVJfUkVHSVNUKTtcclxuICAgICAgICAgICAgICAgICAgICB9IH0sIFwiXFx1N0RFOFxcdTk2QzZcIiksXHJcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEJ1dHRvbiwgeyBzaXplOiAnc21hbGwnLCBzdHlsZTogeyBtYXJnaW46ICcxZW0nIH0sIGNsYXNzTmFtZTogZ0NsYXNzZXMuYnV0dG9uU2Vjb25kYXJ5LCBvbkNsaWNrOiBmdW5jdGlvbiAoXykgeyByZXR1cm4gaGlzdG9yeS5wdXNoKFJvdXRlclBhdGguUkVNT1ZFX0FDQ09VTlQpOyB9IH0sIFwiXFx1OTAwMFxcdTRGMUFcIikpKSkpO1xyXG59XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1R5cG9ncmFwaHknO1xyXG5pbXBvcnQgeyBQYWdlUm9vdCB9IGZyb20gJy4uLy4uLy4uL09yZ2FuaXNtcy9QYWdlUm9vdCc7XHJcbmltcG9ydCB7IEdsb2JhbFN0eWxlcyB9IGZyb20gJy4uLy4uLy4uL1N0eWxlcy9nbG9iYWxDbHN4JztcclxuaW1wb3J0IEJ1dHRvbiBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9CdXR0b24nO1xyXG5pbXBvcnQgeyB1c2VIaXN0b3J5IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7IFJvdXRlclBhdGggfSBmcm9tICcuLi8uLi8uLi9EYXRhU3RydWN0dXJlL1JvdXRlclBhdGgnO1xyXG5pbXBvcnQgR3JpZCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9HcmlkJztcclxuZXhwb3J0IGZ1bmN0aW9uIFJlbW92ZVBhZ2UoKSB7XHJcbiAgICB2YXIgY2xzeCA9IEdsb2JhbFN0eWxlcygpO1xyXG4gICAgdmFyIGhpc3RvcnkgPSB1c2VIaXN0b3J5KCk7XHJcbiAgICB2YXIgZXJyb3JIdW5kbGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgYWxlcnQoJ0Vycm9y44GM55m655Sf44GX44G+44GX44Gf44CC6YCA5Lya5Yem55CG44GM5q2j5bi444Gr5Yem55CG44GX44G+44Gb44KT44Gn44GX44Gf44CC5pmC6ZaT44KS56m644GR44Gm5YaN5a6f6KGM6aCC44GP44GL44CB44GK5omL5pWw44Gn44GZ44GM44GK5ZWP5ZCI44Gb5LiL44GV44GEJyk7XHJcbiAgICAgICAgaGlzdG9yeS5wdXNoKFJvdXRlclBhdGguUk9PVCk7XHJcbiAgICB9O1xyXG4gICAgdmFyIHllc0h1bmRsZSA9IGZ1bmN0aW9uICgpIHsgfTtcclxuICAgIHZhciBub0h1bmRsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBoaXN0b3J5LmdvQmFjaygpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChQYWdlUm9vdCwgbnVsbCxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFR5cG9ncmFwaHksIHsgY29tcG9uZW50OiAnaDInLCBhbGlnbjogJ2NlbnRlcicsIGNsYXNzTmFtZTogY2xzeC50ZXh0U3ViVGl0bGUsIHN0eWxlOiB7IHdpZHRoOiAnMTAwJScsIGZvbnRXZWlnaHQ6ICdib2xkJywgbWFyZ2luVG9wOiAnMmVtJyB9IH0sIFwiXFx1OTAwMFxcdTRGMUFcXHU1MUU2XFx1NzQwNlwiKSxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFR5cG9ncmFwaHksIHsgYWxpZ246ICdjZW50ZXInLCBjbGFzc05hbWU6IGNsc3gudGV4dFBhcmFncmFwaCB9LFxyXG4gICAgICAgICAgICBcIlxcdTRFMDBcXHU1RUE2XFx1OTAwMFxcdTRGMUFcXHUzMDU5XFx1MzA4QlxcdTMwNjhcXHUzMEEyXFx1MzBBQlxcdTMwQTZcXHUzMEYzXFx1MzBDOFxcdTMwOTJcXHU1RkE5XFx1NkQzQlxcdTMwNTVcXHUzMDVCXFx1MzA4QlxcdTRFOEJcXHUzMDZGXFx1NTFGQVxcdTY3NjVcXHUzMDdFXFx1MzA1QlxcdTMwOTNcIixcclxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImJyXCIsIG51bGwpLFxyXG4gICAgICAgICAgICBcIlxcdTkwMDBcXHU0RjFBXFx1MzA1N1xcdTMwN0VcXHUzMDU5XFx1MzA0QlxcdUZGMUZcIiksXHJcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogY2xzeC5wb3NpdGlvbkNlbnRlcmluZywgc3R5bGU6IHsgbWFyZ2luVG9wOiAnMmVtJywgbWFyZ2luQm90dG9tOiAnM2VtJyB9IH0sXHJcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR3JpZCwgeyBjb250YWluZXI6IHRydWUsIGRpcmVjdGlvbjogJ3JvdycsIGp1c3RpZnk6ICdjZW50ZXInLCBhbGlnbkl0ZW1zOiAnY2VudGVyJywgc3BhY2luZzogMywgc3R5bGU6IHsgd2lkdGg6ICc2MHZ3JyB9IH0sXHJcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEdyaWQsIHsgaXRlbTogdHJ1ZSwgeHM6IDYgfSxcclxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEJ1dHRvbiwgeyBjbGFzc05hbWU6IGNsc3guYnV0dG9uUHJpbWFyeSwgb25DbGljazogeWVzSHVuZGxlLCBmdWxsV2lkdGg6IHRydWUgfSwgXCJcXHUzMDZGXFx1MzA0NFwiKSksXHJcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEdyaWQsIHsgaXRlbTogdHJ1ZSwgeHM6IDYgfSxcclxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEJ1dHRvbiwgeyBjbGFzc05hbWU6IGNsc3guYnV0dG9uU2Vjb25kYXJ5LCBvbkNsaWNrOiBub0h1bmRsZSwgZnVsbFdpZHRoOiB0cnVlIH0sIFwiXFx1MzA0NFxcdTMwNDRcXHUzMDQ4XCIpKSkpKSk7XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0LCB7IEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdyZWFjdC1kb20nO1xyXG5pbXBvcnQgeyBTd2l0Y2gsIFJvdXRlLCBCcm93c2VyUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCBDc3NCYXNlbGluZSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9Dc3NCYXNlbGluZSc7XHJcbmltcG9ydCBUaGVtZVByb3ZpZGVyIGZyb20gJ0BtYXRlcmlhbC11aS9zdHlsZXMvVGhlbWVQcm92aWRlcic7XHJcbmltcG9ydCB7IHRoZW1lIH0gZnJvbSAnLi9TdHlsZXMvdGhlbWUnO1xyXG5pbXBvcnQgeyBQcm9kdWN0UGFnZSB9IGZyb20gJy4vUGFnZXMvUHJvZHVjdFBhZ2UnO1xyXG5pbXBvcnQgeyBHbG9iYWxTdHlsZXMgfSBmcm9tICcuL1N0eWxlcy9nbG9iYWxDbHN4JztcclxuaW1wb3J0IHsgU2lnbkluU2NyZWVuIH0gZnJvbSAnLi9QYWdlcy9BdXRoUGFnZS9TaWduSW5TY3JlZW4nO1xyXG5pbXBvcnQgeyBQcml2YWN5UG9saWN5UGFnZSB9IGZyb20gJy4vUGFnZXMvQXV0aFBhZ2UvUHJpdmFjeS9Qcml2YWN5UG9saWN5UGFnZSc7XHJcbmltcG9ydCB7IFRlcm1zUGFnZSB9IGZyb20gJy4vUGFnZXMvQXV0aFBhZ2UvVGVybXMvVGVybXNQYWdlJztcclxuaW1wb3J0IHsgUm91dGVyUGF0aCB9IGZyb20gJy4vRGF0YVN0cnVjdHVyZS9Sb3V0ZXJQYXRoJztcclxuaW1wb3J0IHsgU2lnblVwU2NyZWVuIH0gZnJvbSAnLi9QYWdlcy9BdXRoUGFnZS9TaWduVXBTY3JlZW4nO1xyXG5pbXBvcnQgeyBNeVBhZ2UgfSBmcm9tICcuL1BhZ2VzL015UGFnZSc7XHJcbmltcG9ydCB7IFJlbW92ZVBhZ2UgfSBmcm9tICcuL1BhZ2VzL0F1dGhQYWdlL1JlbW92ZS9SZW1vdmVQYWdlJztcclxuZXhwb3J0IGZ1bmN0aW9uIEFwcCgpIHtcclxuICAgIHZhciBjbHN4ID0gR2xvYmFsU3R5bGVzKCk7XHJcbiAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsXHJcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChDc3NCYXNlbGluZSwgbnVsbCksXHJcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogY2xzeC5yb290Q29udGFpbmVyIH0sXHJcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGhlbWVQcm92aWRlciwgeyB0aGVtZTogdGhlbWUgfSxcclxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnJvd3NlclJvdXRlciwgbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFN3aXRjaCwgbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZSwgeyBleGFjdDogdHJ1ZSwgcGF0aDogUm91dGVyUGF0aC5ST09ULCBjb21wb25lbnQ6IFByb2R1Y3RQYWdlIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7IHBhdGg6IFJvdXRlclBhdGguU0lHTklOLCBjb21wb25lbnQ6IFNpZ25JblNjcmVlbiB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZSwgeyBwYXRoOiBSb3V0ZXJQYXRoLlNJR05VUCwgY29tcG9uZW50OiBTaWduVXBTY3JlZW4gfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGUsIHsgcGF0aDogUm91dGVyUGF0aC5QUklWQUNZX1BPTElDWSwgY29tcG9uZW50OiBQcml2YWN5UG9saWN5UGFnZSB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZSwgeyBwYXRoOiBSb3V0ZXJQYXRoLlRFUk1TX1BPTElDWSwgY29tcG9uZW50OiBUZXJtc1BhZ2UgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGUsIHsgcGF0aDogUm91dGVyUGF0aC5NWVBBR0UsIGNvbXBvbmVudDogTXlQYWdlIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7IHBhdGg6IFJvdXRlclBhdGguUkVNT1ZFX0FDQ09VTlQsIGNvbXBvbmVudDogUmVtb3ZlUGFnZSB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZSwgeyBjb21wb25lbnQ6IFByb2R1Y3RQYWdlIH0pKSkpKSkpO1xyXG59XHJcbnJlbmRlcihSZWFjdC5jcmVhdGVFbGVtZW50KEFwcCwgbnVsbCksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290JykpO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9